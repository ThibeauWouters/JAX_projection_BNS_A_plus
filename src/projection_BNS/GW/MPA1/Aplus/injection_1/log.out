Tue Apr  1 15:41:21 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
15:41 ninjax INFO    : Checking and setting outdir
15:41 ninjax INFO    : Found generation prior file ./Aplus/injection_1/generation_prior.prior
15:41 ninjax INFO    : The outdir is set to ./Aplus/injection_1
15:41 ninjax INFO    : Loading the given config
15:41 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
15:41 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
15:41 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/MPA1/Aplus/injection_1/complete_config.json
15:41 ninjax INFO    : No seed specified. Generating a random seed: 461868
15:41 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 444653
15:41 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 561982
15:41 ninjax INFO    : Loading the priors
15:41 ninjax INFO    : Setting up the prior
15:41 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
15:41 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
15:41 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
15:41 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
15:41 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
15:41 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
15:41 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
15:41 ninjax INFO    :    dL_prior = PowerLaw(10.0, 1000.0, 2.0, naming=["d_L"])
15:41 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
15:41 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
15:41 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
15:41 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
15:41 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
15:41 ninjax INFO    : Setting up the generation prior
15:41 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.468645554845655, naming=["mass_1_source"])
15:41 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.468645554845655, naming=["mass_2_source"])
15:41 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
15:41 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
15:41 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
15:41 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
15:41 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
15:41 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
15:41 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
15:41 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
15:41 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
15:41 ninjax INFO    : Finished prior setup
15:41 ninjax INFO    : Setting the transforms
15:41 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
15:41 ninjax INFO    : transforms_str_list has 3 elements
15:41 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
15:41 ninjax INFO    : Setting the likelihood
15:41 ninjax INFO    : GW likelihood provided, setting up the GW pipe
15:41 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz
15:41 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz for BNS injections
15:41 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
15:41 ninjax INFO    : self.is_BNS_run is True
15:41 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
15:41 ninjax INFO    : GW run is an injection
15:41 ninjax INFO    : Setting up GW injection . . . 
15:41 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
15:41 ninjax INFO    : Generating new injection
15:41 ninjax INFO    : Sanity check: generated parameters:
15:41 ninjax INFO    : {'mass_1_source': 1.1002076557028153, 'mass_2_source': 1.3945564873822804, 's1_z': -0.03285572181177503, 's2_z': 0.0362786192140198, 'cos_iota': -0.8983089189965923, 'd_L': 335.4972116574993, 't_c': 0.02335706900346346, 'phase_c': 1.442539382347533, 'psi': 0.8513244784817996, 'ra': 2.9414420371011647, 'sin_dec': -0.8965317972595508}
15:41 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz . . . 
15:41 ninjax INFO    : Injected lambda_1: 524.2053255822225
15:41 ninjax INFO    : Injected lambda_2: 1920.663591517646
15:41 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.1584444664592397 is 256.0
15:41 ninjax INFO    : After transforms, the injection parameters are:
15:41 ninjax INFO    : {'mass_1_source': 1.3945564873822804, 'mass_2_source': 1.1002076557028153, 's1_z': -0.03285572181177503, 's2_z': 0.0362786192140198, 'cos_iota': -0.8983089189965923, 'd_L': 335.4972116574993, 't_c': 0.02335706900346346, 'phase_c': 1.442539382347533, 'psi': 0.8513244784817996, 'ra': 2.9414420371011647, 'sin_dec': -0.8965317972595508, 'q': 0.7889301477977513, 'M_c': 1.1584444664592397, 'eta': 0.24651978836458557, 'iota': Array(2.68670164, dtype=float64, weak_type=True), 'dec': Array(-1.11187714, dtype=float64, weak_type=True), 'lambda_1': 524.2053255822225, 'lambda_2': 1920.663591517646}
15:41 ninjax INFO    : The trial injection parameters are {'M_c': 1.1584444664592397, 'eta': 0.24651978836458557, 's1_z': -0.03285572181177503, 's2_z': 0.0362786192140198, 'lambda_1': 524.2053255822225, 'lambda_2': 1920.663591517646, 'd_L': 335.4972116574993, 'phase_c': 1.442539382347533, 'iota': 2.686701641668119, 't_c': 0.02335706900346346, 'psi': 0.8513244784817996, 'ra': 2.9414420371011647, 'dec': -1.1118771359729174}
15:41 ninjax INFO    : Injecting signals . . .
15:41 ninjax INFO    : self.ifos
15:41 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
15:41 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
15:41 ninjax INFO    : [-4.71113243e-23+8.73741537e-23j -7.71098937e-23+5.47705682e-23j
 -6.08731631e-23-8.11188053e-23j ...
  2.98650052e-23+1.27205686e-23j  2.23477006e-23+3.89942080e-23j
  2.25270779e-23+1.89476693e-23j]
15:41 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
15:41 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
15:41 ninjax INFO    : [ 1.41747283e-22-7.57624366e-23j -7.79010443e-23-9.59472466e-24j
 -8.85019545e-23-2.12107001e-23j ...
  2.82441960e-23-5.14244858e-23j  3.42306349e-23-1.72463268e-23j
  3.46397060e-23-2.98771422e-23j]
15:41 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
15:41 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
15:41 ninjax INFO    : [-4.93287235e-23+6.13401219e-23j -6.60179410e-23+4.45041464e-24j
 -1.02973246e-22-5.47726342e-23j ...
 -7.75949621e-23-3.95926456e-24j -4.02065462e-23-5.44838149e-23j
  2.26813800e-23+6.21027956e-23j]
15:41 ninjax INFO    : [1.43183556e-46 1.43058540e-46 1.42935095e-46 ... 6.39793039e-47
 6.39795354e-47 6.39797668e-47]
15:41 ninjax INFO    : SNR for ifo H1 is 13.350049372554045
15:41 ninjax INFO    : SNR for ifo L1 is 9.689107968911332
15:41 ninjax INFO    : SNR for ifo V1 is 5.5708000286446
15:41 ninjax INFO    : The network SNR is 17.410814008598173
15:41 ninjax INFO    : Network SNR passes threshold
15:41 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
15:41 ninjax INFO    :    mass_1_source: 1.3945564873822804
15:41 ninjax INFO    :    mass_2_source: 1.1002076557028153
15:41 ninjax INFO    :    s1_z: -0.03285572181177503
15:41 ninjax INFO    :    s2_z: 0.0362786192140198
15:41 ninjax INFO    :    cos_iota: -0.8983089189965923
15:41 ninjax INFO    :    d_L: 335.4972116574993
15:41 ninjax INFO    :    t_c: 0.02335706900346346
15:41 ninjax INFO    :    phase_c: 1.442539382347533
15:41 ninjax INFO    :    psi: 0.8513244784817996
15:41 ninjax INFO    :    ra: 2.9414420371011647
15:41 ninjax INFO    :    sin_dec: -0.8965317972595508
15:41 ninjax INFO    :    q: 0.7889301477977513
15:41 ninjax INFO    :    M_c: 1.1584444664592397
15:41 ninjax INFO    :    eta: 0.24651978836458557
15:41 ninjax INFO    :    iota: 2.686701641668119
15:41 ninjax INFO    :    dec: -1.1118771359729174
15:41 ninjax INFO    :    lambda_1: 524.2053255822225
15:41 ninjax INFO    :    lambda_2: 1920.663591517646
15:41 ninjax INFO    :    H1_SNR: 13.350049372554045
15:41 ninjax INFO    :    L1_SNR: 9.689107968911332
15:41 ninjax INFO    :    V1_SNR: 5.5708000286446
15:41 ninjax INFO    :    network_SNR: 17.410814008598173
15:41 ninjax INFO    :    epoch: 254.0
15:41 ninjax INFO    :    gmst: 2.7288901910520846
15:41 ninjax INFO    :    duration: 256.0
15:41 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
15:41 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
15:41 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
15:45 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 230.50290751457214 seconds = 3.841715125242869 minutes
15:45 ninjax INFO    : The priors are not modified after their initialization
15:45 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
15:45 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
15:45 ninjax INFO    : sample: {'M_c': Array([2.51726575, 2.59393932, 2.00129151], dtype=float64), 'q': Array([0.16443491, 0.99105559, 0.60439682], dtype=float64), 's1_z': Array([0.00155415, 0.03728671, 0.03758103], dtype=float64), 's2_z': Array([-0.03853282, -0.00816818, -0.04367941], dtype=float64), 'lambda_1': Array([4422.71626576, 2169.24694421, 2932.25174331], dtype=float64), 'lambda_2': Array([4405.3856059 , 1781.01604423, 2244.01053818], dtype=float64), 'cos_iota': Array([ 0.45485405,  0.88642892, -0.55558397], dtype=float64), 'd_L': Array([820.69526969, 893.65640397, 956.23156957], dtype=float64), 't_c': Array([-0.01690969,  0.06943731,  0.01348698], dtype=float64), 'phase_c': Array([5.38325306, 0.32968396, 5.86890483], dtype=float64), 'psi': Array([2.77247541, 1.70142877, 0.97838515], dtype=float64), 'ra': Array([5.38016746, 1.24537402, 5.43142225], dtype=float64), 'sin_dec': Array([ 0.10431126, -0.15056273, -0.89481034], dtype=float64)}
15:45 ninjax INFO    : log_prob: [ -3.62551648 -44.24458306 -21.08538901]
15:45 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.3945564873822804, 'mass_2_source': 1.1002076557028153, 's1_z': -0.03285572181177503, 's2_z': 0.0362786192140198, 'cos_iota': -0.8983089189965923, 'd_L': 335.4972116574993, 't_c': 0.02335706900346346, 'phase_c': 1.442539382347533, 'psi': 0.8513244784817996, 'ra': 2.9414420371011647, 'sin_dec': -0.8965317972595508, 'q': 0.7889301477977513, 'M_c': 1.1584444664592397, 'eta': 0.24651978836458557, 'iota': Array(2.68670164, dtype=float64, weak_type=True), 'dec': Array(-1.11187714, dtype=float64, weak_type=True), 'lambda_1': 524.2053255822225, 'lambda_2': 1920.663591517646, 'H1_SNR': 13.350049372554045, 'L1_SNR': 9.689107968911332, 'V1_SNR': 5.5708000286446, 'network_SNR': 17.410814008598173, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
15:45 ninjax INFO    : log_prob at the injection parameters is: 123.44545877351894
15:45 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
15:45 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
15:45 ninjax INFO    : Ninjax setup complete.
15:45 ninjax INFO    : Saving output to ./Aplus/injection_1/
15:45 ninjax INFO    : Using polynomial learning rate scheduler
15:45 ninjax INFO    : The hyperparameters passed to flowMC and jim are
15:45 ninjax INFO    :    n_loop_training: 200
15:45 ninjax INFO    :    n_loop_production: 10
15:45 ninjax INFO    :    n_local_steps: 100
15:45 ninjax INFO    :    n_global_steps: 1000
15:45 ninjax INFO    :    n_epochs: 25
15:45 ninjax INFO    :    n_chains: 1000
15:45 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x14fb15cb6320>
15:45 ninjax INFO    :    max_samples: 50000
15:45 ninjax INFO    :    momentum: 0.9
15:45 ninjax INFO    :    batch_size: 30000
15:45 ninjax INFO    :    use_global: True
15:45 ninjax INFO    :    keep_quantile: 0.0
15:45 ninjax INFO    :    train_thinning: 10
15:45 ninjax INFO    :    output_thinning: 50
15:45 ninjax INFO    :    n_sample_max: 10000
15:45 ninjax INFO    :    num_layers: 10
15:45 ninjax INFO    :    hidden_size: [128, 128]
15:45 ninjax INFO    :    num_bins: 8
15:45 ninjax INFO    :    save_training_chains: False
15:45 ninjax INFO    :    eps_mass_matrix: 1e-05
15:45 ninjax INFO    :    use_scheduler: True
15:45 ninjax INFO    :    use_temperature: False
15:45 ninjax INFO    :    which_temperature_schedule: exponential
15:45 ninjax INFO    :    starting_temperature: 2.0
15:45 ninjax INFO    :    stop_tempering_iteration: 75
15:45 ninjax INFO    :    stopping_criterion_global_acc: 0.1
15:45 ninjax INFO    :    stopping_criterion_loss: -inf
15:45 ninjax INFO    :    nf_model_kwargs: {}
15:45 ninjax INFO    :    local sampler arg not shown (pretty print)
15:45 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[-4.46539075e-23 -8.32619081e-23 -5.88081337e-23 -4.11985406e-23
 -8.14281314e-23 -1.73592203e-23 -8.11665405e-23  2.17580308e-23
 -1.48989024e-22  1.04250843e-23]
[ 8.17285421e-23  5.45533122e-23 -7.53211508e-23  6.46851616e-23
  1.34255878e-22 -1.31783116e-23  1.02938741e-23  1.00346585e-22
 -6.43905021e-23  2.53072399e-23]
Checking the noise that was generated in inject_signal ifo:
[ 1.37323335e-22 -7.56933733e-23 -8.57049705e-23  1.43457131e-22
  5.87673966e-24 -4.31049507e-23 -8.89841494e-23 -9.79582220e-23
 -6.31394103e-23  2.83271382e-23]
[-7.51310773e-23 -5.71052816e-24 -2.46933059e-23  8.03668868e-24
 -4.20315573e-23 -5.16529032e-23  7.70105179e-24  6.57789945e-23
 -3.95380035e-23  1.01753155e-22]
Checking the noise that was generated in inject_signal ifo:
[-5.24458386e-23 -6.57707898e-23 -1.00041716e-22 -6.98556821e-24
  4.66171926e-24 -1.35836163e-23  3.35406928e-23 -8.01697538e-23
  6.85456540e-23 -1.56844927e-22]
[ 6.03789696e-23  7.70222462e-24 -5.61997368e-23  6.12169404e-23
  4.37439308e-23  5.29304394e-23 -1.24260226e-22  1.74073850e-24
 -7.00572539e-23  1.51947475e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.1803450584411621 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.3945564873822804, 'mass_2_source': 1.1002076557028153, 's1_z': -0.03285572181177503, 's2_z': 0.0362786192140198, 'cos_iota': -0.8983089189965923, 'd_L': 335.4972116574993, 't_c': 0.02335706900346346, 'phase_c': 1.442539382347533, 'psi': 0.8513244784817996, 'ra': 2.9414420371011647, 'sin_dec': -0.8965317972595508, 'q': 0.7889301477977513, 'M_c': 1.1584444664592397, 'eta': 0.24651978836458557, 'iota': Array(2.68670164, dtype=float64, weak_type=True), 'dec': Array(-1.11187714, dtype=float64, weak_type=True), 'lambda_1': 524.2053255822225, 'lambda_2': 1920.663591517646, 'H1_SNR': 13.350049372554045, 'L1_SNR': 9.689107968911332, 'V1_SNR': 5.5708000286446, 'network_SNR': 17.410814008598173, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5053353309631348 seconds
Time for h_sky_low and h_sky_center: 5.481147289276123 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.7095499038696289
Going to compute coefficients . . .
Time for computing coefficients: 209.27673506736755 seconds
Time for computing coefficients: 7.014699697494507 seconds
Time for computing coefficients: 6.80280613899231 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:02<6:44:55, 122.09s/it]Tuning global sampler:   1%|          | 2/200 [02:06<2:54:45, 52.96s/it] Tuning global sampler:   2%|▏         | 3/200 [02:11<1:41:23, 30.88s/it]Tuning global sampler:   2%|▏         | 4/200 [02:15<1:06:59, 20.51s/it]Tuning global sampler:   2%|▎         | 5/200 [02:20<47:59, 14.77s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:25<36:33, 11.31s/it]Tuning global sampler:   4%|▎         | 7/200 [02:29<29:13,  9.09s/it]Tuning global sampler:   4%|▍         | 8/200 [02:34<24:29,  7.65s/it]Tuning global sampler:   4%|▍         | 9/200 [02:38<21:15,  6.68s/it]Tuning global sampler:   5%|▌         | 10/200 [02:43<18:55,  5.98s/it]Tuning global sampler:   6%|▌         | 11/200 [02:47<17:28,  5.55s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:27,  5.25s/it]Tuning global sampler:   6%|▋         | 13/200 [02:56<15:42,  5.04s/it]Tuning global sampler:   7%|▋         | 14/200 [03:01<15:15,  4.92s/it]Tuning global sampler:   8%|▊         | 15/200 [03:06<14:54,  4.83s/it]Tuning global sampler:   8%|▊         | 16/200 [03:10<14:37,  4.77s/it]Tuning global sampler:   8%|▊         | 17/200 [03:15<14:24,  4.72s/it]Tuning global sampler:   9%|▉         | 18/200 [03:20<15:07,  4.99s/it]Tuning global sampler:  10%|▉         | 19/200 [03:25<14:43,  4.88s/it]Tuning global sampler:  10%|█         | 20/200 [03:30<14:25,  4.81s/it]Tuning global sampler:  10%|█         | 21/200 [03:34<14:11,  4.76s/it]Tuning global sampler:  11%|█         | 22/200 [03:39<14:10,  4.78s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:44<13:55,  4.72s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:48<13:34,  4.63s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:53<13:17,  4.56s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:57<13:03,  4.51s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:01<12:53,  4.47s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:06<12:44,  4.45s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:10<12:45,  4.48s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:15<12:36,  4.45s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:19<12:28,  4.43s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:23<12:21,  4.41s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:28<12:13,  4.39s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:32<12:07,  4.38s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:36<12:02,  4.38s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:41<11:57,  4.38s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:46<12:51,  4.73s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:51<12:29,  4.62s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:55<12:14,  4.56s/it]Tuning global sampler:  20%|██        | 40/200 [05:00<12:00,  4.50s/it]Tuning global sampler:  20%|██        | 41/200 [05:04<11:49,  4.46s/it]Tuning global sampler:  21%|██        | 42/200 [05:08<11:40,  4.43s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:13<11:33,  4.42s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:17<11:25,  4.40s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:21<11:22,  4.40s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:26<11:16,  4.39s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:30<11:11,  4.39s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:35<11:06,  4.38s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:39<11:02,  4.39s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:43<10:57,  4.39s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:48<10:53,  4.38s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:52<10:49,  4.39s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:56<10:44,  4.38s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:01<10:39,  4.38s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:05<10:33,  4.37s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:12<12:16,  5.11s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:17<12:23,  5.20s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:22<11:43,  4.96s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:26<11:15,  4.79s/it]Tuning global sampler:  30%|███       | 60/200 [06:31<10:53,  4.67s/it]Tuning global sampler:  30%|███       | 61/200 [06:35<10:36,  4.58s/it]Tuning global sampler:  31%|███       | 62/200 [06:40<10:30,  4.57s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:44<10:19,  4.52s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:48<10:08,  4.47s/it]Tuning global sampler:  32%|███▎      | 65/200 [06:53<09:59,  4.44s/it]Tuning global sampler:  33%|███▎      | 66/200 [06:57<09:51,  4.41s/it]Tuning global sampler:  34%|███▎      | 67/200 [07:01<09:43,  4.39s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:06<09:38,  4.39s/it]Tuning global sampler:  34%|███▍      | 69/200 [07:10<09:34,  4.39s/it]Tuning global sampler:  35%|███▌      | 70/200 [07:14<09:30,  4.39s/it]Tuning global sampler:  36%|███▌      | 71/200 [07:19<09:26,  4.39s/it]Tuning global sampler:  36%|███▌      | 72/200 [07:23<09:21,  4.38s/it]Tuning global sampler:  36%|███▋      | 73/200 [07:28<09:16,  4.38s/it]Tuning global sampler:  37%|███▋      | 74/200 [07:32<09:12,  4.39s/it]Tuning global sampler:  38%|███▊      | 75/200 [07:36<09:09,  4.39s/it]Tuning global sampler:  38%|███▊      | 76/200 [07:41<09:05,  4.40s/it]Tuning global sampler:  38%|███▊      | 77/200 [07:45<08:58,  4.38s/it]Tuning global sampler:  39%|███▉      | 78/200 [07:51<09:31,  4.68s/it]Tuning global sampler:  40%|███▉      | 79/200 [07:55<09:15,  4.59s/it]Tuning global sampler:  40%|████      | 80/200 [07:59<09:03,  4.53s/it]Tuning global sampler:  40%|████      | 81/200 [08:04<08:54,  4.49s/it]Tuning global sampler:  41%|████      | 82/200 [08:08<08:46,  4.47s/it]Tuning global sampler:  42%|████▏     | 83/200 [08:13<08:39,  4.44s/it]Tuning global sampler:  42%|████▏     | 84/200 [08:17<08:33,  4.43s/it]Tuning global sampler:  42%|████▎     | 85/200 [08:21<08:27,  4.41s/it]Tuning global sampler:  42%|████▎     | 85/200 [08:26<11:24,  5.96s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.20s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.20s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.20s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.20s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.20s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.20s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.20s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.21s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.20s/it]
15:54 ninjax INFO    : Saving samples to ./Aplus/injection_1/results_training.npz
15:54 ninjax INFO    : Saving the NF
15:54 ninjax INFO    : Time taken: 545.0932183265686 seconds (9.084886972109476 minutes)
15:54 ninjax INFO    : Creating the final corner plot
15:54 ninjax INFO    : Dumping the final production chains
15:54 ninjax INFO    : Chains shape is: (13, 220000)
15:55 ninjax INFO    : Key: M_c: ESS = 33366, Rhat = 1.0203173349260255
15:55 ninjax INFO    : Key: q: ESS = 21024, Rhat = 1.0301459975274616
15:55 ninjax INFO    : Key: s1_z: ESS = 28034, Rhat = 1.0230127136444986
15:55 ninjax INFO    : Key: s2_z: ESS = 30447, Rhat = 1.0220976821574446
15:55 ninjax INFO    : Key: lambda_1: ESS = 41711, Rhat = 1.0165137117950387
15:55 ninjax INFO    : Key: lambda_2: ESS = 40981, Rhat = 1.017357909247261
15:55 ninjax INFO    : Key: cos_iota: ESS = 22659, Rhat = 1.0282123482290084
15:55 ninjax INFO    : Key: d_L: ESS = 26505, Rhat = 1.0245866546241633
15:55 ninjax INFO    : Key: t_c: ESS = 35632, Rhat = 1.0192288321725422
15:55 ninjax INFO    : Key: phase_c: ESS = 28759, Rhat = 1.022436444165668
15:55 ninjax INFO    : Key: psi: ESS = 36190, Rhat = 1.017834366646415
15:55 ninjax INFO    : Key: ra: ESS = 33821, Rhat = 1.0190340466788261
15:55 ninjax INFO    : Key: sin_dec: ESS = 40633, Rhat = 1.0167204690419032
15:55 ninjax INFO    : Key: eta: ESS = 21024, Rhat = 1.0301459975274616
15:55 ninjax INFO    : Key: iota: ESS = 22659, Rhat = 1.0282123482290084
15:55 ninjax INFO    : Key: dec: ESS = 40633, Rhat = 1.0167204690419032
15:55 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.246 +/- 0.273
q: 0.665 +/- 0.221
s1_z: -0.001 +/- 0.027
s2_z: 0.004 +/- 0.028
lambda_1: 2056.071 +/- 1440.831
lambda_2: 2311.846 +/- 1385.075
cos_iota: -0.108 +/- 0.598
d_L: 585.416 +/- 257.142
t_c: 0.021 +/- 0.030
phase_c: 3.087 +/- 1.770
psi: 1.546 +/- 0.877
ra: 2.742 +/- 1.081
sin_dec: -0.537 +/- 0.505
Log probability: 41.222 +/- 56.592
Local acceptance: 0.692 +/- 0.462
Global acceptance: 0.013 +/- 0.114
Max loss: 43.476, Min loss: 7.494
Production summary
==========
M_c: 1.158 +/- 0.000
q: 0.796 +/- 0.117
s1_z: -0.002 +/- 0.026
s2_z: -0.003 +/- 0.027
lambda_1: 845.235 +/- 682.263
lambda_2: 1615.404 +/- 1107.083
cos_iota: -0.724 +/- 0.317
d_L: 304.962 +/- 61.536
t_c: 0.024 +/- 0.001
phase_c: 3.111 +/- 1.810
psi: 1.582 +/- 0.911
ra: 2.906 +/- 0.043
sin_dec: -0.893 +/- 0.006
Log probability: 119.811 +/- 2.517
Local acceptance: 0.249 +/- 0.433
Global acceptance: 0.111 +/- 0.314
DONE

JOB STATISTICS
==============
Job ID: 10906016
Cluster: snellius
User/Group: twouters2/twouters2
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 00:11:35
CPU Efficiency: 5.15% of 03:44:48 core-walltime
Job Wall-clock time: 00:14:03
Memory Utilized: 4.65 GB
Memory Efficiency: 46.45% of 10.00 GB (10.00 GB/node)
