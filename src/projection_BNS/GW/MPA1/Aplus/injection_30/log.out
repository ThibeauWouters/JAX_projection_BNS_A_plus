Tue Apr  1 15:41:26 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
15:41 ninjax INFO    : Checking and setting outdir
15:41 ninjax INFO    : Found generation prior file ./Aplus/injection_30/generation_prior.prior
15:41 ninjax INFO    : The outdir is set to ./Aplus/injection_30
15:41 ninjax INFO    : Loading the given config
15:41 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
15:41 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
15:41 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/MPA1/Aplus/injection_30/complete_config.json
15:41 ninjax INFO    : No seed specified. Generating a random seed: 169096
15:41 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 524539
15:41 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 590988
15:41 ninjax INFO    : Loading the priors
15:41 ninjax INFO    : Setting up the prior
15:41 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
15:41 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
15:41 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
15:41 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
15:41 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
15:41 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
15:41 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
15:41 ninjax INFO    :    dL_prior = PowerLaw(10.0, 1000.0, 2.0, naming=["d_L"])
15:41 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
15:41 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
15:41 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
15:41 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
15:41 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
15:41 ninjax INFO    : Setting up the generation prior
15:41 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.468645554845655, naming=["mass_1_source"])
15:41 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.468645554845655, naming=["mass_2_source"])
15:41 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
15:41 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
15:41 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
15:41 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
15:41 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
15:41 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
15:41 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
15:41 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
15:41 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
15:41 ninjax INFO    : Finished prior setup
15:41 ninjax INFO    : Setting the transforms
15:41 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
15:41 ninjax INFO    : transforms_str_list has 3 elements
15:41 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
15:41 ninjax INFO    : Setting the likelihood
15:41 ninjax INFO    : GW likelihood provided, setting up the GW pipe
15:41 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz
15:41 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz for BNS injections
15:41 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
15:41 ninjax INFO    : self.is_BNS_run is True
15:41 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
15:41 ninjax INFO    : GW run is an injection
15:41 ninjax INFO    : Setting up GW injection . . . 
15:41 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
15:41 ninjax INFO    : Generating new injection
15:41 ninjax INFO    : Sanity check: generated parameters:
15:41 ninjax INFO    : {'mass_1_source': 2.093607030005128, 'mass_2_source': 1.256064140998483, 's1_z': -0.015158438513883009, 's2_z': -0.024617667434492008, 'cos_iota': -0.21003896969823455, 'd_L': 228.3328925755432, 't_c': -0.07976561630780613, 'phase_c': 3.7177335482009832, 'psi': 0.5603392321507795, 'ra': 3.8242674221507684, 'sin_dec': 0.9420537502882684}
15:41 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz . . . 
15:41 ninjax INFO    : Injected lambda_1: 33.55614921804616
15:41 ninjax INFO    : Injected lambda_2: 944.1066311229245
15:41 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.474998401951614 is 128.0
15:41 ninjax INFO    : After transforms, the injection parameters are:
15:41 ninjax INFO    : {'mass_1_source': 2.093607030005128, 'mass_2_source': 1.256064140998483, 's1_z': -0.015158438513883009, 's2_z': -0.024617667434492008, 'cos_iota': -0.21003896969823455, 'd_L': 228.3328925755432, 't_c': -0.07976561630780613, 'phase_c': 3.7177335482009832, 'psi': 0.5603392321507795, 'ra': 3.8242674221507684, 'sin_dec': 0.9420537502882684, 'q': 0.5999521987635885, 'M_c': 1.474998401951614, 'eta': 0.23437033142236197, 'iota': Array(1.78241115, dtype=float64, weak_type=True), 'dec': Array(1.22870076, dtype=float64, weak_type=True), 'lambda_1': 33.55614921804616, 'lambda_2': 944.1066311229245}
15:41 ninjax INFO    : The trial injection parameters are {'M_c': 1.474998401951614, 'eta': 0.23437033142236197, 's1_z': -0.015158438513883009, 's2_z': -0.024617667434492008, 'lambda_1': 33.55614921804616, 'lambda_2': 944.1066311229245, 'd_L': 228.3328925755432, 'phase_c': 3.7177335482009832, 'iota': 1.7824111452108824, 't_c': -0.07976561630780613, 'psi': 0.5603392321507795, 'ra': 3.8242674221507684, 'dec': 1.2287007562171777}
15:41 ninjax INFO    : Injecting signals . . .
15:41 ninjax INFO    : self.ifos
15:41 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
15:41 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:41 ninjax INFO    : [ 1.04543703e-22-6.87331188e-24j -1.83044621e-23-6.65666576e-25j
  5.42913661e-23-5.45501616e-23j ...
  1.34563954e-23+1.37444322e-23j  2.66735771e-23-3.14454224e-23j
 -6.57160747e-24-2.59308184e-23j]
15:41 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
15:41 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:41 ninjax INFO    : [ 5.63439095e-23+4.73012949e-23j -8.96410184e-23+1.14701584e-23j
  3.93716834e-23+1.44367593e-23j ...
  9.38098205e-24+2.98461676e-23j  6.65680082e-24-1.47377132e-23j
  2.60628808e-23+2.20724419e-23j]
15:41 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
15:41 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:41 ninjax INFO    : [ 3.56329306e-23-7.03687842e-23j  1.17588046e-23+2.54425806e-24j
 -7.85826963e-23-7.24750332e-23j ...
  2.36991003e-23+1.75577198e-23j -2.17505593e-23-1.86212222e-23j
  8.46230101e-24+3.98497819e-23j]
15:41 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
15:41 ninjax INFO    : SNR for ifo H1 is 5.025499734501865
15:41 ninjax INFO    : SNR for ifo L1 is 4.656854648290491
15:41 ninjax INFO    : SNR for ifo V1 is 5.586579568005128
15:41 ninjax INFO    : The network SNR is 8.840351467358943
15:41 ninjax INFO    : The network SNR does not pass the threshold, trying again
15:41 ninjax INFO    : Generating new injection
15:41 ninjax INFO    : Sanity check: generated parameters:
15:41 ninjax INFO    : {'mass_1_source': 2.4058597845288885, 'mass_2_source': 1.3534927328015003, 's1_z': -0.008360028469440131, 's2_z': -0.037273895317942056, 'cos_iota': -0.8558556716935115, 'd_L': 292.8635353901228, 't_c': -0.03308185466828287, 'phase_c': 6.151139931715113, 'psi': 0.8385854718971478, 'ra': 3.5492987754135474, 'sin_dec': 0.3401495396570904}
15:41 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz . . . 
15:41 ninjax INFO    : Injected lambda_1: 7.073707474892004
15:41 ninjax INFO    : Injected lambda_2: 621.9709221911005
15:41 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.6612743930805325 is 128.0
15:41 ninjax INFO    : After transforms, the injection parameters are:
15:41 ninjax INFO    : {'mass_1_source': 2.4058597845288885, 'mass_2_source': 1.3534927328015003, 's1_z': -0.008360028469440131, 's2_z': -0.037273895317942056, 'cos_iota': -0.8558556716935115, 'd_L': 292.8635353901228, 't_c': -0.03308185466828287, 'phase_c': 6.151139931715113, 'psi': 0.8385854718971478, 'ra': 3.5492987754135474, 'sin_dec': 0.3401495396570904, 'q': 0.5625817188122371, 'M_c': 1.6612743930805325, 'eta': 0.23040937055673946, 'iota': Array(2.59799929, dtype=float64, weak_type=True), 'dec': Array(0.34707591, dtype=float64, weak_type=True), 'lambda_1': 7.073707474892004, 'lambda_2': 621.9709221911005}
15:41 ninjax INFO    : The trial injection parameters are {'M_c': 1.6612743930805325, 'eta': 0.23040937055673946, 's1_z': -0.008360028469440131, 's2_z': -0.037273895317942056, 'lambda_1': 7.073707474892004, 'lambda_2': 621.9709221911005, 'd_L': 292.8635353901228, 'phase_c': 6.151139931715113, 'iota': 2.597999292668227, 't_c': -0.03308185466828287, 'psi': 0.8385854718971478, 'ra': 3.5492987754135474, 'dec': 0.3470759148726746}
15:41 ninjax INFO    : Injecting signals . . .
15:41 ninjax INFO    : self.ifos
15:41 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
15:41 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:41 ninjax INFO    : [ 1.06084491e-22-9.44548545e-24j -2.20249745e-23-4.33668673e-24j
  4.83068678e-23-5.23153900e-23j ...
  1.34563954e-23+1.37444322e-23j  2.66735771e-23-3.14454224e-23j
 -6.57160747e-24-2.59308184e-23j]
15:41 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
15:41 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:41 ninjax INFO    : [ 5.59130404e-23+5.08784339e-23j -8.40185149e-23+1.25844578e-23j
  4.30290261e-23+8.34107842e-24j ...
  9.38098205e-24+2.98461676e-23j  6.65680082e-24-1.47377132e-23j
  2.60628808e-23+2.20724419e-23j]
15:41 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
15:41 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:41 ninjax INFO    : [ 2.85172946e-23-6.26835458e-23j  1.69949158e-23+1.31042315e-23j
 -6.79640319e-23-7.35092523e-23j ...
  2.36991003e-23+1.75577198e-23j -2.17505593e-23-1.86212222e-23j
  8.46230101e-24+3.98497819e-23j]
15:41 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
15:41 ninjax INFO    : SNR for ifo H1 is 8.857351619883419
15:41 ninjax INFO    : SNR for ifo L1 is 10.962133372103844
15:41 ninjax INFO    : SNR for ifo V1 is 14.426731096183206
15:41 ninjax INFO    : The network SNR is 20.168084091148163
15:41 ninjax INFO    : Network SNR passes threshold
15:41 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
15:41 ninjax INFO    :    mass_1_source: 2.4058597845288885
15:41 ninjax INFO    :    mass_2_source: 1.3534927328015003
15:41 ninjax INFO    :    s1_z: -0.008360028469440131
15:41 ninjax INFO    :    s2_z: -0.037273895317942056
15:41 ninjax INFO    :    cos_iota: -0.8558556716935115
15:41 ninjax INFO    :    d_L: 292.8635353901228
15:41 ninjax INFO    :    t_c: -0.03308185466828287
15:41 ninjax INFO    :    phase_c: 6.151139931715113
15:41 ninjax INFO    :    psi: 0.8385854718971478
15:41 ninjax INFO    :    ra: 3.5492987754135474
15:41 ninjax INFO    :    sin_dec: 0.3401495396570904
15:41 ninjax INFO    :    q: 0.5625817188122371
15:41 ninjax INFO    :    M_c: 1.6612743930805325
15:41 ninjax INFO    :    eta: 0.23040937055673946
15:41 ninjax INFO    :    iota: 2.597999292668227
15:41 ninjax INFO    :    dec: 0.3470759148726746
15:41 ninjax INFO    :    lambda_1: 7.073707474892004
15:41 ninjax INFO    :    lambda_2: 621.9709221911005
15:41 ninjax INFO    :    H1_SNR: 8.857351619883419
15:41 ninjax INFO    :    L1_SNR: 10.962133372103844
15:41 ninjax INFO    :    V1_SNR: 14.426731096183206
15:41 ninjax INFO    :    network_SNR: 20.168084091148163
15:41 ninjax INFO    :    epoch: 126.0
15:41 ninjax INFO    :    gmst: 2.7288901910520846
15:41 ninjax INFO    :    duration: 128.0
15:41 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
15:41 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
15:41 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
15:44 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 149.82791805267334 seconds = 2.4971319675445556 minutes
15:44 ninjax INFO    : The priors are not modified after their initialization
15:44 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
15:44 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
15:44 ninjax INFO    : sample: {'M_c': Array([2.5376095 , 1.28801088, 2.11874459], dtype=float64), 'q': Array([0.30446035, 0.69480788, 0.14380891], dtype=float64), 's1_z': Array([0.01589734, 0.01078745, 0.03692289], dtype=float64), 's2_z': Array([-0.02710414,  0.04099887,  0.01403583], dtype=float64), 'lambda_1': Array([4188.41050963, 3119.30129265,  680.93658201], dtype=float64), 'lambda_2': Array([3020.8639063 , 2015.33479036, 1503.47865682], dtype=float64), 'cos_iota': Array([-0.5037512 ,  0.24318697,  0.94140652], dtype=float64), 'd_L': Array([245.91399982, 292.30509919, 943.40439462], dtype=float64), 't_c': Array([0.03585886, 0.01519992, 0.02828952], dtype=float64), 'phase_c': Array([5.42252361, 2.51409145, 5.29276922], dtype=float64), 'psi': Array([2.2370991 , 3.03410028, 0.54426156], dtype=float64), 'ra': Array([5.21634941, 4.09483852, 5.53293098], dtype=float64), 'sin_dec': Array([-0.8356946 ,  0.79332595, -0.8743804 ], dtype=float64)}
15:44 ninjax INFO    : log_prob: [-385.48680586  -31.20440926  -44.78595869]
15:44 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 2.4058597845288885, 'mass_2_source': 1.3534927328015003, 's1_z': -0.008360028469440131, 's2_z': -0.037273895317942056, 'cos_iota': -0.8558556716935115, 'd_L': 292.8635353901228, 't_c': -0.03308185466828287, 'phase_c': 6.151139931715113, 'psi': 0.8385854718971478, 'ra': 3.5492987754135474, 'sin_dec': 0.3401495396570904, 'q': 0.5625817188122371, 'M_c': 1.6612743930805325, 'eta': 0.23040937055673946, 'iota': Array(2.59799929, dtype=float64, weak_type=True), 'dec': Array(0.34707591, dtype=float64, weak_type=True), 'lambda_1': 7.073707474892004, 'lambda_2': 621.9709221911005, 'H1_SNR': 8.857351619883419, 'L1_SNR': 10.962133372103844, 'V1_SNR': 14.426731096183206, 'network_SNR': 20.168084091148163, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
15:44 ninjax INFO    : log_prob at the injection parameters is: 160.4640081982954
15:44 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
15:44 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
15:44 ninjax INFO    : Ninjax setup complete.
15:44 ninjax INFO    : Saving output to ./Aplus/injection_30/
15:44 ninjax INFO    : Using polynomial learning rate scheduler
15:44 ninjax INFO    : The hyperparameters passed to flowMC and jim are
15:44 ninjax INFO    :    n_loop_training: 200
15:44 ninjax INFO    :    n_loop_production: 10
15:44 ninjax INFO    :    n_local_steps: 100
15:44 ninjax INFO    :    n_global_steps: 1000
15:44 ninjax INFO    :    n_epochs: 25
15:44 ninjax INFO    :    n_chains: 1000
15:44 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x146c18460e50>
15:44 ninjax INFO    :    max_samples: 50000
15:44 ninjax INFO    :    momentum: 0.9
15:44 ninjax INFO    :    batch_size: 30000
15:44 ninjax INFO    :    use_global: True
15:44 ninjax INFO    :    keep_quantile: 0.0
15:44 ninjax INFO    :    train_thinning: 10
15:44 ninjax INFO    :    output_thinning: 50
15:44 ninjax INFO    :    n_sample_max: 10000
15:44 ninjax INFO    :    num_layers: 10
15:44 ninjax INFO    :    hidden_size: [128, 128]
15:44 ninjax INFO    :    num_bins: 8
15:44 ninjax INFO    :    save_training_chains: False
15:44 ninjax INFO    :    eps_mass_matrix: 1e-05
15:44 ninjax INFO    :    use_scheduler: True
15:44 ninjax INFO    :    use_temperature: False
15:44 ninjax INFO    :    which_temperature_schedule: exponential
15:44 ninjax INFO    :    starting_temperature: 2.0
15:44 ninjax INFO    :    stop_tempering_iteration: 75
15:44 ninjax INFO    :    stopping_criterion_global_acc: 0.1
15:44 ninjax INFO    :    stopping_criterion_loss: -inf
15:44 ninjax INFO    :    nf_model_kwargs: {}
15:44 ninjax INFO    :    local sampler arg not shown (pretty print)
15:44 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[ 1.02358574e-22 -2.06253365e-23  5.22892827e-23  2.70960891e-23
 -3.61340393e-23 -4.28668869e-23 -3.11453376e-23  6.11267393e-23
 -2.56969916e-23 -4.14655901e-23]
[-7.68443248e-24 -4.62514559e-25 -5.33608673e-23  9.65842727e-23
  7.16517528e-24 -1.46216822e-23 -3.56217489e-23  1.75847341e-23
 -5.50107758e-23  7.78075228e-23]
Checking the noise that was generated in inject_signal ifo:
[ 5.82908024e-23 -8.82835145e-23  3.98658801e-23  9.45284541e-23
 -3.95803892e-23  1.88941203e-23 -5.89201751e-23 -4.45460904e-23
  1.67828294e-23 -4.05890457e-23]
[ 4.63661399e-23  9.79152295e-24  1.23362507e-23 -8.38886635e-23
  3.23392960e-23  3.70697059e-23  5.56031506e-23 -9.51780262e-24
 -5.07259626e-23 -5.54129604e-24]
Checking the noise that was generated in inject_signal ifo:
[ 3.57977472e-23  1.33120926e-23 -7.59295510e-23  2.30789138e-24
 -6.38113745e-23  9.28482608e-23 -4.73494885e-23 -7.60251017e-24
 -3.17348444e-23 -7.06342304e-23]
[-6.70866775e-23  5.43852716e-24 -7.05410118e-23 -1.00603337e-22
  3.43907793e-23 -6.54328365e-24 -8.05878565e-23  5.19257178e-23
 -6.00403566e-23 -2.15797326e-23]
Checking the noise that was generated in inject_signal ifo:
[ 1.02358574e-22 -2.06253365e-23  5.22892827e-23  2.70960891e-23
 -3.61340393e-23 -4.28668869e-23 -3.11453376e-23  6.11267393e-23
 -2.56969916e-23 -4.14655901e-23]
[-7.68443248e-24 -4.62514559e-25 -5.33608673e-23  9.65842727e-23
  7.16517528e-24 -1.46216822e-23 -3.56217489e-23  1.75847341e-23
 -5.50107758e-23  7.78075228e-23]
Checking the noise that was generated in inject_signal ifo:
[ 5.82908024e-23 -8.82835145e-23  3.98658801e-23  9.45284541e-23
 -3.95803892e-23  1.88941203e-23 -5.89201751e-23 -4.45460904e-23
  1.67828294e-23 -4.05890457e-23]
[ 4.63661399e-23  9.79152295e-24  1.23362507e-23 -8.38886635e-23
  3.23392960e-23  3.70697059e-23  5.56031506e-23 -9.51780262e-24
 -5.07259626e-23 -5.54129604e-24]
Checking the noise that was generated in inject_signal ifo:
[ 3.57977472e-23  1.33120926e-23 -7.59295510e-23  2.30789138e-24
 -6.38113745e-23  9.28482608e-23 -4.73494885e-23 -7.60251017e-24
 -3.17348444e-23 -7.06342304e-23]
[-6.70866775e-23  5.43852716e-24 -7.05410118e-23 -1.00603337e-22
  3.43907793e-23 -6.54328365e-24 -8.05878565e-23  5.19257178e-23
 -6.00403566e-23 -2.15797326e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.11147665977478027 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 2.4058597845288885, 'mass_2_source': 1.3534927328015003, 's1_z': -0.008360028469440131, 's2_z': -0.037273895317942056, 'cos_iota': -0.8558556716935115, 'd_L': 292.8635353901228, 't_c': -0.03308185466828287, 'phase_c': 6.151139931715113, 'psi': 0.8385854718971478, 'ra': 3.5492987754135474, 'sin_dec': 0.3401495396570904, 'q': 0.5625817188122371, 'M_c': 1.6612743930805325, 'eta': 0.23040937055673946, 'iota': Array(2.59799929, dtype=float64, weak_type=True), 'dec': Array(0.34707591, dtype=float64, weak_type=True), 'lambda_1': 7.073707474892004, 'lambda_2': 621.9709221911005, 'H1_SNR': 8.857351619883419, 'L1_SNR': 10.962133372103844, 'V1_SNR': 14.426731096183206, 'network_SNR': 20.168084091148163, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5073244571685791 seconds
Time for h_sky_low and h_sky_center: 5.338984727859497 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.6519238948822021
Going to compute coefficients . . .
Time for computing coefficients: 129.3148980140686 seconds
Time for computing coefficients: 6.704039096832275 seconds
Time for computing coefficients: 6.670294523239136 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:52<9:32:27, 172.60s/it]Tuning global sampler:   1%|          | 2/200 [02:57<4:03:29, 73.79s/it] Tuning global sampler:   2%|▏         | 3/200 [03:01<2:18:34, 42.21s/it]Tuning global sampler:   2%|▏         | 4/200 [03:07<1:30:30, 27.71s/it]Tuning global sampler:   2%|▎         | 5/200 [03:11<1:02:59, 19.38s/it]Tuning global sampler:   3%|▎         | 6/200 [03:16<46:32, 14.39s/it]  Tuning global sampler:   4%|▎         | 7/200 [03:21<35:56, 11.17s/it]Tuning global sampler:   4%|▍         | 8/200 [03:25<29:03,  9.08s/it]Tuning global sampler:   4%|▍         | 9/200 [03:30<24:24,  7.67s/it]Tuning global sampler:   5%|▌         | 10/200 [03:34<21:06,  6.67s/it]Tuning global sampler:   6%|▌         | 11/200 [03:39<18:59,  6.03s/it]Tuning global sampler:   6%|▌         | 12/200 [03:43<17:31,  5.59s/it]Tuning global sampler:   6%|▋         | 13/200 [03:48<16:27,  5.28s/it]Tuning global sampler:   7%|▋         | 14/200 [03:53<15:46,  5.09s/it]Tuning global sampler:   8%|▊         | 15/200 [03:57<15:17,  4.96s/it]Tuning global sampler:   8%|▊         | 16/200 [04:02<14:54,  4.86s/it]Tuning global sampler:   8%|▊         | 17/200 [04:07<14:38,  4.80s/it]Tuning global sampler:   9%|▉         | 18/200 [04:11<14:25,  4.76s/it]Tuning global sampler:  10%|▉         | 19/200 [04:16<14:14,  4.72s/it]Tuning global sampler:  10%|█         | 20/200 [04:21<14:56,  4.98s/it]Tuning global sampler:  10%|█         | 21/200 [04:26<14:33,  4.88s/it]Tuning global sampler:  11%|█         | 22/200 [04:31<14:13,  4.80s/it]Tuning global sampler:  12%|█▏        | 23/200 [04:35<14:02,  4.76s/it]Tuning global sampler:  12%|█▏        | 24/200 [04:40<13:41,  4.67s/it]Tuning global sampler:  12%|█▎        | 25/200 [04:44<13:31,  4.63s/it]Tuning global sampler:  13%|█▎        | 26/200 [04:49<13:14,  4.57s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:53<13:01,  4.52s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:58<12:50,  4.48s/it]Tuning global sampler:  14%|█▍        | 29/200 [05:02<12:41,  4.45s/it]Tuning global sampler:  15%|█▌        | 30/200 [05:07<12:44,  4.50s/it]Tuning global sampler:  16%|█▌        | 31/200 [05:11<12:34,  4.46s/it]Tuning global sampler:  16%|█▌        | 32/200 [05:15<12:26,  4.44s/it]Tuning global sampler:  16%|█▋        | 33/200 [05:20<12:17,  4.42s/it]Tuning global sampler:  17%|█▋        | 34/200 [05:24<12:10,  4.40s/it]Tuning global sampler:  18%|█▊        | 35/200 [05:29<12:05,  4.40s/it]Tuning global sampler:  18%|█▊        | 36/200 [05:33<12:00,  4.39s/it]Tuning global sampler:  18%|█▊        | 37/200 [05:37<11:56,  4.39s/it]Tuning global sampler:  19%|█▉        | 38/200 [05:42<11:51,  4.39s/it]Tuning global sampler:  20%|█▉        | 39/200 [05:47<12:33,  4.68s/it]Tuning global sampler:  20%|██        | 40/200 [05:51<12:14,  4.59s/it]Tuning global sampler:  20%|██        | 41/200 [05:56<12:00,  4.53s/it]Tuning global sampler:  21%|██        | 42/200 [06:00<11:48,  4.49s/it]Tuning global sampler:  22%|██▏       | 43/200 [06:05<11:40,  4.46s/it]Tuning global sampler:  22%|██▏       | 44/200 [06:09<11:31,  4.43s/it]Tuning global sampler:  22%|██▎       | 45/200 [06:13<11:23,  4.41s/it]Tuning global sampler:  23%|██▎       | 46/200 [06:18<11:18,  4.40s/it]Tuning global sampler:  24%|██▎       | 47/200 [06:22<11:13,  4.40s/it]Tuning global sampler:  24%|██▍       | 48/200 [06:26<11:08,  4.40s/it]Tuning global sampler:  24%|██▍       | 49/200 [06:31<11:04,  4.40s/it]Tuning global sampler:  25%|██▌       | 50/200 [06:36<11:22,  4.55s/it]Tuning global sampler:  26%|██▌       | 51/200 [06:40<11:10,  4.50s/it]Tuning global sampler:  26%|██▌       | 52/200 [06:45<11:00,  4.47s/it]Tuning global sampler:  26%|██▋       | 53/200 [06:49<10:52,  4.44s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:53<10:46,  4.43s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:58<10:38,  4.40s/it]Tuning global sampler:  28%|██▊       | 56/200 [07:02<10:31,  4.39s/it]Tuning global sampler:  28%|██▊       | 57/200 [07:06<10:28,  4.39s/it]Tuning global sampler:  29%|██▉       | 58/200 [07:11<10:24,  4.39s/it]Tuning global sampler:  30%|██▉       | 59/200 [07:16<11:01,  4.69s/it]Tuning global sampler:  30%|███       | 60/200 [07:21<10:44,  4.60s/it]Tuning global sampler:  30%|███       | 61/200 [07:25<10:30,  4.54s/it]Tuning global sampler:  31%|███       | 62/200 [07:30<10:33,  4.59s/it]Tuning global sampler:  32%|███▏      | 63/200 [07:34<10:20,  4.53s/it]Tuning global sampler:  32%|███▏      | 64/200 [07:38<10:10,  4.49s/it]Tuning global sampler:  32%|███▎      | 65/200 [07:43<10:02,  4.46s/it]Tuning global sampler:  33%|███▎      | 66/200 [07:47<09:53,  4.43s/it]Tuning global sampler:  34%|███▎      | 67/200 [07:52<09:45,  4.41s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:56<09:40,  4.40s/it]Tuning global sampler:  34%|███▍      | 69/200 [08:00<09:35,  4.40s/it]Tuning global sampler:  35%|███▌      | 70/200 [08:05<09:31,  4.40s/it]Tuning global sampler:  36%|███▌      | 71/200 [08:10<09:43,  4.52s/it]Tuning global sampler:  36%|███▌      | 71/200 [08:14<14:58,  6.96s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.21s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.21s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.21s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.21s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.21s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.21s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.21s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.21s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]
15:53 ninjax INFO    : Saving samples to ./Aplus/injection_30/results_training.npz
15:53 ninjax INFO    : Saving the NF
15:53 ninjax INFO    : Time taken: 560.9468770027161 seconds (9.349114616711935 minutes)
15:53 ninjax INFO    : Creating the final corner plot
15:53 ninjax INFO    : Dumping the final production chains
15:53 ninjax INFO    : Chains shape is: (13, 220000)
15:54 ninjax INFO    : Key: M_c: ESS = 79477, Rhat = 1.0099659589772736
15:54 ninjax INFO    : Key: q: ESS = 41432, Rhat = 1.016289696030029
15:54 ninjax INFO    : Key: s1_z: ESS = 52547, Rhat = 1.0142181129561607
15:54 ninjax INFO    : Key: s2_z: ESS = 48972, Rhat = 1.0147643381313547
15:54 ninjax INFO    : Key: lambda_1: ESS = 31930, Rhat = 1.0202772585816338
15:54 ninjax INFO    : Key: lambda_2: ESS = 82037, Rhat = 1.0098363063817497
15:54 ninjax INFO    : Key: cos_iota: ESS = 29871, Rhat = 1.0219841987043545
15:54 ninjax INFO    : Key: d_L: ESS = 26550, Rhat = 1.024091954340484
15:54 ninjax INFO    : Key: t_c: ESS = 35541, Rhat = 1.0187373083367146
15:54 ninjax INFO    : Key: phase_c: ESS = 70585, Rhat = 1.011102582546524
15:54 ninjax INFO    : Key: psi: ESS = 84312, Rhat = 1.0096070857755757
15:54 ninjax INFO    : Key: ra: ESS = 40708, Rhat = 1.016062909172791
15:54 ninjax INFO    : Key: sin_dec: ESS = 49553, Rhat = 1.014010483635903
15:54 ninjax INFO    : Key: eta: ESS = 41432, Rhat = 1.016289696030029
15:54 ninjax INFO    : Key: iota: ESS = 29871, Rhat = 1.0219841987043545
15:54 ninjax INFO    : Key: dec: ESS = 49553, Rhat = 1.0139518078485077
15:54 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.655 +/- 0.171
q: 0.615 +/- 0.180
s1_z: -0.008 +/- 0.027
s2_z: -0.006 +/- 0.028
lambda_1: 1931.121 +/- 1516.135
lambda_2: 1979.678 +/- 1379.530
cos_iota: -0.462 +/- 0.459
d_L: 545.399 +/- 265.824
t_c: -0.027 +/- 0.025
phase_c: 3.072 +/- 1.726
psi: 1.491 +/- 0.854
ra: 3.496 +/- 0.881
sin_dec: 0.263 +/- 0.339
Log probability: 74.537 +/- 72.508
Local acceptance: 0.953 +/- 0.212
Global acceptance: 0.013 +/- 0.115
Max loss: 22.766, Min loss: 7.014
Production summary
==========
M_c: 1.661 +/- 0.000
q: 0.569 +/- 0.066
s1_z: -0.013 +/- 0.027
s2_z: -0.009 +/- 0.028
lambda_1: 215.495 +/- 262.016
lambda_2: 1092.796 +/- 871.669
cos_iota: -0.731 +/- 0.217
d_L: 271.664 +/- 59.234
t_c: -0.032 +/- 0.001
phase_c: 3.197 +/- 1.822
psi: 1.617 +/- 0.876
ra: 3.569 +/- 0.024
sin_dec: 0.366 +/- 0.014
Log probability: 159.064 +/- 2.524
Local acceptance: 0.887 +/- 0.317
Global acceptance: 0.129 +/- 0.335
DONE

JOB STATISTICS
==============
Job ID: 10906046
Cluster: snellius
User/Group: twouters2/twouters2
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 00:10:13
CPU Efficiency: 4.91% of 03:28:00 core-walltime
Job Wall-clock time: 00:13:00
Memory Utilized: 4.24 GB
Memory Efficiency: 42.44% of 10.00 GB (10.00 GB/node)
