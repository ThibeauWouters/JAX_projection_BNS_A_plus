Tue Apr  1 15:41:21 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
15:41 ninjax INFO    : Checking and setting outdir
15:41 ninjax INFO    : Found generation prior file ./Aplus/injection_6/generation_prior.prior
15:41 ninjax INFO    : The outdir is set to ./Aplus/injection_6
15:41 ninjax INFO    : Loading the given config
15:41 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
15:41 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
15:41 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/MPA1/Aplus/injection_6/complete_config.json
15:41 ninjax INFO    : No seed specified. Generating a random seed: 800491
15:41 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 941765
15:41 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 39669
15:41 ninjax INFO    : Loading the priors
15:41 ninjax INFO    : Setting up the prior
15:41 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
15:41 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
15:41 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
15:41 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
15:41 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
15:41 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
15:41 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
15:41 ninjax INFO    :    dL_prior = PowerLaw(10.0, 1000.0, 2.0, naming=["d_L"])
15:41 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
15:41 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
15:41 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
15:41 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
15:41 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
15:41 ninjax INFO    : Setting up the generation prior
15:41 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.468645554845655, naming=["mass_1_source"])
15:41 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.468645554845655, naming=["mass_2_source"])
15:41 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
15:41 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
15:41 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
15:41 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
15:41 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
15:41 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
15:41 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
15:41 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
15:41 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
15:41 ninjax INFO    : Finished prior setup
15:41 ninjax INFO    : Setting the transforms
15:41 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
15:41 ninjax INFO    : transforms_str_list has 3 elements
15:41 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
15:41 ninjax INFO    : Setting the likelihood
15:41 ninjax INFO    : GW likelihood provided, setting up the GW pipe
15:41 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz
15:41 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz for BNS injections
15:41 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
15:41 ninjax INFO    : self.is_BNS_run is True
15:41 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
15:41 ninjax INFO    : GW run is an injection
15:41 ninjax INFO    : Setting up GW injection . . . 
15:41 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
15:41 ninjax INFO    : Generating new injection
15:41 ninjax INFO    : Sanity check: generated parameters:
15:41 ninjax INFO    : {'mass_1_source': 2.2303512539179793, 'mass_2_source': 1.7486332129510171, 's1_z': -0.030144948641217664, 's2_z': 0.005709146893042402, 'cos_iota': -0.9795202729108943, 'd_L': 375.271298921786, 't_c': -0.05104122934133742, 'phase_c': 2.4344274337804626, 'psi': 1.5947005135731784, 'ra': 1.43011660617618, 'sin_dec': 0.46856210692739886}
15:41 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz . . . 
15:41 ninjax INFO    : Injected lambda_1: 18.572274614816383
15:41 ninjax INFO    : Injected lambda_2: 129.53264221929203
15:41 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.8622431566044446 is 128.0
15:41 ninjax INFO    : After transforms, the injection parameters are:
15:41 ninjax INFO    : {'mass_1_source': 2.2303512539179793, 'mass_2_source': 1.7486332129510171, 's1_z': -0.030144948641217664, 's2_z': 0.005709146893042402, 'cos_iota': -0.9795202729108943, 'd_L': 375.271298921786, 't_c': -0.05104122934133742, 'phase_c': 2.4344274337804626, 'psi': 1.5947005135731784, 'ra': 1.43011660617618, 'sin_dec': 0.46856210692739886, 'q': 0.7840169613998041, 'M_c': 1.8622431566044446, 'eta': 0.2463357816592438, 'iota': Array(2.93886123, dtype=float64, weak_type=True), 'dec': Array(0.48766245, dtype=float64, weak_type=True), 'lambda_1': 18.572274614816383, 'lambda_2': 129.53264221929203}
15:41 ninjax INFO    : The trial injection parameters are {'M_c': 1.8622431566044446, 'eta': 0.2463357816592438, 's1_z': -0.030144948641217664, 's2_z': 0.005709146893042402, 'lambda_1': 18.572274614816383, 'lambda_2': 129.53264221929203, 'd_L': 375.271298921786, 'phase_c': 2.4344274337804626, 'iota': 2.938861232326095, 't_c': -0.05104122934133742, 'psi': 1.5947005135731784, 'ra': 1.43011660617618, 'dec': 0.487662449811955}
15:41 ninjax INFO    : Injecting signals . . .
15:41 ninjax INFO    : self.ifos
15:41 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
15:41 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:41 ninjax INFO    : [ 1.37219479e-23+2.12553312e-23j -4.63524196e-23+1.73957119e-23j
  8.32998174e-23-1.84864580e-23j ...
 -2.64236732e-24+4.05667856e-23j -4.41628776e-24+1.70885117e-23j
  3.20326543e-23+1.54936672e-23j]
15:41 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
15:41 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:41 ninjax INFO    : [ 4.99357720e-24-7.60896992e-23j -5.79396195e-23-5.57063983e-23j
  2.38191609e-23-7.89698124e-24j ...
  4.86978538e-24-3.67743169e-23j -4.32138699e-24-1.11426602e-23j
  1.40418790e-23+1.56903113e-23j]
15:41 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
15:41 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:41 ninjax INFO    : [-1.17834452e-22-4.73630578e-23j  5.01731626e-23+6.59564036e-23j
  1.32202938e-22-7.44085102e-25j ...
 -3.64268226e-23-5.97944532e-23j  6.41114300e-24+3.18032711e-23j
 -1.74454627e-23-2.15327488e-23j]
15:41 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
15:41 ninjax INFO    : SNR for ifo H1 is 17.00675535161625
15:41 ninjax INFO    : SNR for ifo L1 is 21.388013031225174
15:41 ninjax INFO    : SNR for ifo V1 is 9.960155762757921
15:41 ninjax INFO    : The network SNR is 29.084042563439933
15:41 ninjax INFO    : Network SNR passes threshold
15:41 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
15:41 ninjax INFO    :    mass_1_source: 2.2303512539179793
15:41 ninjax INFO    :    mass_2_source: 1.7486332129510171
15:41 ninjax INFO    :    s1_z: -0.030144948641217664
15:41 ninjax INFO    :    s2_z: 0.005709146893042402
15:41 ninjax INFO    :    cos_iota: -0.9795202729108943
15:41 ninjax INFO    :    d_L: 375.271298921786
15:41 ninjax INFO    :    t_c: -0.05104122934133742
15:41 ninjax INFO    :    phase_c: 2.4344274337804626
15:41 ninjax INFO    :    psi: 1.5947005135731784
15:41 ninjax INFO    :    ra: 1.43011660617618
15:41 ninjax INFO    :    sin_dec: 0.46856210692739886
15:41 ninjax INFO    :    q: 0.7840169613998041
15:41 ninjax INFO    :    M_c: 1.8622431566044446
15:41 ninjax INFO    :    eta: 0.2463357816592438
15:41 ninjax INFO    :    iota: 2.938861232326095
15:41 ninjax INFO    :    dec: 0.487662449811955
15:41 ninjax INFO    :    lambda_1: 18.572274614816383
15:41 ninjax INFO    :    lambda_2: 129.53264221929203
15:41 ninjax INFO    :    H1_SNR: 17.00675535161625
15:41 ninjax INFO    :    L1_SNR: 21.388013031225174
15:41 ninjax INFO    :    V1_SNR: 9.960155762757921
15:41 ninjax INFO    :    network_SNR: 29.084042563439933
15:41 ninjax INFO    :    epoch: 126.0
15:41 ninjax INFO    :    gmst: 2.7288901910520846
15:41 ninjax INFO    :    duration: 128.0
15:41 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
15:41 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
15:41 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
15:44 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 145.79265904426575 seconds = 2.4298776507377626 minutes
15:44 ninjax INFO    : The priors are not modified after their initialization
15:44 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
15:44 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
15:44 ninjax INFO    : sample: {'M_c': Array([1.99802601, 1.5896802 , 1.22811581], dtype=float64), 'q': Array([0.17595139, 0.38485254, 0.14101517], dtype=float64), 's1_z': Array([0.03440024, 0.04434856, 0.04438013], dtype=float64), 's2_z': Array([-0.03808501,  0.00519594,  0.01464028], dtype=float64), 'lambda_1': Array([2622.77425053, 3158.5526655 , 4400.01346831], dtype=float64), 'lambda_2': Array([1380.62256898,  618.6838193 , 3877.47066903], dtype=float64), 'cos_iota': Array([-0.36623946, -0.83847907, -0.20330038], dtype=float64), 'd_L': Array([838.77450002, 918.84082048, 636.18176791], dtype=float64), 't_c': Array([-0.049118  , -0.02679601,  0.04715385], dtype=float64), 'phase_c': Array([2.86054392, 1.30578241, 3.13596147], dtype=float64), 'psi': Array([2.72869165, 2.44624669, 0.13553582], dtype=float64), 'ra': Array([4.63321689, 2.35948676, 4.84031185], dtype=float64), 'sin_dec': Array([-0.5322204 , -0.06645253, -0.03439441], dtype=float64)}
15:44 ninjax INFO    : log_prob: [-15.27096939 -15.03005537 -12.92158636]
15:44 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 2.2303512539179793, 'mass_2_source': 1.7486332129510171, 's1_z': -0.030144948641217664, 's2_z': 0.005709146893042402, 'cos_iota': -0.9795202729108943, 'd_L': 375.271298921786, 't_c': -0.05104122934133742, 'phase_c': 2.4344274337804626, 'psi': 1.5947005135731784, 'ra': 1.43011660617618, 'sin_dec': 0.46856210692739886, 'q': 0.7840169613998041, 'M_c': 1.8622431566044446, 'eta': 0.2463357816592438, 'iota': Array(2.93886123, dtype=float64, weak_type=True), 'dec': Array(0.48766245, dtype=float64, weak_type=True), 'lambda_1': 18.572274614816383, 'lambda_2': 129.53264221929203, 'H1_SNR': 17.00675535161625, 'L1_SNR': 21.388013031225174, 'V1_SNR': 9.960155762757921, 'network_SNR': 29.084042563439933, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
15:44 ninjax INFO    : log_prob at the injection parameters is: 378.0106854590773
15:44 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
15:44 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
15:44 ninjax INFO    : Ninjax setup complete.
15:44 ninjax INFO    : Saving output to ./Aplus/injection_6/
15:44 ninjax INFO    : Using polynomial learning rate scheduler
15:44 ninjax INFO    : The hyperparameters passed to flowMC and jim are
15:44 ninjax INFO    :    n_loop_training: 200
15:44 ninjax INFO    :    n_loop_production: 10
15:44 ninjax INFO    :    n_local_steps: 100
15:44 ninjax INFO    :    n_global_steps: 1000
15:44 ninjax INFO    :    n_epochs: 25
15:44 ninjax INFO    :    n_chains: 1000
15:44 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x146270523a30>
15:44 ninjax INFO    :    max_samples: 50000
15:44 ninjax INFO    :    momentum: 0.9
15:44 ninjax INFO    :    batch_size: 30000
15:44 ninjax INFO    :    use_global: True
15:44 ninjax INFO    :    keep_quantile: 0.0
15:44 ninjax INFO    :    train_thinning: 10
15:44 ninjax INFO    :    output_thinning: 50
15:44 ninjax INFO    :    n_sample_max: 10000
15:44 ninjax INFO    :    num_layers: 10
15:44 ninjax INFO    :    hidden_size: [128, 128]
15:44 ninjax INFO    :    num_bins: 8
15:44 ninjax INFO    :    save_training_chains: False
15:44 ninjax INFO    :    eps_mass_matrix: 1e-05
15:44 ninjax INFO    :    use_scheduler: True
15:44 ninjax INFO    :    use_temperature: False
15:44 ninjax INFO    :    which_temperature_schedule: exponential
15:44 ninjax INFO    :    starting_temperature: 2.0
15:44 ninjax INFO    :    stop_tempering_iteration: 75
15:44 ninjax INFO    :    stopping_criterion_global_acc: 0.1
15:44 ninjax INFO    :    stopping_criterion_loss: -inf
15:44 ninjax INFO    :    nf_model_kwargs: {}
15:44 ninjax INFO    :    local sampler arg not shown (pretty print)
15:44 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[ 6.67906642e-24 -4.44631253e-23  8.78342602e-23  1.09750936e-23
 -7.87644464e-23 -5.68085555e-23  6.33235813e-23  4.77567260e-23
  1.54207368e-23 -5.70188668e-23]
[ 1.76448530e-23  2.50775663e-23 -2.49642517e-23 -5.21599634e-24
 -8.21347481e-23  3.66565790e-23  3.43486859e-23 -3.01285642e-23
  3.53201206e-23 -5.11407200e-23]
Checking the noise that was generated in inject_signal ifo:
[ 1.09275576e-23 -5.57937661e-23  1.50985728e-23  7.30863108e-23
  8.80647399e-23  1.98223549e-23  4.01852179e-23  1.71843581e-23
 -4.68840299e-23  8.66354833e-23]
[-6.80987036e-23 -6.54209566e-23 -3.11807047e-24  4.98172946e-23
 -4.15518223e-23  5.42249602e-23  5.07206933e-23 -2.61970553e-23
 -5.88941861e-23 -4.21569227e-23]
Checking the noise that was generated in inject_signal ifo:
[-1.17516000e-22  5.43914598e-23  1.26352393e-22 -1.97382835e-23
  3.08868946e-24 -6.43250743e-23  4.06527663e-23 -3.45027600e-23
 -5.42513496e-23 -3.97001579e-23]
[-4.14960525e-23  6.18701476e-23 -1.22474967e-24 -4.84238588e-23
  1.72589174e-24 -4.90376801e-23 -4.23628080e-23 -7.97972735e-24
  2.75136900e-23 -9.36672087e-24]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.11056780815124512 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 2.2303512539179793, 'mass_2_source': 1.7486332129510171, 's1_z': -0.030144948641217664, 's2_z': 0.005709146893042402, 'cos_iota': -0.9795202729108943, 'd_L': 375.271298921786, 't_c': -0.05104122934133742, 'phase_c': 2.4344274337804626, 'psi': 1.5947005135731784, 'ra': 1.43011660617618, 'sin_dec': 0.46856210692739886, 'q': 0.7840169613998041, 'M_c': 1.8622431566044446, 'eta': 0.2463357816592438, 'iota': Array(2.93886123, dtype=float64, weak_type=True), 'dec': Array(0.48766245, dtype=float64, weak_type=True), 'lambda_1': 18.572274614816383, 'lambda_2': 129.53264221929203, 'H1_SNR': 17.00675535161625, 'L1_SNR': 21.388013031225174, 'V1_SNR': 9.960155762757921, 'network_SNR': 29.084042563439933, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5144970417022705 seconds
Time for h_sky_low and h_sky_center: 6.451245307922363 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.6712405681610107
Going to compute coefficients . . .
Time for computing coefficients: 123.94969892501831 seconds
Time for computing coefficients: 6.781897306442261 seconds
Time for computing coefficients: 6.788290977478027 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:01<6:43:29, 121.66s/it]Tuning global sampler:   1%|          | 2/200 [02:06<2:54:09, 52.78s/it] Tuning global sampler:   2%|▏         | 3/200 [02:10<1:41:03, 30.78s/it]Tuning global sampler:   2%|▏         | 4/200 [02:15<1:06:45, 20.44s/it]Tuning global sampler:   2%|▎         | 5/200 [02:20<48:49, 15.02s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:25<37:07, 11.48s/it]Tuning global sampler:   4%|▎         | 7/200 [02:29<29:36,  9.21s/it]Tuning global sampler:   4%|▍         | 8/200 [02:34<24:44,  7.73s/it]Tuning global sampler:   4%|▍         | 9/200 [02:39<21:25,  6.73s/it]Tuning global sampler:   5%|▌         | 10/200 [02:43<19:03,  6.02s/it]Tuning global sampler:   6%|▌         | 11/200 [02:48<17:53,  5.68s/it]Tuning global sampler:   6%|▌         | 12/200 [02:53<16:58,  5.42s/it]Tuning global sampler:   6%|▋         | 13/200 [02:57<16:02,  5.15s/it]Tuning global sampler:   7%|▋         | 14/200 [03:02<15:27,  4.99s/it]Tuning global sampler:   8%|▊         | 15/200 [03:06<15:01,  4.87s/it]Tuning global sampler:   8%|▊         | 16/200 [03:11<14:42,  4.79s/it]Tuning global sampler:   8%|▊         | 17/200 [03:16<14:27,  4.74s/it]Tuning global sampler:   9%|▉         | 18/200 [03:20<14:15,  4.70s/it]Tuning global sampler:  10%|▉         | 19/200 [03:28<17:15,  5.72s/it]Tuning global sampler:  10%|█         | 20/200 [03:50<31:25, 10.48s/it]Tuning global sampler:  10%|█         | 21/200 [04:08<37:52, 12.69s/it]Tuning global sampler:  11%|█         | 22/200 [04:12<30:25, 10.26s/it]Tuning global sampler:  12%|█▏        | 23/200 [04:17<25:13,  8.55s/it]Tuning global sampler:  12%|█▏        | 24/200 [04:21<21:25,  7.31s/it]Tuning global sampler:  12%|█▎        | 25/200 [04:27<19:32,  6.70s/it]Tuning global sampler:  13%|█▎        | 26/200 [04:31<17:23,  6.00s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:35<15:53,  5.51s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:40<14:48,  5.17s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:44<14:02,  4.93s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:49<13:30,  4.77s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:53<13:06,  4.66s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:57<12:48,  4.57s/it]Tuning global sampler:  16%|█▋        | 33/200 [05:02<12:31,  4.50s/it]Tuning global sampler:  17%|█▋        | 34/200 [05:06<12:19,  4.46s/it]Tuning global sampler:  18%|█▊        | 35/200 [05:10<12:10,  4.43s/it]Tuning global sampler:  18%|█▊        | 36/200 [05:15<12:08,  4.44s/it]Tuning global sampler:  18%|█▊        | 37/200 [05:19<12:09,  4.47s/it]Tuning global sampler:  19%|█▉        | 38/200 [05:24<11:59,  4.44s/it]Tuning global sampler:  20%|█▉        | 39/200 [05:28<11:51,  4.42s/it]Tuning global sampler:  20%|██        | 40/200 [05:33<11:49,  4.44s/it]Tuning global sampler:  20%|██        | 41/200 [05:37<11:42,  4.42s/it]Tuning global sampler:  21%|██        | 42/200 [05:41<11:36,  4.41s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:46<11:31,  4.41s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:51<12:08,  4.67s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:55<11:51,  4.59s/it]Tuning global sampler:  23%|██▎       | 46/200 [06:00<11:37,  4.53s/it]Tuning global sampler:  24%|██▎       | 47/200 [06:04<11:25,  4.48s/it]Tuning global sampler:  24%|██▍       | 48/200 [06:09<11:16,  4.45s/it]Tuning global sampler:  24%|██▍       | 49/200 [06:13<11:09,  4.43s/it]Tuning global sampler:  25%|██▌       | 50/200 [06:17<11:02,  4.42s/it]Tuning global sampler:  26%|██▌       | 51/200 [06:22<10:56,  4.40s/it]Tuning global sampler:  26%|██▌       | 52/200 [06:26<10:50,  4.40s/it]Tuning global sampler:  26%|██▋       | 53/200 [06:30<10:45,  4.39s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:35<10:40,  4.39s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:39<10:33,  4.37s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:44<10:27,  4.36s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:48<10:31,  4.41s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:52<10:25,  4.41s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:57<10:19,  4.39s/it]Tuning global sampler:  30%|███       | 60/200 [07:01<10:14,  4.39s/it]Tuning global sampler:  30%|███       | 61/200 [07:06<10:09,  4.38s/it]Tuning global sampler:  31%|███       | 62/200 [07:10<10:04,  4.38s/it]Tuning global sampler:  32%|███▏      | 63/200 [07:14<09:59,  4.38s/it]Tuning global sampler:  32%|███▏      | 64/200 [07:20<10:33,  4.66s/it]Tuning global sampler:  32%|███▎      | 65/200 [07:24<10:17,  4.57s/it]Tuning global sampler:  33%|███▎      | 66/200 [07:28<10:02,  4.50s/it]Tuning global sampler:  34%|███▎      | 67/200 [07:33<09:51,  4.45s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:37<09:43,  4.42s/it]Tuning global sampler:  34%|███▍      | 69/200 [07:41<09:37,  4.40s/it]Tuning global sampler:  35%|███▌      | 70/200 [07:46<09:32,  4.41s/it]Tuning global sampler:  36%|███▌      | 71/200 [07:50<09:28,  4.41s/it]Tuning global sampler:  36%|███▌      | 72/200 [07:55<09:23,  4.41s/it]Tuning global sampler:  36%|███▋      | 73/200 [07:59<09:18,  4.40s/it]Tuning global sampler:  37%|███▋      | 74/200 [08:03<09:12,  4.39s/it]Tuning global sampler:  37%|███▋      | 74/200 [08:08<13:51,  6.60s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.21s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.21s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.21s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.21s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.21s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.21s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.21s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.21s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]
15:53 ninjax INFO    : Saving samples to ./Aplus/injection_6/results_training.npz
15:53 ninjax INFO    : Saving the NF
15:53 ninjax INFO    : Time taken: 562.784740447998 seconds (9.3797456741333 minutes)
15:53 ninjax INFO    : Creating the final corner plot
15:53 ninjax INFO    : Dumping the final production chains
15:53 ninjax INFO    : Chains shape is: (13, 220000)
15:53 ninjax INFO    : Key: M_c: ESS = 64724, Rhat = 1.0109418841798408
15:53 ninjax INFO    : Key: q: ESS = 33314, Rhat = 1.0191588929348994
15:53 ninjax INFO    : Key: s1_z: ESS = 77348, Rhat = 1.009355670363013
15:53 ninjax INFO    : Key: s2_z: ESS = 48563, Rhat = 1.0138192899896872
15:53 ninjax INFO    : Key: lambda_1: ESS = 64042, Rhat = 1.011678655103178
15:53 ninjax INFO    : Key: lambda_2: ESS = 88810, Rhat = 1.0090972276001675
15:53 ninjax INFO    : Key: cos_iota: ESS = 70777, Rhat = 1.0103077607198612
15:53 ninjax INFO    : Key: d_L: ESS = 61094, Rhat = 1.011521742003034
15:53 ninjax INFO    : Key: t_c: ESS = 63240, Rhat = 1.0112294889548126
15:53 ninjax INFO    : Key: phase_c: ESS = 108040, Rhat = 1.0068648216451526
15:53 ninjax INFO    : Key: psi: ESS = 110680, Rhat = 1.007573979029439
15:53 ninjax INFO    : Key: ra: ESS = 94216, Rhat = 1.0085205028812338
15:53 ninjax INFO    : Key: sin_dec: ESS = 108871, Rhat = 1.0071793157891749
15:53 ninjax INFO    : Key: eta: ESS = 33314, Rhat = 1.0191588929348994
15:53 ninjax INFO    : Key: iota: ESS = 70777, Rhat = 1.0103077607198612
15:53 ninjax INFO    : Key: dec: ESS = 108871, Rhat = 1.0071793157891749
15:53 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.853 +/- 0.083
q: 0.772 +/- 0.159
s1_z: -0.002 +/- 0.026
s2_z: -0.001 +/- 0.027
lambda_1: 1158.554 +/- 1380.456
lambda_2: 1253.654 +/- 1391.730
cos_iota: -0.285 +/- 0.670
d_L: 460.378 +/- 216.137
t_c: -0.050 +/- 0.015
phase_c: 3.109 +/- 1.788
psi: 1.786 +/- 0.869
ra: 1.562 +/- 0.740
sin_dec: 0.340 +/- 0.304
Log probability: 261.943 +/- 135.929
Local acceptance: 0.906 +/- 0.291
Global acceptance: 0.014 +/- 0.116
Max loss: 22.795, Min loss: 4.362
Production summary
==========
M_c: 1.862 +/- 0.000
q: 0.766 +/- 0.120
s1_z: -0.006 +/- 0.026
s2_z: -0.006 +/- 0.027
lambda_1: 93.780 +/- 99.353
lambda_2: 211.779 +/- 198.570
cos_iota: -0.826 +/- 0.131
d_L: 331.846 +/- 46.983
t_c: -0.051 +/- 0.000
phase_c: 3.135 +/- 1.806
psi: 1.580 +/- 0.908
ra: 1.437 +/- 0.007
sin_dec: 0.468 +/- 0.008
Log probability: 373.774 +/- 2.498
Local acceptance: 0.839 +/- 0.368
Global acceptance: 0.149 +/- 0.356
DONE

JOB STATISTICS
==============
Job ID: 10906021
Cluster: snellius
User/Group: twouters2/twouters2
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 00:10:14
CPU Efficiency: 4.95% of 03:26:40 core-walltime
Job Wall-clock time: 00:12:55
Memory Utilized: 4.44 GB
Memory Efficiency: 44.41% of 10.00 GB (10.00 GB/node)
