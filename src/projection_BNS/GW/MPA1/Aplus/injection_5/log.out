Tue Apr  1 15:41:20 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
15:41 ninjax INFO    : Checking and setting outdir
15:41 ninjax INFO    : Found generation prior file ./Aplus/injection_5/generation_prior.prior
15:41 ninjax INFO    : The outdir is set to ./Aplus/injection_5
15:41 ninjax INFO    : Loading the given config
15:41 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
15:41 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
15:41 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/MPA1/Aplus/injection_5/complete_config.json
15:41 ninjax INFO    : No seed specified. Generating a random seed: 423049
15:41 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 43659
15:41 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 399488
15:41 ninjax INFO    : Loading the priors
15:41 ninjax INFO    : Setting up the prior
15:41 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
15:41 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
15:41 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
15:41 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
15:41 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
15:41 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
15:41 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
15:41 ninjax INFO    :    dL_prior = PowerLaw(10.0, 1000.0, 2.0, naming=["d_L"])
15:41 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
15:41 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
15:41 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
15:41 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
15:41 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
15:41 ninjax INFO    : Setting up the generation prior
15:41 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.468645554845655, naming=["mass_1_source"])
15:41 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.468645554845655, naming=["mass_2_source"])
15:41 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
15:41 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
15:41 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
15:41 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
15:41 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
15:41 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
15:41 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
15:41 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
15:41 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
15:41 ninjax INFO    : Finished prior setup
15:41 ninjax INFO    : Setting the transforms
15:41 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
15:41 ninjax INFO    : transforms_str_list has 3 elements
15:41 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
15:41 ninjax INFO    : Setting the likelihood
15:41 ninjax INFO    : GW likelihood provided, setting up the GW pipe
15:41 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz
15:41 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz for BNS injections
15:41 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
15:41 ninjax INFO    : self.is_BNS_run is True
15:41 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
15:41 ninjax INFO    : GW run is an injection
15:41 ninjax INFO    : Setting up GW injection . . . 
15:41 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
15:41 ninjax INFO    : Generating new injection
15:41 ninjax INFO    : Sanity check: generated parameters:
15:41 ninjax INFO    : {'mass_1_source': 1.9200068641997237, 'mass_2_source': 1.3216688480112786, 's1_z': 0.042684035106027474, 's2_z': -0.03819071499206897, 'cos_iota': 0.9172295136243718, 'd_L': 238.67164422205818, 't_c': 0.08786189904576261, 'phase_c': 0.2672459583930837, 'psi': 0.33575338911156705, 'ra': 5.519430385204914, 'sin_dec': 0.17973179446662124}
15:41 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz . . . 
15:41 ninjax INFO    : Injected lambda_1: 66.95422407445243
15:41 ninjax INFO    : Injected lambda_2: 711.4549705229464
15:41 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.4565079289083984 is 128.0
15:41 ninjax INFO    : After transforms, the injection parameters are:
15:41 ninjax INFO    : {'mass_1_source': 1.9200068641997237, 'mass_2_source': 1.3216688480112786, 's1_z': 0.042684035106027474, 's2_z': -0.03819071499206897, 'cos_iota': 0.9172295136243718, 'd_L': 238.67164422205818, 't_c': 0.08786189904576261, 'phase_c': 0.2672459583930837, 'psi': 0.33575338911156705, 'ra': 5.519430385204914, 'sin_dec': 0.17973179446662124, 'q': 0.688366730689873, 'M_c': 1.4565079289083984, 'eta': 0.24148285445412543, 'iota': Array(0.40972724, dtype=float64, weak_type=True), 'dec': Array(0.1807138, dtype=float64, weak_type=True), 'lambda_1': 66.95422407445243, 'lambda_2': 711.4549705229464}
15:41 ninjax INFO    : The trial injection parameters are {'M_c': 1.4565079289083984, 'eta': 0.24148285445412543, 's1_z': 0.042684035106027474, 's2_z': -0.03819071499206897, 'lambda_1': 66.95422407445243, 'lambda_2': 711.4549705229464, 'd_L': 238.67164422205818, 'phase_c': 0.2672459583930837, 'iota': 0.4097272393854813, 't_c': 0.08786189904576261, 'psi': 0.33575338911156705, 'ra': 5.519430385204914, 'dec': 0.18071379906602764}
15:41 ninjax INFO    : Injecting signals . . .
15:41 ninjax INFO    : self.ifos
15:41 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
15:41 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:41 ninjax INFO    : [-8.33674227e-24-1.65195723e-23j  9.95596267e-23-6.63667042e-23j
 -8.62163753e-23+6.67955937e-23j ...
  1.27634765e-23+9.35041883e-24j  2.92530885e-23+2.86816184e-23j
  1.64178088e-23+3.55851037e-23j]
15:41 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
15:41 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:41 ninjax INFO    : [-2.02336801e-23+7.39675065e-23j  4.02242206e-23-1.30314894e-23j
 -1.21564977e-23+2.96114073e-23j ...
  1.83157996e-23+1.90811460e-23j -9.58054041e-24-1.24668780e-23j
 -1.19160937e-23-1.99242583e-23j]
15:41 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
15:41 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:41 ninjax INFO    : [-2.53028358e-23-1.22043403e-22j  1.43006122e-22+4.44730628e-23j
  4.76614304e-23-3.63061545e-23j ...
 -3.15248347e-23+2.33184208e-23j  4.30056455e-23+1.67903078e-23j
 -2.12906955e-23+2.57606351e-23j]
15:41 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
15:41 ninjax INFO    : SNR for ifo H1 is 7.408420156266664
15:41 ninjax INFO    : SNR for ifo L1 is 6.231705302190863
15:41 ninjax INFO    : SNR for ifo V1 is 12.351482476884186
15:41 ninjax INFO    : The network SNR is 15.693245666907437
15:41 ninjax INFO    : Network SNR passes threshold
15:41 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
15:41 ninjax INFO    :    mass_1_source: 1.9200068641997237
15:41 ninjax INFO    :    mass_2_source: 1.3216688480112786
15:41 ninjax INFO    :    s1_z: 0.042684035106027474
15:41 ninjax INFO    :    s2_z: -0.03819071499206897
15:41 ninjax INFO    :    cos_iota: 0.9172295136243718
15:41 ninjax INFO    :    d_L: 238.67164422205818
15:41 ninjax INFO    :    t_c: 0.08786189904576261
15:41 ninjax INFO    :    phase_c: 0.2672459583930837
15:41 ninjax INFO    :    psi: 0.33575338911156705
15:41 ninjax INFO    :    ra: 5.519430385204914
15:41 ninjax INFO    :    sin_dec: 0.17973179446662124
15:41 ninjax INFO    :    q: 0.688366730689873
15:41 ninjax INFO    :    M_c: 1.4565079289083984
15:41 ninjax INFO    :    eta: 0.24148285445412543
15:41 ninjax INFO    :    iota: 0.4097272393854813
15:41 ninjax INFO    :    dec: 0.18071379906602764
15:41 ninjax INFO    :    lambda_1: 66.95422407445243
15:41 ninjax INFO    :    lambda_2: 711.4549705229464
15:41 ninjax INFO    :    H1_SNR: 7.408420156266664
15:41 ninjax INFO    :    L1_SNR: 6.231705302190863
15:41 ninjax INFO    :    V1_SNR: 12.351482476884186
15:41 ninjax INFO    :    network_SNR: 15.693245666907437
15:41 ninjax INFO    :    epoch: 126.0
15:41 ninjax INFO    :    gmst: 2.7288901910520846
15:41 ninjax INFO    :    duration: 128.0
15:41 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
15:41 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
15:41 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
15:44 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 147.34103894233704 seconds = 2.455683982372284 minutes
15:44 ninjax INFO    : The priors are not modified after their initialization
15:44 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
15:44 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
15:44 ninjax INFO    : sample: {'M_c': Array([1.72226027, 2.39938598, 2.33978733], dtype=float64), 'q': Array([0.76633389, 0.96974987, 0.69922285], dtype=float64), 's1_z': Array([0.02515788, 0.04213772, 0.02700037], dtype=float64), 's2_z': Array([ 0.04648089, -0.0244187 , -0.04498956], dtype=float64), 'lambda_1': Array([4735.94725868, 3433.39114385, 3987.7372349 ], dtype=float64), 'lambda_2': Array([1035.2343431 , 2609.3076877 , 1657.26586346], dtype=float64), 'cos_iota': Array([-0.45636081,  0.03395436, -0.73092612], dtype=float64), 'd_L': Array([940.86859405, 710.34796593, 445.33509366], dtype=float64), 't_c': Array([-0.08379157, -0.08859334,  0.04135319], dtype=float64), 'phase_c': Array([1.62601989, 3.95132504, 1.92265818], dtype=float64), 'psi': Array([2.92968562, 1.23044903, 1.27045497], dtype=float64), 'ra': Array([3.87708407, 4.11671742, 0.02641015], dtype=float64), 'sin_dec': Array([ 0.12120426, -0.78234202,  0.07233126], dtype=float64)}
15:44 ninjax INFO    : log_prob: [ -14.10479      -3.81533228 -171.57471485]
15:44 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.9200068641997237, 'mass_2_source': 1.3216688480112786, 's1_z': 0.042684035106027474, 's2_z': -0.03819071499206897, 'cos_iota': 0.9172295136243718, 'd_L': 238.67164422205818, 't_c': 0.08786189904576261, 'phase_c': 0.2672459583930837, 'psi': 0.33575338911156705, 'ra': 5.519430385204914, 'sin_dec': 0.17973179446662124, 'q': 0.688366730689873, 'M_c': 1.4565079289083984, 'eta': 0.24148285445412543, 'iota': Array(0.40972724, dtype=float64, weak_type=True), 'dec': Array(0.1807138, dtype=float64, weak_type=True), 'lambda_1': 66.95422407445243, 'lambda_2': 711.4549705229464, 'H1_SNR': 7.408420156266664, 'L1_SNR': 6.231705302190863, 'V1_SNR': 12.351482476884186, 'network_SNR': 15.693245666907437, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
15:44 ninjax INFO    : log_prob at the injection parameters is: 92.63058194074799
15:44 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
15:44 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
15:44 ninjax INFO    : Ninjax setup complete.
15:44 ninjax INFO    : Saving output to ./Aplus/injection_5/
15:44 ninjax INFO    : Using polynomial learning rate scheduler
15:44 ninjax INFO    : The hyperparameters passed to flowMC and jim are
15:44 ninjax INFO    :    n_loop_training: 200
15:44 ninjax INFO    :    n_loop_production: 10
15:44 ninjax INFO    :    n_local_steps: 100
15:44 ninjax INFO    :    n_global_steps: 1000
15:44 ninjax INFO    :    n_epochs: 25
15:44 ninjax INFO    :    n_chains: 1000
15:44 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x1501aded7a30>
15:44 ninjax INFO    :    max_samples: 50000
15:44 ninjax INFO    :    momentum: 0.9
15:44 ninjax INFO    :    batch_size: 30000
15:44 ninjax INFO    :    use_global: True
15:44 ninjax INFO    :    keep_quantile: 0.0
15:44 ninjax INFO    :    train_thinning: 10
15:44 ninjax INFO    :    output_thinning: 50
15:44 ninjax INFO    :    n_sample_max: 10000
15:44 ninjax INFO    :    num_layers: 10
15:44 ninjax INFO    :    hidden_size: [128, 128]
15:44 ninjax INFO    :    num_bins: 8
15:44 ninjax INFO    :    save_training_chains: False
15:44 ninjax INFO    :    eps_mass_matrix: 1e-05
15:44 ninjax INFO    :    use_scheduler: True
15:44 ninjax INFO    :    use_temperature: False
15:44 ninjax INFO    :    which_temperature_schedule: exponential
15:44 ninjax INFO    :    starting_temperature: 2.0
15:44 ninjax INFO    :    stop_tempering_iteration: 75
15:44 ninjax INFO    :    stopping_criterion_global_acc: 0.1
15:44 ninjax INFO    :    stopping_criterion_loss: -inf
15:44 ninjax INFO    :    nf_model_kwargs: {}
15:44 ninjax INFO    :    local sampler arg not shown (pretty print)
15:44 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[-4.99334019e-24  1.02480666e-22 -8.40407728e-23  1.00219830e-22
 -1.34681736e-23  3.27590716e-23 -1.10698913e-23 -1.41585906e-23
  8.88310625e-24  1.17361333e-23]
[-1.72849064e-23 -6.81613723e-23  6.41480859e-23  2.15546801e-23
 -6.13620517e-23  4.23091475e-23 -9.25835110e-23 -2.53660708e-24
  5.25619963e-23 -5.50193782e-23]
Checking the noise that was generated in inject_signal ifo:
[-1.77002964e-23  4.21804206e-23 -1.09994189e-23 -8.84454988e-24
  5.09452096e-23  2.33712632e-23  2.73401274e-23 -3.95203526e-23
 -4.38839665e-23  4.07029455e-23]
[ 7.25870201e-23 -1.51503180e-23  2.69713865e-23 -2.87808773e-24
  8.99123445e-23 -4.75645444e-23 -1.59516125e-23  8.57843208e-23
  6.92778598e-23 -4.56097202e-24]
Checking the noise that was generated in inject_signal ifo:
[-2.80777854e-23  1.42529280e-22  4.95736191e-23  6.41572227e-24
  2.17163689e-23 -5.54133918e-23  1.04450719e-22  4.53097018e-23
 -1.02009745e-23 -4.84622748e-23]
[-1.15339671e-22  5.17094146e-23 -2.93141904e-23  3.17517517e-23
 -4.69230397e-24  8.98223482e-23  2.08610782e-23  3.30926876e-23
  1.04508689e-22  2.84305835e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.1119086742401123 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.9200068641997237, 'mass_2_source': 1.3216688480112786, 's1_z': 0.042684035106027474, 's2_z': -0.03819071499206897, 'cos_iota': 0.9172295136243718, 'd_L': 238.67164422205818, 't_c': 0.08786189904576261, 'phase_c': 0.2672459583930837, 'psi': 0.33575338911156705, 'ra': 5.519430385204914, 'sin_dec': 0.17973179446662124, 'q': 0.688366730689873, 'M_c': 1.4565079289083984, 'eta': 0.24148285445412543, 'iota': Array(0.40972724, dtype=float64, weak_type=True), 'dec': Array(0.1807138, dtype=float64, weak_type=True), 'lambda_1': 66.95422407445243, 'lambda_2': 711.4549705229464, 'H1_SNR': 7.408420156266664, 'L1_SNR': 6.231705302190863, 'V1_SNR': 12.351482476884186, 'network_SNR': 15.693245666907437, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5082612037658691 seconds
Time for h_sky_low and h_sky_center: 5.340228319168091 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.6417295932769775
Going to compute coefficients . . .
Time for computing coefficients: 125.9655191898346 seconds
Time for computing coefficients: 7.2238523960113525 seconds
Time for computing coefficients: 7.011544942855835 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:00<6:39:56, 120.58s/it]Tuning global sampler:   1%|          | 2/200 [02:05<2:53:04, 52.45s/it] Tuning global sampler:   2%|▏         | 3/200 [02:09<1:40:30, 30.61s/it]Tuning global sampler:   2%|▏         | 4/200 [02:14<1:06:29, 20.36s/it]Tuning global sampler:   2%|▎         | 5/200 [02:20<48:41, 14.98s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:24<37:02, 11.46s/it]Tuning global sampler:   4%|▎         | 7/200 [02:29<29:35,  9.20s/it]Tuning global sampler:   4%|▍         | 8/200 [02:33<24:45,  7.73s/it]Tuning global sampler:   4%|▍         | 9/200 [02:38<21:26,  6.74s/it]Tuning global sampler:   5%|▌         | 10/200 [02:42<19:04,  6.02s/it]Tuning global sampler:   6%|▌         | 11/200 [02:47<17:36,  5.59s/it]Tuning global sampler:   6%|▌         | 12/200 [02:51<16:33,  5.29s/it]Tuning global sampler:   6%|▋         | 13/200 [02:56<15:48,  5.07s/it]Tuning global sampler:   7%|▋         | 14/200 [03:01<15:18,  4.94s/it]Tuning global sampler:   8%|▊         | 15/200 [03:06<15:13,  4.94s/it]Tuning global sampler:   8%|▊         | 16/200 [03:10<14:52,  4.85s/it]Tuning global sampler:   8%|▊         | 17/200 [03:15<14:35,  4.79s/it]Tuning global sampler:   9%|▉         | 18/200 [03:20<14:23,  4.74s/it]Tuning global sampler:  10%|▉         | 19/200 [03:24<14:12,  4.71s/it]Tuning global sampler:  10%|█         | 20/200 [03:29<14:03,  4.69s/it]Tuning global sampler:  10%|█         | 21/200 [03:33<13:55,  4.67s/it]Tuning global sampler:  11%|█         | 22/200 [03:38<13:48,  4.65s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:43<13:42,  4.64s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:47<13:26,  4.58s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:52<13:59,  4.80s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:57<13:34,  4.68s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:01<13:14,  4.59s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:06<12:58,  4.53s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:10<12:47,  4.49s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:14<12:38,  4.46s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:19<12:30,  4.44s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:23<12:23,  4.43s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:28<12:15,  4.41s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:32<12:10,  4.40s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:36<12:05,  4.40s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:41<12:01,  4.40s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:45<11:57,  4.40s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:50<11:52,  4.40s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:54<11:47,  4.40s/it]Tuning global sampler:  20%|██        | 40/200 [04:58<11:43,  4.40s/it]Tuning global sampler:  20%|██        | 41/200 [05:03<11:38,  4.40s/it]Tuning global sampler:  21%|██        | 42/200 [05:07<11:38,  4.42s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:12<11:33,  4.42s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:16<11:26,  4.40s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:21<12:03,  4.67s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:26<11:48,  4.60s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:30<11:34,  4.54s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:34<11:23,  4.50s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:39<11:14,  4.47s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:43<11:06,  4.44s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:48<10:59,  4.43s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:52<10:53,  4.42s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:56<10:48,  4.41s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:01<10:43,  4.41s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:05<10:37,  4.39s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:10<10:32,  4.39s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:14<10:28,  4.40s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:18<10:25,  4.40s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:23<10:21,  4.41s/it]Tuning global sampler:  30%|███       | 60/200 [06:27<10:17,  4.41s/it]Tuning global sampler:  30%|███       | 61/200 [06:32<10:12,  4.41s/it]Tuning global sampler:  31%|███       | 62/200 [06:36<10:08,  4.41s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:41<10:08,  4.44s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:46<10:40,  4.71s/it]Tuning global sampler:  32%|███▎      | 65/200 [06:50<10:22,  4.61s/it]Tuning global sampler:  33%|███▎      | 66/200 [06:55<10:12,  4.57s/it]Tuning global sampler:  34%|███▎      | 67/200 [06:59<09:59,  4.51s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:04<09:50,  4.47s/it]Tuning global sampler:  34%|███▍      | 69/200 [07:08<09:42,  4.45s/it]Tuning global sampler:  35%|███▌      | 70/200 [07:12<09:36,  4.43s/it]Tuning global sampler:  36%|███▌      | 71/200 [07:17<09:30,  4.43s/it]Tuning global sampler:  36%|███▌      | 72/200 [07:21<09:25,  4.42s/it]Tuning global sampler:  36%|███▋      | 73/200 [07:26<09:20,  4.41s/it]Tuning global sampler:  37%|███▋      | 74/200 [07:30<09:15,  4.41s/it]Tuning global sampler:  38%|███▊      | 75/200 [07:34<09:11,  4.41s/it]Tuning global sampler:  38%|███▊      | 76/200 [07:40<09:48,  4.75s/it]Tuning global sampler:  38%|███▊      | 77/200 [07:44<09:29,  4.63s/it]Tuning global sampler:  39%|███▉      | 78/200 [07:49<09:15,  4.55s/it]Tuning global sampler:  40%|███▉      | 79/200 [07:53<09:05,  4.50s/it]Tuning global sampler:  40%|████      | 80/200 [07:57<08:57,  4.48s/it]Tuning global sampler:  40%|████      | 81/200 [08:02<08:50,  4.46s/it]Tuning global sampler:  41%|████      | 82/200 [08:06<08:44,  4.45s/it]Tuning global sampler:  42%|████▏     | 83/200 [08:11<08:38,  4.43s/it]Tuning global sampler:  42%|████▏     | 83/200 [08:15<11:38,  5.97s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.21s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.21s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.21s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.21s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.21s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.21s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.21s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.21s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]
15:53 ninjax INFO    : Saving samples to ./Aplus/injection_5/results_training.npz
15:53 ninjax INFO    : Saving the NF
15:53 ninjax INFO    : Time taken: 535.1064162254333 seconds (8.91844027042389 minutes)
15:53 ninjax INFO    : Creating the final corner plot
15:53 ninjax INFO    : Dumping the final production chains
15:53 ninjax INFO    : Chains shape is: (13, 220000)
15:53 ninjax INFO    : Key: M_c: ESS = 31744, Rhat = 1.0201364704523408
15:53 ninjax INFO    : Key: q: ESS = 25439, Rhat = 1.0241261367782828
15:53 ninjax INFO    : Key: s1_z: ESS = 35630, Rhat = 1.0186445107993543
15:53 ninjax INFO    : Key: s2_z: ESS = 38867, Rhat = 1.0173583507690218
15:53 ninjax INFO    : Key: lambda_1: ESS = 30276, Rhat = 1.0207965504389775
15:53 ninjax INFO    : Key: lambda_2: ESS = 37986, Rhat = 1.017757751436025
15:53 ninjax INFO    : Key: cos_iota: ESS = 17040, Rhat = 1.03555442244223
15:53 ninjax INFO    : Key: d_L: ESS = 19256, Rhat = 1.0322619412759013
15:53 ninjax INFO    : Key: t_c: ESS = 20500, Rhat = 1.0298187475159208
15:53 ninjax INFO    : Key: phase_c: ESS = 28806, Rhat = 1.0215085930547794
15:53 ninjax INFO    : Key: psi: ESS = 23763, Rhat = 1.0257793889470792
15:53 ninjax INFO    : Key: ra: ESS = 16419, Rhat = 1.0370200704548516
15:53 ninjax INFO    : Key: sin_dec: ESS = 18996, Rhat = 1.0314524159775464
15:53 ninjax INFO    : Key: eta: ESS = 25439, Rhat = 1.0241261367782828
15:53 ninjax INFO    : Key: iota: ESS = 17040, Rhat = 1.03555442244223
15:53 ninjax INFO    : Key: dec: ESS = 18996, Rhat = 1.0314524159775464
15:53 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.489 +/- 0.261
q: 0.688 +/- 0.238
s1_z: 0.005 +/- 0.027
s2_z: 0.007 +/- 0.028
lambda_1: 2387.520 +/- 1410.368
lambda_2: 2476.645 +/- 1386.870
cos_iota: 0.177 +/- 0.576
d_L: 629.449 +/- 245.559
t_c: 0.054 +/- 0.051
phase_c: 2.994 +/- 1.781
psi: 1.577 +/- 0.884
ra: 1.558 +/- 1.897
sin_dec: -0.484 +/- 0.524
Log probability: 17.113 +/- 38.606
Local acceptance: 0.960 +/- 0.195
Global acceptance: 0.021 +/- 0.144
Max loss: 22.836, Min loss: 7.742
Production summary
==========
M_c: 1.457 +/- 0.000
q: 0.846 +/- 0.101
s1_z: 0.013 +/- 0.024
s2_z: 0.008 +/- 0.026
lambda_1: 1722.835 +/- 1193.858
lambda_2: 2150.065 +/- 1382.640
cos_iota: 0.707 +/- 0.329
d_L: 308.980 +/- 68.504
t_c: 0.082 +/- 0.002
phase_c: 3.152 +/- 1.805
psi: 1.630 +/- 0.900
ra: 0.297 +/- 0.101
sin_dec: -0.811 +/- 0.009
Log probability: 70.335 +/- 2.211
Local acceptance: 0.875 +/- 0.331
Global acceptance: 0.115 +/- 0.319
DONE

JOB STATISTICS
==============
Job ID: 10906020
Cluster: snellius
User/Group: twouters2/twouters2
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 00:10:48
CPU Efficiency: 5.44% of 03:18:40 core-walltime
Job Wall-clock time: 00:12:25
Memory Utilized: 4.44 GB
Memory Efficiency: 44.38% of 10.00 GB (10.00 GB/node)
