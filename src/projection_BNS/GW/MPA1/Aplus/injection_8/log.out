Tue Apr  1 15:41:23 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
15:41 ninjax INFO    : Checking and setting outdir
15:41 ninjax INFO    : Found generation prior file ./Aplus/injection_8/generation_prior.prior
15:41 ninjax INFO    : The outdir is set to ./Aplus/injection_8
15:41 ninjax INFO    : Loading the given config
15:41 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
15:41 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
15:41 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/MPA1/Aplus/injection_8/complete_config.json
15:41 ninjax INFO    : No seed specified. Generating a random seed: 292977
15:41 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 629161
15:41 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 855861
15:41 ninjax INFO    : Loading the priors
15:41 ninjax INFO    : Setting up the prior
15:41 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
15:41 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
15:41 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
15:41 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
15:41 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
15:41 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
15:41 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
15:41 ninjax INFO    :    dL_prior = PowerLaw(10.0, 1000.0, 2.0, naming=["d_L"])
15:41 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
15:41 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
15:41 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
15:41 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
15:41 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
15:41 ninjax INFO    : Setting up the generation prior
15:41 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.468645554845655, naming=["mass_1_source"])
15:41 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.468645554845655, naming=["mass_2_source"])
15:41 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
15:41 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
15:41 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
15:41 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
15:41 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
15:41 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
15:41 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
15:41 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
15:41 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
15:41 ninjax INFO    : Finished prior setup
15:41 ninjax INFO    : Setting the transforms
15:41 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
15:41 ninjax INFO    : transforms_str_list has 3 elements
15:41 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
15:41 ninjax INFO    : Setting the likelihood
15:41 ninjax INFO    : GW likelihood provided, setting up the GW pipe
15:41 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz
15:41 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz for BNS injections
15:41 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
15:41 ninjax INFO    : self.is_BNS_run is True
15:41 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
15:41 ninjax INFO    : GW run is an injection
15:41 ninjax INFO    : Setting up GW injection . . . 
15:41 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
15:41 ninjax INFO    : Generating new injection
15:41 ninjax INFO    : Sanity check: generated parameters:
15:41 ninjax INFO    : {'mass_1_source': 1.7342631468405836, 'mass_2_source': 1.5298389564022914, 's1_z': -0.0460688675477315, 's2_z': 0.0030417485110079343, 'cos_iota': -0.2920500296945514, 'd_L': 390.16447024308064, 't_c': 0.08956706345575977, 'phase_c': 3.9070894946164723, 'psi': 1.5981963363222171, 'ra': 5.3494694777562914, 'sin_dec': -0.96240477583587}
15:41 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz . . . 
15:41 ninjax INFO    : Injected lambda_1: 136.8830555962258
15:41 ninjax INFO    : Injected lambda_2: 303.3160335129208
15:41 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.5423981224520484 is 128.0
15:41 ninjax INFO    : After transforms, the injection parameters are:
15:41 ninjax INFO    : {'mass_1_source': 1.7342631468405836, 'mass_2_source': 1.5298389564022914, 's1_z': -0.0460688675477315, 's2_z': 0.0030417485110079343, 'cos_iota': -0.2920500296945514, 'd_L': 390.16447024308064, 't_c': 0.08956706345575977, 'phase_c': 3.9070894946164723, 'psi': 1.5981963363222171, 'ra': 5.3494694777562914, 'sin_dec': -0.96240477583587, 'q': 0.8821261982008298, 'M_c': 1.5423981224520484, 'eta': 0.2490194333664282, 'iota': Array(1.86716594, dtype=float64, weak_type=True), 'dec': Array(-1.29572113, dtype=float64, weak_type=True), 'lambda_1': 136.8830555962258, 'lambda_2': 303.3160335129208}
15:41 ninjax INFO    : The trial injection parameters are {'M_c': 1.5423981224520484, 'eta': 0.2490194333664282, 's1_z': -0.0460688675477315, 's2_z': 0.0030417485110079343, 'lambda_1': 136.8830555962258, 'lambda_2': 303.3160335129208, 'd_L': 390.16447024308064, 'phase_c': 3.9070894946164723, 'iota': 1.8671659439967867, 't_c': 0.08956706345575977, 'psi': 1.5981963363222171, 'ra': 5.3494694777562914, 'dec': -1.295721131428398}
15:41 ninjax INFO    : Injecting signals . . .
15:41 ninjax INFO    : self.ifos
15:41 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
15:41 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:41 ninjax INFO    : [ 3.75771418e-23-8.68258560e-25j  2.66617395e-23-6.74488351e-24j
  2.07081467e-23+2.42658701e-23j ...
 -4.90131797e-24+2.20586597e-23j -3.63234999e-24-2.03776205e-23j
  1.95953722e-23-6.60803471e-24j]
15:41 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
15:41 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:41 ninjax INFO    : [ 6.86012086e-23+2.25383960e-23j  2.77083269e-23-3.47412451e-23j
  1.55131148e-24-3.34539351e-24j ...
 -8.84843363e-24-3.92334192e-24j  3.06635838e-23-8.25070831e-24j
 -2.68832960e-24-2.05076898e-23j]
15:41 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
15:41 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:41 ninjax INFO    : [ 1.33624862e-23-2.36556175e-23j -1.55496437e-23+5.75041092e-23j
 -4.75485813e-23-4.12600144e-23j ...
 -2.10050580e-23+2.30327014e-23j -1.40033493e-23+5.30822513e-24j
  8.17390465e-24+2.70196938e-23j]
15:41 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
15:41 ninjax INFO    : SNR for ifo H1 is 3.9108542052731954
15:41 ninjax INFO    : SNR for ifo L1 is 3.5446559099431334
15:41 ninjax INFO    : SNR for ifo V1 is 5.869517337845864
15:41 ninjax INFO    : The network SNR is 7.893706348355696
15:41 ninjax INFO    : The network SNR does not pass the threshold, trying again
15:41 ninjax INFO    : Generating new injection
15:41 ninjax INFO    : Sanity check: generated parameters:
15:41 ninjax INFO    : {'mass_1_source': 2.434868584052939, 'mass_2_source': 1.0023745614041795, 's1_z': -0.0062486994865692536, 's2_z': 0.0493262931038073, 'cos_iota': -0.04198084380021294, 'd_L': 238.49734807652723, 't_c': 0.004537024556337421, 'phase_c': 2.6551407279688575, 'psi': 2.3391517983437793, 'ra': 3.4540039188798946, 'sin_dec': -0.01636471424782915}
15:41 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz . . . 
15:41 ninjax INFO    : Injected lambda_1: 5.5802837762785575
15:41 ninjax INFO    : Injected lambda_2: 3105.159964637758
15:41 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.4062306619164897 is 128.0
15:41 ninjax INFO    : After transforms, the injection parameters are:
15:41 ninjax INFO    : {'mass_1_source': 2.434868584052939, 'mass_2_source': 1.0023745614041795, 's1_z': -0.0062486994865692536, 's2_z': 0.0493262931038073, 'cos_iota': -0.04198084380021294, 'd_L': 238.49734807652723, 't_c': 0.004537024556337421, 'phase_c': 2.6551407279688575, 'psi': 2.3391517983437793, 'ra': 3.4540039188798946, 'sin_dec': -0.01636471424782915, 'q': 0.411675015222253, 'M_c': 1.4062306619164897, 'eta': 0.2065784685709797, 'iota': Array(1.61278951, dtype=float64, weak_type=True), 'dec': Array(-0.01636544, dtype=float64, weak_type=True), 'lambda_1': 5.5802837762785575, 'lambda_2': 3105.159964637758}
15:41 ninjax INFO    : The trial injection parameters are {'M_c': 1.4062306619164897, 'eta': 0.2065784685709797, 's1_z': -0.0062486994865692536, 's2_z': 0.0493262931038073, 'lambda_1': 5.5802837762785575, 'lambda_2': 3105.159964637758, 'd_L': 238.49734807652723, 'phase_c': 2.6551407279688575, 'iota': 1.6127895114968274, 't_c': 0.004537024556337421, 'psi': 2.3391517983437793, 'ra': 3.4540039188798946, 'dec': -0.016365444758175397}
15:41 ninjax INFO    : Injecting signals . . .
15:41 ninjax INFO    : self.ifos
15:41 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
15:41 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:41 ninjax INFO    : [ 3.17684422e-23+6.38559873e-25j  2.22250328e-23-4.71460498e-24j
  1.76487572e-23+2.55786043e-23j ...
 -4.90131797e-24+2.20586597e-23j -3.63234999e-24-2.03776205e-23j
  1.95953722e-23-6.60803471e-24j]
15:41 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
15:41 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:41 ninjax INFO    : [ 7.42473014e-23+2.31551429e-23j  3.29687127e-23-3.53492792e-23j
  5.54909099e-24-4.46107295e-24j ...
 -8.84843363e-24-3.92334192e-24j  3.06635838e-23-8.25070831e-24j
 -2.68832960e-24-2.05076898e-23j]
15:41 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
15:41 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:41 ninjax INFO    : [ 1.54573168e-23-2.60684406e-23j -1.51590911e-23+5.75181529e-23j
 -4.64898986e-23-3.83637637e-23j ...
 -2.10050580e-23+2.30327014e-23j -1.40033493e-23+5.30822513e-24j
  8.17390465e-24+2.70196938e-23j]
15:41 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
15:41 ninjax INFO    : SNR for ifo H1 is 9.567968004578654
15:41 ninjax INFO    : SNR for ifo L1 is 8.687750055568936
15:41 ninjax INFO    : SNR for ifo V1 is 6.510593672731631
15:41 ninjax INFO    : The network SNR is 14.471034611806166
15:41 ninjax INFO    : Network SNR passes threshold
15:41 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
15:41 ninjax INFO    :    mass_1_source: 2.434868584052939
15:41 ninjax INFO    :    mass_2_source: 1.0023745614041795
15:41 ninjax INFO    :    s1_z: -0.0062486994865692536
15:41 ninjax INFO    :    s2_z: 0.0493262931038073
15:41 ninjax INFO    :    cos_iota: -0.04198084380021294
15:41 ninjax INFO    :    d_L: 238.49734807652723
15:41 ninjax INFO    :    t_c: 0.004537024556337421
15:41 ninjax INFO    :    phase_c: 2.6551407279688575
15:41 ninjax INFO    :    psi: 2.3391517983437793
15:41 ninjax INFO    :    ra: 3.4540039188798946
15:41 ninjax INFO    :    sin_dec: -0.01636471424782915
15:41 ninjax INFO    :    q: 0.411675015222253
15:41 ninjax INFO    :    M_c: 1.4062306619164897
15:41 ninjax INFO    :    eta: 0.2065784685709797
15:41 ninjax INFO    :    iota: 1.6127895114968274
15:41 ninjax INFO    :    dec: -0.016365444758175397
15:41 ninjax INFO    :    lambda_1: 5.5802837762785575
15:41 ninjax INFO    :    lambda_2: 3105.159964637758
15:41 ninjax INFO    :    H1_SNR: 9.567968004578654
15:41 ninjax INFO    :    L1_SNR: 8.687750055568936
15:41 ninjax INFO    :    V1_SNR: 6.510593672731631
15:41 ninjax INFO    :    network_SNR: 14.471034611806166
15:41 ninjax INFO    :    epoch: 126.0
15:41 ninjax INFO    :    gmst: 2.7288901910520846
15:41 ninjax INFO    :    duration: 128.0
15:41 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
15:41 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
15:41 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
15:44 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 166.34323620796204 seconds = 2.772387270132701 minutes
15:44 ninjax INFO    : The priors are not modified after their initialization
15:44 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
15:44 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
15:44 ninjax INFO    : sample: {'M_c': Array([1.60767254, 1.18293607, 1.01595332], dtype=float64), 'q': Array([0.72944749, 0.34220716, 0.89551977], dtype=float64), 's1_z': Array([0.01347636, 0.04893301, 0.02430163], dtype=float64), 's2_z': Array([0.03130904, 0.0419274 , 0.01024003], dtype=float64), 'lambda_1': Array([2488.88656211, 1039.17631098,  916.66038334], dtype=float64), 'lambda_2': Array([2854.26687863,  596.62360642,  134.90627734], dtype=float64), 'cos_iota': Array([0.24803971, 0.4759006 , 0.73005666], dtype=float64), 'd_L': Array([907.6833641 , 886.24866042, 946.35856816], dtype=float64), 't_c': Array([ 0.09504723, -0.01892228, -0.01585251], dtype=float64), 'phase_c': Array([1.65400242, 5.0537998 , 5.26101194], dtype=float64), 'psi': Array([1.36653012, 2.38830539, 2.91572445], dtype=float64), 'ra': Array([5.17034916, 2.73338124, 6.26783979], dtype=float64), 'sin_dec': Array([0.34921003, 0.54598818, 0.67168356], dtype=float64)}
15:44 ninjax INFO    : log_prob: [ -1.15444388 -11.06504651  -7.70645831]
15:44 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 2.434868584052939, 'mass_2_source': 1.0023745614041795, 's1_z': -0.0062486994865692536, 's2_z': 0.0493262931038073, 'cos_iota': -0.04198084380021294, 'd_L': 238.49734807652723, 't_c': 0.004537024556337421, 'phase_c': 2.6551407279688575, 'psi': 2.3391517983437793, 'ra': 3.4540039188798946, 'sin_dec': -0.01636471424782915, 'q': 0.411675015222253, 'M_c': 1.4062306619164897, 'eta': 0.2065784685709797, 'iota': Array(1.61278951, dtype=float64, weak_type=True), 'dec': Array(-0.01636544, dtype=float64, weak_type=True), 'lambda_1': 5.5802837762785575, 'lambda_2': 3105.159964637758, 'H1_SNR': 9.567968004578654, 'L1_SNR': 8.687750055568936, 'V1_SNR': 6.510593672731631, 'network_SNR': 14.471034611806166, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
15:44 ninjax INFO    : log_prob at the injection parameters is: 89.30022815126014
15:44 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
15:44 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
15:44 ninjax INFO    : Ninjax setup complete.
15:44 ninjax INFO    : Saving output to ./Aplus/injection_8/
15:44 ninjax INFO    : Using polynomial learning rate scheduler
15:44 ninjax INFO    : The hyperparameters passed to flowMC and jim are
15:44 ninjax INFO    :    n_loop_training: 200
15:44 ninjax INFO    :    n_loop_production: 10
15:44 ninjax INFO    :    n_local_steps: 100
15:44 ninjax INFO    :    n_global_steps: 1000
15:44 ninjax INFO    :    n_epochs: 25
15:44 ninjax INFO    :    n_chains: 1000
15:44 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x1460e88c8e50>
15:44 ninjax INFO    :    max_samples: 50000
15:44 ninjax INFO    :    momentum: 0.9
15:44 ninjax INFO    :    batch_size: 30000
15:44 ninjax INFO    :    use_global: True
15:44 ninjax INFO    :    keep_quantile: 0.0
15:44 ninjax INFO    :    train_thinning: 10
15:44 ninjax INFO    :    output_thinning: 50
15:44 ninjax INFO    :    n_sample_max: 10000
15:44 ninjax INFO    :    num_layers: 10
15:44 ninjax INFO    :    hidden_size: [128, 128]
15:44 ninjax INFO    :    num_bins: 8
15:44 ninjax INFO    :    save_training_chains: False
15:44 ninjax INFO    :    eps_mass_matrix: 1e-05
15:44 ninjax INFO    :    use_scheduler: True
15:44 ninjax INFO    :    use_temperature: False
15:44 ninjax INFO    :    which_temperature_schedule: exponential
15:44 ninjax INFO    :    starting_temperature: 2.0
15:44 ninjax INFO    :    stop_tempering_iteration: 75
15:44 ninjax INFO    :    stopping_criterion_global_acc: 0.1
15:44 ninjax INFO    :    stopping_criterion_loss: -inf
15:44 ninjax INFO    :    nf_model_kwargs: {}
15:44 ninjax INFO    :    local sampler arg not shown (pretty print)
15:44 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[ 3.62054156e-23  2.66662746e-23  2.20910178e-23 -6.01244725e-23
  6.99786209e-23 -4.06947068e-23 -3.69810798e-23 -1.51465508e-23
  3.97413665e-23 -3.78709702e-23]
[ 3.16260095e-25 -4.93334036e-24  2.54347896e-23 -5.40127581e-23
  8.77025823e-23  3.05765576e-24  2.18754323e-23 -1.52529421e-23
  3.14356122e-24 -9.27967844e-23]
Checking the noise that was generated in inject_signal ifo:
[ 7.02243461e-23  2.89572094e-23  1.54774682e-24  1.28708134e-23
 -1.80898800e-22 -4.05799141e-23 -6.74259828e-23 -2.14746475e-23
  6.51984564e-23 -5.30366524e-23]
[ 2.27909889e-23 -3.58071720e-23 -4.98655986e-24 -5.63878089e-23
  8.58122492e-23 -4.55164438e-23 -2.13940244e-23  3.31737064e-23
 -1.16946510e-22  5.57581500e-23]
Checking the noise that was generated in inject_signal ifo:
[ 1.16662100e-23 -1.89327376e-23 -5.02487496e-23  2.14952504e-23
 -1.40129898e-23  6.74201459e-24  1.21308442e-23 -2.05846092e-23
  1.65114080e-23 -2.60378530e-23]
[-2.66604257e-23  5.68332906e-23 -3.91167638e-23 -2.37300766e-23
 -7.29852895e-23 -3.16893747e-24  1.22957630e-24  1.25417618e-22
  7.74160382e-23  2.34576563e-23]
Checking the noise that was generated in inject_signal ifo:
[ 3.62054156e-23  2.66662746e-23  2.20910178e-23 -6.01244725e-23
  6.99786209e-23 -4.06947068e-23 -3.69810798e-23 -1.51465508e-23
  3.97413665e-23 -3.78709702e-23]
[ 3.16260095e-25 -4.93334036e-24  2.54347896e-23 -5.40127581e-23
  8.77025823e-23  3.05765576e-24  2.18754323e-23 -1.52529421e-23
  3.14356122e-24 -9.27967844e-23]
Checking the noise that was generated in inject_signal ifo:
[ 7.02243461e-23  2.89572094e-23  1.54774682e-24  1.28708134e-23
 -1.80898800e-22 -4.05799141e-23 -6.74259828e-23 -2.14746475e-23
  6.51984564e-23 -5.30366524e-23]
[ 2.27909889e-23 -3.58071720e-23 -4.98655986e-24 -5.63878089e-23
  8.58122492e-23 -4.55164438e-23 -2.13940244e-23  3.31737064e-23
 -1.16946510e-22  5.57581500e-23]
Checking the noise that was generated in inject_signal ifo:
[ 1.16662100e-23 -1.89327376e-23 -5.02487496e-23  2.14952504e-23
 -1.40129898e-23  6.74201459e-24  1.21308442e-23 -2.05846092e-23
  1.65114080e-23 -2.60378530e-23]
[-2.66604257e-23  5.68332906e-23 -3.91167638e-23 -2.37300766e-23
 -7.29852895e-23 -3.16893747e-24  1.22957630e-24  1.25417618e-22
  7.74160382e-23  2.34576563e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.10949945449829102 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 2.434868584052939, 'mass_2_source': 1.0023745614041795, 's1_z': -0.0062486994865692536, 's2_z': 0.0493262931038073, 'cos_iota': -0.04198084380021294, 'd_L': 238.49734807652723, 't_c': 0.004537024556337421, 'phase_c': 2.6551407279688575, 'psi': 2.3391517983437793, 'ra': 3.4540039188798946, 'sin_dec': -0.01636471424782915, 'q': 0.411675015222253, 'M_c': 1.4062306619164897, 'eta': 0.2065784685709797, 'iota': Array(1.61278951, dtype=float64, weak_type=True), 'dec': Array(-0.01636544, dtype=float64, weak_type=True), 'lambda_1': 5.5802837762785575, 'lambda_2': 3105.159964637758, 'H1_SNR': 9.567968004578654, 'L1_SNR': 8.687750055568936, 'V1_SNR': 6.510593672731631, 'network_SNR': 14.471034611806166, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5198311805725098 seconds
Time for h_sky_low and h_sky_center: 19.860121726989746 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.6994431018829346
Going to compute coefficients . . .
Time for computing coefficients: 130.62805008888245 seconds
Time for computing coefficients: 7.204960346221924 seconds
Time for computing coefficients: 6.774702072143555 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:46<9:11:11, 166.19s/it]Tuning global sampler:   1%|          | 2/200 [03:03<4:19:58, 78.78s/it] Tuning global sampler:   2%|▏         | 3/200 [03:27<2:55:32, 53.46s/it]Tuning global sampler:   2%|▏         | 4/200 [03:43<2:06:16, 38.66s/it]Tuning global sampler:   2%|▎         | 5/200 [03:48<1:26:45, 26.70s/it]Tuning global sampler:   3%|▎         | 6/200 [04:04<1:14:37, 23.08s/it]Tuning global sampler:   4%|▎         | 7/200 [04:22<1:08:18, 21.23s/it]Tuning global sampler:   4%|▍         | 8/200 [04:41<1:06:29, 20.78s/it]Tuning global sampler:   4%|▍         | 9/200 [04:56<1:00:14, 18.92s/it]Tuning global sampler:   5%|▌         | 10/200 [05:01<45:47, 14.46s/it] Tuning global sampler:   6%|▌         | 11/200 [05:05<36:05, 11.46s/it]Tuning global sampler:   6%|▌         | 12/200 [05:10<29:23,  9.38s/it]Tuning global sampler:   6%|▋         | 13/200 [05:15<24:43,  7.93s/it]Tuning global sampler:   7%|▋         | 14/200 [05:19<21:32,  6.95s/it]Tuning global sampler:   8%|▊         | 15/200 [05:24<19:18,  6.26s/it]Tuning global sampler:   8%|▊         | 16/200 [05:29<17:43,  5.78s/it]Tuning global sampler:   8%|▊         | 17/200 [05:33<16:36,  5.45s/it]Tuning global sampler:   9%|▉         | 18/200 [05:38<15:48,  5.21s/it]Tuning global sampler:  10%|▉         | 19/200 [05:43<15:13,  5.05s/it]Tuning global sampler:  10%|█         | 20/200 [05:47<14:47,  4.93s/it]Tuning global sampler:  10%|█         | 21/200 [05:52<14:28,  4.85s/it]Tuning global sampler:  11%|█         | 22/200 [05:57<14:11,  4.78s/it]Tuning global sampler:  12%|█▏        | 23/200 [06:02<14:48,  5.02s/it]Tuning global sampler:  12%|█▏        | 24/200 [06:07<14:14,  4.85s/it]Tuning global sampler:  12%|█▎        | 25/200 [06:11<13:46,  4.72s/it]Tuning global sampler:  13%|█▎        | 26/200 [06:15<13:25,  4.63s/it]Tuning global sampler:  14%|█▎        | 27/200 [06:20<13:10,  4.57s/it]Tuning global sampler:  14%|█▍        | 28/200 [06:24<12:57,  4.52s/it]Tuning global sampler:  14%|█▍        | 29/200 [06:29<12:48,  4.49s/it]Tuning global sampler:  15%|█▌        | 30/200 [06:33<12:41,  4.48s/it]Tuning global sampler:  16%|█▌        | 31/200 [06:38<12:33,  4.46s/it]Tuning global sampler:  16%|█▌        | 32/200 [06:42<12:28,  4.46s/it]Tuning global sampler:  16%|█▋        | 33/200 [06:46<12:20,  4.43s/it]Tuning global sampler:  17%|█▋        | 34/200 [06:51<12:14,  4.42s/it]Tuning global sampler:  18%|█▊        | 35/200 [06:55<12:10,  4.43s/it]Tuning global sampler:  18%|█▊        | 36/200 [07:00<12:05,  4.42s/it]Tuning global sampler:  18%|█▊        | 37/200 [07:04<12:00,  4.42s/it]Tuning global sampler:  19%|█▉        | 38/200 [07:25<25:01,  9.27s/it]Tuning global sampler:  20%|█▉        | 39/200 [07:50<37:29, 13.97s/it]Tuning global sampler:  20%|██        | 40/200 [08:10<42:42, 16.02s/it]Tuning global sampler:  20%|██        | 41/200 [08:21<37:49, 14.28s/it]Tuning global sampler:  21%|██        | 42/200 [08:42<43:13, 16.42s/it]Tuning global sampler:  22%|██▏       | 43/200 [08:47<34:16, 13.10s/it]Tuning global sampler:  22%|██▏       | 44/200 [08:52<27:15, 10.48s/it]Tuning global sampler:  22%|██▎       | 45/200 [08:56<22:20,  8.65s/it]Tuning global sampler:  23%|██▎       | 46/200 [09:00<18:56,  7.38s/it]Tuning global sampler:  24%|██▎       | 47/200 [09:05<16:32,  6.49s/it]Tuning global sampler:  24%|██▍       | 48/200 [09:09<14:51,  5.86s/it]Tuning global sampler:  24%|██▍       | 49/200 [09:14<13:39,  5.43s/it]Tuning global sampler:  25%|██▌       | 50/200 [09:18<12:48,  5.12s/it]Tuning global sampler:  26%|██▌       | 51/200 [09:23<12:11,  4.91s/it]Tuning global sampler:  26%|██▌       | 52/200 [09:27<11:44,  4.76s/it]Tuning global sampler:  26%|██▋       | 53/200 [09:31<11:24,  4.65s/it]Tuning global sampler:  27%|██▋       | 54/200 [09:36<11:16,  4.63s/it]Tuning global sampler:  28%|██▊       | 55/200 [09:40<11:00,  4.55s/it]Tuning global sampler:  28%|██▊       | 56/200 [09:45<10:47,  4.50s/it]Tuning global sampler:  28%|██▊       | 57/200 [09:49<10:39,  4.47s/it]Tuning global sampler:  29%|██▉       | 58/200 [10:01<15:33,  6.57s/it]Tuning global sampler:  30%|██▉       | 59/200 [10:05<13:54,  5.92s/it]Tuning global sampler:  30%|███       | 60/200 [10:09<12:45,  5.47s/it]Tuning global sampler:  30%|███       | 61/200 [10:14<11:55,  5.15s/it]Tuning global sampler:  31%|███       | 62/200 [10:18<11:22,  4.95s/it]Tuning global sampler:  32%|███▏      | 63/200 [10:24<12:00,  5.26s/it]Tuning global sampler:  32%|███▏      | 64/200 [10:29<11:20,  5.00s/it]Tuning global sampler:  32%|███▎      | 65/200 [10:33<10:51,  4.82s/it]Tuning global sampler:  33%|███▎      | 66/200 [10:37<10:27,  4.68s/it]Tuning global sampler:  34%|███▎      | 67/200 [10:42<10:10,  4.59s/it]Tuning global sampler:  34%|███▍      | 68/200 [10:46<09:58,  4.54s/it]Tuning global sampler:  34%|███▍      | 69/200 [10:51<09:49,  4.50s/it]Tuning global sampler:  35%|███▌      | 70/200 [10:55<09:41,  4.47s/it]Tuning global sampler:  36%|███▌      | 71/200 [10:59<09:35,  4.46s/it]Tuning global sampler:  36%|███▌      | 72/200 [11:04<09:29,  4.45s/it]Tuning global sampler:  36%|███▋      | 73/200 [11:08<09:22,  4.43s/it]Tuning global sampler:  37%|███▋      | 74/200 [11:13<09:17,  4.42s/it]Tuning global sampler:  38%|███▊      | 75/200 [11:17<09:12,  4.42s/it]Tuning global sampler:  38%|███▊      | 76/200 [11:21<09:07,  4.42s/it]Tuning global sampler:  38%|███▊      | 77/200 [11:26<09:01,  4.41s/it]Tuning global sampler:  39%|███▉      | 78/200 [11:30<08:55,  4.39s/it]Tuning global sampler:  40%|███▉      | 79/200 [11:35<08:51,  4.39s/it]Tuning global sampler:  40%|████      | 80/200 [11:39<08:47,  4.40s/it]Tuning global sampler:  40%|████      | 81/200 [11:43<08:44,  4.41s/it]Tuning global sampler:  41%|████      | 82/200 [11:48<08:40,  4.41s/it]Tuning global sampler:  42%|████▏     | 83/200 [11:52<08:35,  4.41s/it]Tuning global sampler:  42%|████▏     | 84/200 [11:58<09:05,  4.70s/it]Tuning global sampler:  42%|████▎     | 85/200 [12:02<08:50,  4.61s/it]Tuning global sampler:  43%|████▎     | 86/200 [12:06<08:38,  4.55s/it]Tuning global sampler:  44%|████▎     | 87/200 [12:11<08:29,  4.51s/it]Tuning global sampler:  44%|████▍     | 88/200 [12:15<08:20,  4.47s/it]Tuning global sampler:  44%|████▍     | 89/200 [12:20<08:13,  4.44s/it]Tuning global sampler:  45%|████▌     | 90/200 [12:24<08:19,  4.54s/it]Tuning global sampler:  46%|████▌     | 91/200 [12:29<08:10,  4.50s/it]Tuning global sampler:  46%|████▌     | 92/200 [12:33<08:03,  4.48s/it]Tuning global sampler:  46%|████▋     | 93/200 [12:38<07:58,  4.47s/it]Tuning global sampler:  47%|████▋     | 94/200 [12:42<07:52,  4.46s/it]Tuning global sampler:  48%|████▊     | 95/200 [12:47<07:46,  4.45s/it]Tuning global sampler:  48%|████▊     | 95/200 [12:51<14:12,  8.12s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.22s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.22s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.22s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.22s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.22s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.22s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.22s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.22s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]
15:58 ninjax INFO    : Saving samples to ./Aplus/injection_8/results_training.npz
15:58 ninjax INFO    : Saving the NF
15:58 ninjax INFO    : Time taken: 824.6008102893829 seconds (13.743346838156382 minutes)
15:58 ninjax INFO    : Creating the final corner plot
15:58 ninjax INFO    : Dumping the final production chains
15:58 ninjax INFO    : Chains shape is: (13, 220000)
15:58 ninjax INFO    : Key: M_c: ESS = 19883, Rhat = 1.033287802981369
15:58 ninjax INFO    : Key: q: ESS = 21427, Rhat = 1.0295347327634505
15:58 ninjax INFO    : Key: s1_z: ESS = 17408, Rhat = 1.0373062830452913
15:58 ninjax INFO    : Key: s2_z: ESS = 17720, Rhat = 1.0343979537132593
15:58 ninjax INFO    : Key: lambda_1: ESS = 22872, Rhat = 1.027395894761378
15:58 ninjax INFO    : Key: lambda_2: ESS = 20089, Rhat = 1.0310712176960117
15:58 ninjax INFO    : Key: cos_iota: ESS = 16067, Rhat = 1.039829403187645
15:58 ninjax INFO    : Key: d_L: ESS = 19122, Rhat = 1.0317547312838526
15:58 ninjax INFO    : Key: t_c: ESS = 21620, Rhat = 1.0293273874890934
15:58 ninjax INFO    : Key: phase_c: ESS = 18419, Rhat = 1.0340202967674503
15:58 ninjax INFO    : Key: psi: ESS = 27865, Rhat = 1.0790843468915008
15:58 ninjax INFO    : Key: ra: ESS = 21662, Rhat = 1.0288527915618126
15:58 ninjax INFO    : Key: sin_dec: ESS = 20774, Rhat = 1.029872287915883
15:58 ninjax INFO    : Key: eta: ESS = 21427, Rhat = 1.0295347327634505
15:58 ninjax INFO    : Key: iota: ESS = 16067, Rhat = 1.039829403187645
15:58 ninjax INFO    : Key: dec: ESS = 20774, Rhat = 1.0298796504980055
15:58 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.448 +/- 0.233
q: 0.539 +/- 0.192
s1_z: -0.005 +/- 0.028
s2_z: -0.004 +/- 0.029
lambda_1: 2017.082 +/- 1513.302
lambda_2: 2469.656 +/- 1419.281
cos_iota: 0.026 +/- 0.461
d_L: 628.434 +/- 251.325
t_c: 0.007 +/- 0.032
phase_c: 3.167 +/- 1.804
psi: 1.522 +/- 0.866
ra: 3.348 +/- 1.120
sin_dec: -0.079 +/- 0.402
Log probability: 26.197 +/- 43.272
Local acceptance: 0.925 +/- 0.263
Global acceptance: 0.020 +/- 0.141
Max loss: 22.761, Min loss: 7.489
Production summary
==========
M_c: 1.406 +/- 0.000
q: 0.459 +/- 0.044
s1_z: -0.010 +/- 0.028
s2_z: -0.005 +/- 0.029
lambda_1: 462.920 +/- 368.302
lambda_2: 2320.390 +/- 1420.470
cos_iota: 0.137 +/- 0.662
d_L: 360.985 +/- 99.692
t_c: 0.005 +/- 0.001
phase_c: 3.247 +/- 1.813
psi: 1.549 +/- 0.861
ra: 3.491 +/- 0.041
sin_dec: -0.050 +/- 0.049
Log probability: 84.501 +/- 2.310
Local acceptance: 0.785 +/- 0.411
Global acceptance: 0.110 +/- 0.313
DONE

JOB STATISTICS
==============
Job ID: 10906023
Cluster: snellius
User/Group: twouters2/twouters2
State: RUNNING
Nodes: 1
Cores per node: 16
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 04:43:12 core-walltime
Job Wall-clock time: 00:17:42
Memory Utilized: 0.00 MB
Memory Efficiency: 0.00% of 10.00 GB (10.00 GB/node)
WARNING: Efficiency statistics can only be obtained after the job has ended as seff tool is based on the accounting database data.
