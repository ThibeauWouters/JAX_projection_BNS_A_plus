Tue Apr  1 15:41:26 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
15:41 ninjax INFO    : Checking and setting outdir
15:41 ninjax INFO    : Found generation prior file ./Aplus/injection_23/generation_prior.prior
15:41 ninjax INFO    : The outdir is set to ./Aplus/injection_23
15:41 ninjax INFO    : Loading the given config
15:41 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
15:41 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
15:41 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/MPA1/Aplus/injection_23/complete_config.json
15:41 ninjax INFO    : No seed specified. Generating a random seed: 255497
15:41 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 218334
15:41 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 798954
15:41 ninjax INFO    : Loading the priors
15:41 ninjax INFO    : Setting up the prior
15:41 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
15:41 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
15:41 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
15:41 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
15:41 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
15:41 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
15:41 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
15:41 ninjax INFO    :    dL_prior = PowerLaw(10.0, 1000.0, 2.0, naming=["d_L"])
15:41 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
15:41 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
15:41 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
15:41 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
15:41 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
15:41 ninjax INFO    : Setting up the generation prior
15:41 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.468645554845655, naming=["mass_1_source"])
15:41 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.468645554845655, naming=["mass_2_source"])
15:41 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
15:41 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
15:41 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
15:41 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
15:41 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
15:41 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
15:41 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
15:41 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
15:41 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
15:41 ninjax INFO    : Finished prior setup
15:41 ninjax INFO    : Setting the transforms
15:41 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
15:41 ninjax INFO    : transforms_str_list has 3 elements
15:41 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
15:41 ninjax INFO    : Setting the likelihood
15:41 ninjax INFO    : GW likelihood provided, setting up the GW pipe
15:41 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz
15:41 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz for BNS injections
15:41 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
15:41 ninjax INFO    : self.is_BNS_run is True
15:41 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
15:41 ninjax INFO    : GW run is an injection
15:41 ninjax INFO    : Setting up GW injection . . . 
15:41 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
15:41 ninjax INFO    : Generating new injection
15:41 ninjax INFO    : Sanity check: generated parameters:
15:41 ninjax INFO    : {'mass_1_source': 1.5324065076431768, 'mass_2_source': 2.2003925946220027, 's1_z': 0.033120323667105225, 's2_z': -0.03212745864949893, 'cos_iota': -0.13940335241612978, 'd_L': 224.2220266597529, 't_c': 0.004346844599016644, 'phase_c': 0.013484408682077948, 'psi': 1.0906354306239388, 'ra': 1.053955717064998, 'sin_dec': 0.30177139707399103}
15:41 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz . . . 
15:41 ninjax INFO    : Injected lambda_1: 21.271103587284653
15:41 ninjax INFO    : Injected lambda_2: 300.2418870580217
15:41 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.6741007245270592 is 128.0
15:41 ninjax INFO    : After transforms, the injection parameters are:
15:41 ninjax INFO    : {'mass_1_source': 2.2003925946220027, 'mass_2_source': 1.5324065076431768, 's1_z': 0.033120323667105225, 's2_z': -0.03212745864949893, 'cos_iota': -0.13940335241612978, 'd_L': 224.2220266597529, 't_c': 0.004346844599016644, 'phase_c': 0.013484408682077948, 'psi': 1.0906354306239388, 'ra': 1.053955717064998, 'sin_dec': 0.30177139707399103, 'q': 0.696424134215205, 'M_c': 1.6741007245270592, 'eta': 0.24199418392258232, 'iota': Array(1.71065519, dtype=float64, weak_type=True), 'dec': Array(0.30655013, dtype=float64, weak_type=True), 'lambda_1': 21.271103587284653, 'lambda_2': 300.2418870580217}
15:41 ninjax INFO    : The trial injection parameters are {'M_c': 1.6741007245270592, 'eta': 0.24199418392258232, 's1_z': 0.033120323667105225, 's2_z': -0.03212745864949893, 'lambda_1': 21.271103587284653, 'lambda_2': 300.2418870580217, 'd_L': 224.2220266597529, 'phase_c': 0.013484408682077948, 'iota': 1.71065518502463, 't_c': 0.004346844599016644, 'psi': 1.0906354306239388, 'ra': 1.053955717064998, 'dec': 0.30655012629519496}
15:41 ninjax INFO    : Injecting signals . . .
15:41 ninjax INFO    : self.ifos
15:41 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
15:41 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:41 ninjax INFO    : [1.34205574e-23+3.17956047e-23j 4.08671608e-23-5.38612202e-24j
 4.05516501e-24-3.52748508e-24j ...
 1.27200834e-24-3.78059524e-25j 3.01523438e-23+4.64937384e-24j
 1.29557551e-23+7.26249631e-24j]
15:41 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
15:41 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:41 ninjax INFO    : [ 3.50573178e-23+1.21440988e-23j  1.27261374e-23-2.34589717e-23j
 -1.76900381e-23+6.41302764e-23j ...
 -1.90083362e-23+5.98004512e-24j  2.92096161e-23+1.88911505e-23j
  1.42397075e-23+2.85958548e-23j]
15:41 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
15:41 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:41 ninjax INFO    : [-4.48681796e-23-1.65839728e-23j  6.16803926e-23+3.47431723e-23j
 -1.61602074e-23-1.10406274e-22j ...
 -1.59357010e-23-1.50108311e-23j  3.65791920e-23+2.10141940e-23j
 -4.33232317e-23-3.10654048e-23j]
15:41 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
15:41 ninjax INFO    : SNR for ifo H1 is 14.606270140012112
15:41 ninjax INFO    : SNR for ifo L1 is 16.577498116982795
15:41 ninjax INFO    : SNR for ifo V1 is 5.588771780682624
15:41 ninjax INFO    : The network SNR is 22.790150092488027
15:41 ninjax INFO    : Network SNR passes threshold
15:41 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
15:41 ninjax INFO    :    mass_1_source: 2.2003925946220027
15:41 ninjax INFO    :    mass_2_source: 1.5324065076431768
15:41 ninjax INFO    :    s1_z: 0.033120323667105225
15:41 ninjax INFO    :    s2_z: -0.03212745864949893
15:41 ninjax INFO    :    cos_iota: -0.13940335241612978
15:41 ninjax INFO    :    d_L: 224.2220266597529
15:41 ninjax INFO    :    t_c: 0.004346844599016644
15:41 ninjax INFO    :    phase_c: 0.013484408682077948
15:41 ninjax INFO    :    psi: 1.0906354306239388
15:41 ninjax INFO    :    ra: 1.053955717064998
15:41 ninjax INFO    :    sin_dec: 0.30177139707399103
15:41 ninjax INFO    :    q: 0.696424134215205
15:41 ninjax INFO    :    M_c: 1.6741007245270592
15:41 ninjax INFO    :    eta: 0.24199418392258232
15:41 ninjax INFO    :    iota: 1.71065518502463
15:41 ninjax INFO    :    dec: 0.30655012629519496
15:41 ninjax INFO    :    lambda_1: 21.271103587284653
15:41 ninjax INFO    :    lambda_2: 300.2418870580217
15:41 ninjax INFO    :    H1_SNR: 14.606270140012112
15:41 ninjax INFO    :    L1_SNR: 16.577498116982795
15:41 ninjax INFO    :    V1_SNR: 5.588771780682624
15:41 ninjax INFO    :    network_SNR: 22.790150092488027
15:41 ninjax INFO    :    epoch: 126.0
15:41 ninjax INFO    :    gmst: 2.7288901910520846
15:41 ninjax INFO    :    duration: 128.0
15:41 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
15:41 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
15:41 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
15:44 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 147.5883011817932 seconds = 2.4598050196965535 minutes
15:44 ninjax INFO    : The priors are not modified after their initialization
15:44 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
15:44 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
15:44 ninjax INFO    : sample: {'M_c': Array([2.24334395, 2.2220118 , 2.00303337], dtype=float64), 'q': Array([0.51893155, 0.17898889, 0.65690309], dtype=float64), 's1_z': Array([ 0.021836  , -0.04655121, -0.01339591], dtype=float64), 's2_z': Array([-0.02988033,  0.03709669,  0.04729177], dtype=float64), 'lambda_1': Array([ 598.93669936, 1793.58057869, 3460.64284232], dtype=float64), 'lambda_2': Array([ 816.43135964,   39.17214827, 2608.93589986], dtype=float64), 'cos_iota': Array([ 0.80119673, -0.37956069,  0.6988964 ], dtype=float64), 'd_L': Array([878.79877481, 659.80804372, 948.45193008], dtype=float64), 't_c': Array([ 0.02224604, -0.0529975 , -0.05526634], dtype=float64), 'phase_c': Array([5.661868  , 1.66473302, 3.59837691], dtype=float64), 'psi': Array([0.33927332, 1.58502654, 0.65707541], dtype=float64), 'ra': Array([4.02353056, 2.85301749, 1.42559504], dtype=float64), 'sin_dec': Array([0.57782672, 0.56419759, 0.51509167], dtype=float64)}
15:44 ninjax INFO    : log_prob: [-27.98017066 -25.1787144  -49.3553817 ]
15:44 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 2.2003925946220027, 'mass_2_source': 1.5324065076431768, 's1_z': 0.033120323667105225, 's2_z': -0.03212745864949893, 'cos_iota': -0.13940335241612978, 'd_L': 224.2220266597529, 't_c': 0.004346844599016644, 'phase_c': 0.013484408682077948, 'psi': 1.0906354306239388, 'ra': 1.053955717064998, 'sin_dec': 0.30177139707399103, 'q': 0.696424134215205, 'M_c': 1.6741007245270592, 'eta': 0.24199418392258232, 'iota': Array(1.71065519, dtype=float64, weak_type=True), 'dec': Array(0.30655013, dtype=float64, weak_type=True), 'lambda_1': 21.271103587284653, 'lambda_2': 300.2418870580217, 'H1_SNR': 14.606270140012112, 'L1_SNR': 16.577498116982795, 'V1_SNR': 5.588771780682624, 'network_SNR': 22.790150092488027, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
15:44 ninjax INFO    : log_prob at the injection parameters is: 215.0139185983194
15:44 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
15:44 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
15:44 ninjax INFO    : Ninjax setup complete.
15:44 ninjax INFO    : Saving output to ./Aplus/injection_23/
15:44 ninjax INFO    : Using polynomial learning rate scheduler
15:44 ninjax INFO    : The hyperparameters passed to flowMC and jim are
15:44 ninjax INFO    :    n_loop_training: 200
15:44 ninjax INFO    :    n_loop_production: 10
15:44 ninjax INFO    :    n_local_steps: 100
15:44 ninjax INFO    :    n_global_steps: 1000
15:44 ninjax INFO    :    n_epochs: 25
15:44 ninjax INFO    :    n_chains: 1000
15:44 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x15135d8dba30>
15:44 ninjax INFO    :    max_samples: 50000
15:44 ninjax INFO    :    momentum: 0.9
15:44 ninjax INFO    :    batch_size: 30000
15:44 ninjax INFO    :    use_global: True
15:44 ninjax INFO    :    keep_quantile: 0.0
15:44 ninjax INFO    :    train_thinning: 10
15:44 ninjax INFO    :    output_thinning: 50
15:44 ninjax INFO    :    n_sample_max: 10000
15:44 ninjax INFO    :    num_layers: 10
15:44 ninjax INFO    :    hidden_size: [128, 128]
15:44 ninjax INFO    :    num_bins: 8
15:44 ninjax INFO    :    save_training_chains: False
15:44 ninjax INFO    :    eps_mass_matrix: 1e-05
15:44 ninjax INFO    :    use_scheduler: True
15:44 ninjax INFO    :    use_temperature: False
15:44 ninjax INFO    :    which_temperature_schedule: exponential
15:44 ninjax INFO    :    starting_temperature: 2.0
15:44 ninjax INFO    :    stop_tempering_iteration: 75
15:44 ninjax INFO    :    stopping_criterion_global_acc: 0.1
15:44 ninjax INFO    :    stopping_criterion_loss: -inf
15:44 ninjax INFO    :    nf_model_kwargs: {}
15:44 ninjax INFO    :    local sampler arg not shown (pretty print)
15:44 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[ 1.47428250e-23  3.42750250e-23  2.26098409e-24 -1.72706302e-24
  1.36223764e-23  5.62584696e-23  3.15375517e-23  7.93770159e-23
  5.41541763e-23  1.17187261e-23]
[ 2.51449304e-23 -6.96139338e-24  3.00524624e-24 -1.15750329e-23
 -1.15055715e-23 -2.12960952e-23 -1.31158685e-23 -2.07902631e-24
 -3.46728076e-23  1.19577684e-23]
Checking the noise that was generated in inject_signal ifo:
[ 3.05309076e-23  1.87688277e-23 -1.27316207e-23 -7.34215964e-24
  3.93002356e-23  2.69795251e-24  1.78765750e-23 -2.97713120e-23
  2.85592182e-23 -9.99799485e-24]
[ 1.83682129e-23 -1.86987600e-23  5.82537445e-23  4.85351404e-23
  2.14399213e-25  2.40561062e-23 -5.78243933e-23 -7.61244953e-24
 -3.53401314e-23 -2.60500194e-23]
Checking the noise that was generated in inject_signal ifo:
[-4.74952898e-23  6.35608651e-23 -1.34033398e-23  6.37783735e-23
  1.13208836e-23 -2.40053173e-23  6.97731746e-23 -2.86327172e-23
  4.30855076e-24 -8.41552851e-23]
[-1.46028611e-23  3.74413968e-23 -1.12196907e-22 -3.15805119e-23
  8.47470693e-24 -4.37687826e-23  8.88380030e-23  4.59308446e-23
 -1.30349537e-22 -6.99576082e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.10956335067749023 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 2.2003925946220027, 'mass_2_source': 1.5324065076431768, 's1_z': 0.033120323667105225, 's2_z': -0.03212745864949893, 'cos_iota': -0.13940335241612978, 'd_L': 224.2220266597529, 't_c': 0.004346844599016644, 'phase_c': 0.013484408682077948, 'psi': 1.0906354306239388, 'ra': 1.053955717064998, 'sin_dec': 0.30177139707399103, 'q': 0.696424134215205, 'M_c': 1.6741007245270592, 'eta': 0.24199418392258232, 'iota': Array(1.71065519, dtype=float64, weak_type=True), 'dec': Array(0.30655013, dtype=float64, weak_type=True), 'lambda_1': 21.271103587284653, 'lambda_2': 300.2418870580217, 'H1_SNR': 14.606270140012112, 'L1_SNR': 16.577498116982795, 'V1_SNR': 5.588771780682624, 'network_SNR': 22.790150092488027, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.4935619831085205 seconds
Time for h_sky_low and h_sky_center: 5.2800164222717285 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.6513471603393555
Going to compute coefficients . . .
Time for computing coefficients: 126.57088899612427 seconds
Time for computing coefficients: 6.99681830406189 seconds
Time for computing coefficients: 6.94976544380188 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:01<6:41:57, 121.19s/it]Tuning global sampler:   1%|          | 2/200 [02:05<2:53:31, 52.58s/it] Tuning global sampler:   2%|▏         | 3/200 [02:10<1:40:41, 30.67s/it]Tuning global sampler:   2%|▏         | 4/200 [02:14<1:06:31, 20.37s/it]Tuning global sampler:   2%|▎         | 5/200 [02:20<48:40, 14.98s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:24<37:00, 11.44s/it]Tuning global sampler:   4%|▎         | 7/200 [02:29<29:31,  9.18s/it]Tuning global sampler:   4%|▍         | 8/200 [02:34<24:42,  7.72s/it]Tuning global sampler:   4%|▍         | 9/200 [02:38<21:24,  6.72s/it]Tuning global sampler:   5%|▌         | 10/200 [02:42<19:01,  6.01s/it]Tuning global sampler:   6%|▌         | 11/200 [02:47<17:34,  5.58s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:30,  5.27s/it]Tuning global sampler:   6%|▋         | 13/200 [02:56<15:45,  5.06s/it]Tuning global sampler:   7%|▋         | 14/200 [03:01<15:17,  4.93s/it]Tuning global sampler:   8%|▊         | 15/200 [03:05<14:56,  4.84s/it]Tuning global sampler:   8%|▊         | 16/200 [03:10<14:39,  4.78s/it]Tuning global sampler:   8%|▊         | 17/200 [03:15<14:25,  4.73s/it]Tuning global sampler:   9%|▉         | 18/200 [03:20<14:24,  4.75s/it]Tuning global sampler:  10%|▉         | 19/200 [03:24<14:12,  4.71s/it]Tuning global sampler:  10%|█         | 20/200 [03:29<14:03,  4.69s/it]Tuning global sampler:  10%|█         | 21/200 [03:34<14:00,  4.70s/it]Tuning global sampler:  11%|█         | 22/200 [03:38<13:51,  4.67s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:43<13:42,  4.65s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:47<13:25,  4.58s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:52<14:00,  4.80s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:57<13:40,  4.72s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:01<13:18,  4.62s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:06<13:01,  4.54s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:10<12:48,  4.49s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:14<12:38,  4.46s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:19<12:31,  4.45s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:23<12:22,  4.42s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:28<12:17,  4.41s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:32<12:09,  4.39s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:36<12:03,  4.39s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:41<11:58,  4.38s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:45<11:53,  4.38s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:49<11:49,  4.38s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:54<11:44,  4.37s/it]Tuning global sampler:  20%|██        | 40/200 [04:58<11:39,  4.37s/it]Tuning global sampler:  20%|██        | 41/200 [05:03<11:38,  4.39s/it]Tuning global sampler:  21%|██        | 42/200 [05:07<11:32,  4.39s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:11<11:28,  4.38s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:17<12:06,  4.66s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:21<11:46,  4.56s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:25<11:33,  4.50s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:30<11:22,  4.46s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:34<11:14,  4.44s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:39<11:08,  4.42s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:43<11:01,  4.41s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:47<10:56,  4.41s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:52<10:51,  4.40s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:56<10:45,  4.39s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:00<10:41,  4.39s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:05<10:34,  4.37s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:09<10:27,  4.36s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:14<10:24,  4.37s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:18<10:20,  4.37s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:22<10:16,  4.37s/it]Tuning global sampler:  30%|███       | 60/200 [06:27<10:12,  4.38s/it]Tuning global sampler:  30%|███       | 61/200 [06:31<10:08,  4.38s/it]Tuning global sampler:  31%|███       | 62/200 [06:36<10:20,  4.50s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:40<10:11,  4.46s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:46<10:43,  4.73s/it]Tuning global sampler:  32%|███▎      | 65/200 [06:50<10:24,  4.63s/it]Tuning global sampler:  33%|███▎      | 66/200 [06:54<10:08,  4.54s/it]Tuning global sampler:  34%|███▎      | 67/200 [06:59<09:55,  4.48s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:03<09:46,  4.44s/it]Tuning global sampler:  34%|███▍      | 69/200 [07:07<09:43,  4.45s/it]Tuning global sampler:  35%|███▌      | 70/200 [07:12<09:35,  4.43s/it]Tuning global sampler:  35%|███▌      | 70/200 [07:16<13:31,  6.24s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.20s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.20s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.20s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.20s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.20s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.20s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.20s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.20s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.20s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.20s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.20s/it]
15:52 ninjax INFO    : Saving samples to ./Aplus/injection_23/results_training.npz
15:52 ninjax INFO    : Saving the NF
15:52 ninjax INFO    : Time taken: 477.55698323249817 seconds (7.9592830538749695 minutes)
15:52 ninjax INFO    : Creating the final corner plot
15:52 ninjax INFO    : Dumping the final production chains
15:52 ninjax INFO    : Chains shape is: (13, 220000)
15:52 ninjax INFO    : Key: M_c: ESS = 71275, Rhat = 1.011272315935756
15:52 ninjax INFO    : Key: q: ESS = 41912, Rhat = 1.0170283367523354
15:52 ninjax INFO    : Key: s1_z: ESS = 47846, Rhat = 1.0152982000464
15:52 ninjax INFO    : Key: s2_z: ESS = 48538, Rhat = 1.0146532398860348
15:52 ninjax INFO    : Key: lambda_1: ESS = 71746, Rhat = 1.0112549837890414
15:52 ninjax INFO    : Key: lambda_2: ESS = 68290, Rhat = 1.0120505810853164
15:52 ninjax INFO    : Key: cos_iota: ESS = 47333, Rhat = 1.0151779981355953
15:52 ninjax INFO    : Key: d_L: ESS = 45094, Rhat = 1.0156553729915305
15:52 ninjax INFO    : Key: t_c: ESS = 52946, Rhat = 1.0133397338466237
15:52 ninjax INFO    : Key: phase_c: ESS = 60656, Rhat = 1.013133792448533
15:52 ninjax INFO    : Key: psi: ESS = 45340, Rhat = 1.0173072013940925
15:52 ninjax INFO    : Key: ra: ESS = 31131, Rhat = 1.0206081745875941
15:52 ninjax INFO    : Key: sin_dec: ESS = 34846, Rhat = 1.0189024197392629
15:52 ninjax INFO    : Key: eta: ESS = 41912, Rhat = 1.0170283367523354
15:52 ninjax INFO    : Key: iota: ESS = 47333, Rhat = 1.0151779981355953
15:52 ninjax INFO    : Key: dec: ESS = 34846, Rhat = 1.0189024197392629
15:52 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.669 +/- 0.116
q: 0.754 +/- 0.199
s1_z: 0.003 +/- 0.026
s2_z: -0.001 +/- 0.027
lambda_1: 1470.791 +/- 1449.978
lambda_2: 1560.800 +/- 1437.037
cos_iota: 0.164 +/- 0.444
d_L: 491.155 +/- 251.736
t_c: -0.001 +/- 0.021
phase_c: 3.091 +/- 1.740
psi: 1.876 +/- 0.875
ra: 1.592 +/- 1.139
sin_dec: 0.160 +/- 0.382
Log probability: 126.526 +/- 88.192
Local acceptance: 0.909 +/- 0.288
Global acceptance: 0.015 +/- 0.122
Max loss: 22.771, Min loss: 2.948
Production summary
==========
M_c: 1.674 +/- 0.000
q: 0.809 +/- 0.113
s1_z: -0.004 +/- 0.026
s2_z: -0.004 +/- 0.027
lambda_1: 176.560 +/- 169.115
lambda_2: 343.566 +/- 310.874
cos_iota: 0.325 +/- 0.324
d_L: 279.842 +/- 72.996
t_c: 0.004 +/- 0.001
phase_c: 3.282 +/- 1.854
psi: 1.910 +/- 0.833
ra: 1.037 +/- 0.013
sin_dec: 0.273 +/- 0.021
Log probability: 212.646 +/- 2.721
Local acceptance: 0.820 +/- 0.384
Global acceptance: 0.107 +/- 0.309
DONE

JOB STATISTICS
==============
Job ID: 10906038
Cluster: snellius
User/Group: twouters2/twouters2
State: RUNNING
Nodes: 1
Cores per node: 16
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 03:03:44 core-walltime
Job Wall-clock time: 00:11:29
Memory Utilized: 0.00 MB
Memory Efficiency: 0.00% of 10.00 GB (10.00 GB/node)
WARNING: Efficiency statistics can only be obtained after the job has ended as seff tool is based on the accounting database data.
