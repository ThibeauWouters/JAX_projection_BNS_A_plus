Tue Apr  1 15:34:29 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
15:34 ninjax INFO    : Checking and setting outdir
15:34 ninjax INFO    : Found generation prior file ./Aplus/injection_17/generation_prior.prior
15:34 ninjax INFO    : The outdir is set to ./Aplus/injection_17
15:34 ninjax INFO    : Loading the given config
15:34 ninjax WARNING : Unrecognized keys given: {'n_max_examples', 'generation_seed'}. These will be ignored
15:34 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '30.0', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': '123', 'sampling_seed': '123', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
15:34 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/MPA1/Aplus/injection_17/complete_config.json
15:34 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 963893
15:34 ninjax INFO    : Loading the priors
15:34 ninjax INFO    : Setting up the prior
15:34 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
15:34 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
15:34 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
15:34 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
15:34 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
15:34 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
15:34 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
15:34 ninjax INFO    :    dL_prior = PowerLaw(10.0, 1000.0, 2.0, naming=["d_L"])
15:34 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
15:34 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
15:34 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
15:34 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
15:34 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
15:34 ninjax INFO    : Setting up the generation prior
15:34 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.468645554845655, naming=["mass_1_source"])
15:34 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.468645554845655, naming=["mass_2_source"])
15:34 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
15:34 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
15:34 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
15:34 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
15:34 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
15:34 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
15:34 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
15:34 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
15:34 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
15:34 ninjax INFO    : Finished prior setup
15:34 ninjax INFO    : Setting the transforms
15:34 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
15:34 ninjax INFO    : transforms_str_list has 3 elements
15:34 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
15:34 ninjax INFO    : Setting the likelihood
15:34 ninjax INFO    : GW likelihood provided, setting up the GW pipe
15:34 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz
15:34 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz for BNS injections
15:34 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
15:34 ninjax INFO    : self.is_BNS_run is True
15:34 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
15:34 ninjax INFO    : GW run is an injection
15:34 ninjax INFO    : Setting up GW injection . . . 
15:34 ninjax INFO    : The SNR thresholds are: 30.0 - 100.0
15:34 ninjax INFO    : Generating new injection
15:34 ninjax INFO    : Sanity check: generated parameters:
15:34 ninjax INFO    : {'mass_1_source': 1.6730712272024963, 'mass_2_source': 2.235927024114005, 's1_z': -0.04545338666528514, 's2_z': -0.028333567953163774, 'cos_iota': -0.8360348119494243, 'd_L': 213.19134179287914, 't_c': 0.02159925921326797, 'phase_c': 2.660801723026221, 'psi': 0.4199580744980192, 'ra': 3.952391244036354, 'sin_dec': 0.2794319925805633}
15:34 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz . . . 
15:34 ninjax INFO    : Injected lambda_1: 18.099921136465987
15:34 ninjax INFO    : Injected lambda_2: 173.27667502910992
15:34 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.7611756141758634 is 128.0
15:34 ninjax INFO    : After transforms, the injection parameters are:
15:34 ninjax INFO    : {'mass_1_source': 2.235927024114005, 'mass_2_source': 1.6730712272024963, 's1_z': -0.04545338666528514, 's2_z': -0.028333567953163774, 'cos_iota': -0.8360348119494243, 'd_L': 213.19134179287914, 't_c': 0.02159925921326797, 'phase_c': 2.660801723026221, 'psi': 0.4199580744980192, 'ra': 3.952391244036354, 'sin_dec': 0.2794319925805633, 'q': 0.748267367028876, 'M_c': 1.7611756141758634, 'eta': 0.24481673583812452, 'iota': Array(2.56081243, dtype=float64, weak_type=True), 'dec': Array(0.28320249, dtype=float64, weak_type=True), 'lambda_1': 18.099921136465987, 'lambda_2': 173.27667502910992}
15:34 ninjax INFO    : The trial injection parameters are {'M_c': 1.7611756141758634, 'eta': 0.24481673583812452, 's1_z': -0.04545338666528514, 's2_z': -0.028333567953163774, 'lambda_1': 18.099921136465987, 'lambda_2': 173.27667502910992, 'd_L': 213.19134179287914, 'phase_c': 2.660801723026221, 'iota': 2.560812425975656, 't_c': 0.02159925921326797, 'psi': 0.4199580744980192, 'ra': 3.952391244036354, 'dec': 0.2832024858228918}
15:34 ninjax INFO    : Injecting signals . . .
15:35 ninjax INFO    : self.ifos
15:35 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
15:35 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
15:35 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:35 ninjax INFO    : [-6.57497809e-23-4.73921542e-23j -8.87608227e-23-4.70324760e-23j
 -3.42990640e-23+3.26377692e-23j ...
  5.39235774e-24+2.45552914e-24j  1.84025787e-23-8.43671659e-24j
  3.40707744e-24+7.17780663e-24j]
15:35 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
15:35 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
15:35 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:35 ninjax INFO    : [ 2.86936160e-23-7.23707836e-23j -4.10239194e-23+2.83597675e-23j
  1.44792887e-24+5.57712246e-23j ...
  1.86710499e-23-1.85010271e-23j  2.39300932e-24+2.92684604e-23j
 -6.76412018e-24-1.27941104e-23j]
15:35 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
15:35 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
15:35 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:35 ninjax INFO    : [-2.86144416e-23+4.01224759e-24j -1.74850830e-23+1.94568976e-23j
 -4.84802148e-23+2.37044462e-23j ...
  2.68097481e-23+9.93178904e-24j  5.52064019e-23-5.33031581e-24j
 -2.70038470e-23-1.64189266e-23j]
15:35 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
15:35 ninjax INFO    : SNR for ifo H1 is 16.52571169982353
15:35 ninjax INFO    : SNR for ifo L1 is 20.600671271258044
15:35 ninjax INFO    : SNR for ifo V1 is 16.00077120498783
15:35 ninjax INFO    : The network SNR is 30.87898125208292
15:35 ninjax INFO    : Network SNR passes threshold
15:35 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
15:35 ninjax INFO    :    mass_1_source: 2.235927024114005
15:35 ninjax INFO    :    mass_2_source: 1.6730712272024963
15:35 ninjax INFO    :    s1_z: -0.04545338666528514
15:35 ninjax INFO    :    s2_z: -0.028333567953163774
15:35 ninjax INFO    :    cos_iota: -0.8360348119494243
15:35 ninjax INFO    :    d_L: 213.19134179287914
15:35 ninjax INFO    :    t_c: 0.02159925921326797
15:35 ninjax INFO    :    phase_c: 2.660801723026221
15:35 ninjax INFO    :    psi: 0.4199580744980192
15:35 ninjax INFO    :    ra: 3.952391244036354
15:35 ninjax INFO    :    sin_dec: 0.2794319925805633
15:35 ninjax INFO    :    q: 0.748267367028876
15:35 ninjax INFO    :    M_c: 1.7611756141758634
15:35 ninjax INFO    :    eta: 0.24481673583812452
15:35 ninjax INFO    :    iota: 2.560812425975656
15:35 ninjax INFO    :    dec: 0.2832024858228918
15:35 ninjax INFO    :    lambda_1: 18.099921136465987
15:35 ninjax INFO    :    lambda_2: 173.27667502910992
15:35 ninjax INFO    :    H1_SNR: 16.52571169982353
15:35 ninjax INFO    :    L1_SNR: 20.600671271258044
15:35 ninjax INFO    :    V1_SNR: 16.00077120498783
15:35 ninjax INFO    :    network_SNR: 30.87898125208292
15:35 ninjax INFO    :    epoch: 126.0
15:35 ninjax INFO    :    gmst: 2.7288901910520846
15:35 ninjax INFO    :    duration: 128.0
15:35 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
15:35 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
15:35 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
