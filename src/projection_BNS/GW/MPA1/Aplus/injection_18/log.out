Tue Apr  1 15:41:23 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
15:41 ninjax INFO    : Checking and setting outdir
15:41 ninjax INFO    : Found generation prior file ./Aplus/injection_18/generation_prior.prior
15:41 ninjax INFO    : The outdir is set to ./Aplus/injection_18
15:41 ninjax INFO    : Loading the given config
15:41 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
15:41 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
15:41 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/MPA1/Aplus/injection_18/complete_config.json
15:41 ninjax INFO    : No seed specified. Generating a random seed: 976509
15:41 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 484092
15:41 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 649675
15:41 ninjax INFO    : Loading the priors
15:41 ninjax INFO    : Setting up the prior
15:41 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
15:41 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
15:41 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
15:41 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
15:41 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
15:41 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
15:41 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
15:41 ninjax INFO    :    dL_prior = PowerLaw(10.0, 1000.0, 2.0, naming=["d_L"])
15:41 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
15:41 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
15:41 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
15:41 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
15:41 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
15:41 ninjax INFO    : Setting up the generation prior
15:41 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.468645554845655, naming=["mass_1_source"])
15:41 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.468645554845655, naming=["mass_2_source"])
15:41 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
15:41 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
15:41 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
15:41 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
15:41 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
15:41 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
15:41 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
15:41 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
15:41 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
15:41 ninjax INFO    : Finished prior setup
15:41 ninjax INFO    : Setting the transforms
15:41 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
15:41 ninjax INFO    : transforms_str_list has 3 elements
15:41 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
15:41 ninjax INFO    : Setting the likelihood
15:41 ninjax INFO    : GW likelihood provided, setting up the GW pipe
15:41 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz
15:41 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz for BNS injections
15:41 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
15:41 ninjax INFO    : self.is_BNS_run is True
15:41 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
15:41 ninjax INFO    : GW run is an injection
15:41 ninjax INFO    : Setting up GW injection . . . 
15:41 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
15:41 ninjax INFO    : Generating new injection
15:41 ninjax INFO    : Sanity check: generated parameters:
15:41 ninjax INFO    : {'mass_1_source': 1.9824408890997294, 'mass_2_source': 1.3930285572899472, 's1_z': 0.043543669742642344, 's2_z': 0.04237454027549374, 'cos_iota': -0.8620359803624376, 'd_L': 214.11938275113587, 't_c': 0.06759061142212683, 'phase_c': 3.842985406357044, 'psi': 2.6367919412764396, 'ra': 0.564704361838649, 'sin_dec': -0.7200467691390813}
15:41 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz . . . 
15:41 ninjax INFO    : Injected lambda_1: 52.45404177399901
15:41 ninjax INFO    : Injected lambda_2: 527.5286322765309
15:41 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.5119893251033227 is 128.0
15:41 ninjax INFO    : After transforms, the injection parameters are:
15:41 ninjax INFO    : {'mass_1_source': 1.9824408890997294, 'mass_2_source': 1.3930285572899472, 's1_z': 0.043543669742642344, 's2_z': 0.04237454027549374, 'cos_iota': -0.8620359803624376, 'd_L': 214.11938275113587, 't_c': 0.06759061142212683, 'phase_c': 3.842985406357044, 'psi': 2.6367919412764396, 'ra': 0.564704361838649, 'sin_dec': -0.7200467691390813, 'q': 0.7026835276397838, 'M_c': 1.5119893251033227, 'eta': 0.24237727798588793, 'iota': Array(2.61006933, dtype=float64, weak_type=True), 'dec': Array(-0.80386971, dtype=float64, weak_type=True), 'lambda_1': 52.45404177399901, 'lambda_2': 527.5286322765309}
15:41 ninjax INFO    : The trial injection parameters are {'M_c': 1.5119893251033227, 'eta': 0.24237727798588793, 's1_z': 0.043543669742642344, 's2_z': 0.04237454027549374, 'lambda_1': 52.45404177399901, 'lambda_2': 527.5286322765309, 'd_L': 214.11938275113587, 'phase_c': 3.842985406357044, 'iota': 2.6100693329436955, 't_c': 0.06759061142212683, 'psi': 2.6367919412764396, 'ra': 0.564704361838649, 'dec': -0.8038697144983608}
15:41 ninjax INFO    : Injecting signals . . .
15:42 ninjax INFO    : self.ifos
15:42 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
15:42 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
15:42 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:42 ninjax INFO    : [-1.00131420e-23-4.87539913e-23j -1.53888035e-23+4.03666655e-23j
 -9.44021591e-23-9.81278572e-23j ...
  2.71772984e-23+1.50452243e-23j -4.34852396e-24-7.58910577e-24j
 -5.92803658e-24-3.69142748e-23j]
15:42 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
15:42 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
15:42 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:42 ninjax INFO    : [ 1.78342639e-23-9.05822276e-23j  2.16196375e-23-1.52247563e-23j
  4.42901985e-23-1.78390898e-25j ...
 -4.81368125e-24+2.78565696e-23j  1.70457637e-23-2.70900544e-23j
  1.37774092e-23-1.47849890e-24j]
15:42 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
15:42 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
15:42 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:42 ninjax INFO    : [-2.77565703e-23+9.22971006e-24j  2.28925645e-23+2.66628685e-23j
 -4.19150097e-23-2.75153582e-23j ...
 -4.55892185e-23+3.77098451e-23j  1.63061601e-23+1.71170092e-24j
  8.38316584e-26+1.18031823e-23j]
15:42 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
15:42 ninjax INFO    : SNR for ifo H1 is 3.185352083555431
15:42 ninjax INFO    : SNR for ifo L1 is 4.514771060666357
15:42 ninjax INFO    : SNR for ifo V1 is 19.39224467925182
15:42 ninjax INFO    : The network SNR is 20.164046700164427
15:42 ninjax INFO    : Network SNR passes threshold
15:42 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
15:42 ninjax INFO    :    mass_1_source: 1.9824408890997294
15:42 ninjax INFO    :    mass_2_source: 1.3930285572899472
15:42 ninjax INFO    :    s1_z: 0.043543669742642344
15:42 ninjax INFO    :    s2_z: 0.04237454027549374
15:42 ninjax INFO    :    cos_iota: -0.8620359803624376
15:42 ninjax INFO    :    d_L: 214.11938275113587
15:42 ninjax INFO    :    t_c: 0.06759061142212683
15:42 ninjax INFO    :    phase_c: 3.842985406357044
15:42 ninjax INFO    :    psi: 2.6367919412764396
15:42 ninjax INFO    :    ra: 0.564704361838649
15:42 ninjax INFO    :    sin_dec: -0.7200467691390813
15:42 ninjax INFO    :    q: 0.7026835276397838
15:42 ninjax INFO    :    M_c: 1.5119893251033227
15:42 ninjax INFO    :    eta: 0.24237727798588793
15:42 ninjax INFO    :    iota: 2.6100693329436955
15:42 ninjax INFO    :    dec: -0.8038697144983608
15:42 ninjax INFO    :    lambda_1: 52.45404177399901
15:42 ninjax INFO    :    lambda_2: 527.5286322765309
15:42 ninjax INFO    :    H1_SNR: 3.185352083555431
15:42 ninjax INFO    :    L1_SNR: 4.514771060666357
15:42 ninjax INFO    :    V1_SNR: 19.39224467925182
15:42 ninjax INFO    :    network_SNR: 20.164046700164427
15:42 ninjax INFO    :    epoch: 126.0
15:42 ninjax INFO    :    gmst: 2.7288901910520846
15:42 ninjax INFO    :    duration: 128.0
15:42 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
15:42 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
15:42 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
15:45 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 185.49792218208313 seconds = 3.0916320363680523 minutes
15:45 ninjax INFO    : The priors are not modified after their initialization
15:45 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
15:45 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
15:45 ninjax INFO    : sample: {'M_c': Array([2.05049594, 2.44418885, 0.99509847], dtype=float64), 'q': Array([0.26456508, 0.53228843, 0.51374418], dtype=float64), 's1_z': Array([ 0.00686927, -0.04067013, -0.03290009], dtype=float64), 's2_z': Array([-7.29535640e-03, -3.85625226e-02,  2.20025129e-05],      dtype=float64), 'lambda_1': Array([1174.26385867, 3755.11382542, 2061.36874134], dtype=float64), 'lambda_2': Array([1667.51049117, 3663.51549759, 3796.49935101], dtype=float64), 'cos_iota': Array([0.91991425, 0.22712921, 0.52640537], dtype=float64), 'd_L': Array([972.15432502, 942.02962471, 679.17757127], dtype=float64), 't_c': Array([ 0.03965127, -0.06092681,  0.0902802 ], dtype=float64), 'phase_c': Array([1.2548966 , 0.59368067, 5.16629552], dtype=float64), 'psi': Array([1.28678032, 1.19308436, 1.69137183], dtype=float64), 'ra': Array([4.22267197, 0.4854032 , 2.36486982], dtype=float64), 'sin_dec': Array([ 0.63360061, -0.20551456, -0.54889618], dtype=float64)}
15:45 ninjax INFO    : log_prob: [-18.36235904 -11.21810466  -4.50351149]
15:45 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.9824408890997294, 'mass_2_source': 1.3930285572899472, 's1_z': 0.043543669742642344, 's2_z': 0.04237454027549374, 'cos_iota': -0.8620359803624376, 'd_L': 214.11938275113587, 't_c': 0.06759061142212683, 'phase_c': 3.842985406357044, 'psi': 2.6367919412764396, 'ra': 0.564704361838649, 'sin_dec': -0.7200467691390813, 'q': 0.7026835276397838, 'M_c': 1.5119893251033227, 'eta': 0.24237727798588793, 'iota': Array(2.61006933, dtype=float64, weak_type=True), 'dec': Array(-0.80386971, dtype=float64, weak_type=True), 'lambda_1': 52.45404177399901, 'lambda_2': 527.5286322765309, 'H1_SNR': 3.185352083555431, 'L1_SNR': 4.514771060666357, 'V1_SNR': 19.39224467925182, 'network_SNR': 20.164046700164427, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
15:45 ninjax INFO    : log_prob at the injection parameters is: 182.63951144947066
15:45 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
15:45 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
15:45 ninjax INFO    : Ninjax setup complete.
15:45 ninjax INFO    : Saving output to ./Aplus/injection_18/
15:45 ninjax INFO    : Using polynomial learning rate scheduler
15:45 ninjax INFO    : The hyperparameters passed to flowMC and jim are
15:45 ninjax INFO    :    n_loop_training: 200
15:45 ninjax INFO    :    n_loop_production: 10
15:45 ninjax INFO    :    n_local_steps: 100
15:45 ninjax INFO    :    n_global_steps: 1000
15:45 ninjax INFO    :    n_epochs: 25
15:45 ninjax INFO    :    n_chains: 1000
15:45 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x150407e4fa30>
15:45 ninjax INFO    :    max_samples: 50000
15:45 ninjax INFO    :    momentum: 0.9
15:45 ninjax INFO    :    batch_size: 30000
15:45 ninjax INFO    :    use_global: True
15:45 ninjax INFO    :    keep_quantile: 0.0
15:45 ninjax INFO    :    train_thinning: 10
15:45 ninjax INFO    :    output_thinning: 50
15:45 ninjax INFO    :    n_sample_max: 10000
15:45 ninjax INFO    :    num_layers: 10
15:45 ninjax INFO    :    hidden_size: [128, 128]
15:45 ninjax INFO    :    num_bins: 8
15:45 ninjax INFO    :    save_training_chains: False
15:45 ninjax INFO    :    eps_mass_matrix: 1e-05
15:45 ninjax INFO    :    use_scheduler: True
15:45 ninjax INFO    :    use_temperature: False
15:45 ninjax INFO    :    which_temperature_schedule: exponential
15:45 ninjax INFO    :    starting_temperature: 2.0
15:45 ninjax INFO    :    stop_tempering_iteration: 75
15:45 ninjax INFO    :    stopping_criterion_global_acc: 0.1
15:45 ninjax INFO    :    stopping_criterion_loss: -inf
15:45 ninjax INFO    :    nf_model_kwargs: {}
15:45 ninjax INFO    :    local sampler arg not shown (pretty print)
15:45 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[-8.91969090e-24 -1.39175698e-23 -9.32044124e-23  3.75211486e-23
  8.51387073e-24 -6.81793391e-23 -4.76162070e-23  2.96375904e-25
 -5.37341725e-23  3.53611325e-23]
[-4.77647222e-23  4.04548068e-23 -9.89855938e-23  4.58282678e-23
  4.51151642e-24  4.43194973e-23 -4.97637138e-23 -3.79751914e-23
  3.17748213e-23  1.09968423e-24]
Checking the noise that was generated in inject_signal ifo:
[ 1.61895665e-23  1.95307540e-23  4.26818957e-23  1.57701890e-24
  3.01272536e-23 -4.28085792e-23  5.53141862e-24  2.51221383e-23
  4.73273429e-23 -4.08694395e-23]
[-9.18717551e-23 -1.52029204e-23  1.15325439e-24  1.02067436e-22
 -7.54984929e-23  5.15767362e-23  2.96005325e-23  5.58440794e-23
  4.38069402e-23 -1.98520454e-23]
Checking the noise that was generated in inject_signal ifo:
[-3.70009988e-23  1.98508054e-23 -3.73611298e-23 -1.86756736e-23
 -1.67802721e-23  7.37692607e-23 -2.21170655e-23  2.91689627e-23
 -3.87372739e-23  3.24576074e-23]
[ 1.58843263e-23  3.76342984e-23 -1.70861637e-23  1.15070578e-23
 -4.47529460e-24  7.68457453e-23  1.53862729e-23 -8.67204823e-23
 -7.68741026e-23 -9.82511230e-24]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.11247706413269043 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.9824408890997294, 'mass_2_source': 1.3930285572899472, 's1_z': 0.043543669742642344, 's2_z': 0.04237454027549374, 'cos_iota': -0.8620359803624376, 'd_L': 214.11938275113587, 't_c': 0.06759061142212683, 'phase_c': 3.842985406357044, 'psi': 2.6367919412764396, 'ra': 0.564704361838649, 'sin_dec': -0.7200467691390813, 'q': 0.7026835276397838, 'M_c': 1.5119893251033227, 'eta': 0.24237727798588793, 'iota': Array(2.61006933, dtype=float64, weak_type=True), 'dec': Array(-0.80386971, dtype=float64, weak_type=True), 'lambda_1': 52.45404177399901, 'lambda_2': 527.5286322765309, 'H1_SNR': 3.185352083555431, 'L1_SNR': 4.514771060666357, 'V1_SNR': 19.39224467925182, 'network_SNR': 20.164046700164427, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 3.895108222961426 seconds
Time for h_sky_low and h_sky_center: 30.325393199920654 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.6965217590332031
Going to compute coefficients . . .
Time for computing coefficients: 135.88631343841553 seconds
Time for computing coefficients: 7.115760803222656 seconds
Time for computing coefficients: 6.90699577331543 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:16<7:31:17, 136.07s/it]Tuning global sampler:   1%|          | 2/200 [02:20<3:13:49, 58.74s/it] Tuning global sampler:   2%|▏         | 3/200 [02:25<1:51:45, 34.04s/it]Tuning global sampler:   2%|▏         | 4/200 [02:29<1:13:17, 22.43s/it]Tuning global sampler:   2%|▎         | 5/200 [02:35<53:06, 16.34s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:40<39:58, 12.37s/it]Tuning global sampler:   4%|▎         | 7/200 [02:44<31:36,  9.82s/it]Tuning global sampler:   4%|▍         | 8/200 [02:49<26:19,  8.23s/it]Tuning global sampler:   4%|▍         | 9/200 [02:54<22:32,  7.08s/it]Tuning global sampler:   5%|▌         | 10/200 [02:58<19:51,  6.27s/it]Tuning global sampler:   6%|▌         | 11/200 [03:03<18:09,  5.76s/it]Tuning global sampler:   6%|▌         | 12/200 [03:07<16:58,  5.42s/it]Tuning global sampler:   6%|▋         | 13/200 [03:12<16:05,  5.16s/it]Tuning global sampler:   7%|▋         | 14/200 [03:17<15:32,  5.01s/it]Tuning global sampler:   8%|▊         | 15/200 [03:21<15:08,  4.91s/it]Tuning global sampler:   8%|▊         | 16/200 [03:26<14:50,  4.84s/it]Tuning global sampler:   8%|▊         | 17/200 [03:31<14:36,  4.79s/it]Tuning global sampler:   9%|▉         | 18/200 [03:35<14:25,  4.76s/it]Tuning global sampler:  10%|▉         | 19/200 [03:40<14:16,  4.73s/it]Tuning global sampler:  10%|█         | 20/200 [03:45<14:08,  4.71s/it]Tuning global sampler:  10%|█         | 21/200 [03:50<14:48,  4.96s/it]Tuning global sampler:  11%|█         | 22/200 [03:55<14:25,  4.86s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:59<14:08,  4.79s/it]Tuning global sampler:  12%|█▏        | 24/200 [04:04<13:44,  4.69s/it]Tuning global sampler:  12%|█▎        | 25/200 [04:09<14:14,  4.88s/it]Tuning global sampler:  13%|█▎        | 26/200 [04:14<13:44,  4.74s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:18<13:22,  4.64s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:22<13:06,  4.57s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:27<12:53,  4.52s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:31<12:44,  4.49s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:36<12:35,  4.47s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:40<12:27,  4.45s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:44<12:19,  4.43s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:49<12:12,  4.41s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:53<12:08,  4.41s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:58<12:03,  4.41s/it]Tuning global sampler:  18%|█▊        | 37/200 [05:02<11:58,  4.41s/it]Tuning global sampler:  19%|█▉        | 38/200 [05:06<11:53,  4.41s/it]Tuning global sampler:  20%|█▉        | 39/200 [05:11<11:49,  4.40s/it]Tuning global sampler:  20%|██        | 40/200 [05:15<11:44,  4.40s/it]Tuning global sampler:  20%|██        | 41/200 [05:20<11:40,  4.41s/it]Tuning global sampler:  21%|██        | 42/200 [05:24<11:35,  4.40s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:28<11:33,  4.42s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:34<12:12,  4.69s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:38<11:52,  4.60s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:43<11:46,  4.59s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:47<11:33,  4.53s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:52<11:22,  4.49s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:56<11:14,  4.47s/it]Tuning global sampler:  25%|██▌       | 50/200 [06:00<11:06,  4.44s/it]Tuning global sampler:  26%|██▌       | 51/200 [06:05<11:00,  4.43s/it]Tuning global sampler:  26%|██▌       | 52/200 [06:09<10:54,  4.42s/it]Tuning global sampler:  26%|██▋       | 53/200 [06:14<10:48,  4.41s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:18<10:44,  4.41s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:22<10:37,  4.39s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:27<10:31,  4.39s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:31<10:28,  4.40s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:36<10:25,  4.41s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:40<10:21,  4.41s/it]Tuning global sampler:  30%|███       | 60/200 [06:44<10:18,  4.42s/it]Tuning global sampler:  30%|███       | 61/200 [06:49<10:13,  4.41s/it]Tuning global sampler:  31%|███       | 62/200 [06:53<10:09,  4.42s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:58<10:05,  4.42s/it]Tuning global sampler:  32%|███▏      | 64/200 [07:03<10:42,  4.72s/it]Tuning global sampler:  32%|███▎      | 65/200 [07:08<10:25,  4.63s/it]Tuning global sampler:  33%|███▎      | 66/200 [07:12<10:10,  4.55s/it]Tuning global sampler:  34%|███▎      | 67/200 [07:16<09:59,  4.51s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:21<09:51,  4.48s/it]Tuning global sampler:  34%|███▍      | 69/200 [07:25<09:44,  4.46s/it]Tuning global sampler:  34%|███▍      | 69/200 [07:30<14:14,  6.52s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.22s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.22s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.22s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.22s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.22s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.22s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.22s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.22s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]
15:54 ninjax INFO    : Saving samples to ./Aplus/injection_18/results_training.npz
15:54 ninjax INFO    : Saving the NF
15:54 ninjax INFO    : Time taken: 489.2502398490906 seconds (8.15417066415151 minutes)
15:54 ninjax INFO    : Creating the final corner plot
15:54 ninjax INFO    : Dumping the final production chains
15:54 ninjax INFO    : Chains shape is: (13, 220000)
15:54 ninjax INFO    : Key: M_c: ESS = 71766, Rhat = 1.0101333338768363
15:54 ninjax INFO    : Key: q: ESS = 51504, Rhat = 1.0138174532743036
15:54 ninjax INFO    : Key: s1_z: ESS = 58252, Rhat = 1.0133639837356854
15:54 ninjax INFO    : Key: s2_z: ESS = 51071, Rhat = 1.0138138349287007
15:54 ninjax INFO    : Key: lambda_1: ESS = 63159, Rhat = 1.0112988415676805
15:54 ninjax INFO    : Key: lambda_2: ESS = 73145, Rhat = 1.010698813058017
15:54 ninjax INFO    : Key: cos_iota: ESS = 43799, Rhat = 1.0158199669453816
15:54 ninjax INFO    : Key: d_L: ESS = 41181, Rhat = 1.0174807804360213
15:54 ninjax INFO    : Key: t_c: ESS = 47098, Rhat = 1.0145419366377701
15:54 ninjax INFO    : Key: phase_c: ESS = 41313, Rhat = 1.0161814486891705
15:54 ninjax INFO    : Key: psi: ESS = 70875, Rhat = 1.0109857364877561
15:54 ninjax INFO    : Key: ra: ESS = 60094, Rhat = 1.0120524048023987
15:54 ninjax INFO    : Key: sin_dec: ESS = 85894, Rhat = 1.0107837789692877
15:54 ninjax INFO    : Key: eta: ESS = 51504, Rhat = 1.0138174532743036
15:54 ninjax INFO    : Key: iota: ESS = 43799, Rhat = 1.0158199669453816
15:54 ninjax INFO    : Key: dec: ESS = 85894, Rhat = 1.0108011929927707
15:54 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.519 +/- 0.163
q: 0.717 +/- 0.221
s1_z: 0.015 +/- 0.026
s2_z: 0.009 +/- 0.028
lambda_1: 1599.598 +/- 1390.852
lambda_2: 1782.393 +/- 1464.042
cos_iota: -0.317 +/- 0.530
d_L: 451.182 +/- 283.889
t_c: 0.057 +/- 0.032
phase_c: 3.313 +/- 1.774
psi: 1.364 +/- 0.863
ra: 1.184 +/- 1.528
sin_dec: -0.522 +/- 0.430
Log probability: 83.934 +/- 80.968
Local acceptance: 0.890 +/- 0.312
Global acceptance: 0.015 +/- 0.120
Max loss: 22.782, Min loss: 8.070
Production summary
==========
M_c: 1.512 +/- 0.000
q: 0.870 +/- 0.085
s1_z: 0.026 +/- 0.017
s2_z: 0.022 +/- 0.018
lambda_1: 303.980 +/- 309.427
lambda_2: 466.017 +/- 453.150
cos_iota: -0.798 +/- 0.158
d_L: 203.717 +/- 34.454
t_c: 0.068 +/- 0.001
phase_c: 3.131 +/- 1.811
psi: 1.541 +/- 0.898
ra: 0.564 +/- 0.034
sin_dec: -0.715 +/- 0.014
Log probability: 178.837 +/- 2.629
Local acceptance: 0.737 +/- 0.440
Global acceptance: 0.115 +/- 0.319
DONE

JOB STATISTICS
==============
Job ID: 10906033
Cluster: snellius
User/Group: twouters2/twouters2
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 00:10:13
CPU Efficiency: 4.84% of 03:31:12 core-walltime
Job Wall-clock time: 00:13:12
Memory Utilized: 4.14 GB
Memory Efficiency: 41.41% of 10.00 GB (10.00 GB/node)
