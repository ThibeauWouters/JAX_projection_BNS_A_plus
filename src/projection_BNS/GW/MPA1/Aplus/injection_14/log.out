Tue Apr  1 15:41:21 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
15:41 ninjax INFO    : Checking and setting outdir
15:41 ninjax INFO    : Found generation prior file ./Aplus/injection_14/generation_prior.prior
15:41 ninjax INFO    : The outdir is set to ./Aplus/injection_14
15:41 ninjax INFO    : Loading the given config
15:41 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
15:41 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
15:41 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/MPA1/Aplus/injection_14/complete_config.json
15:41 ninjax INFO    : No seed specified. Generating a random seed: 269914
15:41 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 875382
15:41 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 486612
15:41 ninjax INFO    : Loading the priors
15:41 ninjax INFO    : Setting up the prior
15:41 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
15:41 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
15:41 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
15:41 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
15:41 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
15:41 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
15:41 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
15:41 ninjax INFO    :    dL_prior = PowerLaw(10.0, 1000.0, 2.0, naming=["d_L"])
15:41 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
15:41 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
15:41 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
15:41 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
15:41 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
15:41 ninjax INFO    : Setting up the generation prior
15:41 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.468645554845655, naming=["mass_1_source"])
15:41 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.468645554845655, naming=["mass_2_source"])
15:41 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
15:41 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
15:41 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
15:41 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
15:41 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
15:41 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
15:41 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
15:41 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
15:41 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
15:41 ninjax INFO    : Finished prior setup
15:41 ninjax INFO    : Setting the transforms
15:41 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
15:41 ninjax INFO    : transforms_str_list has 3 elements
15:41 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
15:41 ninjax INFO    : Setting the likelihood
15:41 ninjax INFO    : GW likelihood provided, setting up the GW pipe
15:41 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz
15:41 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz for BNS injections
15:41 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
15:41 ninjax INFO    : self.is_BNS_run is True
15:41 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
15:41 ninjax INFO    : GW run is an injection
15:41 ninjax INFO    : Setting up GW injection . . . 
15:41 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
15:41 ninjax INFO    : Generating new injection
15:41 ninjax INFO    : Sanity check: generated parameters:
15:41 ninjax INFO    : {'mass_1_source': 1.424108129513599, 'mass_2_source': 1.531855205788581, 's1_z': -0.010161884789743357, 's2_z': -0.041397462114416285, 'cos_iota': 0.4356053647459319, 'd_L': 136.57851248628876, 't_c': -0.0996414168197243, 'phase_c': 2.359986448121261, 'psi': 2.7100657786740525, 'ra': 1.2068449020797782, 'sin_dec': -0.3728727789570274}
15:41 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz . . . 
15:41 ninjax INFO    : Injected lambda_1: 300.90026851482503
15:41 ninjax INFO    : Injected lambda_2: 464.2285086549516
15:41 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.3253073812581442 is 256.0
15:41 ninjax INFO    : After transforms, the injection parameters are:
15:41 ninjax INFO    : {'mass_1_source': 1.531855205788581, 'mass_2_source': 1.424108129513599, 's1_z': -0.010161884789743357, 's2_z': -0.041397462114416285, 'cos_iota': 0.4356053647459319, 'd_L': 136.57851248628876, 't_c': -0.0996414168197243, 'phase_c': 2.359986448121261, 'psi': 2.7100657786740525, 'ra': 1.2068449020797782, 'sin_dec': -0.3728727789570274, 'q': 0.929662362429669, 'M_c': 1.3253073812581442, 'eta': 0.24966783573243223, 'iota': Array(1.12008563, dtype=float64, weak_type=True), 'dec': Array(-0.38210316, dtype=float64, weak_type=True), 'lambda_1': 300.90026851482503, 'lambda_2': 464.2285086549516}
15:41 ninjax INFO    : The trial injection parameters are {'M_c': 1.3253073812581442, 'eta': 0.24966783573243223, 's1_z': -0.010161884789743357, 's2_z': -0.041397462114416285, 'lambda_1': 300.90026851482503, 'lambda_2': 464.2285086549516, 'd_L': 136.57851248628876, 'phase_c': 2.359986448121261, 'iota': 1.120085634813364, 't_c': -0.0996414168197243, 'psi': 2.7100657786740525, 'ra': 1.2068449020797782, 'dec': -0.38210316109019465}
15:41 ninjax INFO    : Injecting signals . . .
15:41 ninjax INFO    : self.ifos
15:41 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
15:41 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
15:41 ninjax INFO    : [ 6.52876074e-23+4.01602556e-23j -3.94680153e-23+1.19077544e-23j
 -3.96910355e-23+3.00389675e-23j ...
  3.66884190e-23-3.82198482e-23j -9.29935788e-24-2.07997016e-23j
  3.32098042e-24+4.81606663e-23j]
15:41 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
15:41 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
15:41 ninjax INFO    : [-2.37644903e-23+2.64154830e-23j  2.74563894e-24+8.91404139e-23j
 -3.60726039e-23-4.33353486e-23j ...
 -9.77139068e-24-1.31390483e-23j -1.21694418e-23+5.45744289e-24j
  6.57888796e-23-8.07961111e-23j]
15:41 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
15:41 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
15:41 ninjax INFO    : [ 3.35581779e-23+1.22236404e-22j  7.21260155e-23+3.48672256e-23j
  2.78072350e-23+7.49017068e-23j ...
  6.74736804e-23-1.03561999e-22j  4.37600654e-23+4.93792234e-24j
 -6.82353037e-23-2.18882549e-24j]
15:41 ninjax INFO    : [1.43183556e-46 1.43058540e-46 1.42935095e-46 ... 6.39793039e-47
 6.39795354e-47 6.39797668e-47]
15:41 ninjax INFO    : SNR for ifo H1 is 14.854193139171263
15:41 ninjax INFO    : SNR for ifo L1 is 18.37044261148936
15:41 ninjax INFO    : SNR for ifo V1 is 6.653221439614541
15:41 ninjax INFO    : The network SNR is 24.543544387116814
15:41 ninjax INFO    : Network SNR passes threshold
15:41 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
15:41 ninjax INFO    :    mass_1_source: 1.531855205788581
15:41 ninjax INFO    :    mass_2_source: 1.424108129513599
15:41 ninjax INFO    :    s1_z: -0.010161884789743357
15:41 ninjax INFO    :    s2_z: -0.041397462114416285
15:41 ninjax INFO    :    cos_iota: 0.4356053647459319
15:41 ninjax INFO    :    d_L: 136.57851248628876
15:41 ninjax INFO    :    t_c: -0.0996414168197243
15:41 ninjax INFO    :    phase_c: 2.359986448121261
15:41 ninjax INFO    :    psi: 2.7100657786740525
15:41 ninjax INFO    :    ra: 1.2068449020797782
15:41 ninjax INFO    :    sin_dec: -0.3728727789570274
15:41 ninjax INFO    :    q: 0.929662362429669
15:41 ninjax INFO    :    M_c: 1.3253073812581442
15:41 ninjax INFO    :    eta: 0.24966783573243223
15:41 ninjax INFO    :    iota: 1.120085634813364
15:41 ninjax INFO    :    dec: -0.38210316109019465
15:41 ninjax INFO    :    lambda_1: 300.90026851482503
15:41 ninjax INFO    :    lambda_2: 464.2285086549516
15:41 ninjax INFO    :    H1_SNR: 14.854193139171263
15:41 ninjax INFO    :    L1_SNR: 18.37044261148936
15:41 ninjax INFO    :    V1_SNR: 6.653221439614541
15:41 ninjax INFO    :    network_SNR: 24.543544387116814
15:41 ninjax INFO    :    epoch: 254.0
15:41 ninjax INFO    :    gmst: 2.7288901910520846
15:41 ninjax INFO    :    duration: 256.0
15:41 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
15:41 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
15:41 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
15:45 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 200.04407596588135 seconds = 3.334067932764689 minutes
15:45 ninjax INFO    : The priors are not modified after their initialization
15:45 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
15:45 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
15:45 ninjax INFO    : sample: {'M_c': Array([1.89955354, 1.90949561, 2.37615455], dtype=float64), 'q': Array([0.7845853 , 0.99529937, 0.40460959], dtype=float64), 's1_z': Array([-0.03818088, -0.0275828 ,  0.02831156], dtype=float64), 's2_z': Array([ 0.03026341,  0.01173138, -0.01258093], dtype=float64), 'lambda_1': Array([1880.37626094, 4345.41670448, 2103.78537665], dtype=float64), 'lambda_2': Array([2189.32556338, 4064.33401623, 1373.48529271], dtype=float64), 'cos_iota': Array([0.67524106, 0.07076408, 0.1847089 ], dtype=float64), 'd_L': Array([530.82028851, 915.78942759, 609.29679934], dtype=float64), 't_c': Array([ 0.01767861,  0.03260922, -0.01705885], dtype=float64), 'phase_c': Array([1.58283666, 1.41689274, 2.76418161], dtype=float64), 'psi': Array([2.45622482, 2.60898092, 0.52855044], dtype=float64), 'ra': Array([3.92885622, 4.19721493, 1.59839791], dtype=float64), 'sin_dec': Array([-0.56613719, -0.27375716,  0.15427218], dtype=float64)}
15:45 ninjax INFO    : log_prob: [-110.84441799   -2.7640255    -7.87000762]
15:45 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.531855205788581, 'mass_2_source': 1.424108129513599, 's1_z': -0.010161884789743357, 's2_z': -0.041397462114416285, 'cos_iota': 0.4356053647459319, 'd_L': 136.57851248628876, 't_c': -0.0996414168197243, 'phase_c': 2.359986448121261, 'psi': 2.7100657786740525, 'ra': 1.2068449020797782, 'sin_dec': -0.3728727789570274, 'q': 0.929662362429669, 'M_c': 1.3253073812581442, 'eta': 0.24966783573243223, 'iota': Array(1.12008563, dtype=float64, weak_type=True), 'dec': Array(-0.38210316, dtype=float64, weak_type=True), 'lambda_1': 300.90026851482503, 'lambda_2': 464.2285086549516, 'H1_SNR': 14.854193139171263, 'L1_SNR': 18.37044261148936, 'V1_SNR': 6.653221439614541, 'network_SNR': 24.543544387116814, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
15:45 ninjax INFO    : log_prob at the injection parameters is: 244.76945758896045
15:45 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
15:45 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
15:45 ninjax INFO    : Ninjax setup complete.
15:45 ninjax INFO    : Saving output to ./Aplus/injection_14/
15:45 ninjax INFO    : Using polynomial learning rate scheduler
15:45 ninjax INFO    : The hyperparameters passed to flowMC and jim are
15:45 ninjax INFO    :    n_loop_training: 200
15:45 ninjax INFO    :    n_loop_production: 10
15:45 ninjax INFO    :    n_local_steps: 100
15:45 ninjax INFO    :    n_global_steps: 1000
15:45 ninjax INFO    :    n_epochs: 25
15:45 ninjax INFO    :    n_chains: 1000
15:45 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x1498701be320>
15:45 ninjax INFO    :    max_samples: 50000
15:45 ninjax INFO    :    momentum: 0.9
15:45 ninjax INFO    :    batch_size: 30000
15:45 ninjax INFO    :    use_global: True
15:45 ninjax INFO    :    keep_quantile: 0.0
15:45 ninjax INFO    :    train_thinning: 10
15:45 ninjax INFO    :    output_thinning: 50
15:45 ninjax INFO    :    n_sample_max: 10000
15:45 ninjax INFO    :    num_layers: 10
15:45 ninjax INFO    :    hidden_size: [128, 128]
15:45 ninjax INFO    :    num_bins: 8
15:45 ninjax INFO    :    save_training_chains: False
15:45 ninjax INFO    :    eps_mass_matrix: 1e-05
15:45 ninjax INFO    :    use_scheduler: True
15:45 ninjax INFO    :    use_temperature: False
15:45 ninjax INFO    :    which_temperature_schedule: exponential
15:45 ninjax INFO    :    starting_temperature: 2.0
15:45 ninjax INFO    :    stop_tempering_iteration: 75
15:45 ninjax INFO    :    stopping_criterion_global_acc: 0.1
15:45 ninjax INFO    :    stopping_criterion_loss: -inf
15:45 ninjax INFO    :    nf_model_kwargs: {}
15:45 ninjax INFO    :    local sampler arg not shown (pretty print)
15:45 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[ 7.01643985e-23 -4.56727514e-23 -3.28678555e-23  1.36792636e-22
 -1.65799301e-23  8.80653765e-24 -1.26335973e-23  2.01802464e-23
  9.12488369e-23 -8.56301921e-23]
[ 3.53313821e-23  1.48370545e-23  2.93302955e-23 -1.10716121e-23
 -1.14019781e-23 -9.60703548e-23 -3.45280039e-23 -2.95464304e-23
 -1.14733339e-22  4.57385828e-23]
Checking the noise that was generated in inject_signal ifo:
[-3.21993699e-23  1.10116939e-23 -4.32343265e-23 -5.33123177e-23
 -3.51902629e-23  2.59141077e-24  7.80329620e-24  1.36249086e-22
  3.36514253e-23 -4.26647365e-23]
[ 2.73602401e-23  9.10585164e-23 -4.78832661e-23 -3.04415671e-23
 -9.87396454e-23  3.44709245e-24 -4.57304422e-23  1.64999536e-22
 -8.22654395e-23 -1.87087770e-23]
Checking the noise that was generated in inject_signal ifo:
[ 3.52609680e-23  6.93532151e-23  3.13309464e-23 -3.65043195e-23
  8.25902398e-23  1.43537415e-23  2.08067733e-23 -6.83365831e-23
  2.04544235e-23 -3.21862732e-24]
[ 1.18725860e-22  3.76109500e-23  7.32304980e-23  2.99211194e-23
  2.80189885e-23 -1.15435806e-22  1.27200334e-22 -3.55003765e-23
 -9.93844584e-23  1.80592057e-24]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.1809697151184082 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.531855205788581, 'mass_2_source': 1.424108129513599, 's1_z': -0.010161884789743357, 's2_z': -0.041397462114416285, 'cos_iota': 0.4356053647459319, 'd_L': 136.57851248628876, 't_c': -0.0996414168197243, 'phase_c': 2.359986448121261, 'psi': 2.7100657786740525, 'ra': 1.2068449020797782, 'sin_dec': -0.3728727789570274, 'q': 0.929662362429669, 'M_c': 1.3253073812581442, 'eta': 0.24966783573243223, 'iota': Array(1.12008563, dtype=float64, weak_type=True), 'dec': Array(-0.38210316, dtype=float64, weak_type=True), 'lambda_1': 300.90026851482503, 'lambda_2': 464.2285086549516, 'H1_SNR': 14.854193139171263, 'L1_SNR': 18.37044261148936, 'V1_SNR': 6.653221439614541, 'network_SNR': 24.543544387116814, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5127429962158203 seconds
Time for h_sky_low and h_sky_center: 5.483459949493408 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.7585227489471436
Going to compute coefficients . . .
Time for computing coefficients: 177.88093614578247 seconds
Time for computing coefficients: 7.430758237838745 seconds
Time for computing coefficients: 7.265196084976196 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:02<6:45:41, 122.32s/it]Tuning global sampler:   1%|          | 2/200 [02:06<2:55:04, 53.06s/it] Tuning global sampler:   2%|▏         | 3/200 [02:11<1:41:35, 30.94s/it]Tuning global sampler:   2%|▏         | 4/200 [02:16<1:07:08, 20.55s/it]Tuning global sampler:   2%|▎         | 5/200 [02:20<48:05, 14.80s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:25<36:39, 11.34s/it]Tuning global sampler:   4%|▎         | 7/200 [02:29<29:18,  9.11s/it]Tuning global sampler:   4%|▍         | 8/200 [02:34<24:32,  7.67s/it]Tuning global sampler:   4%|▍         | 9/200 [02:38<21:16,  6.68s/it]Tuning global sampler:   5%|▌         | 10/200 [02:43<18:56,  5.98s/it]Tuning global sampler:   6%|▌         | 11/200 [02:48<17:33,  5.58s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:32,  5.28s/it]Tuning global sampler:   6%|▋         | 13/200 [02:57<15:45,  5.06s/it]Tuning global sampler:   7%|▋         | 14/200 [03:01<15:16,  4.93s/it]Tuning global sampler:   8%|▊         | 15/200 [03:06<14:56,  4.85s/it]Tuning global sampler:   8%|▊         | 16/200 [03:11<14:39,  4.78s/it]Tuning global sampler:   8%|▊         | 17/200 [03:15<14:26,  4.74s/it]Tuning global sampler:   9%|▉         | 18/200 [03:21<15:08,  4.99s/it]Tuning global sampler:  10%|▉         | 19/200 [03:25<14:45,  4.89s/it]Tuning global sampler:  10%|█         | 20/200 [03:30<14:29,  4.83s/it]Tuning global sampler:  10%|█         | 21/200 [03:35<14:13,  4.77s/it]Tuning global sampler:  11%|█         | 22/200 [03:39<14:00,  4.72s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:44<13:49,  4.68s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:48<13:30,  4.60s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:53<13:17,  4.56s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:57<13:03,  4.50s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:02<12:53,  4.47s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:06<12:44,  4.44s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:10<12:37,  4.43s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:15<12:30,  4.41s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:20<13:14,  4.70s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:25<12:53,  4.61s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:29<12:36,  4.53s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:33<12:23,  4.48s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:38<12:14,  4.45s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:42<12:06,  4.43s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:47<12:48,  4.71s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:52<12:27,  4.62s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:56<12:11,  4.54s/it]Tuning global sampler:  20%|██        | 40/200 [05:01<12:04,  4.53s/it]Tuning global sampler:  20%|██        | 41/200 [05:05<11:53,  4.49s/it]Tuning global sampler:  21%|██        | 42/200 [05:09<11:43,  4.46s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:14<11:36,  4.43s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:18<11:28,  4.41s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:23<11:20,  4.39s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:27<11:15,  4.39s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:31<11:11,  4.39s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:36<11:06,  4.38s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:40<11:02,  4.39s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:44<10:58,  4.39s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:49<10:54,  4.39s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:53<10:49,  4.39s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:58<10:44,  4.39s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:02<10:40,  4.39s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:06<10:34,  4.38s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:11<10:28,  4.37s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:16<11:10,  4.69s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:21<10:53,  4.60s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:25<10:40,  4.54s/it]Tuning global sampler:  30%|███       | 60/200 [06:29<10:30,  4.50s/it]Tuning global sampler:  30%|███       | 61/200 [06:34<10:20,  4.47s/it]Tuning global sampler:  31%|███       | 62/200 [06:38<10:13,  4.45s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:43<10:07,  4.44s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:47<10:00,  4.42s/it]Tuning global sampler:  32%|███▎      | 65/200 [06:51<10:01,  4.46s/it]Tuning global sampler:  33%|███▎      | 66/200 [06:56<09:52,  4.42s/it]Tuning global sampler:  34%|███▎      | 67/200 [07:00<09:45,  4.40s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:05<09:40,  4.40s/it]Tuning global sampler:  34%|███▍      | 69/200 [07:09<09:36,  4.40s/it]Tuning global sampler:  35%|███▌      | 70/200 [07:13<09:31,  4.39s/it]Tuning global sampler:  36%|███▌      | 71/200 [07:18<09:26,  4.39s/it]Tuning global sampler:  36%|███▌      | 72/200 [07:22<09:21,  4.39s/it]Tuning global sampler:  36%|███▋      | 73/200 [07:26<09:17,  4.39s/it]Tuning global sampler:  37%|███▋      | 74/200 [07:31<09:13,  4.39s/it]Tuning global sampler:  38%|███▊      | 75/200 [07:35<09:10,  4.40s/it]Tuning global sampler:  38%|███▊      | 76/200 [07:40<09:06,  4.41s/it]Tuning global sampler:  38%|███▊      | 77/200 [07:45<09:39,  4.71s/it]Tuning global sampler:  39%|███▉      | 78/200 [07:50<09:22,  4.61s/it]Tuning global sampler:  40%|███▉      | 79/200 [07:54<09:08,  4.54s/it]Tuning global sampler:  40%|███▉      | 79/200 [07:58<12:13,  6.06s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.21s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.21s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.21s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.21s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.21s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.21s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.21s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.21s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]
15:54 ninjax INFO    : Saving samples to ./Aplus/injection_14/results_training.npz
15:54 ninjax INFO    : Saving the NF
15:54 ninjax INFO    : Time taken: 526.4079985618591 seconds (8.773466642697652 minutes)
15:54 ninjax INFO    : Creating the final corner plot
15:54 ninjax INFO    : Dumping the final production chains
15:54 ninjax INFO    : Chains shape is: (13, 220000)
15:54 ninjax INFO    : Key: M_c: ESS = 35996, Rhat = 1.0192026695581833
15:54 ninjax INFO    : Key: q: ESS = 24897, Rhat = 1.0263732865406776
15:54 ninjax INFO    : Key: s1_z: ESS = 31059, Rhat = 1.0212568438127354
15:54 ninjax INFO    : Key: s2_z: ESS = 30222, Rhat = 1.0216976836897373
15:54 ninjax INFO    : Key: lambda_1: ESS = 50986, Rhat = 1.0138670991127647
15:54 ninjax INFO    : Key: lambda_2: ESS = 51109, Rhat = 1.0137109282703622
15:54 ninjax INFO    : Key: cos_iota: ESS = 21516, Rhat = 1.028883956200569
15:54 ninjax INFO    : Key: d_L: ESS = 20546, Rhat = 1.030293155716235
15:54 ninjax INFO    : Key: t_c: ESS = 28003, Rhat = 1.0225138237876916
15:54 ninjax INFO    : Key: phase_c: ESS = 38431, Rhat = 1.0177528623051395
15:54 ninjax INFO    : Key: psi: ESS = 38691, Rhat = 1.0172854579781978
15:54 ninjax INFO    : Key: ra: ESS = 29491, Rhat = 1.0221697535366148
15:54 ninjax INFO    : Key: sin_dec: ESS = 27349, Rhat = 1.0231133931867327
15:54 ninjax INFO    : Key: eta: ESS = 24897, Rhat = 1.0263732865406776
15:54 ninjax INFO    : Key: iota: ESS = 21516, Rhat = 1.028883956200569
15:54 ninjax INFO    : Key: dec: ESS = 27349, Rhat = 1.0231133931867327
15:54 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.374 +/- 0.209
q: 0.749 +/- 0.182
s1_z: 0.001 +/- 0.027
s2_z: -0.007 +/- 0.027
lambda_1: 1717.406 +/- 1424.704
lambda_2: 1863.381 +/- 1406.069
cos_iota: 0.484 +/- 0.521
d_L: 507.441 +/- 275.819
t_c: -0.080 +/- 0.040
phase_c: 3.049 +/- 1.772
psi: 1.395 +/- 0.879
ra: 1.578 +/- 0.940
sin_dec: -0.100 +/- 0.293
Log probability: 123.049 +/- 105.144
Local acceptance: 0.647 +/- 0.478
Global acceptance: 0.012 +/- 0.107
Max loss: 22.862, Min loss: 6.388
Production summary
==========
M_c: 1.325 +/- 0.000
q: 0.782 +/- 0.119
s1_z: -0.009 +/- 0.025
s2_z: -0.008 +/- 0.026
lambda_1: 263.289 +/- 224.232
lambda_2: 572.478 +/- 442.767
cos_iota: 0.774 +/- 0.172
d_L: 216.024 +/- 38.256
t_c: -0.098 +/- 0.001
phase_c: 3.121 +/- 1.796
psi: 1.699 +/- 0.906
ra: 1.230 +/- 0.014
sin_dec: -0.286 +/- 0.045
Log probability: 242.632 +/- 2.352
Local acceptance: 0.289 +/- 0.453
Global acceptance: 0.111 +/- 0.314
DONE

JOB STATISTICS
==============
Job ID: 10906029
Cluster: snellius
User/Group: twouters2/twouters2
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 00:11:18
CPU Efficiency: 5.22% of 03:36:32 core-walltime
Job Wall-clock time: 00:13:32
Memory Utilized: 4.72 GB
Memory Efficiency: 47.20% of 10.00 GB (10.00 GB/node)
