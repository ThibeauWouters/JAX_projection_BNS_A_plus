Tue Apr  1 15:41:26 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
15:41 ninjax INFO    : Checking and setting outdir
15:41 ninjax INFO    : Found generation prior file ./Aplus/injection_24/generation_prior.prior
15:41 ninjax INFO    : The outdir is set to ./Aplus/injection_24
15:41 ninjax INFO    : Loading the given config
15:41 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
15:41 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
15:41 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/MPA1/Aplus/injection_24/complete_config.json
15:41 ninjax INFO    : No seed specified. Generating a random seed: 552119
15:41 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 98635
15:41 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 284058
15:41 ninjax INFO    : Loading the priors
15:41 ninjax INFO    : Setting up the prior
15:41 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
15:41 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
15:41 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
15:41 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
15:41 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
15:41 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
15:41 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
15:41 ninjax INFO    :    dL_prior = PowerLaw(10.0, 1000.0, 2.0, naming=["d_L"])
15:41 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
15:41 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
15:41 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
15:41 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
15:41 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
15:41 ninjax INFO    : Setting up the generation prior
15:41 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.468645554845655, naming=["mass_1_source"])
15:41 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.468645554845655, naming=["mass_2_source"])
15:41 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
15:41 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
15:41 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
15:41 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
15:41 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
15:41 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
15:41 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
15:41 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
15:41 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
15:41 ninjax INFO    : Finished prior setup
15:41 ninjax INFO    : Setting the transforms
15:41 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
15:41 ninjax INFO    : transforms_str_list has 3 elements
15:41 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
15:41 ninjax INFO    : Setting the likelihood
15:41 ninjax INFO    : GW likelihood provided, setting up the GW pipe
15:41 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz
15:41 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz for BNS injections
15:41 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
15:41 ninjax INFO    : self.is_BNS_run is True
15:41 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
15:41 ninjax INFO    : GW run is an injection
15:41 ninjax INFO    : Setting up GW injection . . . 
15:41 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
15:41 ninjax INFO    : Generating new injection
15:41 ninjax INFO    : Sanity check: generated parameters:
15:41 ninjax INFO    : {'mass_1_source': 1.831137669977107, 'mass_2_source': 1.2641291007102777, 's1_z': 0.02803622556027674, 's2_z': 0.010894393590036654, 'cos_iota': 0.36612090249492635, 'd_L': 311.95287646113894, 't_c': 0.09561550016001119, 'phase_c': 0.5437624435790531, 'psi': 0.055123281024105575, 'ra': 3.9769404777282795, 'sin_dec': -0.36299490285045}
15:41 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz . . . 
15:41 ninjax INFO    : Injected lambda_1: 94.3556274871402
15:41 ninjax INFO    : Injected lambda_2: 911.4218313543591
15:41 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.413023971629116 is 128.0
15:41 ninjax INFO    : After transforms, the injection parameters are:
15:41 ninjax INFO    : {'mass_1_source': 1.831137669977107, 'mass_2_source': 1.2641291007102777, 's1_z': 0.02803622556027674, 's2_z': 0.010894393590036654, 'cos_iota': 0.36612090249492635, 'd_L': 311.95287646113894, 't_c': 0.09561550016001119, 'phase_c': 0.5437624435790531, 'psi': 0.055123281024105575, 'ra': 3.9769404777282795, 'sin_dec': -0.36299490285045, 'q': 0.6903517531404845, 'M_c': 1.413023971629116, 'eta': 0.24161075103644594, 'iota': Array(1.19595927, dtype=float64, weak_type=True), 'dec': Array(-0.37148002, dtype=float64, weak_type=True), 'lambda_1': 94.3556274871402, 'lambda_2': 911.4218313543591}
15:41 ninjax INFO    : The trial injection parameters are {'M_c': 1.413023971629116, 'eta': 0.24161075103644594, 's1_z': 0.02803622556027674, 's2_z': 0.010894393590036654, 'lambda_1': 94.3556274871402, 'lambda_2': 911.4218313543591, 'd_L': 311.95287646113894, 'phase_c': 0.5437624435790531, 'iota': 1.195959271972074, 't_c': 0.09561550016001119, 'psi': 0.055123281024105575, 'ra': 3.9769404777282795, 'dec': -0.3714800246395081}
15:41 ninjax INFO    : Injecting signals . . .
15:41 ninjax INFO    : self.ifos
15:41 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
15:41 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:41 ninjax INFO    : [-1.41305016e-22-8.49680284e-24j -4.11370101e-24+4.33111774e-23j
  6.35825185e-23+2.43894061e-23j ...
 -2.85118218e-24-1.62154989e-23j  3.34225038e-23-8.81771588e-24j
  6.84663044e-25+9.89911667e-24j]
15:41 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
15:41 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:41 ninjax INFO    : [-5.88391626e-23-3.18168773e-23j  1.69874212e-23+1.40828836e-23j
 -1.05638451e-23+2.50202792e-23j ...
 -2.35106163e-23+2.63382041e-23j -3.46191837e-24-4.58885985e-24j
 -6.44806786e-24+2.41026652e-23j]
15:41 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
15:41 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:41 ninjax INFO    : [ 4.27211177e-23-3.18930945e-23j  6.93735200e-23-8.61745255e-23j
  5.50309423e-23-7.56949272e-24j ...
 -1.23166522e-23+6.69095100e-23j -5.84300405e-24+4.44932722e-23j
 -5.32015130e-25-2.50459586e-23j]
15:41 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
15:41 ninjax INFO    : SNR for ifo H1 is 8.755637058764997
15:41 ninjax INFO    : SNR for ifo L1 is 9.859644106826254
15:41 ninjax INFO    : SNR for ifo V1 is 2.6982667061028947
15:41 ninjax INFO    : The network SNR is 13.459361256588515
15:41 ninjax INFO    : Network SNR passes threshold
15:41 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
15:41 ninjax INFO    :    mass_1_source: 1.831137669977107
15:41 ninjax INFO    :    mass_2_source: 1.2641291007102777
15:41 ninjax INFO    :    s1_z: 0.02803622556027674
15:41 ninjax INFO    :    s2_z: 0.010894393590036654
15:41 ninjax INFO    :    cos_iota: 0.36612090249492635
15:41 ninjax INFO    :    d_L: 311.95287646113894
15:41 ninjax INFO    :    t_c: 0.09561550016001119
15:41 ninjax INFO    :    phase_c: 0.5437624435790531
15:41 ninjax INFO    :    psi: 0.055123281024105575
15:41 ninjax INFO    :    ra: 3.9769404777282795
15:41 ninjax INFO    :    sin_dec: -0.36299490285045
15:41 ninjax INFO    :    q: 0.6903517531404845
15:41 ninjax INFO    :    M_c: 1.413023971629116
15:41 ninjax INFO    :    eta: 0.24161075103644594
15:41 ninjax INFO    :    iota: 1.195959271972074
15:41 ninjax INFO    :    dec: -0.3714800246395081
15:41 ninjax INFO    :    lambda_1: 94.3556274871402
15:41 ninjax INFO    :    lambda_2: 911.4218313543591
15:41 ninjax INFO    :    H1_SNR: 8.755637058764997
15:41 ninjax INFO    :    L1_SNR: 9.859644106826254
15:41 ninjax INFO    :    V1_SNR: 2.6982667061028947
15:41 ninjax INFO    :    network_SNR: 13.459361256588515
15:41 ninjax INFO    :    epoch: 126.0
15:41 ninjax INFO    :    gmst: 2.7288901910520846
15:41 ninjax INFO    :    duration: 128.0
15:41 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
15:41 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
15:41 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
15:44 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 152.68867993354797 seconds = 2.5448113322257995 minutes
15:44 ninjax INFO    : The priors are not modified after their initialization
15:44 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
15:44 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
15:44 ninjax INFO    : sample: {'M_c': Array([1.01065755, 2.11433656, 1.13081292], dtype=float64), 'q': Array([0.66729557, 0.4269944 , 0.27695228], dtype=float64), 's1_z': Array([0.02317687, 0.04533531, 0.01315226], dtype=float64), 's2_z': Array([-0.04800099,  0.00639549, -0.00070361], dtype=float64), 'lambda_1': Array([4833.73855773, 4754.25178342, 3477.89429649], dtype=float64), 'lambda_2': Array([1789.49114943, 4445.69955986, 3387.65316031], dtype=float64), 'cos_iota': Array([-0.07592416, -0.66921525,  0.45442852], dtype=float64), 'd_L': Array([475.76589747, 355.00583009, 631.83841803], dtype=float64), 't_c': Array([-0.07700383,  0.06997268,  0.00587764], dtype=float64), 'phase_c': Array([2.21000274, 0.25265755, 1.63084505], dtype=float64), 'psi': Array([2.13424246, 0.22464042, 2.97982958], dtype=float64), 'ra': Array([2.40262139, 4.03804649, 1.4032873 ], dtype=float64), 'sin_dec': Array([-0.86886049, -0.58184126, -0.62305049], dtype=float64)}
15:44 ninjax INFO    : log_prob: [ -12.61131151 -357.28315592   -6.77451882]
15:44 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.831137669977107, 'mass_2_source': 1.2641291007102777, 's1_z': 0.02803622556027674, 's2_z': 0.010894393590036654, 'cos_iota': 0.36612090249492635, 'd_L': 311.95287646113894, 't_c': 0.09561550016001119, 'phase_c': 0.5437624435790531, 'psi': 0.055123281024105575, 'ra': 3.9769404777282795, 'sin_dec': -0.36299490285045, 'q': 0.6903517531404845, 'M_c': 1.413023971629116, 'eta': 0.24161075103644594, 'iota': Array(1.19595927, dtype=float64, weak_type=True), 'dec': Array(-0.37148002, dtype=float64, weak_type=True), 'lambda_1': 94.3556274871402, 'lambda_2': 911.4218313543591, 'H1_SNR': 8.755637058764997, 'L1_SNR': 9.859644106826254, 'V1_SNR': 2.6982667061028947, 'network_SNR': 13.459361256588515, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
15:44 ninjax INFO    : log_prob at the injection parameters is: 65.19948223117191
15:44 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
15:44 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
15:44 ninjax INFO    : Ninjax setup complete.
15:44 ninjax INFO    : Saving output to ./Aplus/injection_24/
15:44 ninjax INFO    : Using polynomial learning rate scheduler
15:44 ninjax INFO    : The hyperparameters passed to flowMC and jim are
15:44 ninjax INFO    :    n_loop_training: 200
15:44 ninjax INFO    :    n_loop_production: 10
15:44 ninjax INFO    :    n_local_steps: 100
15:44 ninjax INFO    :    n_global_steps: 1000
15:44 ninjax INFO    :    n_epochs: 25
15:44 ninjax INFO    :    n_chains: 1000
15:44 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x150b062fba30>
15:44 ninjax INFO    :    max_samples: 50000
15:44 ninjax INFO    :    momentum: 0.9
15:44 ninjax INFO    :    batch_size: 30000
15:44 ninjax INFO    :    use_global: True
15:44 ninjax INFO    :    keep_quantile: 0.0
15:44 ninjax INFO    :    train_thinning: 10
15:44 ninjax INFO    :    output_thinning: 50
15:44 ninjax INFO    :    n_sample_max: 10000
15:44 ninjax INFO    :    num_layers: 10
15:44 ninjax INFO    :    hidden_size: [128, 128]
15:44 ninjax INFO    :    num_bins: 8
15:44 ninjax INFO    :    save_training_chains: False
15:44 ninjax INFO    :    eps_mass_matrix: 1e-05
15:44 ninjax INFO    :    use_scheduler: True
15:44 ninjax INFO    :    use_temperature: False
15:44 ninjax INFO    :    which_temperature_schedule: exponential
15:44 ninjax INFO    :    starting_temperature: 2.0
15:44 ninjax INFO    :    stop_tempering_iteration: 75
15:44 ninjax INFO    :    stopping_criterion_global_acc: 0.1
15:44 ninjax INFO    :    stopping_criterion_loss: -inf
15:44 ninjax INFO    :    nf_model_kwargs: {}
15:44 ninjax INFO    :    local sampler arg not shown (pretty print)
15:44 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[-1.40692357e-22 -3.59657634e-24  6.39781154e-23  1.99156065e-23
 -1.26156342e-23 -2.53285122e-23 -1.49480614e-24 -5.44093371e-23
 -6.86881065e-23  6.24468157e-23]
[-1.25010920e-23  3.92953037e-23  2.03616079e-23 -6.79476783e-23
 -2.81381960e-23  4.47221281e-23  1.84413928e-23  8.12265261e-24
  7.26593025e-23 -5.62655213e-23]
Checking the noise that was generated in inject_signal ifo:
[-5.94929251e-23  1.64416010e-23 -1.09724485e-23 -1.78382848e-23
 -3.12412935e-23  1.65399028e-23  1.47858882e-22  2.31126545e-24
 -2.71084702e-23  2.73266763e-23]
[-2.73023009e-23  1.86096745e-23  2.95594170e-23  1.03578332e-22
 -1.53662813e-23 -1.65183286e-23  3.43426896e-23 -2.52007595e-23
  4.58271806e-23  1.06635003e-22]
Checking the noise that was generated in inject_signal ifo:
[ 4.42199527e-23  7.08829347e-23  5.65529566e-23  3.25193219e-24
  3.35875121e-23 -1.46854693e-24  9.68520186e-24  2.90900220e-23
  4.34757429e-24  6.12637261e-23]
[-3.13804250e-23 -8.56962932e-23 -7.13565263e-24  5.43553382e-23
  3.48516960e-23  6.24950642e-23 -1.63214347e-23  1.95643613e-23
  5.13127662e-24  1.41253568e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.11267542839050293 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.831137669977107, 'mass_2_source': 1.2641291007102777, 's1_z': 0.02803622556027674, 's2_z': 0.010894393590036654, 'cos_iota': 0.36612090249492635, 'd_L': 311.95287646113894, 't_c': 0.09561550016001119, 'phase_c': 0.5437624435790531, 'psi': 0.055123281024105575, 'ra': 3.9769404777282795, 'sin_dec': -0.36299490285045, 'q': 0.6903517531404845, 'M_c': 1.413023971629116, 'eta': 0.24161075103644594, 'iota': Array(1.19595927, dtype=float64, weak_type=True), 'dec': Array(-0.37148002, dtype=float64, weak_type=True), 'lambda_1': 94.3556274871402, 'lambda_2': 911.4218313543591, 'H1_SNR': 8.755637058764997, 'L1_SNR': 9.859644106826254, 'V1_SNR': 2.6982667061028947, 'network_SNR': 13.459361256588515, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.519188642501831 seconds
Time for h_sky_low and h_sky_center: 5.401311635971069 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.6611676216125488
Going to compute coefficients . . .
Time for computing coefficients: 131.16115832328796 seconds
Time for computing coefficients: 7.0338804721832275 seconds
Time for computing coefficients: 7.261255502700806 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:01<6:42:36, 121.39s/it]Tuning global sampler:   1%|          | 2/200 [02:05<2:53:52, 52.69s/it] Tuning global sampler:   2%|▏         | 3/200 [02:10<1:40:58, 30.75s/it]Tuning global sampler:   2%|▏         | 4/200 [02:15<1:06:47, 20.45s/it]Tuning global sampler:   2%|▎         | 5/200 [02:19<47:56, 14.75s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:24<36:35, 11.32s/it]Tuning global sampler:   4%|▎         | 7/200 [02:30<30:13,  9.40s/it]Tuning global sampler:   4%|▍         | 8/200 [02:34<25:13,  7.88s/it]Tuning global sampler:   4%|▍         | 9/200 [02:39<21:48,  6.85s/it]Tuning global sampler:   5%|▌         | 10/200 [02:43<19:21,  6.11s/it]Tuning global sampler:   6%|▌         | 11/200 [02:48<17:50,  5.66s/it]Tuning global sampler:   6%|▌         | 12/200 [02:53<16:47,  5.36s/it]Tuning global sampler:   6%|▋         | 13/200 [02:57<15:59,  5.13s/it]Tuning global sampler:   7%|▋         | 14/200 [03:02<15:32,  5.01s/it]Tuning global sampler:   8%|▊         | 15/200 [03:07<15:08,  4.91s/it]Tuning global sampler:   8%|▊         | 16/200 [03:11<14:50,  4.84s/it]Tuning global sampler:   8%|▊         | 17/200 [03:16<14:45,  4.84s/it]Tuning global sampler:   9%|▉         | 18/200 [03:21<14:32,  4.80s/it]Tuning global sampler:  10%|▉         | 19/200 [03:25<14:21,  4.76s/it]Tuning global sampler:  10%|█         | 20/200 [03:30<14:12,  4.74s/it]Tuning global sampler:  10%|█         | 21/200 [03:35<14:04,  4.72s/it]Tuning global sampler:  11%|█         | 22/200 [03:40<14:44,  4.97s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:45<14:21,  4.87s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:49<13:55,  4.75s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:54<13:34,  4.65s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:58<13:25,  4.63s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:03<13:09,  4.56s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:07<12:57,  4.52s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:12<12:47,  4.49s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:16<12:42,  4.48s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:21<12:39,  4.49s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:25<12:33,  4.49s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:30<12:23,  4.45s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:34<12:14,  4.43s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:38<12:09,  4.42s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:43<12:04,  4.42s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:47<11:59,  4.41s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:52<11:55,  4.42s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:56<11:50,  4.41s/it]Tuning global sampler:  20%|██        | 40/200 [05:00<11:46,  4.41s/it]Tuning global sampler:  20%|██        | 41/200 [05:06<12:26,  4.70s/it]Tuning global sampler:  21%|██        | 42/200 [05:10<12:08,  4.61s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:15<11:54,  4.55s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:19<11:42,  4.50s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:23<11:31,  4.46s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:28<11:25,  4.45s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:32<11:18,  4.44s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:37<11:12,  4.43s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:41<11:08,  4.43s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:45<11:06,  4.44s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:50<11:00,  4.43s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:54<10:54,  4.43s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:59<10:49,  4.42s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:03<10:45,  4.42s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:07<10:38,  4.40s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:12<10:32,  4.39s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:16<10:29,  4.40s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:21<10:26,  4.41s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:25<10:22,  4.42s/it]Tuning global sampler:  30%|███       | 60/200 [06:29<10:18,  4.42s/it]Tuning global sampler:  30%|███       | 61/200 [06:34<10:13,  4.42s/it]Tuning global sampler:  31%|███       | 62/200 [06:39<10:49,  4.71s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:44<10:34,  4.63s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:48<10:20,  4.56s/it]Tuning global sampler:  32%|███▎      | 65/200 [06:53<10:09,  4.52s/it]Tuning global sampler:  33%|███▎      | 66/200 [06:57<09:59,  4.47s/it]Tuning global sampler:  34%|███▎      | 67/200 [07:01<09:51,  4.44s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:06<09:45,  4.43s/it]Tuning global sampler:  34%|███▍      | 69/200 [07:10<09:40,  4.43s/it]Tuning global sampler:  35%|███▌      | 70/200 [07:15<09:35,  4.43s/it]Tuning global sampler:  36%|███▌      | 71/200 [07:19<09:31,  4.43s/it]Tuning global sampler:  36%|███▌      | 72/200 [07:23<09:26,  4.43s/it]Tuning global sampler:  36%|███▋      | 73/200 [07:28<09:21,  4.42s/it]Tuning global sampler:  37%|███▋      | 74/200 [07:32<09:16,  4.42s/it]Tuning global sampler:  38%|███▊      | 75/200 [07:37<09:12,  4.42s/it]Tuning global sampler:  38%|███▊      | 76/200 [07:41<09:07,  4.42s/it]Tuning global sampler:  38%|███▊      | 77/200 [07:45<09:02,  4.41s/it]Tuning global sampler:  39%|███▉      | 78/200 [07:50<08:56,  4.40s/it]Tuning global sampler:  40%|███▉      | 79/200 [07:54<08:52,  4.40s/it]Tuning global sampler:  40%|████      | 80/200 [07:59<08:49,  4.41s/it]Tuning global sampler:  40%|████      | 81/200 [08:03<08:45,  4.41s/it]Tuning global sampler:  41%|████      | 82/200 [08:09<09:18,  4.73s/it]Tuning global sampler:  42%|████▏     | 83/200 [08:13<09:03,  4.64s/it]Tuning global sampler:  42%|████▏     | 84/200 [08:17<08:52,  4.59s/it]Tuning global sampler:  42%|████▎     | 85/200 [08:22<08:43,  4.56s/it]Tuning global sampler:  43%|████▎     | 86/200 [08:26<08:38,  4.55s/it]Tuning global sampler:  44%|████▎     | 87/200 [08:31<08:30,  4.52s/it]Tuning global sampler:  44%|████▍     | 88/200 [08:36<08:29,  4.55s/it]Tuning global sampler:  44%|████▍     | 89/200 [08:40<08:20,  4.51s/it]Tuning global sampler:  45%|████▌     | 90/200 [08:44<08:13,  4.48s/it]Tuning global sampler:  46%|████▌     | 91/200 [08:49<08:06,  4.46s/it]Tuning global sampler:  46%|████▌     | 92/200 [08:53<08:00,  4.45s/it]Tuning global sampler:  46%|████▋     | 93/200 [08:58<07:56,  4.45s/it]Tuning global sampler:  46%|████▋     | 93/200 [09:02<10:24,  5.83s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.22s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.22s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.22s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.22s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.22s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.22s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.22s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.22s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]
15:54 ninjax INFO    : Saving samples to ./Aplus/injection_24/results_training.npz
15:54 ninjax INFO    : Saving the NF
15:54 ninjax INFO    : Time taken: 581.3925366401672 seconds (9.689875610669453 minutes)
15:54 ninjax INFO    : Creating the final corner plot
15:54 ninjax INFO    : Dumping the final production chains
15:54 ninjax INFO    : Chains shape is: (13, 220000)
15:54 ninjax INFO    : Key: M_c: ESS = 25842, Rhat = 1.0255742441341364
15:54 ninjax INFO    : Key: q: ESS = 21532, Rhat = 1.0296584170984735
15:54 ninjax INFO    : Key: s1_z: ESS = 29890, Rhat = 1.0212068503214575
15:54 ninjax INFO    : Key: s2_z: ESS = 30296, Rhat = 1.0209125578914506
15:54 ninjax INFO    : Key: lambda_1: ESS = 18398, Rhat = 1.0343517167299021
15:54 ninjax INFO    : Key: lambda_2: ESS = 35574, Rhat = 1.0184700066663939
15:54 ninjax INFO    : Key: cos_iota: ESS = 37872, Rhat = 1.01742971639964
15:54 ninjax INFO    : Key: d_L: ESS = 25440, Rhat = 1.0247609551243504
15:54 ninjax INFO    : Key: t_c: ESS = 23715, Rhat = 1.0268196274274743
15:54 ninjax INFO    : Key: phase_c: ESS = 26428, Rhat = 1.0242979719050753
15:54 ninjax INFO    : Key: psi: ESS = 33077, Rhat = 1.0220617822873372
15:54 ninjax INFO    : Key: ra: ESS = 41304, Rhat = 1.017838755072596
15:54 ninjax INFO    : Key: sin_dec: ESS = 30647, Rhat = 1.0202663236519174
15:54 ninjax INFO    : Key: eta: ESS = 21532, Rhat = 1.0296584170984735
15:54 ninjax INFO    : Key: iota: ESS = 37872, Rhat = 1.01742971639964
15:54 ninjax INFO    : Key: dec: ESS = 30647, Rhat = 1.0202663236519174
15:54 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.478 +/- 0.303
q: 0.638 +/- 0.237
s1_z: 0.006 +/- 0.028
s2_z: 0.006 +/- 0.027
lambda_1: 1878.229 +/- 1431.395
lambda_2: 2195.776 +/- 1410.242
cos_iota: 0.101 +/- 0.524
d_L: 753.088 +/- 171.295
t_c: 0.058 +/- 0.059
phase_c: 3.260 +/- 1.780
psi: 1.495 +/- 0.889
ra: 3.770 +/- 1.205
sin_dec: -0.275 +/- 0.433
Log probability: 13.643 +/- 34.350
Local acceptance: 0.951 +/- 0.217
Global acceptance: 0.023 +/- 0.150
Max loss: 22.779, Min loss: 8.572
Production summary
==========
M_c: 1.413 +/- 0.000
q: 0.857 +/- 0.094
s1_z: 0.020 +/- 0.021
s2_z: 0.015 +/- 0.023
lambda_1: 820.952 +/- 751.897
lambda_2: 1273.310 +/- 1094.677
cos_iota: 0.638 +/- 0.443
d_L: 558.346 +/- 120.524
t_c: 0.097 +/- 0.001
phase_c: 3.152 +/- 1.812
psi: 1.508 +/- 0.902
ra: 3.994 +/- 0.036
sin_dec: -0.376 +/- 0.045
Log probability: 63.407 +/- 2.459
Local acceptance: 0.848 +/- 0.359
Global acceptance: 0.099 +/- 0.299
DONE

JOB STATISTICS
==============
Job ID: 10906039
Cluster: snellius
User/Group: twouters2/twouters2
State: RUNNING
Nodes: 1
Cores per node: 16
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 03:32:48 core-walltime
Job Wall-clock time: 00:13:18
Memory Utilized: 0.00 MB
Memory Efficiency: 0.00% of 10.00 GB (10.00 GB/node)
WARNING: Efficiency statistics can only be obtained after the job has ended as seff tool is based on the accounting database data.
