Tue Apr  1 15:41:25 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
15:41 ninjax INFO    : Checking and setting outdir
15:41 ninjax INFO    : Found generation prior file ./Aplus/injection_25/generation_prior.prior
15:41 ninjax INFO    : The outdir is set to ./Aplus/injection_25
15:41 ninjax INFO    : Loading the given config
15:41 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
15:41 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
15:41 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/MPA1/Aplus/injection_25/complete_config.json
15:41 ninjax INFO    : No seed specified. Generating a random seed: 142418
15:41 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 730314
15:41 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 723952
15:41 ninjax INFO    : Loading the priors
15:41 ninjax INFO    : Setting up the prior
15:41 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
15:41 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
15:41 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
15:41 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
15:41 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
15:41 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
15:41 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
15:41 ninjax INFO    :    dL_prior = PowerLaw(10.0, 1000.0, 2.0, naming=["d_L"])
15:41 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
15:41 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
15:41 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
15:41 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
15:41 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
15:41 ninjax INFO    : Setting up the generation prior
15:41 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.468645554845655, naming=["mass_1_source"])
15:41 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.468645554845655, naming=["mass_2_source"])
15:41 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
15:41 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
15:41 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
15:41 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
15:41 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
15:41 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
15:41 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
15:41 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
15:41 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
15:41 ninjax INFO    : Finished prior setup
15:41 ninjax INFO    : Setting the transforms
15:41 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
15:41 ninjax INFO    : transforms_str_list has 3 elements
15:41 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
15:41 ninjax INFO    : Setting the likelihood
15:41 ninjax INFO    : GW likelihood provided, setting up the GW pipe
15:41 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz
15:41 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz for BNS injections
15:41 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
15:41 ninjax INFO    : self.is_BNS_run is True
15:41 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
15:41 ninjax INFO    : GW run is an injection
15:41 ninjax INFO    : Setting up GW injection . . . 
15:41 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
15:41 ninjax INFO    : Generating new injection
15:41 ninjax INFO    : Sanity check: generated parameters:
15:41 ninjax INFO    : {'mass_1_source': 2.074896467283389, 'mass_2_source': 1.8747581370751374, 's1_z': -0.041649537001397355, 's2_z': -0.0019068656250999377, 'cos_iota': 0.8650845286472522, 'd_L': 446.26095860080596, 't_c': 0.022542263212457087, 'phase_c': 1.272527845836022, 'psi': 1.1515230629138689, 'ra': 0.3879329790219513, 'sin_dec': -0.006046007200732895}
15:41 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz . . . 
15:41 ninjax INFO    : Injected lambda_1: 36.23024993197941
15:41 ninjax INFO    : Injected lambda_2: 79.7679997173909
15:41 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.8896249000535568 is 128.0
15:41 ninjax INFO    : After transforms, the injection parameters are:
15:41 ninjax INFO    : {'mass_1_source': 2.074896467283389, 'mass_2_source': 1.8747581370751374, 's1_z': -0.041649537001397355, 's2_z': -0.0019068656250999377, 'cos_iota': 0.8650845286472522, 'd_L': 446.26095860080596, 't_c': 0.022542263212457087, 'phase_c': 1.272527845836022, 'psi': 1.1515230629138689, 'ra': 0.3879329790219513, 'sin_dec': -0.006046007200732895, 'q': 0.9035429799202039, 'M_c': 1.8896249000535568, 'eta': 0.24935807791744505, 'iota': Array(0.52547747, dtype=float64, weak_type=True), 'dec': Array(-0.00604604, dtype=float64, weak_type=True), 'lambda_1': 36.23024993197941, 'lambda_2': 79.7679997173909}
15:41 ninjax INFO    : The trial injection parameters are {'M_c': 1.8896249000535568, 'eta': 0.24935807791744505, 's1_z': -0.041649537001397355, 's2_z': -0.0019068656250999377, 'lambda_1': 36.23024993197941, 'lambda_2': 79.7679997173909, 'd_L': 446.26095860080596, 'phase_c': 1.272527845836022, 'iota': 0.5254774703472792, 't_c': 0.022542263212457087, 'psi': 1.1515230629138689, 'ra': 0.3879329790219513, 'dec': -0.006046044035834644}
15:41 ninjax INFO    : Injecting signals . . .
15:41 ninjax INFO    : self.ifos
15:41 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
15:41 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:41 ninjax INFO    : [ 3.07871135e-23-4.24546857e-23j -1.11840793e-22+4.63184941e-23j
  9.73155953e-23-5.53481711e-23j ...
 -9.26345523e-24+9.49891597e-24j -3.05108162e-23+3.21732580e-23j
  2.03449307e-23-4.27067629e-23j]
15:41 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
15:41 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:41 ninjax INFO    : [-7.67866927e-24-5.03061180e-23j  2.23450643e-23+6.26560861e-23j
  2.70304788e-23+2.40063637e-23j ...
 -1.55866415e-23-2.26144198e-23j -4.92285442e-24-1.23843440e-23j
 -5.14755327e-23+1.10629166e-23j]
15:41 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
15:42 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
15:42 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:42 ninjax INFO    : [-4.02700193e-23-1.30088223e-23j -1.11483648e-23+3.97780256e-23j
 -3.63906784e-23-1.69679053e-23j ...
  7.93680332e-24+1.25929840e-23j  6.18847618e-24+2.62763019e-24j
 -5.33659367e-23+2.25826848e-23j]
15:42 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
15:42 ninjax INFO    : SNR for ifo H1 is 11.187992789567843
15:42 ninjax INFO    : SNR for ifo L1 is 11.47748466269729
15:42 ninjax INFO    : SNR for ifo V1 is 8.335581587442451
15:42 ninjax INFO    : The network SNR is 18.066149485786482
15:42 ninjax INFO    : Network SNR passes threshold
15:42 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
15:42 ninjax INFO    :    mass_1_source: 2.074896467283389
15:42 ninjax INFO    :    mass_2_source: 1.8747581370751374
15:42 ninjax INFO    :    s1_z: -0.041649537001397355
15:42 ninjax INFO    :    s2_z: -0.0019068656250999377
15:42 ninjax INFO    :    cos_iota: 0.8650845286472522
15:42 ninjax INFO    :    d_L: 446.26095860080596
15:42 ninjax INFO    :    t_c: 0.022542263212457087
15:42 ninjax INFO    :    phase_c: 1.272527845836022
15:42 ninjax INFO    :    psi: 1.1515230629138689
15:42 ninjax INFO    :    ra: 0.3879329790219513
15:42 ninjax INFO    :    sin_dec: -0.006046007200732895
15:42 ninjax INFO    :    q: 0.9035429799202039
15:42 ninjax INFO    :    M_c: 1.8896249000535568
15:42 ninjax INFO    :    eta: 0.24935807791744505
15:42 ninjax INFO    :    iota: 0.5254774703472792
15:42 ninjax INFO    :    dec: -0.006046044035834644
15:42 ninjax INFO    :    lambda_1: 36.23024993197941
15:42 ninjax INFO    :    lambda_2: 79.7679997173909
15:42 ninjax INFO    :    H1_SNR: 11.187992789567843
15:42 ninjax INFO    :    L1_SNR: 11.47748466269729
15:42 ninjax INFO    :    V1_SNR: 8.335581587442451
15:42 ninjax INFO    :    network_SNR: 18.066149485786482
15:42 ninjax INFO    :    epoch: 126.0
15:42 ninjax INFO    :    gmst: 2.7288901910520846
15:42 ninjax INFO    :    duration: 128.0
15:42 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
15:42 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
15:42 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
15:45 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 215.31142115592957 seconds = 3.5885236859321594 minutes
15:45 ninjax INFO    : The priors are not modified after their initialization
15:45 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
15:45 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
15:45 ninjax INFO    : sample: {'M_c': Array([1.25588857, 2.26150632, 1.09812531], dtype=float64), 'q': Array([0.61587829, 0.96735622, 0.6299495 ], dtype=float64), 's1_z': Array([ 0.01844866, -0.03408289, -0.01184564], dtype=float64), 's2_z': Array([-0.02415193, -0.00611345, -0.02787768], dtype=float64), 'lambda_1': Array([1263.51661612, 4760.59211983, 1291.79930383], dtype=float64), 'lambda_2': Array([3476.05620713, 4277.0657384 ,  575.84677409], dtype=float64), 'cos_iota': Array([-0.98412808,  0.81021139,  0.10243575], dtype=float64), 'd_L': Array([827.0038138 , 890.50291469, 859.23783566], dtype=float64), 't_c': Array([ 0.07944563, -0.0231713 , -0.00732797], dtype=float64), 'phase_c': Array([5.14458467, 4.88168602, 1.45649787], dtype=float64), 'psi': Array([1.0689192 , 2.91777957, 0.51611877], dtype=float64), 'ra': Array([0.08201471, 4.77366293, 0.21404949], dtype=float64), 'sin_dec': Array([-0.53543822, -0.79959079, -0.01210867], dtype=float64)}
15:46 ninjax INFO    : log_prob: [-22.94980305 -78.75826174  -2.84303029]
15:46 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 2.074896467283389, 'mass_2_source': 1.8747581370751374, 's1_z': -0.041649537001397355, 's2_z': -0.0019068656250999377, 'cos_iota': 0.8650845286472522, 'd_L': 446.26095860080596, 't_c': 0.022542263212457087, 'phase_c': 1.272527845836022, 'psi': 1.1515230629138689, 'ra': 0.3879329790219513, 'sin_dec': -0.006046007200732895, 'q': 0.9035429799202039, 'M_c': 1.8896249000535568, 'eta': 0.24935807791744505, 'iota': Array(0.52547747, dtype=float64, weak_type=True), 'dec': Array(-0.00604604, dtype=float64, weak_type=True), 'lambda_1': 36.23024993197941, 'lambda_2': 79.7679997173909, 'H1_SNR': 11.187992789567843, 'L1_SNR': 11.47748466269729, 'V1_SNR': 8.335581587442451, 'network_SNR': 18.066149485786482, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
15:46 ninjax INFO    : log_prob at the injection parameters is: 123.25904974886701
15:46 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
15:46 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
15:46 ninjax INFO    : Ninjax setup complete.
15:46 ninjax INFO    : Saving output to ./Aplus/injection_25/
15:46 ninjax INFO    : Using polynomial learning rate scheduler
15:46 ninjax INFO    : The hyperparameters passed to flowMC and jim are
15:46 ninjax INFO    :    n_loop_training: 200
15:46 ninjax INFO    :    n_loop_production: 10
15:46 ninjax INFO    :    n_local_steps: 100
15:46 ninjax INFO    :    n_global_steps: 1000
15:46 ninjax INFO    :    n_epochs: 25
15:46 ninjax INFO    :    n_chains: 1000
15:46 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x14f30128fa30>
15:46 ninjax INFO    :    max_samples: 50000
15:46 ninjax INFO    :    momentum: 0.9
15:46 ninjax INFO    :    batch_size: 30000
15:46 ninjax INFO    :    use_global: True
15:46 ninjax INFO    :    keep_quantile: 0.0
15:46 ninjax INFO    :    train_thinning: 10
15:46 ninjax INFO    :    output_thinning: 50
15:46 ninjax INFO    :    n_sample_max: 10000
15:46 ninjax INFO    :    num_layers: 10
15:46 ninjax INFO    :    hidden_size: [128, 128]
15:46 ninjax INFO    :    num_bins: 8
15:46 ninjax INFO    :    save_training_chains: False
15:46 ninjax INFO    :    eps_mass_matrix: 1e-05
15:46 ninjax INFO    :    use_scheduler: True
15:46 ninjax INFO    :    use_temperature: False
15:46 ninjax INFO    :    which_temperature_schedule: exponential
15:46 ninjax INFO    :    starting_temperature: 2.0
15:46 ninjax INFO    :    stop_tempering_iteration: 75
15:46 ninjax INFO    :    stopping_criterion_global_acc: 0.1
15:46 ninjax INFO    :    stopping_criterion_loss: -inf
15:46 ninjax INFO    :    nf_model_kwargs: {}
15:46 ninjax INFO    :    local sampler arg not shown (pretty print)
15:46 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[ 3.37573906e-23 -1.16936509e-22  1.01752049e-22 -1.04626856e-22
  1.89323325e-23  2.04733352e-23 -9.33523994e-24 -6.45325398e-23
  4.26194743e-23 -6.65012346e-23]
[-4.67316932e-23  4.73787585e-23 -5.26309035e-23  5.23691768e-24
  4.87426535e-23 -6.14124590e-23  5.77073199e-23  8.33217129e-23
 -3.10416257e-23 -1.90084191e-23]
Checking the noise that was generated in inject_signal ifo:
[-8.10551580e-24  2.63160899e-23  2.16947413e-23 -3.81206972e-23
  2.05067782e-23 -1.64311169e-23 -6.41996809e-23 -1.00400418e-22
  9.52756713e-24 -2.54341605e-23]
[-4.49812211e-23  5.90865590e-23  2.38865647e-23  6.54427752e-24
  1.14558415e-22  6.99132485e-23 -6.71220525e-23  2.36824646e-23
  7.16233716e-23 -2.01290761e-23]
Checking the noise that was generated in inject_signal ifo:
[-4.09207412e-23 -7.32847458e-24 -4.12910733e-23  3.95646178e-23
 -1.09102137e-22  2.63260425e-23  1.38757161e-23 -8.72028859e-23
  2.35121845e-24  4.67332768e-23]
[-8.13421169e-24  3.66842354e-23 -1.73244015e-23 -3.25610162e-23
 -3.10013406e-23 -2.74203607e-24  5.94633156e-23 -9.07541647e-23
 -4.49471300e-23  7.01664157e-24]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.11184334754943848 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 2.074896467283389, 'mass_2_source': 1.8747581370751374, 's1_z': -0.041649537001397355, 's2_z': -0.0019068656250999377, 'cos_iota': 0.8650845286472522, 'd_L': 446.26095860080596, 't_c': 0.022542263212457087, 'phase_c': 1.272527845836022, 'psi': 1.1515230629138689, 'ra': 0.3879329790219513, 'sin_dec': -0.006046007200732895, 'q': 0.9035429799202039, 'M_c': 1.8896249000535568, 'eta': 0.24935807791744505, 'iota': Array(0.52547747, dtype=float64, weak_type=True), 'dec': Array(-0.00604604, dtype=float64, weak_type=True), 'lambda_1': 36.23024993197941, 'lambda_2': 79.7679997173909, 'H1_SNR': 11.187992789567843, 'L1_SNR': 11.47748466269729, 'V1_SNR': 8.335581587442451, 'network_SNR': 18.066149485786482, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5099918842315674 seconds
Time for h_sky_low and h_sky_center: 51.61310935020447 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.685107946395874
Going to compute coefficients . . .
Time for computing coefficients: 143.55783414840698 seconds
Time for computing coefficients: 7.120744228363037 seconds
Time for computing coefficients: 7.279968023300171 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:09<7:11:07, 129.99s/it]Tuning global sampler:   1%|          | 2/200 [02:14<3:05:32, 56.23s/it] Tuning global sampler:   2%|▏         | 3/200 [02:19<1:47:16, 32.67s/it]Tuning global sampler:   2%|▏         | 4/200 [02:23<1:10:33, 21.60s/it]Tuning global sampler:   2%|▎         | 5/200 [02:29<51:17, 15.78s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:33<38:45, 11.98s/it]Tuning global sampler:   4%|▎         | 7/200 [02:38<30:43,  9.55s/it]Tuning global sampler:   4%|▍         | 8/200 [02:43<25:31,  7.97s/it]Tuning global sampler:   4%|▍         | 9/200 [02:47<21:57,  6.90s/it]Tuning global sampler:   5%|▌         | 10/200 [03:06<33:24, 10.55s/it]Tuning global sampler:   6%|▌         | 11/200 [03:11<27:49,  8.83s/it]Tuning global sampler:   6%|▌         | 12/200 [03:15<23:37,  7.54s/it]Tuning global sampler:   6%|▋         | 13/200 [03:23<23:25,  7.52s/it]Tuning global sampler:   7%|▋         | 14/200 [03:27<20:36,  6.65s/it]Tuning global sampler:   8%|▊         | 15/200 [03:32<18:37,  6.04s/it]Tuning global sampler:   8%|▊         | 16/200 [03:39<19:36,  6.40s/it]Tuning global sampler:   8%|▊         | 17/200 [03:46<19:54,  6.53s/it]Tuning global sampler:   9%|▉         | 18/200 [04:03<28:52,  9.52s/it]Tuning global sampler:  10%|▉         | 19/200 [04:07<24:17,  8.05s/it]Tuning global sampler:  10%|█         | 20/200 [04:18<26:12,  8.74s/it]Tuning global sampler:  10%|█         | 21/200 [04:32<30:51, 10.35s/it]Tuning global sampler:  11%|█         | 22/200 [04:36<25:34,  8.62s/it]Tuning global sampler:  12%|█▏        | 23/200 [04:41<21:52,  7.42s/it]Tuning global sampler:  12%|█▏        | 24/200 [04:45<19:07,  6.52s/it]Tuning global sampler:  12%|█▎        | 25/200 [04:51<17:57,  6.15s/it]Tuning global sampler:  13%|█▎        | 26/200 [04:55<16:18,  5.62s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:59<15:08,  5.25s/it]Tuning global sampler:  14%|█▍        | 28/200 [05:04<14:19,  5.00s/it]Tuning global sampler:  14%|█▍        | 29/200 [05:08<13:43,  4.82s/it]Tuning global sampler:  15%|█▌        | 30/200 [05:13<13:17,  4.69s/it]Tuning global sampler:  16%|█▌        | 31/200 [05:17<12:57,  4.60s/it]Tuning global sampler:  16%|█▌        | 32/200 [05:21<12:42,  4.54s/it]Tuning global sampler:  16%|█▋        | 33/200 [05:26<12:28,  4.48s/it]Tuning global sampler:  17%|█▋        | 34/200 [05:30<12:17,  4.44s/it]Tuning global sampler:  18%|█▊        | 35/200 [05:34<12:10,  4.43s/it]Tuning global sampler:  18%|█▊        | 36/200 [05:39<12:03,  4.41s/it]Tuning global sampler:  18%|█▊        | 37/200 [05:43<11:58,  4.41s/it]Tuning global sampler:  19%|█▉        | 38/200 [05:48<11:53,  4.41s/it]Tuning global sampler:  20%|█▉        | 39/200 [05:52<12:02,  4.49s/it]Tuning global sampler:  20%|██        | 40/200 [05:57<11:53,  4.46s/it]Tuning global sampler:  20%|██        | 41/200 [06:01<11:45,  4.44s/it]Tuning global sampler:  21%|██        | 42/200 [06:06<11:39,  4.43s/it]Tuning global sampler:  22%|██▏       | 43/200 [06:10<11:34,  4.42s/it]Tuning global sampler:  22%|██▏       | 44/200 [06:15<12:10,  4.68s/it]Tuning global sampler:  22%|██▎       | 45/200 [06:20<11:50,  4.58s/it]Tuning global sampler:  23%|██▎       | 46/200 [06:24<11:36,  4.52s/it]Tuning global sampler:  24%|██▎       | 47/200 [06:28<11:25,  4.48s/it]Tuning global sampler:  24%|██▍       | 48/200 [06:33<11:16,  4.45s/it]Tuning global sampler:  24%|██▍       | 49/200 [06:37<11:09,  4.44s/it]Tuning global sampler:  25%|██▌       | 50/200 [06:42<11:02,  4.42s/it]Tuning global sampler:  26%|██▌       | 51/200 [06:46<10:58,  4.42s/it]Tuning global sampler:  26%|██▌       | 52/200 [06:50<10:53,  4.42s/it]Tuning global sampler:  26%|██▋       | 53/200 [06:55<10:48,  4.41s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:59<10:44,  4.41s/it]Tuning global sampler:  28%|██▊       | 55/200 [07:03<10:37,  4.39s/it]Tuning global sampler:  28%|██▊       | 56/200 [07:08<10:31,  4.38s/it]Tuning global sampler:  28%|██▊       | 57/200 [07:12<10:28,  4.40s/it]Tuning global sampler:  29%|██▉       | 58/200 [07:17<10:24,  4.40s/it]Tuning global sampler:  30%|██▉       | 59/200 [07:21<10:20,  4.40s/it]Tuning global sampler:  30%|███       | 60/200 [07:26<10:16,  4.40s/it]Tuning global sampler:  30%|███       | 61/200 [07:30<10:12,  4.40s/it]Tuning global sampler:  31%|███       | 62/200 [07:34<10:08,  4.41s/it]Tuning global sampler:  32%|███▏      | 63/200 [07:39<10:04,  4.42s/it]Tuning global sampler:  32%|███▏      | 64/200 [07:44<10:38,  4.69s/it]Tuning global sampler:  32%|███▏      | 64/200 [07:49<16:36,  7.33s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.22s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.22s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.22s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.22s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.22s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.22s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.22s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.22s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]
15:55 ninjax INFO    : Saving samples to ./Aplus/injection_25/results_training.npz
15:55 ninjax INFO    : Saving the NF
15:55 ninjax INFO    : Time taken: 525.2619578838348 seconds (8.75436596473058 minutes)
15:55 ninjax INFO    : Creating the final corner plot
15:55 ninjax INFO    : Dumping the final production chains
15:55 ninjax INFO    : Chains shape is: (13, 220000)
15:55 ninjax INFO    : Key: M_c: ESS = 74445, Rhat = 1.0107778822035625
15:55 ninjax INFO    : Key: q: ESS = 21617, Rhat = 1.0290739754097777
15:55 ninjax INFO    : Key: s1_z: ESS = 26120, Rhat = 1.0240802688517734
15:55 ninjax INFO    : Key: s2_z: ESS = 46942, Rhat = 1.0154561487083016
15:55 ninjax INFO    : Key: lambda_1: ESS = 49305, Rhat = 1.0144984151127838
15:55 ninjax INFO    : Key: lambda_2: ESS = 41403, Rhat = 1.0162118512834506
15:55 ninjax INFO    : Key: cos_iota: ESS = 36496, Rhat = 1.0182169750746086
15:55 ninjax INFO    : Key: d_L: ESS = 27882, Rhat = 1.0227888282981774
15:55 ninjax INFO    : Key: t_c: ESS = 47688, Rhat = 1.0141806545941434
15:55 ninjax INFO    : Key: phase_c: ESS = 36753, Rhat = 1.0181193624924674
15:55 ninjax INFO    : Key: psi: ESS = 32798, Rhat = 1.019129112466864
15:55 ninjax INFO    : Key: ra: ESS = 50279, Rhat = 1.013788646581545
15:55 ninjax INFO    : Key: sin_dec: ESS = 54161, Rhat = 1.0126515373410248
15:55 ninjax INFO    : Key: eta: ESS = 21617, Rhat = 1.0290739754097777
15:55 ninjax INFO    : Key: iota: ESS = 36496, Rhat = 1.0182169750746086
15:55 ninjax INFO    : Key: dec: ESS = 54161, Rhat = 1.0126515373410248
15:55 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.855 +/- 0.166
q: 0.736 +/- 0.200
s1_z: -0.004 +/- 0.027
s2_z: -0.000 +/- 0.028
lambda_1: 1557.574 +/- 1496.234
lambda_2: 1778.895 +/- 1514.111
cos_iota: 0.355 +/- 0.502
d_L: 604.120 +/- 210.936
t_c: 0.021 +/- 0.022
phase_c: 3.061 +/- 1.743
psi: 1.580 +/- 0.867
ra: 0.923 +/- 1.347
sin_dec: 0.033 +/- 0.303
Log probability: 64.143 +/- 52.970
Local acceptance: 0.984 +/- 0.127
Global acceptance: 0.015 +/- 0.121
Max loss: 22.823, Min loss: 7.035
Production summary
==========
M_c: 1.890 +/- 0.000
q: 0.799 +/- 0.115
s1_z: -0.007 +/- 0.025
s2_z: -0.007 +/- 0.027
lambda_1: 149.234 +/- 258.402
lambda_2: 299.663 +/- 474.537
cos_iota: 0.771 +/- 0.198
d_L: 440.533 +/- 84.111
t_c: 0.023 +/- 0.001
phase_c: 3.135 +/- 1.823
psi: 1.599 +/- 0.897
ra: 0.388 +/- 0.024
sin_dec: -0.023 +/- 0.045
Log probability: 119.053 +/- 3.298
Local acceptance: 0.967 +/- 0.180
Global acceptance: 0.121 +/- 0.327
DONE

JOB STATISTICS
==============
Job ID: 10906041
Cluster: snellius
User/Group: twouters2/twouters2
State: RUNNING
Nodes: 1
Cores per node: 16
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 03:53:20 core-walltime
Job Wall-clock time: 00:14:35
Memory Utilized: 0.00 MB
Memory Efficiency: 0.00% of 10.00 GB (10.00 GB/node)
WARNING: Efficiency statistics can only be obtained after the job has ended as seff tool is based on the accounting database data.
