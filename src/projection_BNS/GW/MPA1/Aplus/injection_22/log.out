Tue Apr  1 15:41:26 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
15:41 ninjax INFO    : Checking and setting outdir
15:41 ninjax INFO    : Found generation prior file ./Aplus/injection_22/generation_prior.prior
15:41 ninjax INFO    : The outdir is set to ./Aplus/injection_22
15:41 ninjax INFO    : Loading the given config
15:41 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
15:41 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
15:41 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/MPA1/Aplus/injection_22/complete_config.json
15:41 ninjax INFO    : No seed specified. Generating a random seed: 116965
15:41 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 965538
15:41 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 731964
15:41 ninjax INFO    : Loading the priors
15:41 ninjax INFO    : Setting up the prior
15:41 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
15:41 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
15:41 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
15:41 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
15:41 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
15:41 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
15:41 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
15:41 ninjax INFO    :    dL_prior = PowerLaw(10.0, 1000.0, 2.0, naming=["d_L"])
15:41 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
15:41 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
15:41 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
15:41 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
15:41 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
15:41 ninjax INFO    : Setting up the generation prior
15:41 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.468645554845655, naming=["mass_1_source"])
15:41 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.468645554845655, naming=["mass_2_source"])
15:41 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
15:41 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
15:41 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
15:41 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
15:41 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
15:41 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
15:41 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
15:41 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
15:41 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
15:41 ninjax INFO    : Finished prior setup
15:41 ninjax INFO    : Setting the transforms
15:41 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
15:41 ninjax INFO    : transforms_str_list has 3 elements
15:41 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
15:41 ninjax INFO    : Setting the likelihood
15:41 ninjax INFO    : GW likelihood provided, setting up the GW pipe
15:41 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz
15:41 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz for BNS injections
15:41 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
15:41 ninjax INFO    : self.is_BNS_run is True
15:41 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
15:41 ninjax INFO    : GW run is an injection
15:41 ninjax INFO    : Setting up GW injection . . . 
15:41 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
15:41 ninjax INFO    : Generating new injection
15:41 ninjax INFO    : Sanity check: generated parameters:
15:41 ninjax INFO    : {'mass_1_source': 1.9280860208018498, 'mass_2_source': 1.8760499525915297, 's1_z': 0.039617583877247564, 's2_z': 0.010383015191199753, 'cos_iota': -0.664164834433218, 'd_L': 382.2966182894899, 't_c': -0.08341015436716077, 'phase_c': 1.5626407952585555, 'psi': 3.0400884976193434, 'ra': 6.194382583056498, 'sin_dec': -0.07997297316634144}
15:41 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz . . . 
15:41 ninjax INFO    : Injected lambda_1: 64.88461563712617
15:41 ninjax INFO    : Injected lambda_2: 79.37130383554737
15:41 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.798680273297582 is 128.0
15:41 ninjax INFO    : After transforms, the injection parameters are:
15:41 ninjax INFO    : {'mass_1_source': 1.9280860208018498, 'mass_2_source': 1.8760499525915297, 's1_z': 0.039617583877247564, 's2_z': 0.010383015191199753, 'cos_iota': -0.664164834433218, 'd_L': 382.2966182894899, 't_c': -0.08341015436716077, 'phase_c': 1.5626407952585555, 'psi': 3.0400884976193434, 'ra': 6.194382583056498, 'sin_dec': -0.07997297316634144, 'q': 0.9730115421983717, 'M_c': 1.798680273297582, 'eta': 0.24995322251224875, 'iota': Array(2.29717244, dtype=float64, weak_type=True), 'dec': Array(-0.08005847, dtype=float64, weak_type=True), 'lambda_1': 64.88461563712617, 'lambda_2': 79.37130383554737}
15:41 ninjax INFO    : The trial injection parameters are {'M_c': 1.798680273297582, 'eta': 0.24995322251224875, 's1_z': 0.039617583877247564, 's2_z': 0.010383015191199753, 'lambda_1': 64.88461563712617, 'lambda_2': 79.37130383554737, 'd_L': 382.2966182894899, 'phase_c': 1.5626407952585555, 'iota': 2.2971724400561078, 't_c': -0.08341015436716077, 'psi': 3.0400884976193434, 'ra': 6.194382583056498, 'dec': -0.08005846632627142}
15:41 ninjax INFO    : Injecting signals . . .
15:41 ninjax INFO    : self.ifos
15:41 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
15:41 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:41 ninjax INFO    : [-4.61664603e-23-1.00184548e-22j  1.85482012e-23+2.00227846e-23j
 -7.30713397e-23+2.76569489e-23j ...
  3.47109091e-23+3.78871814e-24j -4.15812974e-23-4.23282952e-24j
 -1.96706046e-23+2.23792398e-23j]
15:41 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
15:41 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:41 ninjax INFO    : [-4.31794292e-23-1.06192480e-23j -7.49989885e-23+1.68412353e-23j
  1.69820012e-23-1.17005544e-23j ...
  1.85638667e-23+1.26912227e-23j -2.25090928e-23-5.21228820e-23j
 -1.48900524e-23+4.49210634e-24j]
15:41 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
15:41 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:41 ninjax INFO    : [ 2.55810478e-23+1.00487274e-23j  2.40652597e-23+5.51259351e-23j
 -3.98275028e-23+4.65437594e-23j ...
 -5.35654586e-24-2.47731910e-23j -1.47266857e-24-2.39087231e-23j
  1.81081591e-23+7.02990310e-23j]
15:41 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
15:41 ninjax INFO    : SNR for ifo H1 is 8.56627402601737
15:41 ninjax INFO    : SNR for ifo L1 is 7.724044692529601
15:41 ninjax INFO    : SNR for ifo V1 is 9.270694251746457
15:41 ninjax INFO    : The network SNR is 14.798232631310379
15:41 ninjax INFO    : Network SNR passes threshold
15:41 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
15:41 ninjax INFO    :    mass_1_source: 1.9280860208018498
15:41 ninjax INFO    :    mass_2_source: 1.8760499525915297
15:41 ninjax INFO    :    s1_z: 0.039617583877247564
15:41 ninjax INFO    :    s2_z: 0.010383015191199753
15:41 ninjax INFO    :    cos_iota: -0.664164834433218
15:41 ninjax INFO    :    d_L: 382.2966182894899
15:41 ninjax INFO    :    t_c: -0.08341015436716077
15:41 ninjax INFO    :    phase_c: 1.5626407952585555
15:41 ninjax INFO    :    psi: 3.0400884976193434
15:41 ninjax INFO    :    ra: 6.194382583056498
15:41 ninjax INFO    :    sin_dec: -0.07997297316634144
15:41 ninjax INFO    :    q: 0.9730115421983717
15:41 ninjax INFO    :    M_c: 1.798680273297582
15:41 ninjax INFO    :    eta: 0.24995322251224875
15:41 ninjax INFO    :    iota: 2.2971724400561078
15:41 ninjax INFO    :    dec: -0.08005846632627142
15:41 ninjax INFO    :    lambda_1: 64.88461563712617
15:41 ninjax INFO    :    lambda_2: 79.37130383554737
15:41 ninjax INFO    :    H1_SNR: 8.56627402601737
15:41 ninjax INFO    :    L1_SNR: 7.724044692529601
15:41 ninjax INFO    :    V1_SNR: 9.270694251746457
15:41 ninjax INFO    :    network_SNR: 14.798232631310379
15:41 ninjax INFO    :    epoch: 126.0
15:41 ninjax INFO    :    gmst: 2.7288901910520846
15:41 ninjax INFO    :    duration: 128.0
15:41 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
15:41 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
15:41 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
15:46 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 269.7544529438019 seconds = 4.495907549063364 minutes
15:46 ninjax INFO    : The priors are not modified after their initialization
15:46 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
15:46 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
15:46 ninjax INFO    : sample: {'M_c': Array([1.34704357, 1.49384379, 1.45192808], dtype=float64), 'q': Array([0.23340488, 0.99268868, 0.3109846 ], dtype=float64), 's1_z': Array([ 0.01595926,  0.0362137 , -0.03632575], dtype=float64), 's2_z': Array([0.02540224, 0.01239587, 0.02785086], dtype=float64), 'lambda_1': Array([1007.86811228,   19.96199572, 4678.33270943], dtype=float64), 'lambda_2': Array([2628.65919053, 2606.11374861, 1545.26867415], dtype=float64), 'cos_iota': Array([-0.78112868, -0.53690238,  0.90139169], dtype=float64), 'd_L': Array([454.78752548, 999.14422338, 788.83124688], dtype=float64), 't_c': Array([-0.02169416, -0.09472785, -0.0057121 ], dtype=float64), 'phase_c': Array([0.43175972, 1.54683932, 4.4232998 ], dtype=float64), 'psi': Array([1.43216359, 2.80077827, 1.32147599], dtype=float64), 'ra': Array([3.87468305, 2.79536672, 4.67400537], dtype=float64), 'sin_dec': Array([-0.6100542 , -0.03828632, -0.89630682], dtype=float64)}
15:46 ninjax INFO    : log_prob: [-114.33365961   -3.49352728  -53.14683983]
15:46 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.9280860208018498, 'mass_2_source': 1.8760499525915297, 's1_z': 0.039617583877247564, 's2_z': 0.010383015191199753, 'cos_iota': -0.664164834433218, 'd_L': 382.2966182894899, 't_c': -0.08341015436716077, 'phase_c': 1.5626407952585555, 'psi': 3.0400884976193434, 'ra': 6.194382583056498, 'sin_dec': -0.07997297316634144, 'q': 0.9730115421983717, 'M_c': 1.798680273297582, 'eta': 0.24995322251224875, 'iota': Array(2.29717244, dtype=float64, weak_type=True), 'dec': Array(-0.08005847, dtype=float64, weak_type=True), 'lambda_1': 64.88461563712617, 'lambda_2': 79.37130383554737, 'H1_SNR': 8.56627402601737, 'L1_SNR': 7.724044692529601, 'V1_SNR': 9.270694251746457, 'network_SNR': 14.798232631310379, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
15:46 ninjax INFO    : log_prob at the injection parameters is: 110.71184961814632
15:46 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
15:46 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
15:46 ninjax INFO    : Ninjax setup complete.
15:46 ninjax INFO    : Saving output to ./Aplus/injection_22/
15:46 ninjax INFO    : Using polynomial learning rate scheduler
15:46 ninjax INFO    : The hyperparameters passed to flowMC and jim are
15:46 ninjax INFO    :    n_loop_training: 200
15:46 ninjax INFO    :    n_loop_production: 10
15:46 ninjax INFO    :    n_local_steps: 100
15:46 ninjax INFO    :    n_global_steps: 1000
15:46 ninjax INFO    :    n_epochs: 25
15:46 ninjax INFO    :    n_chains: 1000
15:46 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x14505a2aba30>
15:46 ninjax INFO    :    max_samples: 50000
15:46 ninjax INFO    :    momentum: 0.9
15:46 ninjax INFO    :    batch_size: 30000
15:46 ninjax INFO    :    use_global: True
15:46 ninjax INFO    :    keep_quantile: 0.0
15:46 ninjax INFO    :    train_thinning: 10
15:46 ninjax INFO    :    output_thinning: 50
15:46 ninjax INFO    :    n_sample_max: 10000
15:46 ninjax INFO    :    num_layers: 10
15:46 ninjax INFO    :    hidden_size: [128, 128]
15:46 ninjax INFO    :    num_bins: 8
15:46 ninjax INFO    :    save_training_chains: False
15:46 ninjax INFO    :    eps_mass_matrix: 1e-05
15:46 ninjax INFO    :    use_scheduler: True
15:46 ninjax INFO    :    use_temperature: False
15:46 ninjax INFO    :    which_temperature_schedule: exponential
15:46 ninjax INFO    :    starting_temperature: 2.0
15:46 ninjax INFO    :    stop_tempering_iteration: 75
15:46 ninjax INFO    :    stopping_criterion_global_acc: 0.1
15:46 ninjax INFO    :    stopping_criterion_loss: -inf
15:46 ninjax INFO    :    nf_model_kwargs: {}
15:46 ninjax INFO    :    local sampler arg not shown (pretty print)
15:46 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[-4.28200590e-23  1.89147306e-23 -7.67456361e-23  8.82295707e-24
  4.50553231e-23 -2.57221426e-23  2.30449230e-23 -2.60450313e-23
  4.22745661e-24 -1.87266392e-23]
[-9.80354038e-23  1.60644534e-23  2.91694975e-23  4.84811161e-23
 -2.73929647e-23 -1.84590520e-23 -2.57244715e-23 -1.15523725e-23
  4.33953793e-23  8.57679402e-23]
Checking the noise that was generated in inject_signal ifo:
[-4.57896409e-23 -7.59785369e-23  2.04888332e-23  1.42682782e-23
 -9.04678620e-24  3.01509112e-23 -2.35314596e-23  1.80932767e-23
  4.28486682e-23  3.38896325e-23]
[-1.30782403e-23  2.02892131e-23 -1.24343316e-23 -8.62401027e-23
 -6.41423613e-24  1.99723535e-23 -3.40579347e-23  4.98944962e-23
  5.78854642e-23 -7.69948268e-23]
Checking the noise that was generated in inject_signal ifo:
[ 2.58014576e-23  1.91275294e-23 -3.54768122e-23 -9.71315114e-24
 -4.91256963e-23  7.41654424e-24 -3.84538621e-24 -1.14402157e-23
  3.76649400e-23 -1.64839332e-23]
[ 4.59454817e-24  5.74471785e-23  4.98321601e-23  1.40005525e-23
 -2.28294243e-23  1.55887629e-25 -2.17935876e-23  2.84128887e-23
  3.10938321e-23 -7.62958301e-24]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.11136603355407715 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.9280860208018498, 'mass_2_source': 1.8760499525915297, 's1_z': 0.039617583877247564, 's2_z': 0.010383015191199753, 'cos_iota': -0.664164834433218, 'd_L': 382.2966182894899, 't_c': -0.08341015436716077, 'phase_c': 1.5626407952585555, 'psi': 3.0400884976193434, 'ra': 6.194382583056498, 'sin_dec': -0.07997297316634144, 'q': 0.9730115421983717, 'M_c': 1.798680273297582, 'eta': 0.24995322251224875, 'iota': Array(2.29717244, dtype=float64, weak_type=True), 'dec': Array(-0.08005847, dtype=float64, weak_type=True), 'lambda_1': 64.88461563712617, 'lambda_2': 79.37130383554737, 'H1_SNR': 8.56627402601737, 'L1_SNR': 7.724044692529601, 'V1_SNR': 9.270694251746457, 'network_SNR': 14.798232631310379, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5171678066253662 seconds
Time for h_sky_low and h_sky_center: 23.15305209159851 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.6935710906982422
Going to compute coefficients . . .
Time for computing coefficients: 230.1772530078888 seconds
Time for computing coefficients: 7.290225505828857 seconds
Time for computing coefficients: 7.256832838058472 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:27<8:07:44, 147.06s/it]Tuning global sampler:   1%|          | 2/200 [02:31<3:28:46, 63.26s/it] Tuning global sampler:   2%|▏         | 3/200 [02:39<2:04:00, 37.77s/it]Tuning global sampler:   2%|▏         | 4/200 [02:48<1:26:17, 26.41s/it]Tuning global sampler:   2%|▎         | 5/200 [02:57<1:05:53, 20.27s/it]Tuning global sampler:   3%|▎         | 6/200 [03:02<48:20, 14.95s/it]  Tuning global sampler:   4%|▎         | 7/200 [03:06<37:09, 11.55s/it]Tuning global sampler:   4%|▍         | 8/200 [03:11<30:22,  9.49s/it]Tuning global sampler:   4%|▍         | 9/200 [03:24<33:07, 10.41s/it]Tuning global sampler:   5%|▌         | 10/200 [03:36<35:07, 11.09s/it]Tuning global sampler:   6%|▌         | 11/200 [03:41<28:41,  9.11s/it]Tuning global sampler:   6%|▌         | 12/200 [03:58<36:32, 11.66s/it]Tuning global sampler:   6%|▋         | 13/200 [04:11<37:25, 12.01s/it]Tuning global sampler:   7%|▋         | 14/200 [04:31<44:03, 14.21s/it]Tuning global sampler:   8%|▊         | 15/200 [04:59<57:22, 18.61s/it]Tuning global sampler:   8%|▊         | 16/200 [05:10<49:42, 16.21s/it]Tuning global sampler:   8%|▊         | 17/200 [05:15<38:51, 12.74s/it]Tuning global sampler:   9%|▉         | 18/200 [05:19<31:17, 10.32s/it]Tuning global sampler:  10%|▉         | 19/200 [05:28<29:21,  9.73s/it]Tuning global sampler:  10%|█         | 20/200 [05:53<43:27, 14.48s/it]Tuning global sampler:  10%|█         | 21/200 [06:29<1:02:36, 20.98s/it]Tuning global sampler:  11%|█         | 22/200 [06:34<47:47, 16.11s/it]  Tuning global sampler:  12%|█▏        | 23/200 [06:39<37:22, 12.67s/it]Tuning global sampler:  12%|█▏        | 24/200 [06:57<42:26, 14.47s/it]Tuning global sampler:  12%|█▎        | 25/200 [07:23<51:34, 17.68s/it]Tuning global sampler:  13%|█▎        | 26/200 [07:44<54:42, 18.86s/it]Tuning global sampler:  14%|█▎        | 27/200 [08:14<1:03:47, 22.13s/it]Tuning global sampler:  14%|█▍        | 28/200 [08:37<1:04:19, 22.44s/it]Tuning global sampler:  14%|█▍        | 29/200 [08:51<56:18, 19.75s/it]  Tuning global sampler:  15%|█▌        | 30/200 [09:02<48:53, 17.26s/it]Tuning global sampler:  16%|█▌        | 31/200 [09:06<37:45, 13.40s/it]Tuning global sampler:  16%|█▌        | 32/200 [09:11<29:58, 10.71s/it]Tuning global sampler:  16%|█▋        | 33/200 [09:22<30:09, 10.84s/it]Tuning global sampler:  17%|█▋        | 34/200 [09:31<28:15, 10.21s/it]Tuning global sampler:  18%|█▊        | 35/200 [09:36<23:43,  8.63s/it]Tuning global sampler:  18%|█▊        | 36/200 [09:40<20:07,  7.36s/it]Tuning global sampler:  18%|█▊        | 37/200 [09:45<17:35,  6.48s/it]Tuning global sampler:  19%|█▉        | 38/200 [09:49<15:48,  5.86s/it]Tuning global sampler:  20%|█▉        | 39/200 [09:53<14:32,  5.42s/it]Tuning global sampler:  20%|██        | 40/200 [09:58<13:39,  5.12s/it]Tuning global sampler:  20%|██        | 41/200 [10:02<13:00,  4.91s/it]Tuning global sampler:  21%|██        | 42/200 [10:07<12:33,  4.77s/it]Tuning global sampler:  22%|██▏       | 43/200 [10:11<12:12,  4.67s/it]Tuning global sampler:  22%|██▏       | 44/200 [10:15<11:54,  4.58s/it]Tuning global sampler:  22%|██▎       | 45/200 [10:21<12:25,  4.81s/it]Tuning global sampler:  23%|██▎       | 46/200 [10:31<16:17,  6.35s/it]Tuning global sampler:  24%|██▎       | 47/200 [10:47<23:47,  9.33s/it]Tuning global sampler:  24%|██▍       | 48/200 [11:09<33:00, 13.03s/it]Tuning global sampler:  24%|██▍       | 49/200 [11:19<30:43, 12.21s/it]Tuning global sampler:  25%|██▌       | 50/200 [11:33<31:58, 12.79s/it]Tuning global sampler:  26%|██▌       | 51/200 [11:53<36:53, 14.86s/it]Tuning global sampler:  26%|██▌       | 52/200 [12:05<34:57, 14.17s/it]Tuning global sampler:  26%|██▋       | 53/200 [12:13<29:39, 12.10s/it]Tuning global sampler:  27%|██▋       | 54/200 [12:17<23:51,  9.80s/it]Tuning global sampler:  28%|██▊       | 55/200 [12:21<19:45,  8.18s/it]Tuning global sampler:  28%|██▊       | 56/200 [12:26<16:53,  7.04s/it]Tuning global sampler:  28%|██▊       | 57/200 [12:30<15:02,  6.31s/it]Tuning global sampler:  29%|██▉       | 58/200 [12:35<13:36,  5.75s/it]Tuning global sampler:  30%|██▉       | 59/200 [12:42<14:36,  6.21s/it]Tuning global sampler:  30%|███       | 60/200 [12:54<18:20,  7.86s/it]Tuning global sampler:  30%|███       | 61/200 [13:12<25:05, 10.83s/it]Tuning global sampler:  31%|███       | 62/200 [13:26<27:18, 11.87s/it]Tuning global sampler:  32%|███▏      | 63/200 [13:36<25:42, 11.26s/it]Tuning global sampler:  32%|███▏      | 64/200 [13:50<27:16, 12.03s/it]Tuning global sampler:  32%|███▎      | 65/200 [14:03<27:46, 12.35s/it]Tuning global sampler:  33%|███▎      | 66/200 [14:07<22:13,  9.95s/it]Tuning global sampler:  34%|███▎      | 67/200 [14:11<18:21,  8.28s/it]Tuning global sampler:  34%|███▍      | 68/200 [14:16<15:39,  7.12s/it]Tuning global sampler:  34%|███▍      | 69/200 [14:20<13:45,  6.30s/it]Tuning global sampler:  35%|███▌      | 70/200 [14:25<12:27,  5.75s/it]Tuning global sampler:  36%|███▌      | 71/200 [14:29<11:31,  5.36s/it]Tuning global sampler:  36%|███▌      | 72/200 [14:34<10:50,  5.08s/it]Tuning global sampler:  36%|███▋      | 73/200 [14:38<10:20,  4.89s/it]Tuning global sampler:  37%|███▋      | 74/200 [14:43<10:02,  4.78s/it]Tuning global sampler:  38%|███▊      | 75/200 [14:47<09:46,  4.69s/it]Tuning global sampler:  38%|███▊      | 76/200 [14:51<09:32,  4.62s/it]Tuning global sampler:  38%|███▊      | 77/200 [14:56<09:20,  4.56s/it]Tuning global sampler:  39%|███▉      | 78/200 [15:00<09:10,  4.51s/it]Tuning global sampler:  40%|███▉      | 79/200 [15:05<09:03,  4.49s/it]Tuning global sampler:  40%|███▉      | 79/200 [15:09<23:13, 11.52s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.22s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.22s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.22s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.22s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.22s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.22s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.22s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.22s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]
16:02 ninjax INFO    : Saving samples to ./Aplus/injection_22/results_training.npz
16:02 ninjax INFO    : Saving the NF
16:02 ninjax INFO    : Time taken: 949.246423959732 seconds (15.8207737326622 minutes)
16:02 ninjax INFO    : Creating the final corner plot
16:02 ninjax INFO    : Dumping the final production chains
16:02 ninjax INFO    : Chains shape is: (13, 220000)
16:02 ninjax INFO    : Key: M_c: ESS = 58712, Rhat = 1.0119301816812767
16:02 ninjax INFO    : Key: q: ESS = 73154, Rhat = 1.011323600498021
16:02 ninjax INFO    : Key: s1_z: ESS = 76928, Rhat = 1.0103821305543876
16:02 ninjax INFO    : Key: s2_z: ESS = 55524, Rhat = 1.0134372678962944
16:02 ninjax INFO    : Key: lambda_1: ESS = 67192, Rhat = 1.0112953356590135
16:02 ninjax INFO    : Key: lambda_2: ESS = 56914, Rhat = 1.0130125251735782
16:02 ninjax INFO    : Key: cos_iota: ESS = 68390, Rhat = 1.011195015956665
16:02 ninjax INFO    : Key: d_L: ESS = 66735, Rhat = 1.0112370318100925
16:02 ninjax INFO    : Key: t_c: ESS = 58557, Rhat = 1.012168046941762
16:02 ninjax INFO    : Key: phase_c: ESS = 53709, Rhat = 1.0131552422737322
16:02 ninjax INFO    : Key: psi: ESS = 69058, Rhat = 1.0115547306698036
16:02 ninjax INFO    : Key: ra: ESS = 53156, Rhat = 1.0136566955920838
16:02 ninjax INFO    : Key: sin_dec: ESS = 55456, Rhat = 1.0128846126868867
16:02 ninjax INFO    : Key: eta: ESS = 73154, Rhat = 1.011323600498021
16:02 ninjax INFO    : Key: iota: ESS = 68390, Rhat = 1.011195015956665
16:02 ninjax INFO    : Key: dec: ESS = 55456, Rhat = 1.0128846126868867
16:02 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.742 +/- 0.231
q: 0.774 +/- 0.213
s1_z: 0.015 +/- 0.027
s2_z: 0.017 +/- 0.027
lambda_1: 1809.489 +/- 1430.774
lambda_2: 1702.159 +/- 1432.294
cos_iota: -0.221 +/- 0.443
d_L: 611.384 +/- 275.711
t_c: -0.061 +/- 0.040
phase_c: 2.817 +/- 1.769
psi: 1.730 +/- 0.904
ra: 1.002 +/- 1.632
sin_dec: 0.179 +/- 0.377
Log probability: 38.937 +/- 48.820
Local acceptance: 0.984 +/- 0.125
Global acceptance: 0.016 +/- 0.125
Max loss: 22.898, Min loss: 5.740
Production summary
==========
M_c: 1.799 +/- 0.000
q: 0.895 +/- 0.071
s1_z: 0.035 +/- 0.012
s2_z: 0.033 +/- 0.013
lambda_1: 389.626 +/- 362.352
lambda_2: 547.210 +/- 480.889
cos_iota: -0.260 +/- 0.061
d_L: 175.595 +/- 30.400
t_c: -0.077 +/- 0.001
phase_c: 3.395 +/- 1.849
psi: 2.194 +/- 0.828
ra: 0.041 +/- 0.032
sin_dec: 0.210 +/- 0.049
Log probability: 104.330 +/- 2.571
Local acceptance: 0.963 +/- 0.189
Global acceptance: 0.106 +/- 0.308
DONE

JOB STATISTICS
==============
Job ID: 10906037
Cluster: snellius
User/Group: twouters2/twouters2
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 00:10:43
CPU Efficiency: 3.14% of 05:41:20 core-walltime
Job Wall-clock time: 00:21:20
Memory Utilized: 4.42 GB
Memory Efficiency: 44.18% of 10.00 GB (10.00 GB/node)
