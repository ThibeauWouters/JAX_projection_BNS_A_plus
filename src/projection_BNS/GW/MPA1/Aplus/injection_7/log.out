Tue Apr  1 15:41:24 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
15:41 ninjax INFO    : Checking and setting outdir
15:41 ninjax INFO    : Found generation prior file ./Aplus/injection_7/generation_prior.prior
15:41 ninjax INFO    : The outdir is set to ./Aplus/injection_7
15:41 ninjax INFO    : Loading the given config
15:41 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
15:41 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
15:41 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/MPA1/Aplus/injection_7/complete_config.json
15:41 ninjax INFO    : No seed specified. Generating a random seed: 25788
15:41 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 219389
15:41 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 709334
15:41 ninjax INFO    : Loading the priors
15:41 ninjax INFO    : Setting up the prior
15:41 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
15:41 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
15:41 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
15:41 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
15:41 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
15:41 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
15:41 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
15:41 ninjax INFO    :    dL_prior = PowerLaw(10.0, 1000.0, 2.0, naming=["d_L"])
15:41 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
15:41 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
15:41 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
15:41 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
15:41 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
15:41 ninjax INFO    : Setting up the generation prior
15:41 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.468645554845655, naming=["mass_1_source"])
15:41 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.468645554845655, naming=["mass_2_source"])
15:41 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
15:41 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
15:41 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
15:41 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
15:41 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
15:41 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
15:41 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
15:41 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
15:41 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
15:41 ninjax INFO    : Finished prior setup
15:41 ninjax INFO    : Setting the transforms
15:41 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
15:41 ninjax INFO    : transforms_str_list has 3 elements
15:41 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
15:41 ninjax INFO    : Setting the likelihood
15:41 ninjax INFO    : GW likelihood provided, setting up the GW pipe
15:41 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz
15:41 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz for BNS injections
15:41 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
15:41 ninjax INFO    : self.is_BNS_run is True
15:41 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
15:41 ninjax INFO    : GW run is an injection
15:41 ninjax INFO    : Setting up GW injection . . . 
15:41 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
15:41 ninjax INFO    : Generating new injection
15:41 ninjax INFO    : Sanity check: generated parameters:
15:41 ninjax INFO    : {'mass_1_source': 2.3358574365308478, 'mass_2_source': 2.2449788765369947, 's1_z': -0.03876278904324271, 's2_z': 0.04343353491174347, 'cos_iota': -0.6022755864807388, 'd_L': 455.8652946001357, 't_c': -0.05357023004982291, 'phase_c': 2.7955250272323426, 'psi': 2.826176088433488, 'ra': 1.242854474107165, 'sin_dec': -0.5881531255102255}
15:41 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz . . . 
15:41 ninjax INFO    : Injected lambda_1: 10.960948582479604
15:41 ninjax INFO    : Injected lambda_2: 17.35216054191771
15:41 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 2.198790921186867 is 64.0
15:41 ninjax INFO    : After transforms, the injection parameters are:
15:41 ninjax INFO    : {'mass_1_source': 2.3358574365308478, 'mass_2_source': 2.2449788765369947, 's1_z': -0.03876278904324271, 's2_z': 0.04343353491174347, 'cos_iota': -0.6022755864807388, 'd_L': 455.8652946001357, 't_c': -0.05357023004982291, 'phase_c': 2.7955250272323426, 'psi': 2.826176088433488, 'ra': 1.242854474107165, 'sin_dec': -0.5881531255102255, 'q': 0.9610941324703346, 'M_c': 2.198790921186867, 'eta': 0.2499016049307876, 'iota': Array(2.21714496, dtype=float64, weak_type=True), 'dec': Array(-0.62877332, dtype=float64, weak_type=True), 'lambda_1': 10.960948582479604, 'lambda_2': 17.35216054191771}
15:41 ninjax INFO    : The trial injection parameters are {'M_c': 2.198790921186867, 'eta': 0.2499016049307876, 's1_z': -0.03876278904324271, 's2_z': 0.04343353491174347, 'lambda_1': 10.960948582479604, 'lambda_2': 17.35216054191771, 'd_L': 455.8652946001357, 'phase_c': 2.7955250272323426, 'iota': 2.217144963190245, 't_c': -0.05357023004982291, 'psi': 2.826176088433488, 'ra': 1.242854474107165, 'dec': -0.6287733221751884}
15:41 ninjax INFO    : Injecting signals . . .
15:41 ninjax INFO    : self.ifos
15:41 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
15:41 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.         20.015625   20.03125  ... 2047.953125 2047.96875
 2047.984375]
15:41 ninjax INFO    : [-8.56538697e-23-4.85388744e-23j -1.74291385e-23+1.29238351e-23j
 -7.22608158e-23+2.07371312e-23j ...
 -1.71302519e-23+2.76617451e-23j -3.02420362e-24-1.01509055e-23j
 -9.72516219e-24-1.94837381e-23j]
15:41 ninjax INFO    : [1.44906511e-46 1.44435812e-46 1.43973008e-46 ... 2.17771234e-47
 2.17774337e-47 2.17777440e-47]
15:41 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.         20.015625   20.03125  ... 2047.953125 2047.96875
 2047.984375]
15:41 ninjax INFO    : [-2.32407692e-23+1.91796610e-23j  8.51496995e-24+2.49789672e-23j
 -6.89019556e-24+8.66239747e-25j ...
  1.35349397e-23+1.07842183e-23j -1.32558282e-23+6.17057304e-24j
  1.22400055e-23+5.16201120e-24j]
15:41 ninjax INFO    : [1.44906511e-46 1.44435812e-46 1.43973008e-46 ... 2.17771234e-47
 2.17774337e-47 2.17777440e-47]
15:41 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.         20.015625   20.03125  ... 2047.953125 2047.96875
 2047.984375]
15:41 ninjax INFO    : [ 1.28424175e-23-2.98910020e-23j -6.82884710e-23-7.64378209e-23j
  2.13154636e-23+3.23610350e-23j ...
  2.35877950e-23+1.20310416e-24j  1.85969617e-23-7.11820339e-24j
 -1.55373897e-23+2.60773760e-23j]
15:41 ninjax INFO    : [1.43183556e-46 1.42688205e-46 1.42194425e-46 ... 6.39772204e-47
 6.39781464e-47 6.39790724e-47]
15:41 ninjax INFO    : SNR for ifo H1 is 6.868116920638385
15:41 ninjax INFO    : SNR for ifo L1 is 7.912630254152063
15:41 ninjax INFO    : SNR for ifo V1 is 4.866962140044357
15:41 ninjax INFO    : The network SNR is 11.552838094905812
15:41 ninjax INFO    : Network SNR passes threshold
15:41 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
15:41 ninjax INFO    :    mass_1_source: 2.3358574365308478
15:41 ninjax INFO    :    mass_2_source: 2.2449788765369947
15:41 ninjax INFO    :    s1_z: -0.03876278904324271
15:41 ninjax INFO    :    s2_z: 0.04343353491174347
15:41 ninjax INFO    :    cos_iota: -0.6022755864807388
15:41 ninjax INFO    :    d_L: 455.8652946001357
15:41 ninjax INFO    :    t_c: -0.05357023004982291
15:41 ninjax INFO    :    phase_c: 2.7955250272323426
15:41 ninjax INFO    :    psi: 2.826176088433488
15:41 ninjax INFO    :    ra: 1.242854474107165
15:41 ninjax INFO    :    sin_dec: -0.5881531255102255
15:41 ninjax INFO    :    q: 0.9610941324703346
15:41 ninjax INFO    :    M_c: 2.198790921186867
15:41 ninjax INFO    :    eta: 0.2499016049307876
15:41 ninjax INFO    :    iota: 2.217144963190245
15:41 ninjax INFO    :    dec: -0.6287733221751884
15:41 ninjax INFO    :    lambda_1: 10.960948582479604
15:41 ninjax INFO    :    lambda_2: 17.35216054191771
15:41 ninjax INFO    :    H1_SNR: 6.868116920638385
15:41 ninjax INFO    :    L1_SNR: 7.912630254152063
15:41 ninjax INFO    :    V1_SNR: 4.866962140044357
15:41 ninjax INFO    :    network_SNR: 11.552838094905812
15:41 ninjax INFO    :    epoch: 62.0
15:41 ninjax INFO    :    gmst: 2.7288901910520846
15:41 ninjax INFO    :    duration: 64.0
15:41 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
15:41 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
15:41 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
15:43 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 123.54349088668823 seconds = 2.059058181444804 minutes
15:43 ninjax INFO    : The priors are not modified after their initialization
15:43 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
15:43 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
15:43 ninjax INFO    : sample: {'M_c': Array([1.37328252, 2.00928763, 1.23920858], dtype=float64), 'q': Array([0.3262379 , 0.84590628, 0.24514944], dtype=float64), 's1_z': Array([ 0.03488385, -0.03838815,  0.01187525], dtype=float64), 's2_z': Array([-0.01966673, -0.0230107 ,  0.02369665], dtype=float64), 'lambda_1': Array([4197.62597388, 3438.44307584, 3305.19835397], dtype=float64), 'lambda_2': Array([3082.70221748, 2709.72221691,  402.4044921 ], dtype=float64), 'cos_iota': Array([ 0.30852671, -0.5974284 , -0.60214489], dtype=float64), 'd_L': Array([571.34039362, 973.17296138, 957.51439737], dtype=float64), 't_c': Array([-0.0601511 ,  0.01961538,  0.06029874], dtype=float64), 'phase_c': Array([3.34344017, 1.16860318, 3.06192987], dtype=float64), 'psi': Array([0.45678494, 0.5880212 , 0.73649816], dtype=float64), 'ra': Array([1.50748151, 2.0574723 , 3.94783068], dtype=float64), 'sin_dec': Array([-0.52591702, -0.45524194,  0.69628061], dtype=float64)}
15:44 ninjax INFO    : log_prob: [-3.15187832 -2.46604142 -3.37321406]
15:44 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 2.3358574365308478, 'mass_2_source': 2.2449788765369947, 's1_z': -0.03876278904324271, 's2_z': 0.04343353491174347, 'cos_iota': -0.6022755864807388, 'd_L': 455.8652946001357, 't_c': -0.05357023004982291, 'phase_c': 2.7955250272323426, 'psi': 2.826176088433488, 'ra': 1.242854474107165, 'sin_dec': -0.5881531255102255, 'q': 0.9610941324703346, 'M_c': 2.198790921186867, 'eta': 0.2499016049307876, 'iota': Array(2.21714496, dtype=float64, weak_type=True), 'dec': Array(-0.62877332, dtype=float64, weak_type=True), 'lambda_1': 10.960948582479604, 'lambda_2': 17.35216054191771, 'H1_SNR': 6.868116920638385, 'L1_SNR': 7.912630254152063, 'V1_SNR': 4.866962140044357, 'network_SNR': 11.552838094905812, 'epoch': 62.0, 'gmst': 2.7288901910520846, 'duration': 64.0}
15:44 ninjax INFO    : log_prob at the injection parameters is: 56.80052889089352
15:44 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
15:44 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
15:44 ninjax INFO    : Ninjax setup complete.
15:44 ninjax INFO    : Saving output to ./Aplus/injection_7/
15:44 ninjax INFO    : Using polynomial learning rate scheduler
15:44 ninjax INFO    : The hyperparameters passed to flowMC and jim are
15:44 ninjax INFO    :    n_loop_training: 200
15:44 ninjax INFO    :    n_loop_production: 10
15:44 ninjax INFO    :    n_local_steps: 100
15:44 ninjax INFO    :    n_global_steps: 1000
15:44 ninjax INFO    :    n_epochs: 25
15:44 ninjax INFO    :    n_chains: 1000
15:44 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x14a6ccfe4310>
15:44 ninjax INFO    :    max_samples: 50000
15:44 ninjax INFO    :    momentum: 0.9
15:44 ninjax INFO    :    batch_size: 30000
15:44 ninjax INFO    :    use_global: True
15:44 ninjax INFO    :    keep_quantile: 0.0
15:44 ninjax INFO    :    train_thinning: 10
15:44 ninjax INFO    :    output_thinning: 50
15:44 ninjax INFO    :    n_sample_max: 10000
15:44 ninjax INFO    :    num_layers: 10
15:44 ninjax INFO    :    hidden_size: [128, 128]
15:44 ninjax INFO    :    num_bins: 8
15:44 ninjax INFO    :    save_training_chains: False
15:44 ninjax INFO    :    eps_mass_matrix: 1e-05
15:44 ninjax INFO    :    use_scheduler: True
15:44 ninjax INFO    :    use_temperature: False
15:44 ninjax INFO    :    which_temperature_schedule: exponential
15:44 ninjax INFO    :    starting_temperature: 2.0
15:44 ninjax INFO    :    stop_tempering_iteration: 75
15:44 ninjax INFO    :    stopping_criterion_global_acc: 0.1
15:44 ninjax INFO    :    stopping_criterion_loss: -inf
15:44 ninjax INFO    :    nf_model_kwargs: {}
15:44 ninjax INFO    :    local sampler arg not shown (pretty print)
15:44 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[-8.25738008e-23 -1.45482974e-23 -6.96859743e-23  1.85801052e-24
 -8.05641238e-24 -3.96134774e-23  2.15446074e-23 -3.45472335e-23
 -4.61395149e-23  9.56594437e-24]
[-4.94298170e-23  1.15229381e-23  1.88363020e-23 -5.87854298e-23
 -4.36805325e-23 -3.56474480e-23 -5.92022765e-23  3.37168473e-23
  1.20188417e-23 -3.90363541e-23]
Checking the noise that was generated in inject_signal ifo:
[-2.53529792e-23  5.92212782e-24 -9.91398707e-24 -2.58289538e-23
 -2.30373783e-23  2.58772560e-23 -7.39308052e-23 -1.74819363e-23
  1.43106957e-23 -6.43193587e-24]
[ 1.61491614e-23  2.23526551e-23 -1.24375585e-24 -2.69006235e-23
  2.68878011e-23  7.95879372e-24  3.60282283e-23 -5.45971435e-23
 -2.60405458e-23 -6.46811218e-23]
Checking the noise that was generated in inject_signal ifo:
[ 1.03291586e-23 -7.05222031e-23  1.94533943e-23  8.33302100e-24
  5.46474280e-23  2.80304113e-24 -1.06775331e-24 -7.05820080e-23
  6.94688705e-24  7.84207117e-23]
[-2.84872847e-23 -7.46261524e-23  3.45494700e-23 -4.04457090e-23
  2.86639623e-23  2.22037690e-23  4.42804270e-23  4.17688123e-24
  4.93301243e-23 -3.21241977e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.07566356658935547 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 2.3358574365308478, 'mass_2_source': 2.2449788765369947, 's1_z': -0.03876278904324271, 's2_z': 0.04343353491174347, 'cos_iota': -0.6022755864807388, 'd_L': 455.8652946001357, 't_c': -0.05357023004982291, 'phase_c': 2.7955250272323426, 'psi': 2.826176088433488, 'ra': 1.242854474107165, 'sin_dec': -0.5881531255102255, 'q': 0.9610941324703346, 'M_c': 2.198790921186867, 'eta': 0.2499016049307876, 'iota': Array(2.21714496, dtype=float64, weak_type=True), 'dec': Array(-0.62877332, dtype=float64, weak_type=True), 'lambda_1': 10.960948582479604, 'lambda_2': 17.35216054191771, 'H1_SNR': 6.868116920638385, 'L1_SNR': 7.912630254152063, 'V1_SNR': 4.866962140044357, 'network_SNR': 11.552838094905812, 'epoch': 62.0, 'gmst': 2.7288901910520846, 'duration': 64.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.4900217056274414 seconds
Time for h_sky_low and h_sky_center: 20.009223699569702 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.6587493419647217
Going to compute coefficients . . .
Time for computing coefficients: 88.01955819129944 seconds
Time for computing coefficients: 6.902613162994385 seconds
Time for computing coefficients: 6.867177248001099 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:23<7:55:56, 143.50s/it]Tuning global sampler:   1%|          | 2/200 [02:28<3:23:48, 61.76s/it] Tuning global sampler:   2%|▏         | 3/200 [02:32<1:57:04, 35.66s/it]Tuning global sampler:   2%|▏         | 4/200 [02:37<1:16:26, 23.40s/it]Tuning global sampler:   2%|▎         | 5/200 [02:43<55:39, 17.12s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:56<51:38, 15.97s/it]Tuning global sampler:   4%|▎         | 7/200 [03:02<40:38, 12.64s/it]Tuning global sampler:   4%|▍         | 8/200 [03:23<48:40, 15.21s/it]Tuning global sampler:   4%|▍         | 9/200 [03:46<55:56, 17.57s/it]Tuning global sampler:   5%|▌         | 10/200 [03:58<50:27, 15.94s/it]Tuning global sampler:   6%|▌         | 11/200 [04:24<59:25, 18.86s/it]Tuning global sampler:   6%|▌         | 12/200 [04:28<45:36, 14.56s/it]Tuning global sampler:   6%|▋         | 13/200 [04:33<35:54, 11.52s/it]Tuning global sampler:   7%|▋         | 14/200 [04:48<39:38, 12.79s/it]Tuning global sampler:   8%|▊         | 15/200 [05:06<43:42, 14.18s/it]Tuning global sampler:   8%|▊         | 16/200 [05:26<48:37, 15.86s/it]Tuning global sampler:   8%|▊         | 17/200 [05:41<48:05, 15.77s/it]Tuning global sampler:   9%|▉         | 18/200 [05:46<37:39, 12.42s/it]Tuning global sampler:  10%|▉         | 19/200 [05:50<30:23, 10.08s/it]Tuning global sampler:  10%|█         | 20/200 [05:55<25:18,  8.44s/it]Tuning global sampler:  10%|█         | 21/200 [06:00<21:45,  7.29s/it]Tuning global sampler:  11%|█         | 22/200 [06:04<19:20,  6.52s/it]Tuning global sampler:  12%|█▏        | 23/200 [06:10<18:15,  6.19s/it]Tuning global sampler:  12%|█▏        | 24/200 [06:14<16:35,  5.66s/it]Tuning global sampler:  12%|█▎        | 25/200 [06:19<15:23,  5.27s/it]Tuning global sampler:  13%|█▎        | 26/200 [06:23<14:32,  5.01s/it]Tuning global sampler:  14%|█▎        | 27/200 [06:27<13:59,  4.85s/it]Tuning global sampler:  14%|█▍        | 28/200 [06:32<13:29,  4.71s/it]Tuning global sampler:  14%|█▍        | 29/200 [06:36<13:09,  4.61s/it]Tuning global sampler:  15%|█▌        | 30/200 [06:41<12:52,  4.54s/it]Tuning global sampler:  16%|█▌        | 31/200 [06:45<12:39,  4.49s/it]Tuning global sampler:  16%|█▌        | 32/200 [06:49<12:29,  4.46s/it]Tuning global sampler:  16%|█▋        | 33/200 [06:54<12:18,  4.42s/it]Tuning global sampler:  17%|█▋        | 34/200 [06:58<12:10,  4.40s/it]Tuning global sampler:  18%|█▊        | 35/200 [07:02<12:05,  4.40s/it]Tuning global sampler:  18%|█▊        | 36/200 [07:07<11:59,  4.39s/it]Tuning global sampler:  18%|█▊        | 37/200 [07:11<11:54,  4.38s/it]Tuning global sampler:  19%|█▉        | 38/200 [07:16<11:50,  4.39s/it]Tuning global sampler:  20%|█▉        | 39/200 [07:20<11:45,  4.39s/it]Tuning global sampler:  20%|██        | 40/200 [07:24<11:40,  4.38s/it]Tuning global sampler:  20%|██        | 41/200 [07:29<11:36,  4.38s/it]Tuning global sampler:  21%|██        | 42/200 [07:34<12:11,  4.63s/it]Tuning global sampler:  22%|██▏       | 43/200 [07:38<11:55,  4.56s/it]Tuning global sampler:  22%|██▏       | 44/200 [07:43<11:41,  4.50s/it]Tuning global sampler:  22%|██▎       | 45/200 [07:47<11:30,  4.46s/it]Tuning global sampler:  23%|██▎       | 46/200 [08:09<24:49,  9.67s/it]Tuning global sampler:  24%|██▎       | 47/200 [08:34<36:19, 14.24s/it]Tuning global sampler:  24%|██▍       | 48/200 [08:53<39:53, 15.74s/it]Tuning global sampler:  24%|██▍       | 49/200 [09:05<36:43, 14.59s/it]Tuning global sampler:  25%|██▌       | 50/200 [09:26<41:32, 16.61s/it]Tuning global sampler:  26%|██▌       | 51/200 [09:31<32:09, 12.95s/it]Tuning global sampler:  26%|██▌       | 52/200 [09:35<25:36, 10.38s/it]Tuning global sampler:  26%|██▋       | 53/200 [09:39<21:00,  8.58s/it]Tuning global sampler:  27%|██▋       | 54/200 [09:44<17:52,  7.34s/it]Tuning global sampler:  28%|██▊       | 55/200 [09:48<15:33,  6.44s/it]Tuning global sampler:  28%|██▊       | 56/200 [09:53<13:57,  5.82s/it]Tuning global sampler:  28%|██▊       | 57/200 [09:57<12:50,  5.39s/it]Tuning global sampler:  28%|██▊       | 57/200 [10:01<25:09, 10.56s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.22s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.22s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.22s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.22s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.22s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.22s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.22s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.22s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]
15:54 ninjax INFO    : Saving samples to ./Aplus/injection_7/results_training.npz
15:54 ninjax INFO    : Saving the NF
15:54 ninjax INFO    : Time taken: 649.5408139228821 seconds (10.825680232048034 minutes)
15:54 ninjax INFO    : Creating the final corner plot
15:54 ninjax INFO    : Dumping the final production chains
15:54 ninjax INFO    : Chains shape is: (13, 220000)
15:55 ninjax INFO    : Key: M_c: ESS = 58313, Rhat = 1.0117389808286938
15:55 ninjax INFO    : Key: q: ESS = 64850, Rhat = 1.012780940488624
15:55 ninjax INFO    : Key: s1_z: ESS = 40749, Rhat = 1.0163769335738346
15:55 ninjax INFO    : Key: s2_z: ESS = 43723, Rhat = 1.015530441093601
15:55 ninjax INFO    : Key: lambda_1: ESS = 58905, Rhat = 1.0124946357694802
15:55 ninjax INFO    : Key: lambda_2: ESS = 49157, Rhat = 1.014753836802334
15:55 ninjax INFO    : Key: cos_iota: ESS = 40149, Rhat = 1.0169765932747885
15:55 ninjax INFO    : Key: d_L: ESS = 43815, Rhat = 1.0157801764686991
15:55 ninjax INFO    : Key: t_c: ESS = 55246, Rhat = 1.0132754812976932
15:55 ninjax INFO    : Key: phase_c: ESS = 24192, Rhat = 1.0253146447398993
15:55 ninjax INFO    : Key: psi: ESS = 31841, Rhat = 1.0196825931399638
15:55 ninjax INFO    : Key: ra: ESS = 62266, Rhat = 1.0124276531519936
15:55 ninjax INFO    : Key: sin_dec: ESS = 66172, Rhat = 1.0120022602496996
15:55 ninjax INFO    : Key: eta: ESS = 64850, Rhat = 1.012780940488624
15:55 ninjax INFO    : Key: iota: ESS = 40149, Rhat = 1.0169765932747885
15:55 ninjax INFO    : Key: dec: ESS = 66172, Rhat = 1.0120022602496996
15:55 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 2.060 +/- 0.330
q: 0.723 +/- 0.212
s1_z: 0.007 +/- 0.027
s2_z: 0.005 +/- 0.028
lambda_1: 1703.993 +/- 1447.383
lambda_2: 1956.984 +/- 1469.648
cos_iota: -0.308 +/- 0.481
d_L: 688.112 +/- 180.398
t_c: -0.042 +/- 0.032
phase_c: 3.126 +/- 1.723
psi: 1.734 +/- 0.915
ra: 1.810 +/- 1.183
sin_dec: -0.371 +/- 0.369
Log probability: 17.453 +/- 28.726
Local acceptance: 0.997 +/- 0.051
Global acceptance: 0.017 +/- 0.131
Max loss: 22.900, Min loss: 8.701
Production summary
==========
M_c: 2.199 +/- 0.001
q: 0.851 +/- 0.097
s1_z: 0.016 +/- 0.023
s2_z: 0.012 +/- 0.025
lambda_1: 418.618 +/- 384.389
lambda_2: 690.702 +/- 601.028
cos_iota: -0.772 +/- 0.199
d_L: 535.972 +/- 109.506
t_c: -0.050 +/- 0.002
phase_c: 3.181 +/- 1.815
psi: 1.620 +/- 0.916
ra: 1.283 +/- 0.028
sin_dec: -0.512 +/- 0.079
Log probability: 53.692 +/- 2.513
Local acceptance: 0.997 +/- 0.059
Global acceptance: 0.105 +/- 0.307
DONE

JOB STATISTICS
==============
Job ID: 10906022
Cluster: snellius
User/Group: twouters2/twouters2
State: RUNNING
Nodes: 1
Cores per node: 16
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 03:44:00 core-walltime
Job Wall-clock time: 00:14:00
Memory Utilized: 0.00 MB
Memory Efficiency: 0.00% of 10.00 GB (10.00 GB/node)
WARNING: Efficiency statistics can only be obtained after the job has ended as seff tool is based on the accounting database data.
