Tue Apr  1 15:41:20 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
15:41 ninjax INFO    : Checking and setting outdir
15:41 ninjax INFO    : Found generation prior file ./Aplus/injection_4/generation_prior.prior
15:41 ninjax INFO    : The outdir is set to ./Aplus/injection_4
15:41 ninjax INFO    : Loading the given config
15:41 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
15:41 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
15:41 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/MPA1/Aplus/injection_4/complete_config.json
15:41 ninjax INFO    : No seed specified. Generating a random seed: 149140
15:41 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 463335
15:41 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 196106
15:41 ninjax INFO    : Loading the priors
15:41 ninjax INFO    : Setting up the prior
15:41 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
15:41 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
15:41 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
15:41 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
15:41 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
15:41 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
15:41 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
15:41 ninjax INFO    :    dL_prior = PowerLaw(10.0, 1000.0, 2.0, naming=["d_L"])
15:41 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
15:41 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
15:41 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
15:41 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
15:41 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
15:41 ninjax INFO    : Setting up the generation prior
15:41 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.468645554845655, naming=["mass_1_source"])
15:41 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.468645554845655, naming=["mass_2_source"])
15:41 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
15:41 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
15:41 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
15:41 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
15:41 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
15:41 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
15:41 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
15:41 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
15:41 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
15:41 ninjax INFO    : Finished prior setup
15:41 ninjax INFO    : Setting the transforms
15:41 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
15:41 ninjax INFO    : transforms_str_list has 3 elements
15:41 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
15:41 ninjax INFO    : Setting the likelihood
15:41 ninjax INFO    : GW likelihood provided, setting up the GW pipe
15:41 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz
15:41 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz for BNS injections
15:41 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
15:41 ninjax INFO    : self.is_BNS_run is True
15:41 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
15:41 ninjax INFO    : GW run is an injection
15:41 ninjax INFO    : Setting up GW injection . . . 
15:41 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
15:41 ninjax INFO    : Generating new injection
15:41 ninjax INFO    : Sanity check: generated parameters:
15:41 ninjax INFO    : {'mass_1_source': 1.6324501313591153, 'mass_2_source': 1.949615062605841, 's1_z': 0.046762569403237794, 's2_z': 0.013204265443091348, 'cos_iota': -0.12246050981069434, 'd_L': 364.52732324264247, 't_c': -0.03683171521582533, 'phase_c': 4.148773289655726, 'psi': 2.2136685968581644, 'ra': 6.213849407345798, 'sin_dec': 0.6218837056881146}
15:41 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz . . . 
15:41 ninjax INFO    : Injected lambda_1: 59.66191711232595
15:41 ninjax INFO    : Injected lambda_2: 202.80393342771626
15:41 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.6796593947137937 is 128.0
15:41 ninjax INFO    : After transforms, the injection parameters are:
15:41 ninjax INFO    : {'mass_1_source': 1.949615062605841, 'mass_2_source': 1.6324501313591153, 's1_z': 0.046762569403237794, 's2_z': 0.013204265443091348, 'cos_iota': -0.12246050981069434, 'd_L': 364.52732324264247, 't_c': -0.03683171521582533, 'phase_c': 4.148773289655726, 'psi': 2.2136685968581644, 'ra': 6.213849407345798, 'sin_dec': 0.6218837056881146, 'q': 0.8373192035032775, 'M_c': 1.6796593947137937, 'eta': 0.24804005736507934, 'iota': Array(1.693565, dtype=float64, weak_type=True), 'dec': Array(0.67114583, dtype=float64, weak_type=True), 'lambda_1': 59.66191711232595, 'lambda_2': 202.80393342771626}
15:41 ninjax INFO    : The trial injection parameters are {'M_c': 1.6796593947137937, 'eta': 0.24804005736507934, 's1_z': 0.046762569403237794, 's2_z': 0.013204265443091348, 'lambda_1': 59.66191711232595, 'lambda_2': 202.80393342771626, 'd_L': 364.52732324264247, 'phase_c': 4.148773289655726, 'iota': 1.693565002212077, 't_c': -0.03683171521582533, 'psi': 2.2136685968581644, 'ra': 6.213849407345798, 'dec': 0.6711458301571527}
15:41 ninjax INFO    : Injecting signals . . .
15:41 ninjax INFO    : self.ifos
15:41 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
15:41 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:41 ninjax INFO    : [ 3.89543409e-23-4.56528339e-24j  2.20373836e-23+3.92813847e-23j
  9.27096153e-24+3.61002223e-23j ...
 -2.25136425e-23-2.48471148e-24j -2.20100623e-24-8.68263741e-24j
 -1.18040554e-23-2.76083867e-23j]
15:41 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
15:41 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:41 ninjax INFO    : [-8.98325912e-25+8.84201379e-23j  7.38464550e-23+7.91760704e-23j
  8.37444552e-24+2.47600013e-23j ...
  7.88265630e-24+1.68598836e-23j -1.84055454e-23-1.32205195e-23j
 -1.27325213e-23-3.06674666e-23j]
15:41 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
15:41 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:41 ninjax INFO    : [-3.13310600e-23+6.57891992e-23j -7.12031608e-23+1.89210200e-23j
 -3.33125452e-23-3.59832785e-24j ...
  5.41069158e-24+1.33147222e-24j  2.54399139e-23-2.82396345e-23j
 -7.51688588e-23+1.95530904e-23j]
15:41 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
15:41 ninjax INFO    : SNR for ifo H1 is 8.685799056548946
15:41 ninjax INFO    : SNR for ifo L1 is 5.785825515790459
15:41 ninjax INFO    : SNR for ifo V1 is 0.8275853549263104
15:41 ninjax INFO    : The network SNR is 10.469182378276109
15:41 ninjax INFO    : The network SNR does not pass the threshold, trying again
15:41 ninjax INFO    : Generating new injection
15:41 ninjax INFO    : Sanity check: generated parameters:
15:41 ninjax INFO    : {'mass_1_source': 1.2304848800904213, 'mass_2_source': 1.2021654245406639, 's1_z': -0.024122607783231255, 's2_z': -0.018532736083538164, 'cos_iota': 0.4822043942621792, 'd_L': 184.53056657995964, 't_c': 0.04131359595417078, 'phase_c': 0.4894796186373731, 'psi': 1.0082685410197105, 'ra': 2.8721888270841847, 'sin_dec': 0.127568713289274}
15:41 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz . . . 
15:41 ninjax INFO    : Injected lambda_1: 1056.6663500851173
15:41 ninjax INFO    : Injected lambda_2: 1198.9939272598344
15:41 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.102933441711193 is 256.0
15:41 ninjax INFO    : After transforms, the injection parameters are:
15:41 ninjax INFO    : {'mass_1_source': 1.2304848800904213, 'mass_2_source': 1.2021654245406639, 's1_z': -0.024122607783231255, 's2_z': -0.018532736083538164, 'cos_iota': 0.4822043942621792, 'd_L': 184.53056657995964, 't_c': 0.04131359595417078, 'phase_c': 0.4894796186373731, 'psi': 1.0082685410197105, 'ra': 2.8721888270841847, 'sin_dec': 0.127568713289274, 'q': 0.9769851251258964, 'M_c': 1.102933441711193, 'eta': 0.24996611945080793, 'iota': Array(1.06762709, dtype=float64, weak_type=True), 'dec': Array(0.12791728, dtype=float64, weak_type=True), 'lambda_1': 1056.6663500851173, 'lambda_2': 1198.9939272598344}
15:41 ninjax INFO    : The trial injection parameters are {'M_c': 1.102933441711193, 'eta': 0.24996611945080793, 's1_z': -0.024122607783231255, 's2_z': -0.018532736083538164, 'lambda_1': 1056.6663500851173, 'lambda_2': 1198.9939272598344, 'd_L': 184.53056657995964, 'phase_c': 0.4894796186373731, 'iota': 1.0676270887945905, 't_c': 0.04131359595417078, 'psi': 1.0082685410197105, 'ra': 2.8721888270841847, 'dec': 0.1279172760902821}
15:41 ninjax INFO    : Injecting signals . . .
15:41 ninjax INFO    : self.ifos
15:41 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
15:41 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
15:41 ninjax INFO    : [ 2.29667722e-23-3.67768636e-23j -1.20520284e-23-2.28709976e-23j
  4.10443872e-23+7.40261991e-23j ...
  2.61630860e-23-8.65574670e-24j  3.37268654e-23-3.30481057e-23j
 -1.03972167e-23+5.06077593e-23j]
15:41 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
15:41 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
15:41 ninjax INFO    : [-5.46244697e-23-9.26826380e-23j  4.89081287e-23+5.69045139e-23j
  1.14721662e-22+1.08601902e-22j ...
  5.01138443e-23-5.37792494e-24j  2.28942790e-23+4.71840635e-24j
 -1.46903540e-23-1.43238275e-23j]
15:41 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
15:41 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
15:41 ninjax INFO    : [-1.45394240e-22-1.61879159e-22j  4.15102854e-23-6.56897057e-24j
  4.41837421e-23+1.04813333e-24j ...
  3.63047452e-23+5.37268537e-23j -4.31988190e-24+2.23872405e-23j
 -4.38233619e-24+2.33654212e-23j]
15:41 ninjax INFO    : [1.43183556e-46 1.43058540e-46 1.42935095e-46 ... 6.39793039e-47
 6.39795354e-47 6.39797668e-47]
15:41 ninjax INFO    : SNR for ifo H1 is 10.20047410787578
15:41 ninjax INFO    : SNR for ifo L1 is 7.922123725387649
15:41 ninjax INFO    : SNR for ifo V1 is 9.44120139201109
15:41 ninjax INFO    : The network SNR is 15.998312413198656
15:41 ninjax INFO    : Network SNR passes threshold
15:41 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
15:41 ninjax INFO    :    mass_1_source: 1.2304848800904213
15:41 ninjax INFO    :    mass_2_source: 1.2021654245406639
15:41 ninjax INFO    :    s1_z: -0.024122607783231255
15:41 ninjax INFO    :    s2_z: -0.018532736083538164
15:41 ninjax INFO    :    cos_iota: 0.4822043942621792
15:41 ninjax INFO    :    d_L: 184.53056657995964
15:41 ninjax INFO    :    t_c: 0.04131359595417078
15:41 ninjax INFO    :    phase_c: 0.4894796186373731
15:41 ninjax INFO    :    psi: 1.0082685410197105
15:41 ninjax INFO    :    ra: 2.8721888270841847
15:41 ninjax INFO    :    sin_dec: 0.127568713289274
15:41 ninjax INFO    :    q: 0.9769851251258964
15:41 ninjax INFO    :    M_c: 1.102933441711193
15:41 ninjax INFO    :    eta: 0.24996611945080793
15:41 ninjax INFO    :    iota: 1.0676270887945905
15:41 ninjax INFO    :    dec: 0.1279172760902821
15:41 ninjax INFO    :    lambda_1: 1056.6663500851173
15:41 ninjax INFO    :    lambda_2: 1198.9939272598344
15:41 ninjax INFO    :    H1_SNR: 10.20047410787578
15:41 ninjax INFO    :    L1_SNR: 7.922123725387649
15:41 ninjax INFO    :    V1_SNR: 9.44120139201109
15:41 ninjax INFO    :    network_SNR: 15.998312413198656
15:41 ninjax INFO    :    epoch: 254.0
15:41 ninjax INFO    :    gmst: 2.7288901910520846
15:41 ninjax INFO    :    duration: 256.0
15:41 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
15:41 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
15:41 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
15:44 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 192.78225350379944 seconds = 3.2130375583966573 minutes
15:44 ninjax INFO    : The priors are not modified after their initialization
15:44 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
15:44 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
15:44 ninjax INFO    : sample: {'M_c': Array([1.60135224, 1.15787478, 2.2994983 ], dtype=float64), 'q': Array([0.58230739, 0.62509534, 0.7214638 ], dtype=float64), 's1_z': Array([ 0.01839391, -0.02888898,  0.01602213], dtype=float64), 's2_z': Array([-0.01482366, -0.03081928, -0.04042911], dtype=float64), 'lambda_1': Array([3561.71021781, 4471.70346853, 2749.15563597], dtype=float64), 'lambda_2': Array([3919.29434533, 3940.23536773, 3045.08377144], dtype=float64), 'cos_iota': Array([ 0.64923425,  0.29687757, -0.23399437], dtype=float64), 'd_L': Array([925.17320352, 620.67486952, 625.9546832 ], dtype=float64), 't_c': Array([-0.04460146,  0.03884473, -0.09191654], dtype=float64), 'phase_c': Array([4.30100639, 0.04910015, 0.82919831], dtype=float64), 'psi': Array([1.09864854, 2.46993126, 1.86223137], dtype=float64), 'ra': Array([5.28235493, 1.81374399, 5.84318023], dtype=float64), 'sin_dec': Array([-0.88481505, -0.19223124, -0.00429386], dtype=float64)}
15:45 ninjax INFO    : log_prob: [-17.12123771  -4.96841678 -16.92523195]
15:45 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.2304848800904213, 'mass_2_source': 1.2021654245406639, 's1_z': -0.024122607783231255, 's2_z': -0.018532736083538164, 'cos_iota': 0.4822043942621792, 'd_L': 184.53056657995964, 't_c': 0.04131359595417078, 'phase_c': 0.4894796186373731, 'psi': 1.0082685410197105, 'ra': 2.8721888270841847, 'sin_dec': 0.127568713289274, 'q': 0.9769851251258964, 'M_c': 1.102933441711193, 'eta': 0.24996611945080793, 'iota': Array(1.06762709, dtype=float64, weak_type=True), 'dec': Array(0.12791728, dtype=float64, weak_type=True), 'lambda_1': 1056.6663500851173, 'lambda_2': 1198.9939272598344, 'H1_SNR': 10.20047410787578, 'L1_SNR': 7.922123725387649, 'V1_SNR': 9.44120139201109, 'network_SNR': 15.998312413198656, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
15:45 ninjax INFO    : log_prob at the injection parameters is: 96.49001025334805
15:45 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
15:45 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
15:45 ninjax INFO    : Ninjax setup complete.
15:45 ninjax INFO    : Saving output to ./Aplus/injection_4/
15:45 ninjax INFO    : Using polynomial learning rate scheduler
15:45 ninjax INFO    : The hyperparameters passed to flowMC and jim are
15:45 ninjax INFO    :    n_loop_training: 200
15:45 ninjax INFO    :    n_loop_production: 10
15:45 ninjax INFO    :    n_local_steps: 100
15:45 ninjax INFO    :    n_global_steps: 1000
15:45 ninjax INFO    :    n_epochs: 25
15:45 ninjax INFO    :    n_chains: 1000
15:45 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x14da6bdfdd80>
15:45 ninjax INFO    :    max_samples: 50000
15:45 ninjax INFO    :    momentum: 0.9
15:45 ninjax INFO    :    batch_size: 30000
15:45 ninjax INFO    :    use_global: True
15:45 ninjax INFO    :    keep_quantile: 0.0
15:45 ninjax INFO    :    train_thinning: 10
15:45 ninjax INFO    :    output_thinning: 50
15:45 ninjax INFO    :    n_sample_max: 10000
15:45 ninjax INFO    :    num_layers: 10
15:45 ninjax INFO    :    hidden_size: [128, 128]
15:45 ninjax INFO    :    num_bins: 8
15:45 ninjax INFO    :    save_training_chains: False
15:45 ninjax INFO    :    eps_mass_matrix: 1e-05
15:45 ninjax INFO    :    use_scheduler: True
15:45 ninjax INFO    :    use_temperature: False
15:45 ninjax INFO    :    which_temperature_schedule: exponential
15:45 ninjax INFO    :    starting_temperature: 2.0
15:45 ninjax INFO    :    stop_tempering_iteration: 75
15:45 ninjax INFO    :    stopping_criterion_global_acc: 0.1
15:45 ninjax INFO    :    stopping_criterion_loss: -inf
15:45 ninjax INFO    :    nf_model_kwargs: {}
15:45 ninjax INFO    :    local sampler arg not shown (pretty print)
15:45 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[ 3.54813933e-23  2.40144199e-23  1.28007861e-23  3.18949573e-23
 -8.67018196e-24  2.51125750e-23 -1.33263978e-23  9.55871140e-24
  3.66630740e-24  6.65198458e-23]
[-2.52612927e-24  4.27879479e-23  3.41688603e-23  3.09342562e-23
 -1.11634707e-23  6.40378811e-23  9.44118495e-24 -4.56441498e-23
  3.54186176e-23 -4.78476358e-24]
Checking the noise that was generated in inject_signal ifo:
[-2.33515494e-25  7.12604344e-23  7.63362623e-24 -1.46376935e-23
  7.69358302e-23 -5.83763647e-23 -4.86148326e-24 -2.60054688e-23
 -2.37022509e-23 -6.21790907e-23]
[ 8.58211025e-23  7.84669420e-23  2.73358446e-23  4.36637872e-23
  4.70918706e-23  2.06546017e-23 -8.88782468e-23  2.96642063e-24
  3.42182428e-23  3.64034590e-24]
Checking the noise that was generated in inject_signal ifo:
[-3.16535105e-23 -7.08440593e-23 -3.29802479e-23 -2.52971454e-23
 -6.98694225e-23  5.65820906e-23  3.48624083e-23  5.46464226e-23
  2.93718819e-23 -1.83839455e-23]
[ 6.61538356e-23  1.92492929e-23 -3.95340356e-24 -2.76599401e-23
 -1.27609920e-23  8.67321644e-24  3.35033492e-23 -2.28602092e-23
 -8.02686566e-23 -7.11320544e-23]
Checking the noise that was generated in inject_signal ifo:
[ 2.40914049e-23 -7.50280859e-24  3.98042368e-23  7.68065448e-24
 -9.69028628e-23  4.64198159e-23  2.57195433e-23  9.19025276e-23
  5.34283281e-23  1.36536781e-22]
[-3.22133071e-23 -2.40480017e-23  6.94949006e-23 -7.78049214e-23
 -4.67500761e-23 -6.91502029e-23  1.05986418e-22  1.74603681e-22
 -2.02843241e-23 -1.67639595e-24]
Checking the noise that was generated in inject_signal ifo:
[-5.12781739e-23  4.74119619e-23  1.11414771e-22 -4.46948691e-23
  9.01245527e-23  4.85159259e-23  2.23921531e-23  1.46505894e-23
 -5.17711346e-23 -7.62697659e-23]
[-9.41410363e-23  5.35758490e-23  1.10143623e-22  2.26111443e-24
 -1.60110523e-23  1.01466131e-22 -1.63830172e-23  4.18113421e-23
  5.02964304e-23 -7.96760559e-23]
Checking the noise that was generated in inject_signal ifo:
[-1.40963046e-22  3.81642653e-23  3.98361210e-23  1.60231109e-24
  1.85178967e-23 -1.42311175e-22  1.46609079e-22 -1.59006956e-22
 -4.15567607e-23  1.09355396e-23]
[-1.65177575e-22 -1.09627404e-23  4.45185218e-24 -6.00629474e-24
  1.89036355e-22  3.06849943e-23  6.32347476e-23 -1.66114468e-23
 -9.06209034e-23 -8.81267541e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.18503832817077637 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.2304848800904213, 'mass_2_source': 1.2021654245406639, 's1_z': -0.024122607783231255, 's2_z': -0.018532736083538164, 'cos_iota': 0.4822043942621792, 'd_L': 184.53056657995964, 't_c': 0.04131359595417078, 'phase_c': 0.4894796186373731, 'psi': 1.0082685410197105, 'ra': 2.8721888270841847, 'sin_dec': 0.127568713289274, 'q': 0.9769851251258964, 'M_c': 1.102933441711193, 'eta': 0.24996611945080793, 'iota': Array(1.06762709, dtype=float64, weak_type=True), 'dec': Array(0.12791728, dtype=float64, weak_type=True), 'lambda_1': 1056.6663500851173, 'lambda_2': 1198.9939272598344, 'H1_SNR': 10.20047410787578, 'L1_SNR': 7.922123725387649, 'V1_SNR': 9.44120139201109, 'network_SNR': 15.998312413198656, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5127558708190918 seconds
Time for h_sky_low and h_sky_center: 6.024677038192749 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.7365431785583496
Going to compute coefficients . . .
Time for computing coefficients: 170.85554432868958 seconds
Time for computing coefficients: 7.015105962753296 seconds
Time for computing coefficients: 6.908145427703857 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:01<6:44:21, 121.92s/it]Tuning global sampler:   1%|          | 2/200 [02:06<2:54:31, 52.89s/it] Tuning global sampler:   2%|▏         | 3/200 [02:11<1:41:17, 30.85s/it]Tuning global sampler:   2%|▏         | 4/200 [02:15<1:06:55, 20.49s/it]Tuning global sampler:   2%|▎         | 5/200 [02:20<47:57, 14.76s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:24<36:33, 11.31s/it]Tuning global sampler:   4%|▎         | 7/200 [02:29<29:14,  9.09s/it]Tuning global sampler:   4%|▍         | 8/200 [02:34<24:31,  7.66s/it]Tuning global sampler:   4%|▍         | 9/200 [02:38<21:16,  6.69s/it]Tuning global sampler:   5%|▌         | 10/200 [02:43<18:57,  5.99s/it]Tuning global sampler:   6%|▌         | 11/200 [02:47<17:31,  5.56s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:30,  5.27s/it]Tuning global sampler:   6%|▋         | 13/200 [02:56<15:44,  5.05s/it]Tuning global sampler:   7%|▋         | 14/200 [03:01<15:16,  4.93s/it]Tuning global sampler:   8%|▊         | 15/200 [03:06<14:55,  4.84s/it]Tuning global sampler:   8%|▊         | 16/200 [03:10<14:47,  4.82s/it]Tuning global sampler:   8%|▊         | 17/200 [03:16<15:25,  5.06s/it]Tuning global sampler:   9%|▉         | 18/200 [03:21<14:57,  4.93s/it]Tuning global sampler:  10%|▉         | 19/200 [03:25<14:36,  4.84s/it]Tuning global sampler:  10%|█         | 20/200 [03:30<14:20,  4.78s/it]Tuning global sampler:  10%|█         | 21/200 [03:34<14:07,  4.74s/it]Tuning global sampler:  11%|█         | 22/200 [03:39<13:56,  4.70s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:44<13:47,  4.67s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:48<13:29,  4.60s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:53<13:14,  4.54s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:57<13:03,  4.50s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:01<12:54,  4.48s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:06<12:47,  4.46s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:10<12:39,  4.44s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:15<12:32,  4.43s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:19<12:36,  4.48s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:24<12:27,  4.45s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:28<12:18,  4.42s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:32<12:10,  4.40s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:37<12:04,  4.39s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:41<12:00,  4.39s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:45<11:55,  4.39s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:51<12:39,  4.69s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:55<12:20,  4.60s/it]Tuning global sampler:  20%|██        | 40/200 [05:00<12:05,  4.53s/it]Tuning global sampler:  20%|██        | 41/200 [05:04<11:54,  4.49s/it]Tuning global sampler:  21%|██        | 42/200 [05:08<11:45,  4.47s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:13<11:37,  4.44s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:17<11:29,  4.42s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:21<11:22,  4.40s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:26<11:17,  4.40s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:30<11:12,  4.40s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:35<11:08,  4.40s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:39<11:05,  4.41s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:43<11:00,  4.41s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:48<10:56,  4.40s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:52<10:51,  4.40s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:57<10:46,  4.40s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:01<10:41,  4.40s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:05<10:35,  4.38s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:10<10:29,  4.37s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:14<10:26,  4.38s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:19<10:22,  4.39s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:24<11:01,  4.69s/it]Tuning global sampler:  30%|███       | 60/200 [06:28<10:44,  4.61s/it]Tuning global sampler:  30%|███       | 61/200 [06:33<10:31,  4.54s/it]Tuning global sampler:  31%|███       | 62/200 [06:37<10:20,  4.50s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:42<10:12,  4.47s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:46<10:04,  4.45s/it]Tuning global sampler:  32%|███▎      | 65/200 [06:50<09:57,  4.43s/it]Tuning global sampler:  33%|███▎      | 66/200 [06:55<09:50,  4.40s/it]Tuning global sampler:  34%|███▎      | 67/200 [06:59<09:43,  4.39s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:03<09:39,  4.39s/it]Tuning global sampler:  34%|███▍      | 69/200 [07:08<09:36,  4.40s/it]Tuning global sampler:  35%|███▌      | 70/200 [07:12<09:32,  4.40s/it]Tuning global sampler:  36%|███▌      | 71/200 [07:17<09:27,  4.40s/it]Tuning global sampler:  36%|███▌      | 72/200 [07:21<09:22,  4.40s/it]Tuning global sampler:  36%|███▋      | 73/200 [07:25<09:18,  4.40s/it]Tuning global sampler:  37%|███▋      | 74/200 [07:30<09:14,  4.40s/it]Tuning global sampler:  38%|███▊      | 75/200 [07:34<09:10,  4.40s/it]Tuning global sampler:  38%|███▊      | 76/200 [07:39<09:06,  4.41s/it]Tuning global sampler:  38%|███▊      | 77/200 [07:43<08:59,  4.39s/it]Tuning global sampler:  39%|███▉      | 78/200 [07:47<08:53,  4.38s/it]Tuning global sampler:  40%|███▉      | 79/200 [07:52<08:49,  4.38s/it]Tuning global sampler:  40%|████      | 80/200 [07:56<08:46,  4.38s/it]Tuning global sampler:  40%|████      | 81/200 [08:02<09:19,  4.70s/it]Tuning global sampler:  41%|████      | 82/200 [08:06<09:03,  4.61s/it]Tuning global sampler:  42%|████▏     | 83/200 [08:10<08:51,  4.55s/it]Tuning global sampler:  42%|████▏     | 84/200 [08:15<08:42,  4.50s/it]Tuning global sampler:  42%|████▎     | 85/200 [08:19<08:33,  4.47s/it]Tuning global sampler:  43%|████▎     | 86/200 [08:24<08:27,  4.46s/it]Tuning global sampler:  44%|████▎     | 87/200 [08:28<08:21,  4.44s/it]Tuning global sampler:  44%|████▍     | 88/200 [08:32<08:14,  4.42s/it]Tuning global sampler:  44%|████▍     | 89/200 [08:37<08:08,  4.40s/it]Tuning global sampler:  45%|████▌     | 90/200 [08:41<08:03,  4.39s/it]Tuning global sampler:  46%|████▌     | 91/200 [08:46<07:59,  4.40s/it]Tuning global sampler:  46%|████▌     | 92/200 [08:50<07:55,  4.40s/it]Tuning global sampler:  46%|████▋     | 93/200 [08:54<07:51,  4.41s/it]Tuning global sampler:  47%|████▋     | 94/200 [08:59<07:47,  4.41s/it]Tuning global sampler:  48%|████▊     | 95/200 [09:03<07:42,  4.41s/it]Tuning global sampler:  48%|████▊     | 96/200 [09:08<07:39,  4.42s/it]Tuning global sampler:  48%|████▊     | 96/200 [09:12<09:58,  5.76s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.21s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.21s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.21s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.21s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.21s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.21s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.21s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.21s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]
15:55 ninjax INFO    : Saving samples to ./Aplus/injection_4/results_training.npz
15:55 ninjax INFO    : Saving the NF
15:55 ninjax INFO    : Time taken: 591.7760338783264 seconds (9.862933897972107 minutes)
15:55 ninjax INFO    : Creating the final corner plot
15:55 ninjax INFO    : Dumping the final production chains
15:55 ninjax INFO    : Chains shape is: (13, 220000)
15:55 ninjax INFO    : Key: M_c: ESS = 72965, Rhat = 1.011152478864051
15:55 ninjax INFO    : Key: q: ESS = 47052, Rhat = 1.0152451084407723
15:55 ninjax INFO    : Key: s1_z: ESS = 43429, Rhat = 1.0154952196774805
15:55 ninjax INFO    : Key: s2_z: ESS = 65020, Rhat = 1.0115464950946143
15:55 ninjax INFO    : Key: lambda_1: ESS = 71230, Rhat = 1.0114968704075147
15:55 ninjax INFO    : Key: lambda_2: ESS = 64584, Rhat = 1.0120082688860885
15:55 ninjax INFO    : Key: cos_iota: ESS = 45257, Rhat = 1.015099662981791
15:55 ninjax INFO    : Key: d_L: ESS = 66614, Rhat = 1.0114491637412504
15:55 ninjax INFO    : Key: t_c: ESS = 73522, Rhat = 1.0109914747717381
15:55 ninjax INFO    : Key: phase_c: ESS = 58623, Rhat = 1.0121223065663933
15:55 ninjax INFO    : Key: psi: ESS = 51815, Rhat = 1.0142517181476511
15:55 ninjax INFO    : Key: ra: ESS = 45904, Rhat = 1.014708951793439
15:55 ninjax INFO    : Key: sin_dec: ESS = 53973, Rhat = 1.0132794636194085
15:55 ninjax INFO    : Key: eta: ESS = 47052, Rhat = 1.0152451084407723
15:55 ninjax INFO    : Key: iota: ESS = 45257, Rhat = 1.015099662981791
15:55 ninjax INFO    : Key: dec: ESS = 53973, Rhat = 1.0132794636194085
15:55 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.262 +/- 0.344
q: 0.664 +/- 0.225
s1_z: 0.002 +/- 0.027
s2_z: -0.003 +/- 0.028
lambda_1: 2285.726 +/- 1408.431
lambda_2: 2454.767 +/- 1414.461
cos_iota: 0.358 +/- 0.455
d_L: 605.056 +/- 268.314
t_c: 0.027 +/- 0.037
phase_c: 3.164 +/- 1.763
psi: 1.663 +/- 0.888
ra: 2.979 +/- 1.141
sin_dec: -0.033 +/- 0.421
Log probability: 24.232 +/- 46.102
Local acceptance: 0.713 +/- 0.453
Global acceptance: 0.019 +/- 0.138
Max loss: 28.129, Min loss: 9.064
Production summary
==========
M_c: 1.103 +/- 0.000
q: 0.796 +/- 0.120
s1_z: -0.001 +/- 0.026
s2_z: -0.002 +/- 0.027
lambda_1: 1607.972 +/- 1152.252
lambda_2: 2213.309 +/- 1370.433
cos_iota: 0.789 +/- 0.161
d_L: 288.608 +/- 53.944
t_c: 0.042 +/- 0.001
phase_c: 3.093 +/- 1.808
psi: 1.638 +/- 0.886
ra: 2.883 +/- 0.012
sin_dec: 0.101 +/- 0.038
Log probability: 92.721 +/- 2.300
Local acceptance: 0.231 +/- 0.421
Global acceptance: 0.101 +/- 0.302
DONE

JOB STATISTICS
==============
Job ID: 10906019
Cluster: snellius
User/Group: twouters2/twouters2
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 00:12:19
CPU Efficiency: 5.42% of 03:47:12 core-walltime
Job Wall-clock time: 00:14:12
Memory Utilized: 4.75 GB
Memory Efficiency: 47.46% of 10.00 GB (10.00 GB/node)
