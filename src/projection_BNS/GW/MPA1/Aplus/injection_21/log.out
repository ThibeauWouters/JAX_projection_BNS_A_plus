Tue Apr  1 15:41:26 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
15:41 ninjax INFO    : Checking and setting outdir
15:41 ninjax INFO    : Found generation prior file ./Aplus/injection_21/generation_prior.prior
15:41 ninjax INFO    : The outdir is set to ./Aplus/injection_21
15:41 ninjax INFO    : Loading the given config
15:41 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
15:41 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
15:41 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/MPA1/Aplus/injection_21/complete_config.json
15:41 ninjax INFO    : No seed specified. Generating a random seed: 898015
15:41 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 702030
15:41 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 838509
15:41 ninjax INFO    : Loading the priors
15:41 ninjax INFO    : Setting up the prior
15:41 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
15:41 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
15:41 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
15:41 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
15:41 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
15:41 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
15:41 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
15:41 ninjax INFO    :    dL_prior = PowerLaw(10.0, 1000.0, 2.0, naming=["d_L"])
15:41 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
15:41 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
15:41 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
15:41 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
15:41 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
15:41 ninjax INFO    : Setting up the generation prior
15:41 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.468645554845655, naming=["mass_1_source"])
15:41 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.468645554845655, naming=["mass_2_source"])
15:41 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
15:41 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
15:41 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
15:41 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
15:41 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
15:41 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
15:41 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
15:41 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
15:41 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
15:41 ninjax INFO    : Finished prior setup
15:41 ninjax INFO    : Setting the transforms
15:41 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
15:41 ninjax INFO    : transforms_str_list has 3 elements
15:41 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
15:41 ninjax INFO    : Setting the likelihood
15:41 ninjax INFO    : GW likelihood provided, setting up the GW pipe
15:41 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz
15:41 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz for BNS injections
15:41 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
15:41 ninjax INFO    : self.is_BNS_run is True
15:41 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
15:41 ninjax INFO    : GW run is an injection
15:41 ninjax INFO    : Setting up GW injection . . . 
15:41 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
15:41 ninjax INFO    : Generating new injection
15:41 ninjax INFO    : Sanity check: generated parameters:
15:41 ninjax INFO    : {'mass_1_source': 1.199013648436708, 'mass_2_source': 1.333847276444797, 's1_z': 0.018056644608116026, 's2_z': -0.022562627604677355, 'cos_iota': 0.46773983815527176, 'd_L': 135.66113681917065, 't_c': -0.0618864372038364, 'phase_c': 5.051916527079861, 'psi': 1.1596377632011552, 'ra': 5.787108101535946, 'sin_dec': 0.49735690530474397}
15:41 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz . . . 
15:41 ninjax INFO    : Injected lambda_1: 675.6474857633443
15:41 ninjax INFO    : Injected lambda_2: 1216.111923978792
15:41 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.1343538507027497 is 256.0
15:41 ninjax INFO    : After transforms, the injection parameters are:
15:41 ninjax INFO    : {'mass_1_source': 1.333847276444797, 'mass_2_source': 1.199013648436708, 's1_z': 0.018056644608116026, 's2_z': -0.022562627604677355, 'cos_iota': 0.46773983815527176, 'd_L': 135.66113681917065, 't_c': -0.0618864372038364, 'phase_c': 5.051916527079861, 'psi': 1.1596377632011552, 'ra': 5.787108101535946, 'sin_dec': 0.49735690530474397, 'q': 0.8989137434328529, 'M_c': 1.1343538507027497, 'eta': 0.24929154256687192, 'iota': Array(1.08406442, dtype=float64, weak_type=True), 'dec': Array(0.52054947, dtype=float64, weak_type=True), 'lambda_1': 675.6474857633443, 'lambda_2': 1216.111923978792}
15:41 ninjax INFO    : The trial injection parameters are {'M_c': 1.1343538507027497, 'eta': 0.24929154256687192, 's1_z': 0.018056644608116026, 's2_z': -0.022562627604677355, 'lambda_1': 675.6474857633443, 'lambda_2': 1216.111923978792, 'd_L': 135.66113681917065, 'phase_c': 5.051916527079861, 'iota': 1.084064415346578, 't_c': -0.0618864372038364, 'psi': 1.1596377632011552, 'ra': 5.787108101535946, 'dec': 0.5205494721770515}
15:41 ninjax INFO    : Injecting signals . . .
15:41 ninjax INFO    : self.ifos
15:41 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
15:41 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
15:41 ninjax INFO    : [ 4.40007226e-23+9.14510462e-24j -2.47514166e-24+6.12472333e-23j
  5.15384050e-23-3.75745149e-23j ...
 -3.76136198e-23+1.92003342e-23j  2.19015949e-23+1.46196160e-23j
  3.24650141e-23-1.10123956e-23j]
15:41 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
15:41 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
15:41 ninjax INFO    : [-8.26686001e-24+8.25780986e-23j -2.89979410e-23-9.99922888e-23j
  4.60933031e-23-3.57421062e-23j ...
 -1.09463837e-23+2.77584247e-23j  8.80232219e-24+6.23807413e-24j
 -2.86498727e-23-2.24115004e-23j]
15:41 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
15:41 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
15:41 ninjax INFO    : [ 1.51261716e-23+1.15643711e-22j  7.57782831e-23-5.68859801e-23j
  4.39891221e-23+8.53981205e-24j ...
  6.51778140e-23+8.85570814e-25j  6.19253222e-24+7.39065740e-23j
 -4.31731947e-23+2.06938076e-23j]
15:41 ninjax INFO    : [1.43183556e-46 1.43058540e-46 1.42935095e-46 ... 6.39793039e-47
 6.39795354e-47 6.39797668e-47]
15:41 ninjax INFO    : SNR for ifo H1 is 12.487277191441265
15:41 ninjax INFO    : SNR for ifo L1 is 4.007927450208124
15:41 ninjax INFO    : SNR for ifo V1 is 10.335834944716849
15:41 ninjax INFO    : The network SNR is 16.698055518725855
15:41 ninjax INFO    : Network SNR passes threshold
15:41 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
15:41 ninjax INFO    :    mass_1_source: 1.333847276444797
15:41 ninjax INFO    :    mass_2_source: 1.199013648436708
15:41 ninjax INFO    :    s1_z: 0.018056644608116026
15:41 ninjax INFO    :    s2_z: -0.022562627604677355
15:41 ninjax INFO    :    cos_iota: 0.46773983815527176
15:41 ninjax INFO    :    d_L: 135.66113681917065
15:41 ninjax INFO    :    t_c: -0.0618864372038364
15:41 ninjax INFO    :    phase_c: 5.051916527079861
15:41 ninjax INFO    :    psi: 1.1596377632011552
15:41 ninjax INFO    :    ra: 5.787108101535946
15:41 ninjax INFO    :    sin_dec: 0.49735690530474397
15:41 ninjax INFO    :    q: 0.8989137434328529
15:41 ninjax INFO    :    M_c: 1.1343538507027497
15:41 ninjax INFO    :    eta: 0.24929154256687192
15:41 ninjax INFO    :    iota: 1.084064415346578
15:41 ninjax INFO    :    dec: 0.5205494721770515
15:41 ninjax INFO    :    lambda_1: 675.6474857633443
15:41 ninjax INFO    :    lambda_2: 1216.111923978792
15:41 ninjax INFO    :    H1_SNR: 12.487277191441265
15:41 ninjax INFO    :    L1_SNR: 4.007927450208124
15:41 ninjax INFO    :    V1_SNR: 10.335834944716849
15:41 ninjax INFO    :    network_SNR: 16.698055518725855
15:41 ninjax INFO    :    epoch: 254.0
15:41 ninjax INFO    :    gmst: 2.7288901910520846
15:41 ninjax INFO    :    duration: 256.0
15:41 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
15:41 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
15:41 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
15:46 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 306.2323784828186 seconds = 5.103872974713643 minutes
15:46 ninjax INFO    : The priors are not modified after their initialization
15:46 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
15:46 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
15:46 ninjax INFO    : sample: {'M_c': Array([1.15831658, 2.5262084 , 1.0369389 ], dtype=float64), 'q': Array([0.95517061, 0.89319179, 0.96089082], dtype=float64), 's1_z': Array([0.01019808, 0.02575735, 0.01906951], dtype=float64), 's2_z': Array([-0.0174539 ,  0.00227688,  0.01416587], dtype=float64), 'lambda_1': Array([4545.87905417, 2066.89838945, 1456.09521877], dtype=float64), 'lambda_2': Array([3825.3099752 , 2556.75787564,  216.71074587], dtype=float64), 'cos_iota': Array([-0.61696487,  0.14108382,  0.8870721 ], dtype=float64), 'd_L': Array([968.48665466, 998.21631036, 794.86866403], dtype=float64), 't_c': Array([ 0.07959988, -0.02175193,  0.06805669], dtype=float64), 'phase_c': Array([0.48753661, 0.07214032, 3.97680082], dtype=float64), 'psi': Array([1.47583001, 0.70256145, 2.78108688], dtype=float64), 'ra': Array([3.41207107, 4.42158599, 3.47272248], dtype=float64), 'sin_dec': Array([-0.95130009, -0.11966709,  0.43673007], dtype=float64)}
15:47 ninjax INFO    : log_prob: [ -7.73363943 -14.103095   -13.25726972]
15:47 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.333847276444797, 'mass_2_source': 1.199013648436708, 's1_z': 0.018056644608116026, 's2_z': -0.022562627604677355, 'cos_iota': 0.46773983815527176, 'd_L': 135.66113681917065, 't_c': -0.0618864372038364, 'phase_c': 5.051916527079861, 'psi': 1.1596377632011552, 'ra': 5.787108101535946, 'sin_dec': 0.49735690530474397, 'q': 0.8989137434328529, 'M_c': 1.1343538507027497, 'eta': 0.24929154256687192, 'iota': Array(1.08406442, dtype=float64, weak_type=True), 'dec': Array(0.52054947, dtype=float64, weak_type=True), 'lambda_1': 675.6474857633443, 'lambda_2': 1216.111923978792, 'H1_SNR': 12.487277191441265, 'L1_SNR': 4.007927450208124, 'V1_SNR': 10.335834944716849, 'network_SNR': 16.698055518725855, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
15:47 ninjax INFO    : log_prob at the injection parameters is: 99.58026014471085
15:47 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
15:47 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
15:47 ninjax INFO    : Ninjax setup complete.
15:47 ninjax INFO    : Saving output to ./Aplus/injection_21/
15:47 ninjax INFO    : Using polynomial learning rate scheduler
15:47 ninjax INFO    : The hyperparameters passed to flowMC and jim are
15:47 ninjax INFO    :    n_loop_training: 200
15:47 ninjax INFO    :    n_loop_production: 10
15:47 ninjax INFO    :    n_local_steps: 100
15:47 ninjax INFO    :    n_global_steps: 1000
15:47 ninjax INFO    :    n_epochs: 25
15:47 ninjax INFO    :    n_chains: 1000
15:47 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x14c55758e320>
15:47 ninjax INFO    :    max_samples: 50000
15:47 ninjax INFO    :    momentum: 0.9
15:47 ninjax INFO    :    batch_size: 30000
15:47 ninjax INFO    :    use_global: True
15:47 ninjax INFO    :    keep_quantile: 0.0
15:47 ninjax INFO    :    train_thinning: 10
15:47 ninjax INFO    :    output_thinning: 50
15:47 ninjax INFO    :    n_sample_max: 10000
15:47 ninjax INFO    :    num_layers: 10
15:47 ninjax INFO    :    hidden_size: [128, 128]
15:47 ninjax INFO    :    num_bins: 8
15:47 ninjax INFO    :    save_training_chains: False
15:47 ninjax INFO    :    eps_mass_matrix: 1e-05
15:47 ninjax INFO    :    use_scheduler: True
15:47 ninjax INFO    :    use_temperature: False
15:47 ninjax INFO    :    which_temperature_schedule: exponential
15:47 ninjax INFO    :    starting_temperature: 2.0
15:47 ninjax INFO    :    stop_tempering_iteration: 75
15:47 ninjax INFO    :    stopping_criterion_global_acc: 0.1
15:47 ninjax INFO    :    stopping_criterion_loss: -inf
15:47 ninjax INFO    :    nf_model_kwargs: {}
15:47 ninjax INFO    :    local sampler arg not shown (pretty print)
15:47 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[ 4.93611579e-23 -5.68416760e-24  4.75884712e-23  2.60551238e-23
  7.16585001e-23 -6.53859125e-23  8.01604170e-23 -1.35350863e-23
 -1.36551619e-22  9.98524078e-23]
[ 7.05330304e-24  5.64726229e-23 -3.33938885e-23  1.50063428e-23
  4.62328187e-23 -2.51608007e-24 -5.69266164e-23 -4.11426260e-24
 -5.25517992e-23  1.22602586e-22]
Checking the noise that was generated in inject_signal ifo:
[-8.15963272e-24 -2.72224105e-23  4.52079129e-23 -3.29290525e-23
  4.68202514e-23  5.17140935e-23 -1.81575455e-22 -9.60811085e-24
  2.25118866e-24 -1.29654982e-23]
[ 8.44218307e-23 -1.00499020e-22 -3.73619241e-23  2.18752714e-23
  2.19595008e-23 -2.53605035e-23 -8.25470888e-23 -4.22711841e-23
 -3.78167774e-23 -9.78864817e-23]
Checking the noise that was generated in inject_signal ifo:
[ 1.68642648e-23  8.10505247e-23  3.99392528e-23  5.04801530e-23
 -8.12366715e-23 -3.90269135e-23  1.75219762e-25  8.74105465e-23
 -5.98562911e-23 -2.76637562e-23]
[ 1.21436549e-22 -5.98464992e-23  4.05171232e-24 -2.32101530e-23
  1.68855230e-22  8.76928431e-23 -1.39485342e-23 -7.94632802e-23
  8.55096919e-23 -9.01905702e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.18114662170410156 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.333847276444797, 'mass_2_source': 1.199013648436708, 's1_z': 0.018056644608116026, 's2_z': -0.022562627604677355, 'cos_iota': 0.46773983815527176, 'd_L': 135.66113681917065, 't_c': -0.0618864372038364, 'phase_c': 5.051916527079861, 'psi': 1.1596377632011552, 'ra': 5.787108101535946, 'sin_dec': 0.49735690530474397, 'q': 0.8989137434328529, 'M_c': 1.1343538507027497, 'eta': 0.24929154256687192, 'iota': Array(1.08406442, dtype=float64, weak_type=True), 'dec': Array(0.52054947, dtype=float64, weak_type=True), 'lambda_1': 675.6474857633443, 'lambda_2': 1216.111923978792, 'H1_SNR': 12.487277191441265, 'L1_SNR': 4.007927450208124, 'V1_SNR': 10.335834944716849, 'network_SNR': 16.698055518725855, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5119166374206543 seconds
Time for h_sky_low and h_sky_center: 23.450725555419922 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.7642343044281006
Going to compute coefficients . . .
Time for computing coefficients: 266.2664873600006 seconds
Time for computing coefficients: 7.404492139816284 seconds
Time for computing coefficients: 7.113418817520142 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:30<8:17:30, 150.00s/it]Tuning global sampler:   1%|          | 2/200 [02:35<3:34:26, 64.98s/it] Tuning global sampler:   2%|▏         | 3/200 [02:48<2:15:37, 41.31s/it]Tuning global sampler:   2%|▏         | 4/200 [03:00<1:37:10, 29.75s/it]Tuning global sampler:   2%|▎         | 5/200 [03:05<1:07:12, 20.68s/it]Tuning global sampler:   3%|▎         | 6/200 [03:15<55:08, 17.05s/it]  Tuning global sampler:   4%|▎         | 7/200 [03:36<58:57, 18.33s/it]Tuning global sampler:   4%|▍         | 8/200 [03:55<59:38, 18.64s/it]Tuning global sampler:   4%|▍         | 9/200 [04:23<1:08:24, 21.49s/it]Tuning global sampler:   5%|▌         | 10/200 [04:34<57:41, 18.22s/it] Tuning global sampler:   6%|▌         | 11/200 [04:38<44:14, 14.04s/it]Tuning global sampler:   6%|▌         | 12/200 [04:43<34:59, 11.17s/it]Tuning global sampler:   6%|▋         | 13/200 [04:52<33:04, 10.61s/it]Tuning global sampler:   7%|▋         | 14/200 [05:16<44:59, 14.51s/it]Tuning global sampler:   8%|▊         | 15/200 [05:32<46:07, 14.96s/it]Tuning global sampler:   8%|▊         | 16/200 [05:54<52:32, 17.13s/it]Tuning global sampler:   8%|▊         | 17/200 [05:59<40:52, 13.40s/it]Tuning global sampler:   9%|▉         | 18/200 [06:03<32:40, 10.77s/it]Tuning global sampler:  10%|▉         | 19/200 [06:26<43:20, 14.37s/it]Tuning global sampler:  10%|█         | 20/200 [06:55<56:11, 18.73s/it]Tuning global sampler:  10%|█         | 21/200 [07:26<1:07:19, 22.56s/it]Tuning global sampler:  11%|█         | 22/200 [07:47<1:04:50, 21.86s/it]Tuning global sampler:  12%|█▏        | 23/200 [08:02<58:26, 19.81s/it]  Tuning global sampler:  12%|█▏        | 24/200 [08:15<52:33, 17.91s/it]Tuning global sampler:  12%|█▎        | 25/200 [08:26<46:04, 15.80s/it]Tuning global sampler:  13%|█▎        | 26/200 [08:30<35:52, 12.37s/it]Tuning global sampler:  14%|█▎        | 27/200 [08:35<28:45,  9.97s/it]Tuning global sampler:  14%|█▍        | 28/200 [08:41<25:48,  9.00s/it]Tuning global sampler:  14%|█▍        | 29/200 [08:55<29:39, 10.41s/it]Tuning global sampler:  15%|█▌        | 30/200 [09:00<24:21,  8.60s/it]Tuning global sampler:  16%|█▌        | 31/200 [09:04<20:38,  7.33s/it]Tuning global sampler:  16%|█▌        | 32/200 [09:08<18:02,  6.44s/it]Tuning global sampler:  16%|█▋        | 33/200 [09:13<16:10,  5.81s/it]Tuning global sampler:  17%|█▋        | 34/200 [09:17<14:51,  5.37s/it]Tuning global sampler:  18%|█▊        | 35/200 [09:21<13:56,  5.07s/it]Tuning global sampler:  18%|█▊        | 36/200 [09:26<13:17,  4.86s/it]Tuning global sampler:  18%|█▊        | 37/200 [09:30<12:48,  4.71s/it]Tuning global sampler:  19%|█▉        | 38/200 [09:34<12:27,  4.61s/it]Tuning global sampler:  20%|█▉        | 39/200 [09:39<12:13,  4.55s/it]Tuning global sampler:  20%|██        | 40/200 [09:43<11:59,  4.50s/it]Tuning global sampler:  20%|██        | 41/200 [09:49<12:43,  4.80s/it]Tuning global sampler:  21%|██        | 42/200 [10:04<21:11,  8.05s/it]Tuning global sampler:  22%|██▏       | 43/200 [10:33<37:19, 14.26s/it]Tuning global sampler:  22%|██▏       | 44/200 [10:42<33:04, 12.72s/it]Tuning global sampler:  22%|██▎       | 45/200 [10:51<30:05, 11.65s/it]Tuning global sampler:  23%|██▎       | 46/200 [11:11<35:51, 13.97s/it]Tuning global sampler:  24%|██▎       | 47/200 [11:17<29:58, 11.76s/it]Tuning global sampler:  24%|██▍       | 48/200 [11:30<30:19, 11.97s/it]Tuning global sampler:  24%|██▍       | 49/200 [11:36<25:58, 10.32s/it]Tuning global sampler:  25%|██▌       | 50/200 [11:41<21:20,  8.54s/it]Tuning global sampler:  26%|██▌       | 51/200 [11:45<18:07,  7.30s/it]Tuning global sampler:  26%|██▌       | 52/200 [11:49<15:51,  6.43s/it]Tuning global sampler:  26%|██▋       | 53/200 [11:54<14:14,  5.82s/it]Tuning global sampler:  27%|██▋       | 54/200 [11:58<13:06,  5.39s/it]Tuning global sampler:  28%|██▊       | 55/200 [12:03<12:15,  5.07s/it]Tuning global sampler:  28%|██▊       | 56/200 [12:18<19:39,  8.19s/it]Tuning global sampler:  28%|██▊       | 57/200 [12:35<25:27, 10.68s/it]Tuning global sampler:  29%|██▉       | 58/200 [12:47<26:48, 11.33s/it]Tuning global sampler:  30%|██▉       | 59/200 [12:55<24:19, 10.35s/it]Tuning global sampler:  30%|███       | 60/200 [13:10<27:05, 11.61s/it]Tuning global sampler:  30%|███       | 61/200 [13:21<26:37, 11.49s/it]Tuning global sampler:  31%|███       | 62/200 [13:27<22:45,  9.89s/it]Tuning global sampler:  32%|███▏      | 63/200 [13:32<18:49,  8.25s/it]Tuning global sampler:  32%|███▏      | 64/200 [13:36<16:03,  7.08s/it]Tuning global sampler:  32%|███▎      | 65/200 [13:41<14:06,  6.27s/it]Tuning global sampler:  33%|███▎      | 66/200 [13:45<12:42,  5.69s/it]Tuning global sampler:  34%|███▎      | 67/200 [13:49<11:43,  5.29s/it]Tuning global sampler:  34%|███▍      | 68/200 [13:54<11:03,  5.02s/it]Tuning global sampler:  34%|███▍      | 69/200 [13:58<10:33,  4.84s/it]Tuning global sampler:  35%|███▌      | 70/200 [14:02<10:11,  4.70s/it]Tuning global sampler:  36%|███▌      | 71/200 [14:07<10:01,  4.66s/it]Tuning global sampler:  36%|███▌      | 72/200 [14:11<09:46,  4.58s/it]Tuning global sampler:  36%|███▋      | 73/200 [14:16<09:34,  4.53s/it]Tuning global sampler:  37%|███▋      | 74/200 [14:20<09:25,  4.49s/it]Tuning global sampler:  38%|███▊      | 75/200 [14:25<09:17,  4.46s/it]Tuning global sampler:  38%|███▊      | 76/200 [14:29<09:10,  4.44s/it]Tuning global sampler:  38%|███▊      | 77/200 [14:33<09:02,  4.41s/it]Tuning global sampler:  39%|███▉      | 78/200 [14:38<08:55,  4.39s/it]Tuning global sampler:  40%|███▉      | 79/200 [14:42<08:50,  4.39s/it]Tuning global sampler:  40%|████      | 80/200 [14:46<08:46,  4.38s/it]Tuning global sampler:  40%|████      | 81/200 [14:51<08:42,  4.39s/it]Tuning global sampler:  41%|████      | 82/200 [14:56<09:15,  4.71s/it]Tuning global sampler:  42%|████▏     | 83/200 [15:01<08:59,  4.61s/it]Tuning global sampler:  42%|████▏     | 84/200 [15:05<08:47,  4.55s/it]Tuning global sampler:  42%|████▎     | 85/200 [15:09<08:37,  4.50s/it]Tuning global sampler:  43%|████▎     | 86/200 [15:14<08:29,  4.47s/it]Tuning global sampler:  44%|████▎     | 87/200 [15:18<08:22,  4.44s/it]Tuning global sampler:  44%|████▍     | 88/200 [15:23<08:30,  4.56s/it]Tuning global sampler:  44%|████▍     | 89/200 [15:27<08:19,  4.50s/it]Tuning global sampler:  45%|████▌     | 90/200 [15:32<08:13,  4.48s/it]Tuning global sampler:  46%|████▌     | 91/200 [15:36<08:05,  4.46s/it]Tuning global sampler:  46%|████▌     | 92/200 [15:41<07:59,  4.44s/it]Tuning global sampler:  46%|████▋     | 93/200 [15:45<07:54,  4.43s/it]Tuning global sampler:  47%|████▋     | 94/200 [15:49<07:49,  4.43s/it]Tuning global sampler:  48%|████▊     | 95/200 [15:54<07:43,  4.42s/it]Tuning global sampler:  48%|████▊     | 96/200 [15:58<07:39,  4.42s/it]Tuning global sampler:  48%|████▊     | 97/200 [16:03<07:39,  4.46s/it]Tuning global sampler:  49%|████▉     | 98/200 [16:07<07:32,  4.44s/it]Tuning global sampler:  50%|████▉     | 99/200 [16:12<07:25,  4.41s/it]Tuning global sampler:  50%|█████     | 100/200 [16:16<07:19,  4.39s/it]Tuning global sampler:  50%|█████     | 101/200 [16:20<07:14,  4.38s/it]Tuning global sampler:  51%|█████     | 102/200 [16:25<07:09,  4.38s/it]Tuning global sampler:  52%|█████▏    | 103/200 [16:29<07:05,  4.38s/it]Tuning global sampler:  52%|█████▏    | 104/200 [16:35<07:33,  4.73s/it]Tuning global sampler:  52%|█████▏    | 104/200 [16:39<15:22,  9.61s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.21s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.21s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.21s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.21s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.21s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.21s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.21s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.21s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]
16:04 ninjax INFO    : Saving samples to ./Aplus/injection_21/results_training.npz
16:04 ninjax INFO    : Saving the NF
16:04 ninjax INFO    : Time taken: 1038.2685191631317 seconds (17.304475319385528 minutes)
16:04 ninjax INFO    : Creating the final corner plot
16:04 ninjax INFO    : Dumping the final production chains
16:04 ninjax INFO    : Chains shape is: (13, 220000)
16:04 ninjax INFO    : Key: M_c: ESS = 28354, Rhat = 1.0224548265302182
16:04 ninjax INFO    : Key: q: ESS = 18937, Rhat = 1.0336287968265787
16:04 ninjax INFO    : Key: s1_z: ESS = 17145, Rhat = 1.0355722344073082
16:04 ninjax INFO    : Key: s2_z: ESS = 21727, Rhat = 1.0296245979417027
16:04 ninjax INFO    : Key: lambda_1: ESS = 37981, Rhat = 1.0180443129631214
16:04 ninjax INFO    : Key: lambda_2: ESS = 31969, Rhat = 1.0203266776516364
16:04 ninjax INFO    : Key: cos_iota: ESS = 16528, Rhat = 1.03679395840154
16:04 ninjax INFO    : Key: d_L: ESS = 17070, Rhat = 1.0354838266326438
16:04 ninjax INFO    : Key: t_c: ESS = 33676, Rhat = 1.0196005085041036
16:04 ninjax INFO    : Key: phase_c: ESS = 15814, Rhat = 1.0379584291547956
16:04 ninjax INFO    : Key: psi: ESS = 24560, Rhat = 1.025671784272384
16:04 ninjax INFO    : Key: ra: ESS = 26780, Rhat = 1.0247944518556258
16:04 ninjax INFO    : Key: sin_dec: ESS = 26154, Rhat = 1.0241807018552815
16:04 ninjax INFO    : Key: eta: ESS = 18937, Rhat = 1.0336287968265787
16:04 ninjax INFO    : Key: iota: ESS = 16528, Rhat = 1.03679395840154
16:04 ninjax INFO    : Key: dec: ESS = 26154, Rhat = 1.0241807018552815
16:04 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.308 +/- 0.358
q: 0.683 +/- 0.230
s1_z: 0.001 +/- 0.027
s2_z: 0.003 +/- 0.027
lambda_1: 2255.974 +/- 1424.125
lambda_2: 2434.466 +/- 1427.842
cos_iota: 0.323 +/- 0.506
d_L: 619.903 +/- 268.717
t_c: -0.043 +/- 0.047
phase_c: 3.223 +/- 1.779
psi: 1.597 +/- 0.893
ra: 4.581 +/- 1.834
sin_dec: 0.233 +/- 0.490
Log probability: 19.738 +/- 44.411
Local acceptance: 0.788 +/- 0.409
Global acceptance: 0.017 +/- 0.129
Max loss: 23.955, Min loss: 7.584
Production summary
==========
M_c: 1.134 +/- 0.000
q: 0.840 +/- 0.103
s1_z: 0.013 +/- 0.024
s2_z: 0.007 +/- 0.026
lambda_1: 1109.668 +/- 923.841
lambda_2: 1684.340 +/- 1208.852
cos_iota: 0.791 +/- 0.165
d_L: 214.662 +/- 40.380
t_c: -0.062 +/- 0.001
phase_c: 3.111 +/- 1.797
psi: 1.660 +/- 0.898
ra: 5.748 +/- 0.021
sin_dec: 0.430 +/- 0.039
Log probability: 95.731 +/- 2.330
Local acceptance: 0.288 +/- 0.453
Global acceptance: 0.102 +/- 0.303
DONE

JOB STATISTICS
==============
Job ID: 10906036
Cluster: snellius
User/Group: twouters2/twouters2
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 00:12:41
CPU Efficiency: 3.39% of 06:14:40 core-walltime
Job Wall-clock time: 00:23:25
Memory Utilized: 4.90 GB
Memory Efficiency: 48.96% of 10.00 GB (10.00 GB/node)
