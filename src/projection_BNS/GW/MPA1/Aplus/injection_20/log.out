Tue Apr  1 15:41:21 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
15:41 ninjax INFO    : Checking and setting outdir
15:41 ninjax INFO    : Found generation prior file ./Aplus/injection_20/generation_prior.prior
15:41 ninjax INFO    : The outdir is set to ./Aplus/injection_20
15:41 ninjax INFO    : Loading the given config
15:41 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
15:41 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
15:41 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/MPA1/Aplus/injection_20/complete_config.json
15:41 ninjax INFO    : No seed specified. Generating a random seed: 684180
15:41 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 766937
15:41 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 675106
15:41 ninjax INFO    : Loading the priors
15:41 ninjax INFO    : Setting up the prior
15:41 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
15:41 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
15:41 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
15:41 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
15:41 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
15:41 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
15:41 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
15:41 ninjax INFO    :    dL_prior = PowerLaw(10.0, 1000.0, 2.0, naming=["d_L"])
15:41 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
15:41 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
15:41 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
15:41 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
15:41 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
15:41 ninjax INFO    : Setting up the generation prior
15:41 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.468645554845655, naming=["mass_1_source"])
15:41 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.468645554845655, naming=["mass_2_source"])
15:41 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
15:41 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
15:41 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
15:41 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
15:41 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
15:41 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
15:41 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
15:41 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
15:41 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
15:41 ninjax INFO    : Finished prior setup
15:41 ninjax INFO    : Setting the transforms
15:41 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
15:41 ninjax INFO    : transforms_str_list has 3 elements
15:41 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
15:41 ninjax INFO    : Setting the likelihood
15:41 ninjax INFO    : GW likelihood provided, setting up the GW pipe
15:41 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz
15:41 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz for BNS injections
15:41 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
15:41 ninjax INFO    : self.is_BNS_run is True
15:41 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
15:41 ninjax INFO    : GW run is an injection
15:41 ninjax INFO    : Setting up GW injection . . . 
15:41 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
15:41 ninjax INFO    : Generating new injection
15:41 ninjax INFO    : Sanity check: generated parameters:
15:41 ninjax INFO    : {'mass_1_source': 1.7906162934923846, 'mass_2_source': 1.7619286890059667, 's1_z': 0.014917209861319614, 's2_z': 0.048436452508337086, 'cos_iota': 0.05430108643112508, 'd_L': 163.09452573821818, 't_c': 0.040704373965351814, 'phase_c': 2.6062280102917263, 'psi': 2.82302824611658, 'ra': 0.827594531872762, 'sin_dec': -0.46936869263001935}
15:41 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz . . . 
15:41 ninjax INFO    : Injected lambda_1: 110.24400907292171
15:41 ninjax INFO    : Injected lambda_2: 123.08059852542175
15:41 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.6032581930987986 is 128.0
15:41 ninjax INFO    : After transforms, the injection parameters are:
15:41 ninjax INFO    : {'mass_1_source': 1.7906162934923846, 'mass_2_source': 1.7619286890059667, 's1_z': 0.014917209861319614, 's2_z': 0.048436452508337086, 'cos_iota': 0.05430108643112508, 'd_L': 163.09452573821818, 't_c': 0.040704373965351814, 'phase_c': 2.6062280102917263, 'psi': 2.82302824611658, 'ra': 0.827594531872762, 'sin_dec': -0.46936869263001935, 'q': 0.9839789213408384, 'M_c': 1.6032581930987986, 'eta': 0.24998369768026485, 'iota': Array(1.51646852, dtype=float64, weak_type=True), 'dec': Array(-0.48857569, dtype=float64, weak_type=True), 'lambda_1': 110.24400907292171, 'lambda_2': 123.08059852542175}
15:41 ninjax INFO    : The trial injection parameters are {'M_c': 1.6032581930987986, 'eta': 0.24998369768026485, 's1_z': 0.014917209861319614, 's2_z': 0.048436452508337086, 'lambda_1': 110.24400907292171, 'lambda_2': 123.08059852542175, 'd_L': 163.09452573821818, 'phase_c': 2.6062280102917263, 'iota': 1.5164685194571024, 't_c': 0.040704373965351814, 'psi': 2.82302824611658, 'ra': 0.827594531872762, 'dec': -0.4885756865089965}
15:41 ninjax INFO    : Injecting signals . . .
15:41 ninjax INFO    : self.ifos
15:41 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
15:41 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:41 ninjax INFO    : [-2.80791470e-23-9.29404560e-23j  4.31578488e-23+5.46348318e-25j
  6.29012729e-23-2.02438100e-23j ...
 -5.24746646e-23+1.34571385e-23j  8.51030631e-24-2.06869111e-23j
  4.08918234e-23+1.01006325e-23j]
15:41 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
15:41 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:41 ninjax INFO    : [ 6.00193745e-23+2.35014287e-23j  7.51254906e-23+1.01532476e-23j
  5.97240268e-23+7.77749070e-24j ...
 -4.14326550e-24+6.16322460e-24j -1.37187887e-23+4.03231619e-24j
  1.91113046e-23-1.18220211e-23j]
15:41 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
15:41 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:41 ninjax INFO    : [ 3.80639174e-23-9.19870499e-23j  7.03615532e-23+2.72890819e-23j
 -4.98766782e-24+1.81707543e-23j ...
  6.76668973e-23-8.25288289e-23j  5.88031695e-23-7.76470166e-23j
  3.00636369e-24+1.10979925e-23j]
15:41 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
15:41 ninjax INFO    : SNR for ifo H1 is 8.661514933538761
15:41 ninjax INFO    : SNR for ifo L1 is 11.468283247244742
15:41 ninjax INFO    : SNR for ifo V1 is 3.2880581648263965
15:41 ninjax INFO    : The network SNR is 14.742953845082434
15:41 ninjax INFO    : Network SNR passes threshold
15:41 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
15:41 ninjax INFO    :    mass_1_source: 1.7906162934923846
15:41 ninjax INFO    :    mass_2_source: 1.7619286890059667
15:41 ninjax INFO    :    s1_z: 0.014917209861319614
15:41 ninjax INFO    :    s2_z: 0.048436452508337086
15:41 ninjax INFO    :    cos_iota: 0.05430108643112508
15:41 ninjax INFO    :    d_L: 163.09452573821818
15:41 ninjax INFO    :    t_c: 0.040704373965351814
15:41 ninjax INFO    :    phase_c: 2.6062280102917263
15:41 ninjax INFO    :    psi: 2.82302824611658
15:41 ninjax INFO    :    ra: 0.827594531872762
15:41 ninjax INFO    :    sin_dec: -0.46936869263001935
15:41 ninjax INFO    :    q: 0.9839789213408384
15:41 ninjax INFO    :    M_c: 1.6032581930987986
15:41 ninjax INFO    :    eta: 0.24998369768026485
15:41 ninjax INFO    :    iota: 1.5164685194571024
15:41 ninjax INFO    :    dec: -0.4885756865089965
15:41 ninjax INFO    :    lambda_1: 110.24400907292171
15:41 ninjax INFO    :    lambda_2: 123.08059852542175
15:41 ninjax INFO    :    H1_SNR: 8.661514933538761
15:41 ninjax INFO    :    L1_SNR: 11.468283247244742
15:41 ninjax INFO    :    V1_SNR: 3.2880581648263965
15:41 ninjax INFO    :    network_SNR: 14.742953845082434
15:41 ninjax INFO    :    epoch: 126.0
15:41 ninjax INFO    :    gmst: 2.7288901910520846
15:41 ninjax INFO    :    duration: 128.0
15:41 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
15:41 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
15:41 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
15:45 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 236.26898002624512 seconds = 3.937816333770752 minutes
15:45 ninjax INFO    : The priors are not modified after their initialization
15:45 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
15:45 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
15:45 ninjax INFO    : sample: {'M_c': Array([2.4946009 , 2.5460495 , 1.38337356], dtype=float64), 'q': Array([0.84164591, 0.13903879, 0.38610513], dtype=float64), 's1_z': Array([-0.02047938, -0.04917084,  0.04597979], dtype=float64), 's2_z': Array([ 0.02108985, -0.04791515,  0.03311916], dtype=float64), 'lambda_1': Array([198.14951595, 486.62905693, 862.48111775], dtype=float64), 'lambda_2': Array([1752.39075054, 1226.861329  , 1823.2231825 ], dtype=float64), 'cos_iota': Array([-0.7948216 , -0.92854481, -0.74582554], dtype=float64), 'd_L': Array([937.08783133, 404.29332796, 658.75670213], dtype=float64), 't_c': Array([ 0.07916087, -0.08622797, -0.07717277], dtype=float64), 'phase_c': Array([4.46920619, 5.1957617 , 0.78306568], dtype=float64), 'psi': Array([2.91523786, 2.2771213 , 0.38923669], dtype=float64), 'ra': Array([6.24533147, 5.49311605, 3.72860185], dtype=float64), 'sin_dec': Array([ 0.43791587,  0.41399586, -0.76819716], dtype=float64)}
15:45 ninjax INFO    : log_prob: [-50.45156193 -97.7263632  -66.39758777]
15:45 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.7906162934923846, 'mass_2_source': 1.7619286890059667, 's1_z': 0.014917209861319614, 's2_z': 0.048436452508337086, 'cos_iota': 0.05430108643112508, 'd_L': 163.09452573821818, 't_c': 0.040704373965351814, 'phase_c': 2.6062280102917263, 'psi': 2.82302824611658, 'ra': 0.827594531872762, 'sin_dec': -0.46936869263001935, 'q': 0.9839789213408384, 'M_c': 1.6032581930987986, 'eta': 0.24998369768026485, 'iota': Array(1.51646852, dtype=float64, weak_type=True), 'dec': Array(-0.48857569, dtype=float64, weak_type=True), 'lambda_1': 110.24400907292171, 'lambda_2': 123.08059852542175, 'H1_SNR': 8.661514933538761, 'L1_SNR': 11.468283247244742, 'V1_SNR': 3.2880581648263965, 'network_SNR': 14.742953845082434, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
15:45 ninjax INFO    : log_prob at the injection parameters is: 97.88933762960103
15:45 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
15:45 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
15:45 ninjax INFO    : Ninjax setup complete.
15:45 ninjax INFO    : Saving output to ./Aplus/injection_20/
15:45 ninjax INFO    : Using polynomial learning rate scheduler
15:45 ninjax INFO    : The hyperparameters passed to flowMC and jim are
15:45 ninjax INFO    :    n_loop_training: 200
15:45 ninjax INFO    :    n_loop_production: 10
15:45 ninjax INFO    :    n_local_steps: 100
15:45 ninjax INFO    :    n_global_steps: 1000
15:45 ninjax INFO    :    n_epochs: 25
15:45 ninjax INFO    :    n_chains: 1000
15:45 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x1442a6257a30>
15:45 ninjax INFO    :    max_samples: 50000
15:45 ninjax INFO    :    momentum: 0.9
15:45 ninjax INFO    :    batch_size: 30000
15:45 ninjax INFO    :    use_global: True
15:45 ninjax INFO    :    keep_quantile: 0.0
15:45 ninjax INFO    :    train_thinning: 10
15:45 ninjax INFO    :    output_thinning: 50
15:45 ninjax INFO    :    n_sample_max: 10000
15:45 ninjax INFO    :    num_layers: 10
15:45 ninjax INFO    :    hidden_size: [128, 128]
15:45 ninjax INFO    :    num_bins: 8
15:45 ninjax INFO    :    save_training_chains: False
15:45 ninjax INFO    :    eps_mass_matrix: 1e-05
15:45 ninjax INFO    :    use_scheduler: True
15:45 ninjax INFO    :    use_temperature: False
15:45 ninjax INFO    :    which_temperature_schedule: exponential
15:45 ninjax INFO    :    starting_temperature: 2.0
15:45 ninjax INFO    :    stop_tempering_iteration: 75
15:45 ninjax INFO    :    stopping_criterion_global_acc: 0.1
15:45 ninjax INFO    :    stopping_criterion_loss: -inf
15:45 ninjax INFO    :    nf_model_kwargs: {}
15:45 ninjax INFO    :    local sampler arg not shown (pretty print)
15:45 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[-2.55442221e-23  4.69893897e-23  6.32287702e-23 -3.25057683e-23
  5.46616946e-23  3.87714890e-23  3.75592266e-23  1.86877731e-23
  2.02393252e-23 -7.37924110e-23]
[-8.98323580e-23 -6.32922722e-25 -2.42374825e-23  6.32131903e-23
 -5.17402530e-23  6.61087527e-23  1.16876368e-22 -1.82478418e-23
 -8.15454588e-24 -7.44094031e-23]
Checking the noise that was generated in inject_signal ifo:
[ 5.94253291e-23  7.00151092e-23  5.64947556e-23  2.11069559e-23
  1.93500364e-23 -7.88951774e-23  7.62198142e-23  6.36665930e-24
  1.83359004e-24  2.63154647e-23]
[ 1.82243235e-23  8.71835891e-24  1.19871131e-23  8.76599481e-24
 -5.08250817e-23 -5.28129916e-23  2.56521799e-23  1.08634149e-22
 -1.66326677e-23 -3.62502549e-23]
Checking the noise that was generated in inject_signal ifo:
[ 3.88828986e-23  6.90476184e-23 -6.78794179e-24 -8.50586204e-24
 -3.23264672e-23 -1.05318968e-22 -5.63517758e-24  7.74995227e-23
 -4.23151963e-23  4.16204516e-24]
[-9.37367583e-23  2.58740315e-23  1.88667373e-23  6.15499128e-24
  7.99034617e-23  1.99748177e-23 -3.80361646e-24  2.27619967e-23
  6.16990317e-23 -4.38486894e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.1109464168548584 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.7906162934923846, 'mass_2_source': 1.7619286890059667, 's1_z': 0.014917209861319614, 's2_z': 0.048436452508337086, 'cos_iota': 0.05430108643112508, 'd_L': 163.09452573821818, 't_c': 0.040704373965351814, 'phase_c': 2.6062280102917263, 'psi': 2.82302824611658, 'ra': 0.827594531872762, 'sin_dec': -0.46936869263001935, 'q': 0.9839789213408384, 'M_c': 1.6032581930987986, 'eta': 0.24998369768026485, 'iota': Array(1.51646852, dtype=float64, weak_type=True), 'dec': Array(-0.48857569, dtype=float64, weak_type=True), 'lambda_1': 110.24400907292171, 'lambda_2': 123.08059852542175, 'H1_SNR': 8.661514933538761, 'L1_SNR': 11.468283247244742, 'V1_SNR': 3.2880581648263965, 'network_SNR': 14.742953845082434, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5139503479003906 seconds
Time for h_sky_low and h_sky_center: 43.49200439453125 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.6947329044342041
Going to compute coefficients . . .
Time for computing coefficients: 171.39447784423828 seconds
Time for computing coefficients: 6.9237353801727295 seconds
Time for computing coefficients: 6.851092100143433 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:40<8:52:50, 160.65s/it]Tuning global sampler:   1%|          | 2/200 [02:45<3:47:13, 68.86s/it] Tuning global sampler:   2%|▏         | 3/200 [02:49<2:09:47, 39.53s/it]Tuning global sampler:   2%|▏         | 4/200 [02:54<1:24:06, 25.75s/it]Tuning global sampler:   2%|▎         | 5/200 [02:59<59:09, 18.20s/it]  Tuning global sampler:   3%|▎         | 6/200 [03:04<44:04, 13.63s/it]Tuning global sampler:   4%|▎         | 7/200 [03:09<35:11, 10.94s/it]Tuning global sampler:   4%|▍         | 8/200 [03:14<28:34,  8.93s/it]Tuning global sampler:   4%|▍         | 9/200 [03:18<24:03,  7.56s/it]Tuning global sampler:   5%|▌         | 10/200 [03:23<20:52,  6.59s/it]Tuning global sampler:   6%|▌         | 11/200 [03:27<18:50,  5.98s/it]Tuning global sampler:   6%|▌         | 12/200 [03:32<17:34,  5.61s/it]Tuning global sampler:   6%|▋         | 13/200 [03:37<16:30,  5.29s/it]Tuning global sampler:   7%|▋         | 14/200 [03:41<15:48,  5.10s/it]Tuning global sampler:   8%|▊         | 15/200 [03:53<22:06,  7.17s/it]Tuning global sampler:   8%|▊         | 16/200 [03:58<19:39,  6.41s/it]Tuning global sampler:   8%|▊         | 17/200 [04:02<17:55,  5.88s/it]Tuning global sampler:   9%|▉         | 18/200 [04:07<16:41,  5.50s/it]Tuning global sampler:  10%|▉         | 19/200 [04:25<27:27,  9.10s/it]Tuning global sampler:  10%|█         | 20/200 [04:33<26:35,  8.86s/it]Tuning global sampler:  10%|█         | 21/200 [04:46<30:30, 10.23s/it]Tuning global sampler:  11%|█         | 22/200 [05:01<34:01, 11.47s/it]Tuning global sampler:  12%|█▏        | 23/200 [05:20<40:35, 13.76s/it]Tuning global sampler:  12%|█▏        | 24/200 [05:32<38:50, 13.24s/it]Tuning global sampler:  12%|█▎        | 25/200 [05:39<33:38, 11.53s/it]Tuning global sampler:  13%|█▎        | 26/200 [05:53<35:18, 12.17s/it]Tuning global sampler:  14%|█▎        | 27/200 [06:03<32:54, 11.41s/it]Tuning global sampler:  14%|█▍        | 28/200 [06:07<26:40,  9.31s/it]Tuning global sampler:  14%|█▍        | 29/200 [06:11<22:19,  7.83s/it]Tuning global sampler:  15%|█▌        | 30/200 [06:16<19:16,  6.80s/it]Tuning global sampler:  16%|█▌        | 31/200 [06:20<17:13,  6.11s/it]Tuning global sampler:  16%|█▌        | 32/200 [06:25<15:40,  5.60s/it]Tuning global sampler:  16%|█▋        | 33/200 [06:29<14:32,  5.23s/it]Tuning global sampler:  17%|█▋        | 34/200 [06:33<13:44,  4.96s/it]Tuning global sampler:  18%|█▊        | 35/200 [06:38<13:11,  4.79s/it]Tuning global sampler:  18%|█▊        | 36/200 [06:42<12:46,  4.67s/it]Tuning global sampler:  18%|█▊        | 37/200 [06:47<12:27,  4.59s/it]Tuning global sampler:  19%|█▉        | 38/200 [06:51<12:13,  4.53s/it]Tuning global sampler:  20%|█▉        | 39/200 [06:55<12:02,  4.49s/it]Tuning global sampler:  20%|██        | 40/200 [07:00<11:53,  4.46s/it]Tuning global sampler:  20%|██        | 41/200 [07:04<11:46,  4.44s/it]Tuning global sampler:  21%|██        | 42/200 [07:09<11:39,  4.43s/it]Tuning global sampler:  22%|██▏       | 43/200 [07:13<11:35,  4.43s/it]Tuning global sampler:  22%|██▏       | 44/200 [07:17<11:28,  4.42s/it]Tuning global sampler:  22%|██▎       | 45/200 [07:22<11:22,  4.40s/it]Tuning global sampler:  23%|██▎       | 46/200 [07:26<11:17,  4.40s/it]Tuning global sampler:  24%|██▎       | 47/200 [07:31<11:14,  4.41s/it]Tuning global sampler:  24%|██▍       | 48/200 [07:36<11:55,  4.71s/it]Tuning global sampler:  24%|██▍       | 49/200 [07:40<11:37,  4.62s/it]Tuning global sampler:  25%|██▌       | 50/200 [07:45<11:22,  4.55s/it]Tuning global sampler:  26%|██▌       | 51/200 [07:49<11:10,  4.50s/it]Tuning global sampler:  26%|██▌       | 52/200 [07:54<11:01,  4.47s/it]Tuning global sampler:  26%|██▋       | 53/200 [07:58<10:53,  4.45s/it]Tuning global sampler:  27%|██▋       | 54/200 [08:02<10:47,  4.43s/it]Tuning global sampler:  28%|██▊       | 55/200 [08:07<10:39,  4.41s/it]Tuning global sampler:  28%|██▊       | 56/200 [08:11<10:32,  4.39s/it]Tuning global sampler:  28%|██▊       | 57/200 [08:16<10:37,  4.46s/it]Tuning global sampler:  29%|██▉       | 58/200 [08:20<10:30,  4.44s/it]Tuning global sampler:  30%|██▉       | 59/200 [08:24<10:23,  4.42s/it]Tuning global sampler:  30%|███       | 60/200 [08:29<10:18,  4.42s/it]Tuning global sampler:  30%|███       | 61/200 [08:33<10:12,  4.41s/it]Tuning global sampler:  31%|███       | 62/200 [08:43<13:58,  6.08s/it]Tuning global sampler:  32%|███▏      | 63/200 [09:06<25:39, 11.24s/it]Tuning global sampler:  32%|███▏      | 64/200 [09:11<20:49,  9.18s/it]Tuning global sampler:  32%|███▎      | 65/200 [09:30<27:22, 12.17s/it]Tuning global sampler:  33%|███▎      | 66/200 [09:39<25:14, 11.30s/it]Tuning global sampler:  34%|███▎      | 67/200 [09:58<30:15, 13.65s/it]Tuning global sampler:  34%|███▍      | 68/200 [10:06<25:47, 11.72s/it]Tuning global sampler:  34%|███▍      | 69/200 [10:15<24:13, 11.09s/it]Tuning global sampler:  35%|███▌      | 70/200 [10:23<21:51, 10.09s/it]Tuning global sampler:  36%|███▌      | 71/200 [10:27<18:04,  8.40s/it]Tuning global sampler:  36%|███▌      | 72/200 [10:32<15:22,  7.21s/it]Tuning global sampler:  36%|███▋      | 73/200 [10:36<13:28,  6.36s/it]Tuning global sampler:  36%|███▋      | 73/200 [10:41<18:35,  8.78s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.21s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.21s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.21s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.21s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.21s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.21s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.21s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.21s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]
15:57 ninjax INFO    : Saving samples to ./Aplus/injection_20/results_training.npz
15:57 ninjax INFO    : Saving the NF
15:57 ninjax INFO    : Time taken: 695.7490355968475 seconds (11.59581725994746 minutes)
15:57 ninjax INFO    : Creating the final corner plot
15:57 ninjax INFO    : Dumping the final production chains
15:57 ninjax INFO    : Chains shape is: (13, 220000)
15:57 ninjax INFO    : Key: M_c: ESS = 21424, Rhat = 1.028839695808808
15:57 ninjax INFO    : Key: q: ESS = 33310, Rhat = 1.019760097565802
15:57 ninjax INFO    : Key: s1_z: ESS = 33681, Rhat = 1.0228353026371924
15:57 ninjax INFO    : Key: s2_z: ESS = 22980, Rhat = 1.0274436585772762
15:57 ninjax INFO    : Key: lambda_1: ESS = 26895, Rhat = 1.0243471615243778
15:57 ninjax INFO    : Key: lambda_2: ESS = 25206, Rhat = 1.0262366058885362
15:57 ninjax INFO    : Key: cos_iota: ESS = 30566, Rhat = 1.0198804720449164
15:57 ninjax INFO    : Key: d_L: ESS = 14023, Rhat = 1.0434013937127633
15:57 ninjax INFO    : Key: t_c: ESS = 13113, Rhat = 1.046997422537651
15:57 ninjax INFO    : Key: phase_c: ESS = 36898, Rhat = 1.0232447533725402
15:57 ninjax INFO    : Key: psi: ESS = 27555, Rhat = 1.0242555612631545
15:57 ninjax INFO    : Key: ra: ESS = 12649, Rhat = 1.048080143228422
15:57 ninjax INFO    : Key: sin_dec: ESS = 11951, Rhat = 1.0506972956428469
15:57 ninjax INFO    : Key: eta: ESS = 33310, Rhat = 1.019760097565802
15:57 ninjax INFO    : Key: iota: ESS = 30566, Rhat = 1.0198804720449164
15:57 ninjax INFO    : Key: dec: ESS = 11951, Rhat = 1.0506972956428469
15:57 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.606 +/- 0.222
q: 0.741 +/- 0.239
s1_z: 0.014 +/- 0.028
s2_z: 0.015 +/- 0.028
lambda_1: 1967.288 +/- 1386.952
lambda_2: 2046.897 +/- 1403.637
cos_iota: -0.093 +/- 0.454
d_L: 644.591 +/- 248.498
t_c: 0.033 +/- 0.034
phase_c: 3.047 +/- 1.798
psi: 1.679 +/- 0.840
ra: 1.784 +/- 1.289
sin_dec: -0.029 +/- 0.376
Log probability: 31.989 +/- 45.183
Local acceptance: 0.968 +/- 0.175
Global acceptance: 0.015 +/- 0.120
Max loss: 22.825, Min loss: 7.024
Production summary
==========
M_c: 1.603 +/- 0.000
q: 0.899 +/- 0.068
s1_z: 0.037 +/- 0.011
s2_z: 0.035 +/- 0.012
lambda_1: 964.532 +/- 755.757
lambda_2: 1359.880 +/- 1005.781
cos_iota: 0.037 +/- 0.269
d_L: 269.581 +/- 69.423
t_c: 0.048 +/- 0.002
phase_c: 3.259 +/- 1.769
psi: 1.949 +/- 0.802
ra: 0.998 +/- 0.048
sin_dec: -0.151 +/- 0.106
Log probability: 91.677 +/- 2.741
Local acceptance: 0.917 +/- 0.277
Global acceptance: 0.107 +/- 0.310
DONE

JOB STATISTICS
==============
Job ID: 10906035
Cluster: snellius
User/Group: twouters2/twouters2
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 00:10:19
CPU Efficiency: 3.83% of 04:29:04 core-walltime
Job Wall-clock time: 00:16:49
Memory Utilized: 4.38 GB
Memory Efficiency: 43.80% of 10.00 GB (10.00 GB/node)
