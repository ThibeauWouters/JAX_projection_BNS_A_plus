Tue Apr  1 15:41:22 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
15:41 ninjax INFO    : Checking and setting outdir
15:41 ninjax INFO    : Found generation prior file ./Aplus/injection_9/generation_prior.prior
15:41 ninjax INFO    : The outdir is set to ./Aplus/injection_9
15:41 ninjax INFO    : Loading the given config
15:41 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
15:41 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
15:41 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/MPA1/Aplus/injection_9/complete_config.json
15:41 ninjax INFO    : No seed specified. Generating a random seed: 206411
15:41 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 209999
15:41 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 348186
15:41 ninjax INFO    : Loading the priors
15:41 ninjax INFO    : Setting up the prior
15:41 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
15:41 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
15:41 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
15:41 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
15:41 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
15:41 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
15:41 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
15:41 ninjax INFO    :    dL_prior = PowerLaw(10.0, 1000.0, 2.0, naming=["d_L"])
15:41 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
15:41 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
15:41 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
15:41 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
15:41 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
15:41 ninjax INFO    : Setting up the generation prior
15:41 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.468645554845655, naming=["mass_1_source"])
15:41 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.468645554845655, naming=["mass_2_source"])
15:41 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
15:41 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
15:41 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
15:41 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
15:41 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
15:41 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
15:41 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
15:41 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
15:41 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
15:41 ninjax INFO    : Finished prior setup
15:41 ninjax INFO    : Setting the transforms
15:41 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
15:41 ninjax INFO    : transforms_str_list has 3 elements
15:41 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
15:41 ninjax INFO    : Setting the likelihood
15:41 ninjax INFO    : GW likelihood provided, setting up the GW pipe
15:41 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz
15:41 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz for BNS injections
15:41 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
15:41 ninjax INFO    : self.is_BNS_run is True
15:41 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
15:41 ninjax INFO    : GW run is an injection
15:41 ninjax INFO    : Setting up GW injection . . . 
15:41 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
15:41 ninjax INFO    : Generating new injection
15:41 ninjax INFO    : Sanity check: generated parameters:
15:41 ninjax INFO    : {'mass_1_source': 2.102024811576559, 'mass_2_source': 2.3487317199615054, 's1_z': -0.04527263227878278, 's2_z': 0.0021842593360908782, 'cos_iota': -0.3896993586688571, 'd_L': 306.1702636260954, 't_c': -0.0019766069049041712, 'phase_c': 5.798760678337383, 'psi': 3.016298885810141, 'ra': 1.1212095946967258, 'sin_dec': -0.8792619496614567}
15:41 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz . . . 
15:41 ninjax INFO    : Injected lambda_1: 10.193573322801235
15:41 ninjax INFO    : Injected lambda_2: 32.409855217416386
15:41 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 2.067508284099397 is 128.0
15:41 ninjax INFO    : After transforms, the injection parameters are:
15:41 ninjax INFO    : {'mass_1_source': 2.3487317199615054, 'mass_2_source': 2.102024811576559, 's1_z': -0.04527263227878278, 's2_z': 0.0021842593360908782, 'cos_iota': -0.3896993586688571, 'd_L': 306.1702636260954, 't_c': -0.0019766069049041712, 'phase_c': 5.798760678337383, 'psi': 3.016298885810141, 'ra': 1.1212095946967258, 'sin_dec': -0.8792619496614567, 'q': 0.8949616483278091, 'M_c': 2.067508284099397, 'eta': 0.2492318695973137, 'iota': Array(1.97110145, dtype=float64, weak_type=True), 'dec': Array(-1.07431055, dtype=float64, weak_type=True), 'lambda_1': 10.193573322801235, 'lambda_2': 32.409855217416386}
15:41 ninjax INFO    : The trial injection parameters are {'M_c': 2.067508284099397, 'eta': 0.2492318695973137, 's1_z': -0.04527263227878278, 's2_z': 0.0021842593360908782, 'lambda_1': 10.193573322801235, 'lambda_2': 32.409855217416386, 'd_L': 306.1702636260954, 'phase_c': 5.798760678337383, 'iota': 1.9711014471870527, 't_c': -0.0019766069049041712, 'psi': 3.016298885810141, 'ra': 1.1212095946967258, 'dec': -1.0743105538828297}
15:41 ninjax INFO    : Injecting signals . . .
15:41 ninjax INFO    : self.ifos
15:41 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
15:41 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:41 ninjax INFO    : [-6.15965959e-23-4.25257544e-23j -2.46885573e-23-8.29541141e-24j
 -7.60425101e-23-5.56491419e-23j ...
 -5.07989491e-25-8.63678414e-24j -1.82661098e-23-9.01350368e-24j
  5.96701257e-24+7.18669327e-24j]
15:41 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
15:41 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:41 ninjax INFO    : [8.91594344e-24+1.55348069e-23j 6.55787617e-23-7.26228161e-24j
 5.66528475e-24+1.74698238e-23j ...
 1.59407891e-23+3.35138703e-23j 1.25922191e-23+8.09633921e-24j
 6.90669863e-24-2.61449220e-23j]
15:41 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
15:41 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:41 ninjax INFO    : [-9.02129304e-23-1.08524885e-23j  3.31108495e-23-8.57820052e-23j
  7.43531161e-23+1.05654174e-22j ...
  3.40994961e-23+1.74738528e-23j -4.54443231e-23-2.83733688e-23j
 -2.78750753e-23+1.80605027e-23j]
15:41 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
15:41 ninjax INFO    : SNR for ifo H1 is 8.022456207963252
15:41 ninjax INFO    : SNR for ifo L1 is 6.738475630538582
15:41 ninjax INFO    : SNR for ifo V1 is 9.338491686605039
15:41 ninjax INFO    : The network SNR is 14.034752737859042
15:41 ninjax INFO    : Network SNR passes threshold
15:41 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
15:41 ninjax INFO    :    mass_1_source: 2.3487317199615054
15:41 ninjax INFO    :    mass_2_source: 2.102024811576559
15:41 ninjax INFO    :    s1_z: -0.04527263227878278
15:41 ninjax INFO    :    s2_z: 0.0021842593360908782
15:41 ninjax INFO    :    cos_iota: -0.3896993586688571
15:41 ninjax INFO    :    d_L: 306.1702636260954
15:41 ninjax INFO    :    t_c: -0.0019766069049041712
15:41 ninjax INFO    :    phase_c: 5.798760678337383
15:41 ninjax INFO    :    psi: 3.016298885810141
15:41 ninjax INFO    :    ra: 1.1212095946967258
15:41 ninjax INFO    :    sin_dec: -0.8792619496614567
15:41 ninjax INFO    :    q: 0.8949616483278091
15:41 ninjax INFO    :    M_c: 2.067508284099397
15:41 ninjax INFO    :    eta: 0.2492318695973137
15:41 ninjax INFO    :    iota: 1.9711014471870527
15:41 ninjax INFO    :    dec: -1.0743105538828297
15:41 ninjax INFO    :    lambda_1: 10.193573322801235
15:41 ninjax INFO    :    lambda_2: 32.409855217416386
15:41 ninjax INFO    :    H1_SNR: 8.022456207963252
15:41 ninjax INFO    :    L1_SNR: 6.738475630538582
15:41 ninjax INFO    :    V1_SNR: 9.338491686605039
15:41 ninjax INFO    :    network_SNR: 14.034752737859042
15:41 ninjax INFO    :    epoch: 126.0
15:41 ninjax INFO    :    gmst: 2.7288901910520846
15:41 ninjax INFO    :    duration: 128.0
15:41 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
15:41 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
15:41 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
15:44 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 146.68357467651367 seconds = 2.444726244608561 minutes
15:44 ninjax INFO    : The priors are not modified after their initialization
15:44 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
15:44 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
15:44 ninjax INFO    : sample: {'M_c': Array([1.4308613 , 1.98441602, 1.02255201], dtype=float64), 'q': Array([0.76481991, 0.22376886, 0.35234832], dtype=float64), 's1_z': Array([-0.00514274,  0.03661438, -0.04375867], dtype=float64), 's2_z': Array([ 0.01142597, -0.04537202, -0.01101903], dtype=float64), 'lambda_1': Array([3338.5638859 , 3836.22639435,  492.21458327], dtype=float64), 'lambda_2': Array([1931.84894985, 2433.69214112, 2785.77588646], dtype=float64), 'cos_iota': Array([-0.2898845 ,  0.80053291, -0.39958153], dtype=float64), 'd_L': Array([955.50475614, 995.80803571, 856.13642867], dtype=float64), 't_c': Array([-0.06024576,  0.0351995 , -0.00199264], dtype=float64), 'phase_c': Array([5.80922036, 2.35732076, 3.31571497], dtype=float64), 'psi': Array([0.31572038, 2.58976405, 1.78999437], dtype=float64), 'ra': Array([4.67587507, 5.9151715 , 1.09467248], dtype=float64), 'sin_dec': Array([-0.18899786,  0.64354511,  0.31281363], dtype=float64)}
15:44 ninjax INFO    : log_prob: [ -8.76766969 -10.07413548 -11.07661614]
15:44 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 2.3487317199615054, 'mass_2_source': 2.102024811576559, 's1_z': -0.04527263227878278, 's2_z': 0.0021842593360908782, 'cos_iota': -0.3896993586688571, 'd_L': 306.1702636260954, 't_c': -0.0019766069049041712, 'phase_c': 5.798760678337383, 'psi': 3.016298885810141, 'ra': 1.1212095946967258, 'sin_dec': -0.8792619496614567, 'q': 0.8949616483278091, 'M_c': 2.067508284099397, 'eta': 0.2492318695973137, 'iota': Array(1.97110145, dtype=float64, weak_type=True), 'dec': Array(-1.07431055, dtype=float64, weak_type=True), 'lambda_1': 10.193573322801235, 'lambda_2': 32.409855217416386, 'H1_SNR': 8.022456207963252, 'L1_SNR': 6.738475630538582, 'V1_SNR': 9.338491686605039, 'network_SNR': 14.034752737859042, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
15:44 ninjax INFO    : log_prob at the injection parameters is: 80.42340408028232
15:44 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
15:44 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
15:44 ninjax INFO    : Ninjax setup complete.
15:44 ninjax INFO    : Saving output to ./Aplus/injection_9/
15:44 ninjax INFO    : Using polynomial learning rate scheduler
15:44 ninjax INFO    : The hyperparameters passed to flowMC and jim are
15:44 ninjax INFO    :    n_loop_training: 200
15:44 ninjax INFO    :    n_loop_production: 10
15:44 ninjax INFO    :    n_local_steps: 100
15:44 ninjax INFO    :    n_global_steps: 1000
15:44 ninjax INFO    :    n_epochs: 25
15:44 ninjax INFO    :    n_chains: 1000
15:44 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x145b79ec3a30>
15:44 ninjax INFO    :    max_samples: 50000
15:44 ninjax INFO    :    momentum: 0.9
15:44 ninjax INFO    :    batch_size: 30000
15:44 ninjax INFO    :    use_global: True
15:44 ninjax INFO    :    keep_quantile: 0.0
15:44 ninjax INFO    :    train_thinning: 10
15:44 ninjax INFO    :    output_thinning: 50
15:44 ninjax INFO    :    n_sample_max: 10000
15:44 ninjax INFO    :    num_layers: 10
15:44 ninjax INFO    :    hidden_size: [128, 128]
15:44 ninjax INFO    :    num_bins: 8
15:44 ninjax INFO    :    save_training_chains: False
15:44 ninjax INFO    :    eps_mass_matrix: 1e-05
15:44 ninjax INFO    :    use_scheduler: True
15:44 ninjax INFO    :    use_temperature: False
15:44 ninjax INFO    :    which_temperature_schedule: exponential
15:44 ninjax INFO    :    starting_temperature: 2.0
15:44 ninjax INFO    :    stop_tempering_iteration: 75
15:44 ninjax INFO    :    stopping_criterion_global_acc: 0.1
15:44 ninjax INFO    :    stopping_criterion_loss: -inf
15:44 ninjax INFO    :    nf_model_kwargs: {}
15:44 ninjax INFO    :    local sampler arg not shown (pretty print)
15:44 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[-6.14701824e-23 -2.56646992e-23 -7.42801254e-23  7.02852642e-23
  2.41958198e-23 -5.03193078e-23 -4.60482088e-23 -3.36188166e-23
  1.52424028e-23  4.89366835e-23]
[-4.62657671e-23 -4.68459698e-24 -5.89464150e-23  1.19036743e-22
 -4.93017652e-24  1.06274609e-23  7.90205843e-23 -6.53367026e-24
  4.59094365e-23  5.21221558e-24]
Checking the noise that was generated in inject_signal ifo:
[ 6.24421299e-24  6.85568200e-23  2.53973454e-24 -1.69921449e-23
 -3.23433435e-23  1.17005069e-23  4.59422862e-23  1.18686665e-22
  5.73057135e-23  5.77946944e-23]
[ 1.71906188e-23 -8.26326375e-24  1.77742654e-23  7.73718280e-23
  2.33265451e-23  2.98573451e-24 -4.41260304e-23 -7.55263568e-23
 -3.68632616e-24  3.66345366e-23]
Checking the noise that was generated in inject_signal ifo:
[-8.67586079e-23  3.07295084e-23  7.55555454e-23 -6.99209234e-23
 -3.16136704e-23 -4.18354114e-23  9.30177501e-23  1.75779007e-23
 -3.60160595e-23 -7.00133392e-23]
[-6.54731625e-24 -9.07587640e-23  1.11036105e-22 -2.03499657e-23
 -1.85274671e-23  5.86846448e-24 -3.22747685e-23 -2.55164122e-23
 -4.19265408e-23 -1.70615519e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.10969400405883789 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 2.3487317199615054, 'mass_2_source': 2.102024811576559, 's1_z': -0.04527263227878278, 's2_z': 0.0021842593360908782, 'cos_iota': -0.3896993586688571, 'd_L': 306.1702636260954, 't_c': -0.0019766069049041712, 'phase_c': 5.798760678337383, 'psi': 3.016298885810141, 'ra': 1.1212095946967258, 'sin_dec': -0.8792619496614567, 'q': 0.8949616483278091, 'M_c': 2.067508284099397, 'eta': 0.2492318695973137, 'iota': Array(1.97110145, dtype=float64, weak_type=True), 'dec': Array(-1.07431055, dtype=float64, weak_type=True), 'lambda_1': 10.193573322801235, 'lambda_2': 32.409855217416386, 'H1_SNR': 8.022456207963252, 'L1_SNR': 6.738475630538582, 'V1_SNR': 9.338491686605039, 'network_SNR': 14.034752737859042, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.519627571105957 seconds
Time for h_sky_low and h_sky_center: 5.18727970123291 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.6673126220703125
Going to compute coefficients . . .
Time for computing coefficients: 125.61083626747131 seconds
Time for computing coefficients: 7.140318393707275 seconds
Time for computing coefficients: 6.9234161376953125 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:01<6:42:15, 121.28s/it]Tuning global sampler:   1%|          | 2/200 [02:05<2:53:40, 52.63s/it] Tuning global sampler:   2%|▏         | 3/200 [02:10<1:40:49, 30.71s/it]Tuning global sampler:   2%|▏         | 4/200 [02:15<1:06:38, 20.40s/it]Tuning global sampler:   2%|▎         | 5/200 [02:20<48:47, 15.01s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:25<37:05, 11.47s/it]Tuning global sampler:   4%|▎         | 7/200 [02:29<29:36,  9.20s/it]Tuning global sampler:   4%|▍         | 8/200 [02:34<25:20,  7.92s/it]Tuning global sampler:   4%|▍         | 9/200 [02:39<21:51,  6.87s/it]Tuning global sampler:   5%|▌         | 10/200 [02:43<19:21,  6.12s/it]Tuning global sampler:   6%|▌         | 11/200 [02:49<18:25,  5.85s/it]Tuning global sampler:   6%|▌         | 12/200 [02:53<17:06,  5.46s/it]Tuning global sampler:   6%|▋         | 13/200 [02:58<16:09,  5.18s/it]Tuning global sampler:   7%|▋         | 14/200 [03:02<15:31,  5.01s/it]Tuning global sampler:   8%|▊         | 15/200 [03:07<15:05,  4.89s/it]Tuning global sampler:   8%|▊         | 16/200 [03:12<14:46,  4.82s/it]Tuning global sampler:   8%|▊         | 17/200 [03:16<14:30,  4.76s/it]Tuning global sampler:   9%|▉         | 18/200 [03:21<14:23,  4.74s/it]Tuning global sampler:  10%|▉         | 19/200 [03:26<14:12,  4.71s/it]Tuning global sampler:  10%|█         | 20/200 [03:30<14:02,  4.68s/it]Tuning global sampler:  10%|█         | 21/200 [03:35<14:00,  4.69s/it]Tuning global sampler:  11%|█         | 22/200 [03:39<13:49,  4.66s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:44<13:41,  4.64s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:48<13:23,  4.57s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:54<13:57,  4.78s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:58<13:31,  4.66s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:03<13:14,  4.60s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:07<12:59,  4.53s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:11<12:46,  4.48s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:16<12:42,  4.49s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:20<12:32,  4.46s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:25<12:24,  4.43s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:29<12:15,  4.40s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:33<12:08,  4.39s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:38<12:03,  4.39s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:42<11:59,  4.39s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:46<11:54,  4.38s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:51<11:52,  4.40s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:55<11:46,  4.39s/it]Tuning global sampler:  20%|██        | 40/200 [05:00<11:41,  4.39s/it]Tuning global sampler:  20%|██        | 41/200 [05:04<11:46,  4.44s/it]Tuning global sampler:  21%|██        | 42/200 [05:09<11:38,  4.42s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:13<11:32,  4.41s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:18<12:08,  4.67s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:23<11:48,  4.57s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:27<11:35,  4.51s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:31<11:24,  4.47s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:36<11:15,  4.44s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:40<11:08,  4.43s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:44<11:01,  4.41s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:49<10:55,  4.40s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:53<10:49,  4.39s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:58<10:44,  4.38s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:02<10:40,  4.38s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:06<10:33,  4.37s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:11<10:27,  4.36s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:15<10:24,  4.36s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:19<10:20,  4.37s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:24<10:15,  4.37s/it]Tuning global sampler:  30%|███       | 60/200 [06:28<10:12,  4.37s/it]Tuning global sampler:  30%|███       | 61/200 [06:32<10:07,  4.37s/it]Tuning global sampler:  31%|███       | 62/200 [06:37<10:03,  4.37s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:41<09:59,  4.38s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:47<14:45,  6.46s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.22s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.22s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.22s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.22s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.22s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.22s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.22s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.22s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]
15:51 ninjax INFO    : Saving samples to ./Aplus/injection_9/results_training.npz
15:51 ninjax INFO    : Saving the NF
15:51 ninjax INFO    : Time taken: 446.1782715320587 seconds (7.436304525534312 minutes)
15:51 ninjax INFO    : Creating the final corner plot
15:51 ninjax INFO    : Dumping the final production chains
15:51 ninjax INFO    : Chains shape is: (13, 220000)
15:51 ninjax INFO    : Key: M_c: ESS = 41380, Rhat = 1.0157466942627067
15:51 ninjax INFO    : Key: q: ESS = 27709, Rhat = 1.0241956491832718
15:51 ninjax INFO    : Key: s1_z: ESS = 39785, Rhat = 1.0173810173180369
15:51 ninjax INFO    : Key: s2_z: ESS = 42357, Rhat = 1.0171370262161814
15:51 ninjax INFO    : Key: lambda_1: ESS = 33227, Rhat = 1.0194499966974389
15:51 ninjax INFO    : Key: lambda_2: ESS = 42468, Rhat = 1.0164411479639381
15:51 ninjax INFO    : Key: cos_iota: ESS = 15699, Rhat = 1.0391372457392394
15:51 ninjax INFO    : Key: d_L: ESS = 28950, Rhat = 1.0226814178476493
15:51 ninjax INFO    : Key: t_c: ESS = 38863, Rhat = 1.0170011438045896
15:51 ninjax INFO    : Key: phase_c: ESS = 26864, Rhat = 1.0235274392571487
15:51 ninjax INFO    : Key: psi: ESS = 43092, Rhat = 1.0156408478669356
15:51 ninjax INFO    : Key: ra: ESS = 26334, Rhat = 1.023592959934531
15:51 ninjax INFO    : Key: sin_dec: ESS = 49455, Rhat = 1.0137367709174299
15:51 ninjax INFO    : Key: eta: ESS = 27709, Rhat = 1.0243808671045553
15:51 ninjax INFO    : Key: iota: ESS = 15699, Rhat = 1.0391372457392394
15:51 ninjax INFO    : Key: dec: ESS = 49455, Rhat = 1.0137367709174299
15:51 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.971 +/- 0.270
q: 0.722 +/- 0.215
s1_z: 0.004 +/- 0.027
s2_z: 0.004 +/- 0.028
lambda_1: 1896.600 +/- 1484.038
lambda_2: 2040.793 +/- 1470.244
cos_iota: -0.303 +/- 0.506
d_L: 651.663 +/- 216.519
t_c: 0.001 +/- 0.026
phase_c: 3.154 +/- 1.759
psi: 1.671 +/- 0.899
ra: 1.643 +/- 1.247
sin_dec: -0.620 +/- 0.473
Log probability: 28.192 +/- 38.399
Local acceptance: 0.996 +/- 0.067
Global acceptance: 0.015 +/- 0.122
Max loss: 22.871, Min loss: 8.094
Production summary
==========
M_c: 2.068 +/- 0.000
q: 0.822 +/- 0.109
s1_z: 0.004 +/- 0.026
s2_z: 0.002 +/- 0.027
lambda_1: 383.780 +/- 584.311
lambda_2: 639.405 +/- 808.819
cos_iota: -0.708 +/- 0.331
d_L: 429.513 +/- 89.503
t_c: 0.001 +/- 0.002
phase_c: 3.172 +/- 1.821
psi: 1.591 +/- 0.919
ra: 1.166 +/- 0.037
sin_dec: -0.862 +/- 0.014
Log probability: 77.200 +/- 3.315
Local acceptance: 0.990 +/- 0.098
Global acceptance: 0.105 +/- 0.306
DONE

JOB STATISTICS
==============
Job ID: 10906024
Cluster: snellius
User/Group: twouters2/twouters2
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 00:09:40
CPU Efficiency: 5.52% of 02:55:12 core-walltime
Job Wall-clock time: 00:10:57
Memory Utilized: 4.38 GB
Memory Efficiency: 43.79% of 10.00 GB (10.00 GB/node)
