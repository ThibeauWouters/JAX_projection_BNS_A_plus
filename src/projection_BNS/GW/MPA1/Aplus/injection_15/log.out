Tue Apr  1 15:41:22 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
15:41 ninjax INFO    : Checking and setting outdir
15:41 ninjax INFO    : Found generation prior file ./Aplus/injection_15/generation_prior.prior
15:41 ninjax INFO    : The outdir is set to ./Aplus/injection_15
15:41 ninjax INFO    : Loading the given config
15:41 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
15:41 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
15:41 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/MPA1/Aplus/injection_15/complete_config.json
15:41 ninjax INFO    : No seed specified. Generating a random seed: 104086
15:41 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 12333
15:41 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 344872
15:41 ninjax INFO    : Loading the priors
15:41 ninjax INFO    : Setting up the prior
15:41 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
15:41 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
15:41 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
15:41 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
15:41 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
15:41 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
15:41 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
15:41 ninjax INFO    :    dL_prior = PowerLaw(10.0, 1000.0, 2.0, naming=["d_L"])
15:41 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
15:41 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
15:41 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
15:41 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
15:41 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
15:41 ninjax INFO    : Setting up the generation prior
15:41 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.468645554845655, naming=["mass_1_source"])
15:41 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.468645554845655, naming=["mass_2_source"])
15:41 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
15:41 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
15:41 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
15:41 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
15:41 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
15:41 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
15:41 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
15:41 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
15:41 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
15:41 ninjax INFO    : Finished prior setup
15:41 ninjax INFO    : Setting the transforms
15:41 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
15:41 ninjax INFO    : transforms_str_list has 3 elements
15:41 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
15:41 ninjax INFO    : Setting the likelihood
15:41 ninjax INFO    : GW likelihood provided, setting up the GW pipe
15:41 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz
15:41 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz for BNS injections
15:41 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
15:41 ninjax INFO    : self.is_BNS_run is True
15:41 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
15:41 ninjax INFO    : GW run is an injection
15:41 ninjax INFO    : Setting up GW injection . . . 
15:41 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
15:41 ninjax INFO    : Generating new injection
15:41 ninjax INFO    : Sanity check: generated parameters:
15:41 ninjax INFO    : {'mass_1_source': 2.3406491980786193, 'mass_2_source': 1.242134577906258, 's1_z': -0.0477455817350253, 's2_z': 0.011266871381294473, 'cos_iota': 0.9207247163149379, 'd_L': 322.4337471791363, 't_c': 0.0705535030012896, 'phase_c': 3.220795531531177, 'psi': 0.8883855306472156, 'ra': 0.4181417192347585, 'sin_dec': 0.30702160885722396}
15:41 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/MPA1.npz . . . 
15:41 ninjax INFO    : Injected lambda_1: 10.672023195226142
15:41 ninjax INFO    : Injected lambda_2: 1003.654750282243
15:41 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.5768859358272111 is 128.0
15:41 ninjax INFO    : After transforms, the injection parameters are:
15:41 ninjax INFO    : {'mass_1_source': 2.3406491980786193, 'mass_2_source': 1.242134577906258, 's1_z': -0.0477455817350253, 's2_z': 0.011266871381294473, 'cos_iota': 0.9207247163149379, 'd_L': 322.4337471791363, 't_c': 0.0705535030012896, 'phase_c': 3.220795531531177, 'psi': 0.8883855306472156, 'ra': 0.4181417192347585, 'sin_dec': 0.30702160885722396, 'q': 0.5306795135836226, 'M_c': 1.5768859358272111, 'eta': 0.22649769307873255, 'iota': Array(0.40086266, dtype=float64, weak_type=True), 'dec': Array(0.31206191, dtype=float64, weak_type=True), 'lambda_1': 10.672023195226142, 'lambda_2': 1003.654750282243}
15:41 ninjax INFO    : The trial injection parameters are {'M_c': 1.5768859358272111, 'eta': 0.22649769307873255, 's1_z': -0.0477455817350253, 's2_z': 0.011266871381294473, 'lambda_1': 10.672023195226142, 'lambda_2': 1003.654750282243, 'd_L': 322.4337471791363, 'phase_c': 3.220795531531177, 'iota': 0.4008626584209266, 't_c': 0.0705535030012896, 'psi': 0.8883855306472156, 'ra': 0.4181417192347585, 'dec': 0.31206190597364336}
15:41 ninjax INFO    : Injecting signals . . .
15:41 ninjax INFO    : self.ifos
15:41 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
15:41 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:41 ninjax INFO    : [ 1.35520955e-22-2.83319472e-23j  2.37749499e-23+2.45508567e-24j
  7.98466130e-23+3.39238502e-23j ...
  1.35673564e-23+4.69458014e-24j -3.26782582e-23-2.42849602e-24j
 -5.68383879e-24-9.79498675e-24j]
15:41 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
15:41 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:41 ninjax INFO    : [ 9.76267123e-23+2.03399357e-23j -2.63918349e-23+3.72502149e-23j
 -7.55189341e-23-9.02812433e-24j ...
 -3.32399918e-23+1.84891405e-24j -5.52865595e-25+1.74534434e-23j
  2.27394227e-23-1.85010646e-23j]
15:41 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
15:41 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
15:41 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
15:41 ninjax INFO    : [ 1.72594965e-23+5.39593565e-24j  1.77387238e-23-8.96410346e-24j
 -5.15867351e-23+5.81089180e-23j ...
 -5.25353260e-23-1.26573956e-23j  1.29377591e-23-3.86795934e-23j
 -1.06720377e-23+2.42520433e-23j]
15:41 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
15:41 ninjax INFO    : SNR for ifo H1 is 18.242118524188843
15:41 ninjax INFO    : SNR for ifo L1 is 16.744067971035324
15:41 ninjax INFO    : SNR for ifo V1 is 6.375668769588996
15:41 ninjax INFO    : The network SNR is 25.569275561280907
15:41 ninjax INFO    : Network SNR passes threshold
15:41 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
15:41 ninjax INFO    :    mass_1_source: 2.3406491980786193
15:41 ninjax INFO    :    mass_2_source: 1.242134577906258
15:41 ninjax INFO    :    s1_z: -0.0477455817350253
15:41 ninjax INFO    :    s2_z: 0.011266871381294473
15:41 ninjax INFO    :    cos_iota: 0.9207247163149379
15:41 ninjax INFO    :    d_L: 322.4337471791363
15:41 ninjax INFO    :    t_c: 0.0705535030012896
15:41 ninjax INFO    :    phase_c: 3.220795531531177
15:41 ninjax INFO    :    psi: 0.8883855306472156
15:41 ninjax INFO    :    ra: 0.4181417192347585
15:41 ninjax INFO    :    sin_dec: 0.30702160885722396
15:41 ninjax INFO    :    q: 0.5306795135836226
15:41 ninjax INFO    :    M_c: 1.5768859358272111
15:41 ninjax INFO    :    eta: 0.22649769307873255
15:41 ninjax INFO    :    iota: 0.4008626584209266
15:41 ninjax INFO    :    dec: 0.31206190597364336
15:41 ninjax INFO    :    lambda_1: 10.672023195226142
15:41 ninjax INFO    :    lambda_2: 1003.654750282243
15:41 ninjax INFO    :    H1_SNR: 18.242118524188843
15:41 ninjax INFO    :    L1_SNR: 16.744067971035324
15:41 ninjax INFO    :    V1_SNR: 6.375668769588996
15:41 ninjax INFO    :    network_SNR: 25.569275561280907
15:41 ninjax INFO    :    epoch: 126.0
15:41 ninjax INFO    :    gmst: 2.7288901910520846
15:41 ninjax INFO    :    duration: 128.0
15:41 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
15:41 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
15:41 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
15:48 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 427.09786319732666 seconds = 7.118297719955445 minutes
15:48 ninjax INFO    : The priors are not modified after their initialization
15:48 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
15:48 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
15:48 ninjax INFO    : sample: {'M_c': Array([1.97954888, 1.86636722, 1.41325237], dtype=float64), 'q': Array([0.20650924, 0.29375796, 0.93823168], dtype=float64), 's1_z': Array([-0.00498938, -0.00705582,  0.04726914], dtype=float64), 's2_z': Array([-0.00778761, -0.01074616,  0.01030178], dtype=float64), 'lambda_1': Array([1875.14879899, 1279.66150999, 2324.05987815], dtype=float64), 'lambda_2': Array([  42.93843506, 4267.90945178, 3818.80867425], dtype=float64), 'cos_iota': Array([ 0.55673469,  0.77468047, -0.29569741], dtype=float64), 'd_L': Array([330.32898456, 965.88363013, 461.75317613], dtype=float64), 't_c': Array([ 0.09965129, -0.08432643, -0.07142109], dtype=float64), 'phase_c': Array([0.51928335, 6.06208727, 2.32083746], dtype=float64), 'psi': Array([0.46893726, 2.21978737, 0.32752703], dtype=float64), 'ra': Array([1.77172946, 4.90576583, 6.02150051], dtype=float64), 'sin_dec': Array([-0.58358864, -0.52969135,  0.29195411], dtype=float64)}
15:49 ninjax INFO    : log_prob: [-41.74137088 -36.01758919 -21.0213476 ]
15:49 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 2.3406491980786193, 'mass_2_source': 1.242134577906258, 's1_z': -0.0477455817350253, 's2_z': 0.011266871381294473, 'cos_iota': 0.9207247163149379, 'd_L': 322.4337471791363, 't_c': 0.0705535030012896, 'phase_c': 3.220795531531177, 'psi': 0.8883855306472156, 'ra': 0.4181417192347585, 'sin_dec': 0.30702160885722396, 'q': 0.5306795135836226, 'M_c': 1.5768859358272111, 'eta': 0.22649769307873255, 'iota': Array(0.40086266, dtype=float64, weak_type=True), 'dec': Array(0.31206191, dtype=float64, weak_type=True), 'lambda_1': 10.672023195226142, 'lambda_2': 1003.654750282243, 'H1_SNR': 18.242118524188843, 'L1_SNR': 16.744067971035324, 'V1_SNR': 6.375668769588996, 'network_SNR': 25.569275561280907, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
15:50 ninjax INFO    : log_prob at the injection parameters is: 311.24362884061793
15:50 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
15:50 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
15:50 ninjax INFO    : Ninjax setup complete.
15:50 ninjax INFO    : Saving output to ./Aplus/injection_15/
15:50 ninjax INFO    : Using polynomial learning rate scheduler
15:50 ninjax INFO    : The hyperparameters passed to flowMC and jim are
15:50 ninjax INFO    :    n_loop_training: 200
15:50 ninjax INFO    :    n_loop_production: 10
15:50 ninjax INFO    :    n_local_steps: 100
15:50 ninjax INFO    :    n_global_steps: 1000
15:50 ninjax INFO    :    n_epochs: 25
15:50 ninjax INFO    :    n_chains: 1000
15:50 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x14995226fa30>
15:50 ninjax INFO    :    max_samples: 50000
15:50 ninjax INFO    :    momentum: 0.9
15:50 ninjax INFO    :    batch_size: 30000
15:50 ninjax INFO    :    use_global: True
15:50 ninjax INFO    :    keep_quantile: 0.0
15:50 ninjax INFO    :    train_thinning: 10
15:50 ninjax INFO    :    output_thinning: 50
15:50 ninjax INFO    :    n_sample_max: 10000
15:50 ninjax INFO    :    num_layers: 10
15:50 ninjax INFO    :    hidden_size: [128, 128]
15:50 ninjax INFO    :    num_bins: 8
15:50 ninjax INFO    :    save_training_chains: False
15:50 ninjax INFO    :    eps_mass_matrix: 1e-05
15:50 ninjax INFO    :    use_scheduler: True
15:50 ninjax INFO    :    use_temperature: False
15:50 ninjax INFO    :    which_temperature_schedule: exponential
15:50 ninjax INFO    :    starting_temperature: 2.0
15:50 ninjax INFO    :    stop_tempering_iteration: 75
15:50 ninjax INFO    :    stopping_criterion_global_acc: 0.1
15:50 ninjax INFO    :    stopping_criterion_loss: -inf
15:50 ninjax INFO    :    nf_model_kwargs: {}
15:50 ninjax INFO    :    local sampler arg not shown (pretty print)
15:50 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[ 1.27055685e-22  1.90957398e-23  8.37306111e-23  2.77744975e-23
 -5.30519239e-23 -3.30735391e-23 -6.55204947e-23 -9.44612716e-24
 -4.57369235e-23  2.44148748e-23]
[-2.89136295e-23  9.52885130e-24  4.14592221e-23  8.36609624e-23
  4.29402024e-23  4.91275161e-23  1.43621620e-23  6.29935178e-24
 -5.15767595e-23  1.93597996e-23]
Checking the noise that was generated in inject_signal ifo:
[ 1.04605227e-22 -2.59591178e-23 -8.20868157e-23 -1.49769468e-23
  2.38028276e-23 -3.40002110e-23  1.12544797e-23  5.29460872e-23
 -5.14915285e-23  3.79064281e-23]
[ 1.68816380e-23  2.94773995e-23 -1.32008112e-23 -2.45346726e-23
 -6.51500204e-23 -2.89727991e-23  4.25418403e-23 -8.72363289e-24
 -1.73641969e-23  3.70989961e-23]
Checking the noise that was generated in inject_signal ifo:
[ 2.08812781e-23  1.86443683e-23 -5.43279298e-23 -4.50904287e-23
  2.03109235e-23  3.59252593e-23 -4.14713659e-23 -7.39885214e-23
  2.48801537e-23 -4.22709150e-23]
[ 4.38920979e-24 -1.26106986e-23  5.55416690e-23  1.29052529e-23
 -4.72906774e-23  6.80705481e-23 -1.27348027e-23 -3.81062739e-23
  6.86657859e-24 -7.66846620e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.11045432090759277 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 2.3406491980786193, 'mass_2_source': 1.242134577906258, 's1_z': -0.0477455817350253, 's2_z': 0.011266871381294473, 'cos_iota': 0.9207247163149379, 'd_L': 322.4337471791363, 't_c': 0.0705535030012896, 'phase_c': 3.220795531531177, 'psi': 0.8883855306472156, 'ra': 0.4181417192347585, 'sin_dec': 0.30702160885722396, 'q': 0.5306795135836226, 'M_c': 1.5768859358272111, 'eta': 0.22649769307873255, 'iota': Array(0.40086266, dtype=float64, weak_type=True), 'dec': Array(0.31206191, dtype=float64, weak_type=True), 'lambda_1': 10.672023195226142, 'lambda_2': 1003.654750282243, 'H1_SNR': 18.242118524188843, 'L1_SNR': 16.744067971035324, 'V1_SNR': 6.375668769588996, 'network_SNR': 25.569275561280907, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5107650756835938 seconds
Time for h_sky_low and h_sky_center: 52.37514853477478 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 5.089280128479004
Going to compute coefficients . . .
Time for computing coefficients: 353.99090218544006 seconds
Time for computing coefficients: 7.165011167526245 seconds
Time for computing coefficients: 7.305849552154541 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:35<8:34:16, 155.06s/it]Tuning global sampler:   1%|          | 2/200 [02:48<3:57:38, 72.01s/it] Tuning global sampler:   2%|▏         | 3/200 [02:53<2:15:26, 41.25s/it]Tuning global sampler:   2%|▏         | 4/200 [02:58<1:27:29, 26.78s/it]Tuning global sampler:   2%|▎         | 5/200 [03:03<1:02:04, 19.10s/it]Tuning global sampler:   3%|▎         | 6/200 [03:13<51:32, 15.94s/it]  Tuning global sampler:   4%|▎         | 7/200 [03:39<1:01:38, 19.16s/it]Tuning global sampler:   4%|▍         | 8/200 [03:56<58:58, 18.43s/it]  Tuning global sampler:   4%|▍         | 9/200 [04:12<56:47, 17.84s/it]Tuning global sampler:   5%|▌         | 10/200 [04:33<59:42, 18.85s/it]Tuning global sampler:   6%|▌         | 11/200 [04:38<45:39, 14.49s/it]Tuning global sampler:   6%|▌         | 12/200 [04:43<36:01, 11.50s/it]Tuning global sampler:   6%|▋         | 13/200 [04:47<29:17,  9.40s/it]Tuning global sampler:   7%|▋         | 14/200 [04:52<24:42,  7.97s/it]Tuning global sampler:   8%|▊         | 15/200 [04:56<21:28,  6.97s/it]Tuning global sampler:   8%|▊         | 16/200 [05:01<19:14,  6.27s/it]Tuning global sampler:   8%|▊         | 17/200 [05:06<17:38,  5.78s/it]Tuning global sampler:   9%|▉         | 18/200 [05:10<16:30,  5.44s/it]Tuning global sampler:  10%|▉         | 19/200 [05:15<15:42,  5.21s/it]Tuning global sampler:  10%|█         | 20/200 [05:20<15:20,  5.11s/it]Tuning global sampler:  10%|█         | 21/200 [05:25<14:51,  4.98s/it]Tuning global sampler:  11%|█         | 22/200 [05:29<14:27,  4.87s/it]Tuning global sampler:  12%|█▏        | 23/200 [05:34<14:14,  4.83s/it]Tuning global sampler:  12%|█▏        | 24/200 [05:38<13:48,  4.71s/it]Tuning global sampler:  12%|█▎        | 25/200 [05:44<14:15,  4.89s/it]Tuning global sampler:  13%|█▎        | 26/200 [05:48<13:44,  4.74s/it]Tuning global sampler:  14%|█▎        | 27/200 [05:53<13:29,  4.68s/it]Tuning global sampler:  14%|█▍        | 28/200 [05:57<13:11,  4.60s/it]Tuning global sampler:  14%|█▍        | 29/200 [06:01<12:57,  4.55s/it]Tuning global sampler:  15%|█▌        | 30/200 [06:06<12:47,  4.51s/it]Tuning global sampler:  16%|█▌        | 31/200 [06:10<12:37,  4.48s/it]Tuning global sampler:  16%|█▌        | 32/200 [06:15<12:28,  4.46s/it]Tuning global sampler:  16%|█▋        | 33/200 [06:29<20:45,  7.46s/it]Tuning global sampler:  17%|█▋        | 34/200 [06:35<19:38,  7.10s/it]Tuning global sampler:  18%|█▊        | 35/200 [06:41<18:14,  6.63s/it]Tuning global sampler:  18%|█▊        | 36/200 [06:45<16:18,  5.97s/it]Tuning global sampler:  18%|█▊        | 37/200 [06:50<15:00,  5.53s/it]Tuning global sampler:  19%|█▉        | 38/200 [06:54<14:00,  5.19s/it]Tuning global sampler:  20%|█▉        | 39/200 [06:59<13:18,  4.96s/it]Tuning global sampler:  20%|██        | 40/200 [07:03<12:53,  4.84s/it]Tuning global sampler:  20%|██        | 41/200 [07:10<14:34,  5.50s/it]Tuning global sampler:  21%|██        | 42/200 [07:15<13:36,  5.17s/it]Tuning global sampler:  22%|██▏       | 43/200 [07:21<14:16,  5.46s/it]Tuning global sampler:  22%|██▏       | 44/200 [07:29<16:17,  6.27s/it]Tuning global sampler:  22%|██▎       | 45/200 [07:37<17:19,  6.71s/it]Tuning global sampler:  23%|██▎       | 46/200 [07:41<15:26,  6.02s/it]Tuning global sampler:  24%|██▎       | 47/200 [07:46<14:43,  5.77s/it]Tuning global sampler:  24%|██▍       | 48/200 [07:51<13:47,  5.44s/it]Tuning global sampler:  24%|██▍       | 49/200 [07:56<13:39,  5.43s/it]Tuning global sampler:  25%|██▌       | 50/200 [08:01<12:48,  5.12s/it]Tuning global sampler:  26%|██▌       | 51/200 [08:07<13:21,  5.38s/it]Tuning global sampler:  26%|██▌       | 52/200 [08:13<13:56,  5.65s/it]Tuning global sampler:  26%|██▋       | 53/200 [08:22<16:06,  6.57s/it]Tuning global sampler:  27%|██▋       | 54/200 [08:28<16:03,  6.60s/it]Tuning global sampler:  28%|██▊       | 55/200 [08:35<16:10,  6.69s/it]Tuning global sampler:  28%|██▊       | 56/200 [08:42<15:49,  6.60s/it]Tuning global sampler:  28%|██▊       | 57/200 [08:49<16:03,  6.74s/it]Tuning global sampler:  29%|██▉       | 58/200 [08:53<14:27,  6.11s/it]Tuning global sampler:  30%|██▉       | 59/200 [09:02<15:55,  6.78s/it]Tuning global sampler:  30%|███       | 60/200 [09:08<15:18,  6.56s/it]Tuning global sampler:  30%|███       | 61/200 [09:12<13:41,  5.91s/it]Tuning global sampler:  31%|███       | 62/200 [09:17<12:33,  5.46s/it]Tuning global sampler:  32%|███▏      | 63/200 [09:21<11:45,  5.15s/it]Tuning global sampler:  32%|███▏      | 64/200 [09:26<11:48,  5.21s/it]Tuning global sampler:  32%|███▎      | 65/200 [09:31<11:10,  4.97s/it]Tuning global sampler:  32%|███▎      | 65/200 [09:35<19:55,  8.86s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.22s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.22s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.22s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.22s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.22s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.22s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.22s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.22s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]
16:00 ninjax INFO    : Saving samples to ./Aplus/injection_15/results_training.npz
16:00 ninjax INFO    : Saving the NF
16:00 ninjax INFO    : Time taken: 615.0806570053101 seconds (10.251344283421835 minutes)
16:00 ninjax INFO    : Creating the final corner plot
16:00 ninjax INFO    : Dumping the final production chains
16:00 ninjax INFO    : Chains shape is: (13, 220000)
16:00 ninjax INFO    : Key: M_c: ESS = 28373, Rhat = 1.0232549708701728
16:00 ninjax INFO    : Key: q: ESS = 25022, Rhat = 1.0258221887039751
16:00 ninjax INFO    : Key: s1_z: ESS = 26565, Rhat = 1.0247508318316632
16:00 ninjax INFO    : Key: s2_z: ESS = 22818, Rhat = 1.0284671983210278
16:00 ninjax INFO    : Key: lambda_1: ESS = 34402, Rhat = 1.0190688267295422
16:00 ninjax INFO    : Key: lambda_2: ESS = 29955, Rhat = 1.021094394819724
16:00 ninjax INFO    : Key: cos_iota: ESS = 15631, Rhat = 1.0395129081949983
16:00 ninjax INFO    : Key: d_L: ESS = 15161, Rhat = 1.0408346121856173
16:00 ninjax INFO    : Key: t_c: ESS = 27215, Rhat = 1.0231429646989876
16:00 ninjax INFO    : Key: phase_c: ESS = 29910, Rhat = 1.0224515925495117
16:00 ninjax INFO    : Key: psi: ESS = 33702, Rhat = 1.0202737235104276
16:00 ninjax INFO    : Key: ra: ESS = 24849, Rhat = 1.024614641478616
16:00 ninjax INFO    : Key: sin_dec: ESS = 40104, Rhat = 1.01695469880522
16:00 ninjax INFO    : Key: eta: ESS = 25022, Rhat = 1.0258726426417537
16:00 ninjax INFO    : Key: iota: ESS = 15631, Rhat = 1.0395129081949983
16:00 ninjax INFO    : Key: dec: ESS = 40104, Rhat = 1.01695469880522
16:00 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.577 +/- 0.093
q: 0.578 +/- 0.166
s1_z: -0.008 +/- 0.027
s2_z: -0.014 +/- 0.026
lambda_1: 1615.089 +/- 1532.623
lambda_2: 1663.315 +/- 1317.580
cos_iota: 0.448 +/- 0.529
d_L: 478.299 +/- 242.138
t_c: 0.067 +/- 0.024
phase_c: 3.129 +/- 1.656
psi: 1.707 +/- 0.884
ra: 0.971 +/- 1.360
sin_dec: 0.287 +/- 0.330
Log probability: 183.281 +/- 123.001
Local acceptance: 0.809 +/- 0.393
Global acceptance: 0.009 +/- 0.093
Max loss: 504.261, Min loss: 5.599
Production summary
==========
M_c: 1.577 +/- 0.000
q: 0.490 +/- 0.045
s1_z: -0.008 +/- 0.028
s2_z: -0.005 +/- 0.029
lambda_1: 83.898 +/- 77.779
lambda_2: 767.381 +/- 636.015
cos_iota: 0.784 +/- 0.174
d_L: 280.719 +/- 49.896
t_c: 0.071 +/- 0.001
phase_c: 3.156 +/- 1.806
psi: 1.644 +/- 0.904
ra: 0.417 +/- 0.011
sin_dec: 0.302 +/- 0.013
Log probability: 306.797 +/- 2.442
Local acceptance: 0.612 +/- 0.487
Global acceptance: 0.099 +/- 0.299
DONE

JOB STATISTICS
==============
Job ID: 10906030
Cluster: snellius
User/Group: twouters2/twouters2
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 00:09:56
CPU Efficiency: 3.20% of 05:10:08 core-walltime
Job Wall-clock time: 00:19:23
Memory Utilized: 4.34 GB
Memory Efficiency: 43.41% of 10.00 GB (10.00 GB/node)
