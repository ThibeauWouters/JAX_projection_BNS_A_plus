Wed Apr  2 11:33:01 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
11:33 ninjax INFO    : Checking and setting outdir
11:33 ninjax INFO    : Found generation prior file ./Aplus/injection_29/generation_prior.prior
11:33 ninjax INFO    : The outdir is set to ./Aplus/injection_29
11:33 ninjax INFO    : Loading the given config
11:33 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
11:33 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
11:33 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/jester_hard/Aplus/injection_29/complete_config.json
11:33 ninjax INFO    : No seed specified. Generating a random seed: 505481
11:33 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 502489
11:33 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 820684
11:33 ninjax INFO    : Loading the priors
11:33 ninjax INFO    : Setting up the prior
11:33 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
11:33 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
11:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
11:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
11:33 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
11:33 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
11:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
11:33 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
11:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
11:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
11:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
11:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
11:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
11:33 ninjax INFO    : Setting up the generation prior
11:33 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.4, naming=["mass_1_source"])
11:33 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.4, naming=["mass_2_source"])
11:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
11:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
11:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
11:33 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
11:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
11:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
11:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
11:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
11:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
11:33 ninjax INFO    : Finished prior setup
11:33 ninjax INFO    : Setting the transforms
11:33 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
11:33 ninjax INFO    : transforms_str_list has 3 elements
11:33 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
11:33 ninjax INFO    : Setting the likelihood
11:33 ninjax INFO    : GW likelihood provided, setting up the GW pipe
11:33 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz
11:33 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz for BNS injections
11:33 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
11:33 ninjax INFO    : self.is_BNS_run is True
11:33 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
11:33 ninjax INFO    : GW run is an injection
11:33 ninjax INFO    : Setting up GW injection . . . 
11:33 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
11:33 ninjax INFO    : Generating new injection
11:33 ninjax INFO    : Sanity check: generated parameters:
11:33 ninjax INFO    : {'mass_1_source': 1.7104055068051918, 'mass_2_source': 1.878542006878928, 's1_z': 0.041510741410676455, 's2_z': 0.03250901114685001, 'cos_iota': 0.5495740507874673, 'd_L': 269.98272177279813, 't_c': 0.014371149966099367, 'phase_c': 5.816439222500714, 'psi': 0.48845073097357583, 'ra': 2.4391942157935906, 'sin_dec': 0.2579575102680183}
11:33 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz . . . 
11:33 ninjax INFO    : Injected lambda_1: 114.45718015399436
11:33 ninjax INFO    : Injected lambda_2: 201.62753413707705
11:33 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.6552962132824183 is 128.0
11:33 ninjax INFO    : After transforms, the injection parameters are:
11:33 ninjax INFO    : {'mass_1_source': 1.878542006878928, 'mass_2_source': 1.7104055068051918, 's1_z': 0.041510741410676455, 's2_z': 0.03250901114685001, 'cos_iota': 0.5495740507874673, 'd_L': 269.98272177279813, 't_c': 0.014371149966099367, 'phase_c': 5.816439222500714, 'psi': 0.48845073097357583, 'ra': 2.4391942157935906, 'sin_dec': 0.2579575102680183, 'q': 0.910496278785331, 'M_c': 1.6552962132824183, 'eta': 0.24945130651905642, 'iota': Array(0.98894202, dtype=float64, weak_type=True), 'dec': Array(0.26090757, dtype=float64, weak_type=True), 'lambda_1': 114.45718015399436, 'lambda_2': 201.62753413707705}
11:33 ninjax INFO    : The trial injection parameters are {'M_c': 1.6552962132824183, 'eta': 0.24945130651905642, 's1_z': 0.041510741410676455, 's2_z': 0.03250901114685001, 'lambda_1': 114.45718015399436, 'lambda_2': 201.62753413707705, 'd_L': 269.98272177279813, 'phase_c': 5.816439222500714, 'iota': 0.9889420215725199, 't_c': 0.014371149966099367, 'psi': 0.48845073097357583, 'ra': 2.4391942157935906, 'dec': 0.26090756774393}
11:33 ninjax INFO    : Injecting signals . . .
11:33 ninjax INFO    : self.ifos
11:33 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
11:33 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:33 ninjax INFO    : [ 4.26629153e-23+2.64773251e-23j  6.19883232e-23-2.76950662e-23j
 -1.03920724e-24+5.79454295e-23j ...
 -1.36394336e-23-1.85125450e-23j -2.80097373e-23+1.69540984e-23j
  4.85433979e-25+2.51070240e-24j]
11:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
11:33 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:33 ninjax INFO    : [ 1.99424873e-24-8.87859977e-24j -5.69308119e-24+3.96516267e-23j
 -3.86227633e-23-1.90158849e-23j ...
  2.40068194e-23-1.88309786e-23j -5.74581311e-24-1.39164752e-23j
 -8.18126599e-24-3.35128938e-24j]
11:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
11:33 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:33 ninjax INFO    : [ 6.57659785e-23+2.00856248e-23j -3.97436431e-23+1.42688656e-24j
 -1.16133844e-22+5.63592502e-23j ...
  4.06436591e-24-2.71062540e-23j -1.76216030e-23+2.59358001e-23j
 -5.19722975e-24+2.00295100e-23j]
11:33 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
11:33 ninjax INFO    : SNR for ifo H1 is 7.400099998713074
11:33 ninjax INFO    : SNR for ifo L1 is 9.803388665267104
11:33 ninjax INFO    : SNR for ifo V1 is 10.967563632520934
11:33 ninjax INFO    : The network SNR is 16.46679572189552
11:33 ninjax INFO    : Network SNR passes threshold
11:33 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
11:33 ninjax INFO    :    mass_1_source: 1.878542006878928
11:33 ninjax INFO    :    mass_2_source: 1.7104055068051918
11:33 ninjax INFO    :    s1_z: 0.041510741410676455
11:33 ninjax INFO    :    s2_z: 0.03250901114685001
11:33 ninjax INFO    :    cos_iota: 0.5495740507874673
11:33 ninjax INFO    :    d_L: 269.98272177279813
11:33 ninjax INFO    :    t_c: 0.014371149966099367
11:33 ninjax INFO    :    phase_c: 5.816439222500714
11:33 ninjax INFO    :    psi: 0.48845073097357583
11:33 ninjax INFO    :    ra: 2.4391942157935906
11:33 ninjax INFO    :    sin_dec: 0.2579575102680183
11:33 ninjax INFO    :    q: 0.910496278785331
11:33 ninjax INFO    :    M_c: 1.6552962132824183
11:33 ninjax INFO    :    eta: 0.24945130651905642
11:33 ninjax INFO    :    iota: 0.9889420215725199
11:33 ninjax INFO    :    dec: 0.26090756774393
11:33 ninjax INFO    :    lambda_1: 114.45718015399436
11:33 ninjax INFO    :    lambda_2: 201.62753413707705
11:33 ninjax INFO    :    H1_SNR: 7.400099998713074
11:33 ninjax INFO    :    L1_SNR: 9.803388665267104
11:33 ninjax INFO    :    V1_SNR: 10.967563632520934
11:33 ninjax INFO    :    network_SNR: 16.46679572189552
11:33 ninjax INFO    :    epoch: 126.0
11:33 ninjax INFO    :    gmst: 2.7288901910520846
11:33 ninjax INFO    :    duration: 128.0
11:33 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
11:33 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
11:33 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
11:35 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 148.38776683807373 seconds = 2.4731294473012286 minutes
11:35 ninjax INFO    : The priors are not modified after their initialization
11:35 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
11:35 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
11:35 ninjax INFO    : sample: {'M_c': Array([2.421592  , 1.86516073, 1.09004304], dtype=float64), 'q': Array([0.13991979, 0.41454773, 0.33143645], dtype=float64), 's1_z': Array([-0.03621399,  0.04986682,  0.04396795], dtype=float64), 's2_z': Array([-0.03058563, -0.00074395,  0.04157221], dtype=float64), 'lambda_1': Array([4984.9733069 , 3029.56632679, 2875.77604052], dtype=float64), 'lambda_2': Array([3293.66373029, 1168.28701585,  637.78332261], dtype=float64), 'cos_iota': Array([-0.58005385, -0.79538991, -0.52566909], dtype=float64), 'd_L': Array([733.15016645, 835.08581474, 723.36252076], dtype=float64), 't_c': Array([ 0.05297834, -0.01721718,  0.00046755], dtype=float64), 'phase_c': Array([1.91449168, 0.82685992, 0.78287699], dtype=float64), 'psi': Array([3.0003682 , 0.54868796, 2.71790927], dtype=float64), 'ra': Array([5.44773488, 1.23097241, 1.93132173], dtype=float64), 'sin_dec': Array([ 0.95651191, -0.30473546,  0.7126092 ], dtype=float64)}
11:35 ninjax INFO    : log_prob: [-30.81875145 -25.67947423 -21.17847576]
11:35 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.878542006878928, 'mass_2_source': 1.7104055068051918, 's1_z': 0.041510741410676455, 's2_z': 0.03250901114685001, 'cos_iota': 0.5495740507874673, 'd_L': 269.98272177279813, 't_c': 0.014371149966099367, 'phase_c': 5.816439222500714, 'psi': 0.48845073097357583, 'ra': 2.4391942157935906, 'sin_dec': 0.2579575102680183, 'q': 0.910496278785331, 'M_c': 1.6552962132824183, 'eta': 0.24945130651905642, 'iota': Array(0.98894202, dtype=float64, weak_type=True), 'dec': Array(0.26090757, dtype=float64, weak_type=True), 'lambda_1': 114.45718015399436, 'lambda_2': 201.62753413707705, 'H1_SNR': 7.400099998713074, 'L1_SNR': 9.803388665267104, 'V1_SNR': 10.967563632520934, 'network_SNR': 16.46679572189552, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
11:35 ninjax INFO    : log_prob at the injection parameters is: 109.32848614098232
11:35 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
11:35 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
11:35 ninjax INFO    : Ninjax setup complete.
11:35 ninjax INFO    : Saving output to ./Aplus/injection_29/
11:35 ninjax INFO    : Using polynomial learning rate scheduler
11:35 ninjax INFO    : The hyperparameters passed to flowMC and jim are
11:35 ninjax INFO    :    n_loop_training: 200
11:35 ninjax INFO    :    n_loop_production: 10
11:35 ninjax INFO    :    n_local_steps: 100
11:35 ninjax INFO    :    n_global_steps: 1000
11:35 ninjax INFO    :    n_epochs: 25
11:35 ninjax INFO    :    n_chains: 1000
11:35 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x14c70fb6fbe0>
11:35 ninjax INFO    :    max_samples: 50000
11:35 ninjax INFO    :    momentum: 0.9
11:35 ninjax INFO    :    batch_size: 30000
11:35 ninjax INFO    :    use_global: True
11:35 ninjax INFO    :    keep_quantile: 0.0
11:35 ninjax INFO    :    train_thinning: 10
11:35 ninjax INFO    :    output_thinning: 50
11:35 ninjax INFO    :    n_sample_max: 10000
11:35 ninjax INFO    :    num_layers: 10
11:35 ninjax INFO    :    hidden_size: [128, 128]
11:35 ninjax INFO    :    num_bins: 8
11:35 ninjax INFO    :    save_training_chains: False
11:35 ninjax INFO    :    eps_mass_matrix: 1e-05
11:35 ninjax INFO    :    use_scheduler: True
11:35 ninjax INFO    :    use_temperature: False
11:35 ninjax INFO    :    which_temperature_schedule: exponential
11:35 ninjax INFO    :    starting_temperature: 2.0
11:35 ninjax INFO    :    stop_tempering_iteration: 75
11:35 ninjax INFO    :    stopping_criterion_global_acc: 0.1
11:35 ninjax INFO    :    stopping_criterion_loss: -inf
11:35 ninjax INFO    :    nf_model_kwargs: {}
11:35 ninjax INFO    :    local sampler arg not shown (pretty print)
11:35 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[ 3.92346131e-23  6.14559608e-23  2.25424715e-24  2.28849117e-24
  6.94416841e-23  4.03805259e-23  2.68959162e-23 -8.83915530e-25
 -5.17174630e-23  1.52567353e-23]
[ 2.63833578e-23 -2.43086368e-23  5.88907935e-23  9.25360399e-23
 -9.30997529e-23  5.30667420e-24  1.23011986e-23 -1.70422041e-23
  6.44677643e-23 -1.01589056e-23]
Checking the noise that was generated in inject_signal ifo:
[ 1.41616921e-24 -1.30026966e-24 -3.69374941e-23 -1.49643763e-23
 -2.84713613e-23  1.07426521e-22  4.75184859e-23 -2.85608860e-23
  1.57738916e-23  5.82123270e-24]
[-4.37212755e-24  4.08034813e-23 -2.32306861e-23 -5.82963748e-24
 -3.58703305e-23  5.68446514e-23 -7.05700532e-23 -1.18439878e-23
 -5.00986347e-23 -3.40792676e-23]
Checking the noise that was generated in inject_signal ifo:
[ 7.21179831e-23 -3.78252499e-23 -1.21998663e-22 -6.31587825e-23
  5.90238847e-23  6.97408758e-23  1.72789145e-24  2.89647111e-23
 -4.75793960e-23  1.42184436e-23]
[ 2.11949933e-23 -4.72618972e-24  5.36934585e-23  4.07004759e-24
  2.26195305e-23 -2.20655909e-23 -4.68618396e-23  5.08577661e-23
 -2.66833377e-25  1.44077609e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.11170387268066406 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.878542006878928, 'mass_2_source': 1.7104055068051918, 's1_z': 0.041510741410676455, 's2_z': 0.03250901114685001, 'cos_iota': 0.5495740507874673, 'd_L': 269.98272177279813, 't_c': 0.014371149966099367, 'phase_c': 5.816439222500714, 'psi': 0.48845073097357583, 'ra': 2.4391942157935906, 'sin_dec': 0.2579575102680183, 'q': 0.910496278785331, 'M_c': 1.6552962132824183, 'eta': 0.24945130651905642, 'iota': Array(0.98894202, dtype=float64, weak_type=True), 'dec': Array(0.26090757, dtype=float64, weak_type=True), 'lambda_1': 114.45718015399436, 'lambda_2': 201.62753413707705, 'H1_SNR': 7.400099998713074, 'L1_SNR': 9.803388665267104, 'V1_SNR': 10.967563632520934, 'network_SNR': 16.46679572189552, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5218536853790283 seconds
Time for h_sky_low and h_sky_center: 5.481888771057129 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.702092170715332
Going to compute coefficients . . .
Time for computing coefficients: 126.81748962402344 seconds
Time for computing coefficients: 7.11218523979187 seconds
Time for computing coefficients: 7.081616163253784 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:01<6:41:56, 121.19s/it]Tuning global sampler:   1%|          | 2/200 [02:05<2:53:38, 52.62s/it] Tuning global sampler:   2%|▏         | 3/200 [02:10<1:40:48, 30.70s/it]Tuning global sampler:   2%|▏         | 4/200 [02:15<1:06:39, 20.41s/it]Tuning global sampler:   2%|▎         | 5/200 [02:20<48:49, 15.02s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:25<37:09, 11.49s/it]Tuning global sampler:   4%|▎         | 7/200 [02:29<29:41,  9.23s/it]Tuning global sampler:   4%|▍         | 8/200 [02:34<24:52,  7.77s/it]Tuning global sampler:   4%|▍         | 9/200 [02:38<21:32,  6.77s/it]Tuning global sampler:   5%|▌         | 10/200 [02:43<19:09,  6.05s/it]Tuning global sampler:   6%|▌         | 11/200 [02:48<17:42,  5.62s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:37,  5.31s/it]Tuning global sampler:   6%|▋         | 13/200 [02:57<15:50,  5.09s/it]Tuning global sampler:   7%|▋         | 14/200 [03:01<15:21,  4.96s/it]Tuning global sampler:   8%|▊         | 15/200 [03:06<15:00,  4.86s/it]Tuning global sampler:   8%|▊         | 16/200 [03:11<14:43,  4.80s/it]Tuning global sampler:   8%|▊         | 17/200 [03:15<14:30,  4.76s/it]Tuning global sampler:   9%|▉         | 18/200 [03:20<14:19,  4.72s/it]Tuning global sampler:  10%|▉         | 19/200 [03:25<14:10,  4.70s/it]Tuning global sampler:  10%|█         | 20/200 [03:29<14:04,  4.69s/it]Tuning global sampler:  10%|█         | 21/200 [03:34<13:58,  4.68s/it]Tuning global sampler:  11%|█         | 22/200 [03:39<13:49,  4.66s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:43<13:43,  4.65s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:48<13:33,  4.62s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:54<14:47,  5.07s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:58<14:07,  4.87s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:03<14:02,  4.87s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:09<14:30,  5.06s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:13<13:51,  4.86s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:18<13:32,  4.78s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:22<13:07,  4.66s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:27<13:23,  4.78s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:32<13:44,  4.94s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:37<13:10,  4.76s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:42<13:28,  4.90s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:46<12:58,  4.75s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:51<12:35,  4.64s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:55<12:19,  4.56s/it]Tuning global sampler:  20%|█▉        | 39/200 [05:00<12:11,  4.55s/it]Tuning global sampler:  20%|██        | 40/200 [05:04<12:00,  4.50s/it]Tuning global sampler:  20%|██        | 41/200 [05:11<13:50,  5.22s/it]Tuning global sampler:  21%|██        | 42/200 [05:15<13:05,  4.97s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:20<12:33,  4.80s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:25<12:54,  4.96s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:30<12:35,  4.88s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:34<12:08,  4.73s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:39<11:48,  4.63s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:44<11:59,  4.74s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:48<12:00,  4.77s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:53<11:38,  4.66s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:57<11:22,  4.58s/it]Tuning global sampler:  26%|██▌       | 52/200 [06:02<11:11,  4.54s/it]Tuning global sampler:  26%|██▋       | 53/200 [06:06<11:20,  4.63s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:11<11:06,  4.56s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:15<10:52,  4.50s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:20<10:42,  4.46s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:24<10:35,  4.45s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:28<10:29,  4.44s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:33<10:24,  4.43s/it]Tuning global sampler:  30%|███       | 60/200 [06:37<10:19,  4.43s/it]Tuning global sampler:  30%|███       | 61/200 [06:42<10:14,  4.42s/it]Tuning global sampler:  31%|███       | 62/200 [06:46<10:09,  4.42s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:50<10:04,  4.41s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:56<10:39,  4.70s/it]Tuning global sampler:  32%|███▎      | 65/200 [07:00<10:22,  4.61s/it]Tuning global sampler:  33%|███▎      | 66/200 [07:05<10:12,  4.57s/it]Tuning global sampler:  34%|███▎      | 67/200 [07:09<09:59,  4.51s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:13<09:50,  4.47s/it]Tuning global sampler:  34%|███▍      | 69/200 [07:18<09:43,  4.45s/it]Tuning global sampler:  35%|███▌      | 70/200 [07:22<09:37,  4.45s/it]Tuning global sampler:  36%|███▌      | 71/200 [07:27<09:33,  4.44s/it]Tuning global sampler:  36%|███▌      | 72/200 [07:31<09:28,  4.44s/it]Tuning global sampler:  36%|███▋      | 73/200 [07:36<09:25,  4.45s/it]Tuning global sampler:  37%|███▋      | 74/200 [07:40<09:19,  4.44s/it]Tuning global sampler:  38%|███▊      | 75/200 [07:45<09:15,  4.45s/it]Tuning global sampler:  38%|███▊      | 76/200 [07:49<09:10,  4.44s/it]Tuning global sampler:  38%|███▊      | 77/200 [07:53<09:04,  4.42s/it]Tuning global sampler:  39%|███▉      | 78/200 [07:58<08:58,  4.41s/it]Tuning global sampler:  40%|███▉      | 79/200 [08:02<08:53,  4.41s/it]Tuning global sampler:  40%|████      | 80/200 [08:07<08:49,  4.41s/it]Tuning global sampler:  40%|████      | 81/200 [08:11<08:45,  4.42s/it]Tuning global sampler:  40%|████      | 81/200 [08:15<12:08,  6.12s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.21s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.21s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.21s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.21s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.21s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.21s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.21s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.21s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]
11:44 ninjax INFO    : Saving samples to ./Aplus/injection_29/results_training.npz
11:44 ninjax INFO    : Saving the NF
11:44 ninjax INFO    : Time taken: 534.5772120952606 seconds (8.909620201587677 minutes)
11:44 ninjax INFO    : Creating the final corner plot
11:44 ninjax INFO    : Dumping the final production chains
11:44 ninjax INFO    : Chains shape is: (13, 220000)
11:45 ninjax INFO    : Key: M_c: ESS = 23622, Rhat = 1.0258913200622028
11:45 ninjax INFO    : Key: q: ESS = 18115, Rhat = 1.0349283957677955
11:45 ninjax INFO    : Key: s1_z: ESS = 20243, Rhat = 1.0306633399693348
11:45 ninjax INFO    : Key: s2_z: ESS = 19838, Rhat = 1.0307837575815435
11:45 ninjax INFO    : Key: lambda_1: ESS = 26941, Rhat = 1.0237686408010247
11:45 ninjax INFO    : Key: lambda_2: ESS = 29158, Rhat = 1.022129718129859
11:45 ninjax INFO    : Key: cos_iota: ESS = 17344, Rhat = 1.0357317599481146
11:45 ninjax INFO    : Key: d_L: ESS = 17118, Rhat = 1.0360713921015308
11:45 ninjax INFO    : Key: t_c: ESS = 22135, Rhat = 1.0285855915462803
11:45 ninjax INFO    : Key: phase_c: ESS = 28395, Rhat = 1.022943901366231
11:45 ninjax INFO    : Key: psi: ESS = 31035, Rhat = 1.0210342096902263
11:45 ninjax INFO    : Key: ra: ESS = 29013, Rhat = 1.0212935302498618
11:45 ninjax INFO    : Key: sin_dec: ESS = 21529, Rhat = 1.0289237839924588
11:45 ninjax INFO    : Key: eta: ESS = 18115, Rhat = 1.0349283957677955
11:45 ninjax INFO    : Key: iota: ESS = 17344, Rhat = 1.0357317599481146
11:45 ninjax INFO    : Key: dec: ESS = 21529, Rhat = 1.0289237839924588
11:45 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.647 +/- 0.218
q: 0.747 +/- 0.233
s1_z: 0.016 +/- 0.029
s2_z: 0.012 +/- 0.030
lambda_1: 1896.889 +/- 1467.924
lambda_2: 2007.056 +/- 1489.125
cos_iota: 0.343 +/- 0.500
d_L: 647.051 +/- 236.095
t_c: 0.005 +/- 0.029
phase_c: 3.214 +/- 1.759
psi: 1.531 +/- 0.882
ra: 2.642 +/- 1.054
sin_dec: -0.072 +/- 0.525
Log probability: 31.598 +/- 49.021
Local acceptance: 0.976 +/- 0.153
Global acceptance: 0.013 +/- 0.114
Max loss: 3350.914, Min loss: 6.402
Production summary
==========
M_c: 1.655 +/- 0.000
q: 0.906 +/- 0.064
s1_z: 0.039 +/- 0.009
s2_z: 0.037 +/- 0.010
lambda_1: 293.093 +/- 377.347
lambda_2: 386.174 +/- 484.406
cos_iota: 0.753 +/- 0.192
d_L: 349.013 +/- 75.938
t_c: 0.014 +/- 0.001
phase_c: 3.156 +/- 1.779
psi: 1.498 +/- 0.869
ra: 2.439 +/- 0.007
sin_dec: 0.240 +/- 0.025
Log probability: 105.028 +/- 2.885
Local acceptance: 0.926 +/- 0.262
Global acceptance: 0.107 +/- 0.309
DONE

JOB STATISTICS
==============
Job ID: 10923062
Cluster: snellius
User/Group: twouters2/twouters2
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 00:10:51
CPU Efficiency: 5.51% of 03:16:48 core-walltime
Job Wall-clock time: 00:12:18
Memory Utilized: 4.46 GB
Memory Efficiency: 44.58% of 10.00 GB (10.00 GB/node)
