Wed Apr  2 11:33:00 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
11:33 ninjax INFO    : Checking and setting outdir
11:33 ninjax INFO    : Found generation prior file ./Aplus/injection_18/generation_prior.prior
11:33 ninjax INFO    : The outdir is set to ./Aplus/injection_18
11:33 ninjax INFO    : Loading the given config
11:33 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
11:33 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
11:33 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/jester_hard/Aplus/injection_18/complete_config.json
11:33 ninjax INFO    : No seed specified. Generating a random seed: 628181
11:33 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 499273
11:33 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 814932
11:33 ninjax INFO    : Loading the priors
11:33 ninjax INFO    : Setting up the prior
11:33 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
11:33 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
11:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
11:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
11:33 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
11:33 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
11:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
11:33 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
11:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
11:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
11:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
11:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
11:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
11:33 ninjax INFO    : Setting up the generation prior
11:33 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.4, naming=["mass_1_source"])
11:33 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.4, naming=["mass_2_source"])
11:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
11:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
11:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
11:33 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
11:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
11:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
11:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
11:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
11:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
11:33 ninjax INFO    : Finished prior setup
11:33 ninjax INFO    : Setting the transforms
11:33 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
11:33 ninjax INFO    : transforms_str_list has 3 elements
11:33 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
11:33 ninjax INFO    : Setting the likelihood
11:33 ninjax INFO    : GW likelihood provided, setting up the GW pipe
11:33 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz
11:33 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz for BNS injections
11:33 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
11:33 ninjax INFO    : self.is_BNS_run is True
11:33 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
11:33 ninjax INFO    : GW run is an injection
11:33 ninjax INFO    : Setting up GW injection . . . 
11:33 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
11:33 ninjax INFO    : Generating new injection
11:33 ninjax INFO    : Sanity check: generated parameters:
11:33 ninjax INFO    : {'mass_1_source': 1.7838156222538932, 'mass_2_source': 1.1793520721134187, 's1_z': 0.031140870050577196, 's2_z': -0.00034379319822861604, 'cos_iota': 0.3568160002863583, 'd_L': 209.6719231713642, 't_c': 0.06621734042557215, 'phase_c': 2.7094180143663458, 'psi': 0.2984626557185366, 'ra': 4.944186158117949, 'sin_dec': -0.18349533435292287}
11:33 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz . . . 
11:33 ninjax INFO    : Injected lambda_1: 157.43081019669825
11:33 ninjax INFO    : Injected lambda_2: 1500.7518148396512
11:33 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.3168846124233793 is 256.0
11:33 ninjax INFO    : After transforms, the injection parameters are:
11:33 ninjax INFO    : {'mass_1_source': 1.7838156222538932, 'mass_2_source': 1.1793520721134187, 's1_z': 0.031140870050577196, 's2_z': -0.00034379319822861604, 'cos_iota': 0.3568160002863583, 'd_L': 209.6719231713642, 't_c': 0.06621734042557215, 'phase_c': 2.7094180143663458, 'psi': 0.2984626557185366, 'ra': 4.944186158117949, 'sin_dec': -0.18349533435292287, 'q': 0.6611401186313637, 'M_c': 1.3168846124233793, 'eta': 0.2395967799851326, 'iota': Array(1.20593902, dtype=float64, weak_type=True), 'dec': Array(-0.18454099, dtype=float64, weak_type=True), 'lambda_1': 157.43081019669825, 'lambda_2': 1500.7518148396512}
11:33 ninjax INFO    : The trial injection parameters are {'M_c': 1.3168846124233793, 'eta': 0.2395967799851326, 's1_z': 0.031140870050577196, 's2_z': -0.00034379319822861604, 'lambda_1': 157.43081019669825, 'lambda_2': 1500.7518148396512, 'd_L': 209.6719231713642, 'phase_c': 2.7094180143663458, 'iota': 1.2059390172634419, 't_c': 0.06621734042557215, 'psi': 0.2984626557185366, 'ra': 4.944186158117949, 'dec': -0.18454098771653218}
11:33 ninjax INFO    : Injecting signals . . .
11:33 ninjax INFO    : self.ifos
11:33 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
11:33 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
11:33 ninjax INFO    : [-8.69414018e-23+6.07981450e-23j  2.09720917e-23-1.92075861e-23j
  1.94991098e-23+6.56315473e-23j ...
 -3.56449491e-23+6.55920613e-24j  4.47027945e-23+6.80974251e-24j
  1.45793609e-23-2.05479831e-23j]
11:33 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
11:33 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
11:33 ninjax INFO    : [ 1.28074431e-22-4.20403217e-23j -8.12072713e-23-4.12801270e-23j
 -3.37165357e-23-3.13725111e-23j ...
  3.26361253e-23-4.76261968e-23j -2.54199552e-23+2.37583759e-23j
 -1.53937694e-23-5.00940377e-23j]
11:33 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
11:33 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
11:33 ninjax INFO    : [-1.87189787e-24-4.60877002e-23j -9.51667732e-23-4.33736245e-23j
  2.80266164e-23-1.00844341e-23j ...
  9.18243305e-24+1.70321980e-23j  1.59024268e-23+9.10118774e-23j
  3.01772153e-24-6.67830313e-23j]
11:33 ninjax INFO    : [1.43183556e-46 1.43058540e-46 1.42935095e-46 ... 6.39793039e-47
 6.39795354e-47 6.39797668e-47]
11:33 ninjax INFO    : SNR for ifo H1 is 6.273644370325542
11:33 ninjax INFO    : SNR for ifo L1 is 12.299313663259358
11:33 ninjax INFO    : SNR for ifo V1 is 6.570482995861558
11:33 ninjax INFO    : The network SNR is 15.290617288764427
11:33 ninjax INFO    : Network SNR passes threshold
11:33 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
11:33 ninjax INFO    :    mass_1_source: 1.7838156222538932
11:33 ninjax INFO    :    mass_2_source: 1.1793520721134187
11:33 ninjax INFO    :    s1_z: 0.031140870050577196
11:33 ninjax INFO    :    s2_z: -0.00034379319822861604
11:33 ninjax INFO    :    cos_iota: 0.3568160002863583
11:33 ninjax INFO    :    d_L: 209.6719231713642
11:33 ninjax INFO    :    t_c: 0.06621734042557215
11:33 ninjax INFO    :    phase_c: 2.7094180143663458
11:33 ninjax INFO    :    psi: 0.2984626557185366
11:33 ninjax INFO    :    ra: 4.944186158117949
11:33 ninjax INFO    :    sin_dec: -0.18349533435292287
11:33 ninjax INFO    :    q: 0.6611401186313637
11:33 ninjax INFO    :    M_c: 1.3168846124233793
11:33 ninjax INFO    :    eta: 0.2395967799851326
11:33 ninjax INFO    :    iota: 1.2059390172634419
11:33 ninjax INFO    :    dec: -0.18454098771653218
11:33 ninjax INFO    :    lambda_1: 157.43081019669825
11:33 ninjax INFO    :    lambda_2: 1500.7518148396512
11:33 ninjax INFO    :    H1_SNR: 6.273644370325542
11:33 ninjax INFO    :    L1_SNR: 12.299313663259358
11:33 ninjax INFO    :    V1_SNR: 6.570482995861558
11:33 ninjax INFO    :    network_SNR: 15.290617288764427
11:33 ninjax INFO    :    epoch: 254.0
11:33 ninjax INFO    :    gmst: 2.7288901910520846
11:33 ninjax INFO    :    duration: 256.0
11:33 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
11:33 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
11:33 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
11:36 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 187.04306554794312 seconds = 3.117384425799052 minutes
11:36 ninjax INFO    : The priors are not modified after their initialization
11:36 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
11:36 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
11:36 ninjax INFO    : sample: {'M_c': Array([1.75122241, 1.35439654, 2.52040789], dtype=float64), 'q': Array([0.43752696, 0.69856507, 0.99715623], dtype=float64), 's1_z': Array([-0.01089784,  0.02642921,  0.04782933], dtype=float64), 's2_z': Array([-0.03779695,  0.03771869,  0.00382123], dtype=float64), 'lambda_1': Array([1874.93733635, 4805.56497094, 4204.85000365], dtype=float64), 'lambda_2': Array([4362.20604341, 4876.33692882, 1130.27253724], dtype=float64), 'cos_iota': Array([-0.94339381, -0.6290743 ,  0.69514639], dtype=float64), 'd_L': Array([876.78543702, 599.69957913, 807.55159478], dtype=float64), 't_c': Array([0.02970541, 0.05948153, 0.02036394], dtype=float64), 'phase_c': Array([1.23327623, 2.99746591, 0.99256599], dtype=float64), 'psi': Array([2.81898724, 1.71062212, 2.59321559], dtype=float64), 'ra': Array([0.70592064, 4.42027685, 5.65519869], dtype=float64), 'sin_dec': Array([ 0.60316206, -0.05851307, -0.75943359], dtype=float64)}
11:36 ninjax INFO    : log_prob: [-56.17940653 -36.08852952 -51.91243087]
11:36 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.7838156222538932, 'mass_2_source': 1.1793520721134187, 's1_z': 0.031140870050577196, 's2_z': -0.00034379319822861604, 'cos_iota': 0.3568160002863583, 'd_L': 209.6719231713642, 't_c': 0.06621734042557215, 'phase_c': 2.7094180143663458, 'psi': 0.2984626557185366, 'ra': 4.944186158117949, 'sin_dec': -0.18349533435292287, 'q': 0.6611401186313637, 'M_c': 1.3168846124233793, 'eta': 0.2395967799851326, 'iota': Array(1.20593902, dtype=float64, weak_type=True), 'dec': Array(-0.18454099, dtype=float64, weak_type=True), 'lambda_1': 157.43081019669825, 'lambda_2': 1500.7518148396512, 'H1_SNR': 6.273644370325542, 'L1_SNR': 12.299313663259358, 'V1_SNR': 6.570482995861558, 'network_SNR': 15.290617288764427, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
11:36 ninjax INFO    : log_prob at the injection parameters is: 86.71625109013578
11:36 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
11:36 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
11:36 ninjax INFO    : Ninjax setup complete.
11:36 ninjax INFO    : Saving output to ./Aplus/injection_18/
11:36 ninjax INFO    : Using polynomial learning rate scheduler
11:36 ninjax INFO    : The hyperparameters passed to flowMC and jim are
11:36 ninjax INFO    :    n_loop_training: 200
11:36 ninjax INFO    :    n_loop_production: 10
11:36 ninjax INFO    :    n_local_steps: 100
11:36 ninjax INFO    :    n_global_steps: 1000
11:36 ninjax INFO    :    n_epochs: 25
11:36 ninjax INFO    :    n_chains: 1000
11:36 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x148a3e6164d0>
11:36 ninjax INFO    :    max_samples: 50000
11:36 ninjax INFO    :    momentum: 0.9
11:36 ninjax INFO    :    batch_size: 30000
11:36 ninjax INFO    :    use_global: True
11:36 ninjax INFO    :    keep_quantile: 0.0
11:36 ninjax INFO    :    train_thinning: 10
11:36 ninjax INFO    :    output_thinning: 50
11:36 ninjax INFO    :    n_sample_max: 10000
11:36 ninjax INFO    :    num_layers: 10
11:36 ninjax INFO    :    hidden_size: [128, 128]
11:36 ninjax INFO    :    num_bins: 8
11:36 ninjax INFO    :    save_training_chains: False
11:36 ninjax INFO    :    eps_mass_matrix: 1e-05
11:36 ninjax INFO    :    use_scheduler: True
11:36 ninjax INFO    :    use_temperature: False
11:36 ninjax INFO    :    which_temperature_schedule: exponential
11:36 ninjax INFO    :    starting_temperature: 2.0
11:36 ninjax INFO    :    stop_tempering_iteration: 75
11:36 ninjax INFO    :    stopping_criterion_global_acc: 0.1
11:36 ninjax INFO    :    stopping_criterion_loss: -inf
11:36 ninjax INFO    :    nf_model_kwargs: {}
11:36 ninjax INFO    :    local sampler arg not shown (pretty print)
11:36 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[-8.96304749e-23  2.38714188e-23  1.67856124e-23 -1.06362338e-22
 -8.25878144e-23 -1.15627049e-23  1.99952824e-23 -8.83052272e-23
  2.35938728e-23 -1.32860934e-23]
[ 6.18843788e-23 -1.92403000e-23  6.46116203e-23 -2.65814709e-24
  3.86362878e-23 -2.09719463e-23 -1.06371923e-22  4.96243424e-23
  6.18684491e-23  3.98153956e-23]
Checking the noise that was generated in inject_signal ifo:
[ 1.28853960e-22 -8.39821139e-23 -2.93341732e-23  3.46279535e-23
 -1.40662588e-22  4.16941902e-23  1.61069873e-23  4.68212093e-23
 -4.21790088e-23 -3.10780611e-25]
[-4.76723476e-23 -3.63189950e-23 -3.49908934e-23 -1.63532172e-23
  6.45968933e-23 -1.12599294e-22  3.36226307e-23  7.79449547e-23
  1.91599424e-23 -3.92274023e-23]
Checking the noise that was generated in inject_signal ifo:
[-4.28604506e-24 -9.18251038e-23  2.42173598e-23  5.28574994e-23
  7.75378519e-23 -9.22490279e-23  1.22397483e-22 -5.22483711e-23
  2.23753013e-23 -7.69922520e-23]
[-4.30826880e-23 -4.52931681e-23 -9.50636085e-24 -7.65257390e-23
  7.17097040e-23 -6.15693115e-23 -1.18010900e-22 -3.22710026e-24
 -9.52046965e-23  1.09404892e-22]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.17880964279174805 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.7838156222538932, 'mass_2_source': 1.1793520721134187, 's1_z': 0.031140870050577196, 's2_z': -0.00034379319822861604, 'cos_iota': 0.3568160002863583, 'd_L': 209.6719231713642, 't_c': 0.06621734042557215, 'phase_c': 2.7094180143663458, 'psi': 0.2984626557185366, 'ra': 4.944186158117949, 'sin_dec': -0.18349533435292287, 'q': 0.6611401186313637, 'M_c': 1.3168846124233793, 'eta': 0.2395967799851326, 'iota': Array(1.20593902, dtype=float64, weak_type=True), 'dec': Array(-0.18454099, dtype=float64, weak_type=True), 'lambda_1': 157.43081019669825, 'lambda_2': 1500.7518148396512, 'H1_SNR': 6.273644370325542, 'L1_SNR': 12.299313663259358, 'V1_SNR': 6.570482995861558, 'network_SNR': 15.290617288764427, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5034782886505127 seconds
Time for h_sky_low and h_sky_center: 5.571332931518555 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.6986677646636963
Going to compute coefficients . . .
Time for computing coefficients: 165.33999848365784 seconds
Time for computing coefficients: 7.147334098815918 seconds
Time for computing coefficients: 7.068436145782471 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:01<6:43:04, 121.53s/it]Tuning global sampler:   1%|          | 2/200 [02:07<2:55:48, 53.28s/it] Tuning global sampler:   2%|▏         | 3/200 [02:11<1:42:00, 31.07s/it]Tuning global sampler:   2%|▏         | 4/200 [02:16<1:07:23, 20.63s/it]Tuning global sampler:   2%|▎         | 5/200 [02:20<48:18, 14.86s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:25<36:48, 11.38s/it]Tuning global sampler:   4%|▎         | 7/200 [02:30<29:25,  9.15s/it]Tuning global sampler:   4%|▍         | 8/200 [02:34<24:40,  7.71s/it]Tuning global sampler:   4%|▍         | 9/200 [02:39<21:24,  6.73s/it]Tuning global sampler:   5%|▌         | 10/200 [02:43<19:04,  6.02s/it]Tuning global sampler:   6%|▌         | 11/200 [02:48<17:36,  5.59s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:36,  5.30s/it]Tuning global sampler:   6%|▋         | 13/200 [02:57<15:49,  5.08s/it]Tuning global sampler:   7%|▋         | 14/200 [03:02<15:21,  4.95s/it]Tuning global sampler:   8%|▊         | 15/200 [03:06<15:00,  4.87s/it]Tuning global sampler:   8%|▊         | 16/200 [03:11<14:42,  4.80s/it]Tuning global sampler:   8%|▊         | 17/200 [03:16<14:30,  4.76s/it]Tuning global sampler:   9%|▉         | 18/200 [03:20<14:22,  4.74s/it]Tuning global sampler:  10%|▉         | 19/200 [03:25<14:12,  4.71s/it]Tuning global sampler:  10%|█         | 20/200 [03:30<14:03,  4.69s/it]Tuning global sampler:  10%|█         | 21/200 [03:35<14:49,  4.97s/it]Tuning global sampler:  11%|█         | 22/200 [03:40<14:24,  4.86s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:44<14:06,  4.78s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:49<13:42,  4.68s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:53<13:23,  4.59s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:58<13:08,  4.53s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:02<12:56,  4.49s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:06<12:47,  4.46s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:11<12:38,  4.44s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:15<12:31,  4.42s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:20<12:26,  4.42s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:24<12:20,  4.41s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:28<12:13,  4.39s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:33<12:07,  4.38s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:37<12:03,  4.38s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:42<11:59,  4.38s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:46<11:54,  4.39s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:50<11:54,  4.41s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:55<11:48,  4.40s/it]Tuning global sampler:  20%|██        | 40/200 [05:00<12:32,  4.70s/it]Tuning global sampler:  20%|██        | 41/200 [05:05<12:12,  4.61s/it]Tuning global sampler:  21%|██        | 42/200 [05:09<11:57,  4.54s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:13<11:46,  4.50s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:18<11:36,  4.46s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:22<11:27,  4.43s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:26<11:21,  4.42s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:31<11:15,  4.41s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:35<11:09,  4.41s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:40<11:05,  4.41s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:44<11:00,  4.41s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:48<10:56,  4.41s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:53<10:52,  4.41s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:57<10:47,  4.40s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:02<10:41,  4.40s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:06<10:35,  4.38s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:10<10:29,  4.37s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:15<10:27,  4.39s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:19<10:23,  4.39s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:24<10:19,  4.40s/it]Tuning global sampler:  30%|███       | 60/200 [06:28<10:15,  4.39s/it]Tuning global sampler:  30%|███       | 61/200 [06:33<10:53,  4.70s/it]Tuning global sampler:  31%|███       | 62/200 [06:38<10:36,  4.61s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:42<10:24,  4.56s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:47<10:12,  4.51s/it]Tuning global sampler:  32%|███▎      | 65/200 [06:51<10:05,  4.48s/it]Tuning global sampler:  33%|███▎      | 66/200 [06:55<09:57,  4.46s/it]Tuning global sampler:  34%|███▎      | 67/200 [07:00<09:49,  4.43s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:04<09:45,  4.43s/it]Tuning global sampler:  34%|███▍      | 69/200 [07:09<09:40,  4.44s/it]Tuning global sampler:  35%|███▌      | 70/200 [07:13<09:36,  4.44s/it]Tuning global sampler:  36%|███▌      | 71/200 [07:18<09:32,  4.44s/it]Tuning global sampler:  36%|███▌      | 72/200 [07:22<09:27,  4.43s/it]Tuning global sampler:  36%|███▋      | 73/200 [07:26<09:23,  4.44s/it]Tuning global sampler:  37%|███▋      | 74/200 [07:31<09:19,  4.44s/it]Tuning global sampler:  38%|███▊      | 75/200 [07:35<09:15,  4.44s/it]Tuning global sampler:  38%|███▊      | 76/200 [07:40<09:10,  4.44s/it]Tuning global sampler:  38%|███▊      | 77/200 [07:44<09:04,  4.42s/it]Tuning global sampler:  39%|███▉      | 78/200 [07:49<08:58,  4.41s/it]Tuning global sampler:  40%|███▉      | 79/200 [07:53<08:54,  4.42s/it]Tuning global sampler:  40%|████      | 80/200 [07:57<08:50,  4.42s/it]Tuning global sampler:  40%|████      | 81/200 [08:02<08:46,  4.42s/it]Tuning global sampler:  41%|████      | 82/200 [08:07<09:19,  4.74s/it]Tuning global sampler:  42%|████▏     | 83/200 [08:12<09:04,  4.65s/it]Tuning global sampler:  42%|████▏     | 84/200 [08:16<08:52,  4.59s/it]Tuning global sampler:  42%|████▎     | 85/200 [08:21<08:42,  4.55s/it]Tuning global sampler:  43%|████▎     | 86/200 [08:25<08:34,  4.51s/it]Tuning global sampler:  44%|████▎     | 87/200 [08:30<08:27,  4.49s/it]Tuning global sampler:  44%|████▍     | 88/200 [08:34<08:20,  4.47s/it]Tuning global sampler:  44%|████▍     | 89/200 [08:38<08:13,  4.44s/it]Tuning global sampler:  45%|████▌     | 90/200 [08:43<08:08,  4.44s/it]Tuning global sampler:  46%|████▌     | 91/200 [08:47<08:03,  4.44s/it]Tuning global sampler:  46%|████▌     | 92/200 [08:52<07:59,  4.44s/it]Tuning global sampler:  46%|████▋     | 93/200 [08:56<07:55,  4.45s/it]Tuning global sampler:  47%|████▋     | 94/200 [09:01<07:51,  4.45s/it]Tuning global sampler:  47%|████▋     | 94/200 [09:05<10:15,  5.80s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.21s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.21s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.21s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.21s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.21s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.21s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.21s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.21s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]
11:46 ninjax INFO    : Saving samples to ./Aplus/injection_18/results_training.npz
11:46 ninjax INFO    : Saving the NF
11:46 ninjax INFO    : Time taken: 584.4748365879059 seconds (9.741247276465097 minutes)
11:46 ninjax INFO    : Creating the final corner plot
11:46 ninjax INFO    : Dumping the final production chains
11:46 ninjax INFO    : Chains shape is: (13, 220000)
11:46 ninjax INFO    : Key: M_c: ESS = 29774, Rhat = 1.021759042400078
11:46 ninjax INFO    : Key: q: ESS = 12331, Rhat = 1.0503872262888017
11:46 ninjax INFO    : Key: s1_z: ESS = 26569, Rhat = 1.0244762163050742
11:46 ninjax INFO    : Key: s2_z: ESS = 20000, Rhat = 1.0313484313695733
11:46 ninjax INFO    : Key: lambda_1: ESS = 26223, Rhat = 1.0239056770252692
11:46 ninjax INFO    : Key: lambda_2: ESS = 23349, Rhat = 1.0276236676540287
11:46 ninjax INFO    : Key: cos_iota: ESS = 16321, Rhat = 1.0381406943781384
11:46 ninjax INFO    : Key: d_L: ESS = 17652, Rhat = 1.0350584796652165
11:46 ninjax INFO    : Key: t_c: ESS = 27164, Rhat = 1.0232090094119983
11:46 ninjax INFO    : Key: phase_c: ESS = 18085, Rhat = 1.035369949032746
11:46 ninjax INFO    : Key: psi: ESS = 19405, Rhat = 1.0318395079864238
11:46 ninjax INFO    : Key: ra: ESS = 32429, Rhat = 1.020747607125009
11:46 ninjax INFO    : Key: sin_dec: ESS = 39889, Rhat = 1.016511218570171
11:46 ninjax INFO    : Key: eta: ESS = 12331, Rhat = 1.0503872262888017
11:46 ninjax INFO    : Key: iota: ESS = 16321, Rhat = 1.0381406943781384
11:46 ninjax INFO    : Key: dec: ESS = 39889, Rhat = 1.016506906429004
11:46 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.391 +/- 0.264
q: 0.695 +/- 0.233
s1_z: 0.002 +/- 0.028
s2_z: 0.004 +/- 0.028
lambda_1: 2108.083 +/- 1438.537
lambda_2: 2279.579 +/- 1406.155
cos_iota: 0.209 +/- 0.563
d_L: 638.012 +/- 241.257
t_c: 0.049 +/- 0.044
phase_c: 3.252 +/- 1.786
psi: 1.535 +/- 0.897
ra: 4.290 +/- 1.327
sin_dec: -0.005 +/- 0.382
Log probability: 20.318 +/- 40.934
Local acceptance: 0.902 +/- 0.297
Global acceptance: 0.017 +/- 0.129
Max loss: 22.864, Min loss: 8.864
Production summary
==========
M_c: 1.317 +/- 0.000
q: 0.828 +/- 0.107
s1_z: 0.009 +/- 0.025
s2_z: 0.005 +/- 0.027
lambda_1: 662.138 +/- 553.573
lambda_2: 1167.341 +/- 861.292
cos_iota: 0.785 +/- 0.176
d_L: 333.211 +/- 64.173
t_c: 0.067 +/- 0.001
phase_c: 3.144 +/- 1.806
psi: 1.560 +/- 0.908
ra: 4.944 +/- 0.009
sin_dec: -0.171 +/- 0.030
Log probability: 84.175 +/- 2.549
Local acceptance: 0.667 +/- 0.471
Global acceptance: 0.098 +/- 0.298
DONE

JOB STATISTICS
==============
Job ID: 10923051
Cluster: snellius
User/Group: twouters2/twouters2
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 00:12:13
CPU Efficiency: 5.54% of 03:40:32 core-walltime
Job Wall-clock time: 00:13:47
Memory Utilized: 4.77 GB
Memory Efficiency: 47.71% of 10.00 GB (10.00 GB/node)
