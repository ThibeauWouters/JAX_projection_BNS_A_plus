Wed Apr  2 11:33:00 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
11:33 ninjax INFO    : Checking and setting outdir
11:33 ninjax INFO    : Found generation prior file ./Aplus/injection_13/generation_prior.prior
11:33 ninjax INFO    : The outdir is set to ./Aplus/injection_13
11:33 ninjax INFO    : Loading the given config
11:33 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
11:33 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
11:33 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/jester_hard/Aplus/injection_13/complete_config.json
11:33 ninjax INFO    : No seed specified. Generating a random seed: 957919
11:33 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 967752
11:33 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 899891
11:33 ninjax INFO    : Loading the priors
11:33 ninjax INFO    : Setting up the prior
11:33 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
11:33 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
11:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
11:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
11:33 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
11:33 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
11:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
11:33 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
11:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
11:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
11:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
11:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
11:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
11:33 ninjax INFO    : Setting up the generation prior
11:33 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.4, naming=["mass_1_source"])
11:33 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.4, naming=["mass_2_source"])
11:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
11:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
11:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
11:33 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
11:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
11:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
11:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
11:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
11:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
11:33 ninjax INFO    : Finished prior setup
11:33 ninjax INFO    : Setting the transforms
11:33 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
11:33 ninjax INFO    : transforms_str_list has 3 elements
11:33 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
11:33 ninjax INFO    : Setting the likelihood
11:33 ninjax INFO    : GW likelihood provided, setting up the GW pipe
11:33 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz
11:33 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz for BNS injections
11:33 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
11:33 ninjax INFO    : self.is_BNS_run is True
11:33 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
11:33 ninjax INFO    : GW run is an injection
11:33 ninjax INFO    : Setting up GW injection . . . 
11:33 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
11:33 ninjax INFO    : Generating new injection
11:33 ninjax INFO    : Sanity check: generated parameters:
11:33 ninjax INFO    : {'mass_1_source': 2.2163063039509927, 'mass_2_source': 1.4574595453885735, 's1_z': -0.04534447133650876, 's2_z': 0.021918043698503503, 'cos_iota': 0.5567729875292606, 'd_L': 233.22618633507267, 't_c': -0.03338659053846903, 'phase_c': 3.1984738886519315, 'psi': 2.2647714011880606, 'ra': 0.16897591564196188, 'sin_dec': 0.3561828976620718}
11:33 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz . . . 
11:33 ninjax INFO    : Injected lambda_1: 33.90062297558173
11:33 ninjax INFO    : Injected lambda_2: 495.835820028886
11:33 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.6399011162943542 is 128.0
11:33 ninjax INFO    : After transforms, the injection parameters are:
11:33 ninjax INFO    : {'mass_1_source': 2.2163063039509927, 'mass_2_source': 1.4574595453885735, 's1_z': -0.04534447133650876, 's2_z': 0.021918043698503503, 'cos_iota': 0.5567729875292606, 'd_L': 233.22618633507267, 't_c': -0.03338659053846903, 'phase_c': 3.1984738886519315, 'psi': 2.2647714011880606, 'ra': 0.16897591564196188, 'sin_dec': 0.3561828976620718, 'q': 0.6576074538029203, 'M_c': 1.6399011162943542, 'eta': 0.23933341913965225, 'iota': Array(0.98030046, dtype=float64, weak_type=True), 'dec': Array(0.36417968, dtype=float64, weak_type=True), 'lambda_1': 33.90062297558173, 'lambda_2': 495.835820028886}
11:33 ninjax INFO    : The trial injection parameters are {'M_c': 1.6399011162943542, 'eta': 0.23933341913965225, 's1_z': -0.04534447133650876, 's2_z': 0.021918043698503503, 'lambda_1': 33.90062297558173, 'lambda_2': 495.835820028886, 'd_L': 233.22618633507267, 'phase_c': 3.1984738886519315, 'iota': 0.9803004634404142, 't_c': -0.03338659053846903, 'psi': 2.2647714011880606, 'ra': 0.16897591564196188, 'dec': 0.36417968385588895}
11:33 ninjax INFO    : Injecting signals . . .
11:33 ninjax INFO    : self.ifos
11:33 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
11:33 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:33 ninjax INFO    : [-4.39839815e-23+2.73116663e-23j -8.69323230e-23-4.67005988e-23j
  1.85158682e-23-6.21019705e-23j ...
 -8.48415147e-24-7.49057238e-24j -1.14567649e-23+6.89047146e-24j
  8.92096640e-24-2.15829050e-23j]
11:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
11:33 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:33 ninjax INFO    : [-7.02773163e-25-3.51881279e-23j  1.15319743e-23+3.41669912e-23j
 -6.00510526e-23+2.92553492e-23j ...
  2.05386283e-23+3.05036572e-24j  2.34034699e-23+1.69604148e-23j
 -1.18430802e-23+1.28759274e-23j]
11:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
11:33 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:33 ninjax INFO    : [ 9.12611402e-23+3.96850081e-23j -2.85861213e-23+5.21675564e-23j
  2.60348763e-23+7.42328334e-23j ...
  2.35661739e-23+1.38232123e-23j -7.83454479e-23-5.32674661e-23j
 -1.46345054e-23+2.69818873e-24j]
11:33 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
11:33 ninjax INFO    : SNR for ifo H1 is 18.079738926155265
11:33 ninjax INFO    : SNR for ifo L1 is 14.223748107363356
11:33 ninjax INFO    : SNR for ifo V1 is 5.809060673179823
11:33 ninjax INFO    : The network SNR is 23.726296714075314
11:33 ninjax INFO    : Network SNR passes threshold
11:33 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
11:33 ninjax INFO    :    mass_1_source: 2.2163063039509927
11:33 ninjax INFO    :    mass_2_source: 1.4574595453885735
11:33 ninjax INFO    :    s1_z: -0.04534447133650876
11:33 ninjax INFO    :    s2_z: 0.021918043698503503
11:33 ninjax INFO    :    cos_iota: 0.5567729875292606
11:33 ninjax INFO    :    d_L: 233.22618633507267
11:33 ninjax INFO    :    t_c: -0.03338659053846903
11:33 ninjax INFO    :    phase_c: 3.1984738886519315
11:33 ninjax INFO    :    psi: 2.2647714011880606
11:33 ninjax INFO    :    ra: 0.16897591564196188
11:33 ninjax INFO    :    sin_dec: 0.3561828976620718
11:33 ninjax INFO    :    q: 0.6576074538029203
11:33 ninjax INFO    :    M_c: 1.6399011162943542
11:33 ninjax INFO    :    eta: 0.23933341913965225
11:33 ninjax INFO    :    iota: 0.9803004634404142
11:33 ninjax INFO    :    dec: 0.36417968385588895
11:33 ninjax INFO    :    lambda_1: 33.90062297558173
11:33 ninjax INFO    :    lambda_2: 495.835820028886
11:33 ninjax INFO    :    H1_SNR: 18.079738926155265
11:33 ninjax INFO    :    L1_SNR: 14.223748107363356
11:33 ninjax INFO    :    V1_SNR: 5.809060673179823
11:33 ninjax INFO    :    network_SNR: 23.726296714075314
11:33 ninjax INFO    :    epoch: 126.0
11:33 ninjax INFO    :    gmst: 2.7288901910520846
11:33 ninjax INFO    :    duration: 128.0
11:33 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
11:33 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
11:33 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
11:35 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 144.01763367652893 seconds = 2.4002938946088155 minutes
11:35 ninjax INFO    : The priors are not modified after their initialization
11:35 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
11:35 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
11:35 ninjax INFO    : sample: {'M_c': Array([2.525545  , 1.72022256, 0.98627663], dtype=float64), 'q': Array([0.85265884, 0.48943794, 0.3974753 ], dtype=float64), 's1_z': Array([-0.04766666, -0.01347021, -0.04884939], dtype=float64), 's2_z': Array([0.02760154, 0.02942011, 0.04203015], dtype=float64), 'lambda_1': Array([1545.94838856,  981.86230693, 1376.98935448], dtype=float64), 'lambda_2': Array([1268.57497854, 3977.62000104, 1104.48163974], dtype=float64), 'cos_iota': Array([-0.28005272, -0.34317068, -0.35936551], dtype=float64), 'd_L': Array([590.01449639, 823.46434741, 758.2623988 ], dtype=float64), 't_c': Array([-0.09217865,  0.03842643,  0.0776867 ], dtype=float64), 'phase_c': Array([1.84675023, 6.27682468, 4.97651321], dtype=float64), 'psi': Array([2.45474578, 2.11318524, 2.59242805], dtype=float64), 'ra': Array([3.48087595, 4.85515469, 0.70808914], dtype=float64), 'sin_dec': Array([-0.79368847, -0.28035165,  0.99978557], dtype=float64)}
11:35 ninjax INFO    : log_prob: [-83.18063733 -13.28418702  -7.47713966]
11:35 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 2.2163063039509927, 'mass_2_source': 1.4574595453885735, 's1_z': -0.04534447133650876, 's2_z': 0.021918043698503503, 'cos_iota': 0.5567729875292606, 'd_L': 233.22618633507267, 't_c': -0.03338659053846903, 'phase_c': 3.1984738886519315, 'psi': 2.2647714011880606, 'ra': 0.16897591564196188, 'sin_dec': 0.3561828976620718, 'q': 0.6576074538029203, 'M_c': 1.6399011162943542, 'eta': 0.23933341913965225, 'iota': Array(0.98030046, dtype=float64, weak_type=True), 'dec': Array(0.36417968, dtype=float64, weak_type=True), 'lambda_1': 33.90062297558173, 'lambda_2': 495.835820028886, 'H1_SNR': 18.079738926155265, 'L1_SNR': 14.223748107363356, 'V1_SNR': 5.809060673179823, 'network_SNR': 23.726296714075314, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
11:35 ninjax INFO    : log_prob at the injection parameters is: 277.37703115171564
11:35 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
11:35 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
11:35 ninjax INFO    : Ninjax setup complete.
11:35 ninjax INFO    : Saving output to ./Aplus/injection_13/
11:35 ninjax INFO    : Using polynomial learning rate scheduler
11:35 ninjax INFO    : The hyperparameters passed to flowMC and jim are
11:35 ninjax INFO    :    n_loop_training: 200
11:35 ninjax INFO    :    n_loop_production: 10
11:35 ninjax INFO    :    n_local_steps: 100
11:35 ninjax INFO    :    n_global_steps: 1000
11:35 ninjax INFO    :    n_epochs: 25
11:35 ninjax INFO    :    n_chains: 1000
11:35 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x14ec8a2f7be0>
11:35 ninjax INFO    :    max_samples: 50000
11:35 ninjax INFO    :    momentum: 0.9
11:35 ninjax INFO    :    batch_size: 30000
11:35 ninjax INFO    :    use_global: True
11:35 ninjax INFO    :    keep_quantile: 0.0
11:35 ninjax INFO    :    train_thinning: 10
11:35 ninjax INFO    :    output_thinning: 50
11:35 ninjax INFO    :    n_sample_max: 10000
11:35 ninjax INFO    :    num_layers: 10
11:35 ninjax INFO    :    hidden_size: [128, 128]
11:35 ninjax INFO    :    num_bins: 8
11:35 ninjax INFO    :    save_training_chains: False
11:35 ninjax INFO    :    eps_mass_matrix: 1e-05
11:35 ninjax INFO    :    use_scheduler: True
11:35 ninjax INFO    :    use_temperature: False
11:35 ninjax INFO    :    which_temperature_schedule: exponential
11:35 ninjax INFO    :    starting_temperature: 2.0
11:35 ninjax INFO    :    stop_tempering_iteration: 75
11:35 ninjax INFO    :    stopping_criterion_global_acc: 0.1
11:35 ninjax INFO    :    stopping_criterion_loss: -inf
11:35 ninjax INFO    :    nf_model_kwargs: {}
11:35 ninjax INFO    :    local sampler arg not shown (pretty print)
11:35 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[-3.61097588e-23 -8.25035817e-23  1.23783742e-23 -9.01584109e-24
 -6.82137092e-24  6.53007828e-23  3.83153098e-23  2.50384746e-23
 -4.90476191e-23 -4.55720610e-23]
[ 3.02369519e-23 -5.38337804e-23 -6.78258355e-23 -1.48899016e-23
 -1.53671183e-23  5.01387709e-23 -4.61566498e-23  7.63537739e-24
  6.76620678e-23  3.85817438e-23]
Checking the noise that was generated in inject_signal ifo:
[-6.63047174e-24  1.32185779e-23 -5.34618993e-23 -8.83854620e-23
  3.00613337e-25  4.97572811e-24  3.98538100e-23  5.96140277e-23
 -5.70242944e-24  2.17339984e-23]
[-3.22667004e-23  4.05535163e-23  2.88365041e-23  4.13164096e-23
  1.23388607e-23 -1.44466175e-23  9.24150480e-24  3.31281309e-23
  3.10158536e-23  1.18867502e-23]
Checking the noise that was generated in inject_signal ifo:
[ 8.85075741e-23 -2.71384133e-23  2.93529977e-23 -6.74648285e-23
 -3.23233692e-23  1.77160466e-22  2.40051633e-23  3.39986936e-23
  7.36722415e-23  9.18247098e-23]
[ 4.17167621e-23  5.52665179e-23  7.34089548e-23 -7.41937842e-25
 -2.87205909e-23  5.44163946e-23 -9.72080607e-24 -2.74936977e-23
 -1.15156552e-23 -1.17268735e-24]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.11004877090454102 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 2.2163063039509927, 'mass_2_source': 1.4574595453885735, 's1_z': -0.04534447133650876, 's2_z': 0.021918043698503503, 'cos_iota': 0.5567729875292606, 'd_L': 233.22618633507267, 't_c': -0.03338659053846903, 'phase_c': 3.1984738886519315, 'psi': 2.2647714011880606, 'ra': 0.16897591564196188, 'sin_dec': 0.3561828976620718, 'q': 0.6576074538029203, 'M_c': 1.6399011162943542, 'eta': 0.23933341913965225, 'iota': Array(0.98030046, dtype=float64, weak_type=True), 'dec': Array(0.36417968, dtype=float64, weak_type=True), 'lambda_1': 33.90062297558173, 'lambda_2': 495.835820028886, 'H1_SNR': 18.079738926155265, 'L1_SNR': 14.223748107363356, 'V1_SNR': 5.809060673179823, 'network_SNR': 23.726296714075314, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5105535984039307 seconds
Time for h_sky_low and h_sky_center: 5.268752098083496 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.7019128799438477
Going to compute coefficients . . .
Time for computing coefficients: 122.43192291259766 seconds
Time for computing coefficients: 7.328455448150635 seconds
Time for computing coefficients: 7.13068151473999 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:01<6:42:11, 121.26s/it]Tuning global sampler:   1%|          | 2/200 [02:05<2:53:37, 52.62s/it] Tuning global sampler:   2%|▏         | 3/200 [02:10<1:40:45, 30.69s/it]Tuning global sampler:   2%|▏         | 4/200 [02:15<1:06:35, 20.39s/it]Tuning global sampler:   2%|▎         | 5/200 [02:20<48:43, 14.99s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:25<37:03, 11.46s/it]Tuning global sampler:   4%|▎         | 7/200 [02:29<29:36,  9.20s/it]Tuning global sampler:   4%|▍         | 8/200 [02:34<24:46,  7.74s/it]Tuning global sampler:   4%|▍         | 9/200 [02:38<21:28,  6.75s/it]Tuning global sampler:   5%|▌         | 10/200 [02:43<19:05,  6.03s/it]Tuning global sampler:   6%|▌         | 11/200 [02:47<17:36,  5.59s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:32,  5.28s/it]Tuning global sampler:   6%|▋         | 13/200 [02:56<15:46,  5.06s/it]Tuning global sampler:   7%|▋         | 14/200 [03:01<15:17,  4.93s/it]Tuning global sampler:   8%|▊         | 15/200 [03:06<14:55,  4.84s/it]Tuning global sampler:   8%|▊         | 16/200 [03:10<14:38,  4.78s/it]Tuning global sampler:   8%|▊         | 17/200 [03:15<14:25,  4.73s/it]Tuning global sampler:   9%|▉         | 18/200 [03:20<14:15,  4.70s/it]Tuning global sampler:  10%|▉         | 19/200 [03:24<14:06,  4.68s/it]Tuning global sampler:  10%|█         | 20/200 [03:29<13:59,  4.66s/it]Tuning global sampler:  10%|█         | 21/200 [03:33<13:52,  4.65s/it]Tuning global sampler:  11%|█         | 22/200 [03:38<13:44,  4.63s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:43<13:59,  4.74s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:47<13:36,  4.64s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:53<14:06,  4.84s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:57<13:37,  4.70s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:02<13:38,  4.73s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:06<13:16,  4.63s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:11<12:58,  4.56s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:16<13:52,  4.89s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:21<13:54,  4.94s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:26<13:21,  4.77s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:30<12:55,  4.64s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:34<12:36,  4.55s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:41<13:50,  5.04s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:46<14:18,  5.23s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:51<13:31,  4.98s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:55<12:59,  4.81s/it]Tuning global sampler:  20%|█▉        | 39/200 [05:00<12:49,  4.78s/it]Tuning global sampler:  20%|██        | 40/200 [05:04<12:25,  4.66s/it]Tuning global sampler:  20%|██        | 41/200 [05:09<12:38,  4.77s/it]Tuning global sampler:  21%|██        | 42/200 [05:14<12:15,  4.66s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:22<14:48,  5.66s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:27<14:32,  5.59s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:32<13:40,  5.30s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:38<14:01,  5.46s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:42<13:05,  5.14s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:47<13:10,  5.20s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:52<12:29,  4.96s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:57<12:54,  5.16s/it]Tuning global sampler:  26%|██▌       | 51/200 [06:02<12:14,  4.93s/it]Tuning global sampler:  26%|██▌       | 52/200 [06:06<11:45,  4.77s/it]Tuning global sampler:  26%|██▋       | 53/200 [06:10<11:23,  4.65s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:15<11:07,  4.57s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:19<10:53,  4.50s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:24<10:42,  4.46s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:28<10:34,  4.44s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:32<10:28,  4.43s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:37<10:21,  4.41s/it]Tuning global sampler:  30%|███       | 60/200 [06:41<10:16,  4.41s/it]Tuning global sampler:  30%|███       | 61/200 [06:45<10:11,  4.40s/it]Tuning global sampler:  31%|███       | 62/200 [06:50<10:06,  4.40s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:55<10:19,  4.52s/it]Tuning global sampler:  32%|███▏      | 64/200 [07:00<10:49,  4.77s/it]Tuning global sampler:  32%|███▎      | 65/200 [07:04<10:29,  4.66s/it]Tuning global sampler:  33%|███▎      | 66/200 [07:09<10:13,  4.58s/it]Tuning global sampler:  34%|███▎      | 67/200 [07:13<10:00,  4.51s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:18<09:51,  4.48s/it]Tuning global sampler:  34%|███▍      | 69/200 [07:22<09:44,  4.46s/it]Tuning global sampler:  35%|███▌      | 70/200 [07:26<09:40,  4.47s/it]Tuning global sampler:  36%|███▌      | 71/200 [07:31<09:34,  4.46s/it]Tuning global sampler:  36%|███▌      | 72/200 [07:35<09:29,  4.45s/it]Tuning global sampler:  36%|███▌      | 72/200 [07:40<13:38,  6.39s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.22s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.22s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.22s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.22s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.22s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.22s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.22s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.22s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]
11:44 ninjax INFO    : Saving samples to ./Aplus/injection_13/results_training.npz
11:44 ninjax INFO    : Saving the NF
11:44 ninjax INFO    : Time taken: 499.0524263381958 seconds (8.31754043896993 minutes)
11:44 ninjax INFO    : Creating the final corner plot
11:44 ninjax INFO    : Dumping the final production chains
11:44 ninjax INFO    : Chains shape is: (13, 220000)
11:44 ninjax INFO    : Key: M_c: ESS = 15277, Rhat = 1.0398288911122038
11:44 ninjax INFO    : Key: q: ESS = 11671, Rhat = 1.054004421948921
11:44 ninjax INFO    : Key: s1_z: ESS = 14734, Rhat = 1.0456988891542216
11:44 ninjax INFO    : Key: s2_z: ESS = 14981, Rhat = 1.0426373514890028
11:44 ninjax INFO    : Key: lambda_1: ESS = 15316, Rhat = 1.0400803879408438
11:44 ninjax INFO    : Key: lambda_2: ESS = 19077, Rhat = 1.0328197667099124
11:44 ninjax INFO    : Key: cos_iota: ESS = 10169, Rhat = 1.060555517098717
11:44 ninjax INFO    : Key: d_L: ESS = 10523, Rhat = 1.0577257207949209
11:44 ninjax INFO    : Key: t_c: ESS = 16709, Rhat = 1.0373243412550988
11:44 ninjax INFO    : Key: phase_c: ESS = 9735, Rhat = 1.0634371339017714
11:44 ninjax INFO    : Key: psi: ESS = 12107, Rhat = 1.0518395187840641
11:44 ninjax INFO    : Key: ra: ESS = 11880, Rhat = 1.0508827108885195
11:44 ninjax INFO    : Key: sin_dec: ESS = 10308, Rhat = 1.0582233745212226
11:44 ninjax INFO    : Key: eta: ESS = 11671, Rhat = 1.054004421948921
11:44 ninjax INFO    : Key: iota: ESS = 10169, Rhat = 1.060555517098717
11:44 ninjax INFO    : Key: dec: ESS = 10308, Rhat = 1.0582233745212226
11:44 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.636 +/- 0.090
q: 0.721 +/- 0.187
s1_z: -0.013 +/- 0.027
s2_z: -0.008 +/- 0.027
lambda_1: 1475.770 +/- 1447.715
lambda_2: 1827.402 +/- 1469.154
cos_iota: 0.416 +/- 0.502
d_L: 474.557 +/- 245.900
t_c: -0.033 +/- 0.019
phase_c: 3.215 +/- 1.782
psi: 1.409 +/- 0.844
ra: 1.192 +/- 1.799
sin_dec: 0.414 +/- 0.408
Log probability: 162.940 +/- 110.548
Local acceptance: 0.866 +/- 0.341
Global acceptance: 0.011 +/- 0.103
Max loss: 22.850, Min loss: 4.917
Production summary
==========
M_c: 1.640 +/- 0.000
q: 0.679 +/- 0.110
s1_z: -0.016 +/- 0.027
s2_z: -0.013 +/- 0.028
lambda_1: 158.757 +/- 154.912
lambda_2: 508.125 +/- 403.683
cos_iota: 0.778 +/- 0.180
d_L: 285.125 +/- 50.163
t_c: -0.033 +/- 0.001
phase_c: 3.071 +/- 1.807
psi: 1.534 +/- 0.883
ra: 0.172 +/- 0.015
sin_dec: 0.362 +/- 0.023
Log probability: 272.990 +/- 2.479
Local acceptance: 0.729 +/- 0.444
Global acceptance: 0.105 +/- 0.307
DONE

JOB STATISTICS
==============
Job ID: 10923046
Cluster: snellius
User/Group: twouters2/twouters2
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 00:10:14
CPU Efficiency: 5.51% of 03:05:36 core-walltime
Job Wall-clock time: 00:11:36
Memory Utilized: 4.14 GB
Memory Efficiency: 41.36% of 10.00 GB (10.00 GB/node)
