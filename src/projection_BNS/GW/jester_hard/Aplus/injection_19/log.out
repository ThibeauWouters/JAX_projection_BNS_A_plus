Wed Apr  2 11:33:01 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
11:33 ninjax INFO    : Checking and setting outdir
11:33 ninjax INFO    : Found generation prior file ./Aplus/injection_19/generation_prior.prior
11:33 ninjax INFO    : The outdir is set to ./Aplus/injection_19
11:33 ninjax INFO    : Loading the given config
11:33 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
11:33 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
11:33 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/jester_hard/Aplus/injection_19/complete_config.json
11:33 ninjax INFO    : No seed specified. Generating a random seed: 816821
11:33 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 329867
11:33 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 561100
11:33 ninjax INFO    : Loading the priors
11:33 ninjax INFO    : Setting up the prior
11:33 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
11:33 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
11:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
11:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
11:33 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
11:33 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
11:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
11:33 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
11:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
11:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
11:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
11:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
11:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
11:33 ninjax INFO    : Setting up the generation prior
11:33 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.4, naming=["mass_1_source"])
11:33 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.4, naming=["mass_2_source"])
11:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
11:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
11:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
11:33 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
11:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
11:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
11:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
11:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
11:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
11:33 ninjax INFO    : Finished prior setup
11:33 ninjax INFO    : Setting the transforms
11:33 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
11:33 ninjax INFO    : transforms_str_list has 3 elements
11:33 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
11:33 ninjax INFO    : Setting the likelihood
11:33 ninjax INFO    : GW likelihood provided, setting up the GW pipe
11:33 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz
11:33 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz for BNS injections
11:33 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
11:33 ninjax INFO    : self.is_BNS_run is True
11:33 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
11:33 ninjax INFO    : GW run is an injection
11:33 ninjax INFO    : Setting up GW injection . . . 
11:33 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
11:33 ninjax INFO    : Generating new injection
11:33 ninjax INFO    : Sanity check: generated parameters:
11:33 ninjax INFO    : {'mass_1_source': 1.7304783227784104, 'mass_2_source': 1.5243727789420292, 's1_z': 0.026300469107481836, 's2_z': -0.008688777649094016, 'cos_iota': 0.8003903613729237, 'd_L': 263.0851267078601, 't_c': 0.07920479984698003, 'phase_c': 4.820633990079921, 'psi': 1.1117896328525187, 'ra': 2.5927486422103376, 'sin_dec': 0.6910966864890664}
11:33 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz . . . 
11:33 ninjax INFO    : Injected lambda_1: 188.8493790535199
11:33 ninjax INFO    : Injected lambda_2: 387.9494595435638
11:33 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.4973623381491914 is 128.0
11:33 ninjax INFO    : After transforms, the injection parameters are:
11:33 ninjax INFO    : {'mass_1_source': 1.7304783227784104, 'mass_2_source': 1.5243727789420292, 's1_z': 0.026300469107481836, 's2_z': -0.008688777649094016, 'cos_iota': 0.8003903613729237, 'd_L': 263.0851267078601, 't_c': 0.07920479984698003, 'phase_c': 4.820633990079921, 'psi': 1.1117896328525187, 'ra': 2.5927486422103376, 'sin_dec': 0.6910966864890664, 'q': 0.8808967780044401, 'M_c': 1.4973623381491914, 'eta': 0.24899756296300524, 'iota': Array(0.64285022, dtype=float64, weak_type=True), 'dec': Array(0.76300531, dtype=float64, weak_type=True), 'lambda_1': 188.8493790535199, 'lambda_2': 387.9494595435638}
11:33 ninjax INFO    : The trial injection parameters are {'M_c': 1.4973623381491914, 'eta': 0.24899756296300524, 's1_z': 0.026300469107481836, 's2_z': -0.008688777649094016, 'lambda_1': 188.8493790535199, 'lambda_2': 387.9494595435638, 'd_L': 263.0851267078601, 'phase_c': 4.820633990079921, 'iota': 0.6428502240251426, 't_c': 0.07920479984698003, 'psi': 1.1117896328525187, 'ra': 2.5927486422103376, 'dec': 0.7630053084428893}
11:33 ninjax INFO    : Injecting signals . . .
11:33 ninjax INFO    : self.ifos
11:33 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
11:33 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:33 ninjax INFO    : [ 4.30619189e-23+5.17701298e-23j -9.83013871e-23+2.60307208e-24j
 -3.17420789e-24+6.74737677e-23j ...
 -1.45042647e-23+5.93822801e-24j -1.04530190e-23+1.64732349e-24j
 -3.94190113e-24+1.15850460e-23j]
11:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
11:33 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:33 ninjax INFO    : [-5.79379730e-23+3.01457222e-23j  4.89914840e-23-1.40679251e-24j
 -2.13809760e-23+6.38813767e-23j ...
 -5.70409209e-24+2.25608797e-23j  1.20193893e-23+1.01110459e-23j
 -3.83176650e-23+2.28416989e-23j]
11:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
11:33 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:33 ninjax INFO    : [ 7.94217646e-23-9.45201005e-24j  2.42048931e-23+5.34714559e-23j
  9.10695180e-24-9.33521303e-23j ...
  8.02859173e-24+4.16743313e-23j  2.96941669e-23+2.31087951e-23j
 -1.62751584e-23-5.82839488e-23j]
11:33 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
11:33 ninjax INFO    : SNR for ifo H1 is 11.77066040855648
11:33 ninjax INFO    : SNR for ifo L1 is 11.557533469628034
11:33 ninjax INFO    : SNR for ifo V1 is 16.656288697928677
11:33 ninjax INFO    : The network SNR is 23.44263166847694
11:33 ninjax INFO    : Network SNR passes threshold
11:33 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
11:33 ninjax INFO    :    mass_1_source: 1.7304783227784104
11:33 ninjax INFO    :    mass_2_source: 1.5243727789420292
11:33 ninjax INFO    :    s1_z: 0.026300469107481836
11:33 ninjax INFO    :    s2_z: -0.008688777649094016
11:33 ninjax INFO    :    cos_iota: 0.8003903613729237
11:33 ninjax INFO    :    d_L: 263.0851267078601
11:33 ninjax INFO    :    t_c: 0.07920479984698003
11:33 ninjax INFO    :    phase_c: 4.820633990079921
11:33 ninjax INFO    :    psi: 1.1117896328525187
11:33 ninjax INFO    :    ra: 2.5927486422103376
11:33 ninjax INFO    :    sin_dec: 0.6910966864890664
11:33 ninjax INFO    :    q: 0.8808967780044401
11:33 ninjax INFO    :    M_c: 1.4973623381491914
11:33 ninjax INFO    :    eta: 0.24899756296300524
11:33 ninjax INFO    :    iota: 0.6428502240251426
11:33 ninjax INFO    :    dec: 0.7630053084428893
11:33 ninjax INFO    :    lambda_1: 188.8493790535199
11:33 ninjax INFO    :    lambda_2: 387.9494595435638
11:33 ninjax INFO    :    H1_SNR: 11.77066040855648
11:33 ninjax INFO    :    L1_SNR: 11.557533469628034
11:33 ninjax INFO    :    V1_SNR: 16.656288697928677
11:33 ninjax INFO    :    network_SNR: 23.44263166847694
11:33 ninjax INFO    :    epoch: 126.0
11:33 ninjax INFO    :    gmst: 2.7288901910520846
11:33 ninjax INFO    :    duration: 128.0
11:33 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
11:33 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
11:33 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
11:35 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 146.07267785072327 seconds = 2.4345446308453877 minutes
11:35 ninjax INFO    : The priors are not modified after their initialization
11:35 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
11:35 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
11:35 ninjax INFO    : sample: {'M_c': Array([1.37632161, 1.75048204, 2.48363975], dtype=float64), 'q': Array([0.68251969, 0.51027654, 0.86533341], dtype=float64), 's1_z': Array([-0.00263019, -0.02357293, -0.00879762], dtype=float64), 's2_z': Array([ 0.04391441,  0.02862266, -0.02429791], dtype=float64), 'lambda_1': Array([2269.21512288, 1668.1672794 , 1371.43881966], dtype=float64), 'lambda_2': Array([2518.75960532, 1282.01915087,  982.5034557 ], dtype=float64), 'cos_iota': Array([ 0.1750476 , -0.86085774, -0.55006351], dtype=float64), 'd_L': Array([768.83925358, 970.35908238, 976.98721717], dtype=float64), 't_c': Array([ 0.04775996, -0.03155116, -0.02235421], dtype=float64), 'phase_c': Array([2.25247376, 4.99125802, 3.84088174], dtype=float64), 'psi': Array([0.05945002, 1.04912146, 2.81536434], dtype=float64), 'ra': Array([1.65798369, 3.67193684, 0.04007004], dtype=float64), 'sin_dec': Array([-0.75925562,  0.78130676, -0.8393108 ], dtype=float64)}
11:35 ninjax INFO    : log_prob: [ -2.3916724  -10.95867906 -26.51172252]
11:35 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.7304783227784104, 'mass_2_source': 1.5243727789420292, 's1_z': 0.026300469107481836, 's2_z': -0.008688777649094016, 'cos_iota': 0.8003903613729237, 'd_L': 263.0851267078601, 't_c': 0.07920479984698003, 'phase_c': 4.820633990079921, 'psi': 1.1117896328525187, 'ra': 2.5927486422103376, 'sin_dec': 0.6910966864890664, 'q': 0.8808967780044401, 'M_c': 1.4973623381491914, 'eta': 0.24899756296300524, 'iota': Array(0.64285022, dtype=float64, weak_type=True), 'dec': Array(0.76300531, dtype=float64, weak_type=True), 'lambda_1': 188.8493790535199, 'lambda_2': 387.9494595435638, 'H1_SNR': 11.77066040855648, 'L1_SNR': 11.557533469628034, 'V1_SNR': 16.656288697928677, 'network_SNR': 23.44263166847694, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
11:35 ninjax INFO    : log_prob at the injection parameters is: 250.78858605824195
11:35 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
11:35 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
11:35 ninjax INFO    : Ninjax setup complete.
11:35 ninjax INFO    : Saving output to ./Aplus/injection_19/
11:35 ninjax INFO    : Using polynomial learning rate scheduler
11:35 ninjax INFO    : The hyperparameters passed to flowMC and jim are
11:35 ninjax INFO    :    n_loop_training: 200
11:35 ninjax INFO    :    n_loop_production: 10
11:35 ninjax INFO    :    n_local_steps: 100
11:35 ninjax INFO    :    n_global_steps: 1000
11:35 ninjax INFO    :    n_epochs: 25
11:35 ninjax INFO    :    n_chains: 1000
11:35 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x14823db4bbe0>
11:35 ninjax INFO    :    max_samples: 50000
11:35 ninjax INFO    :    momentum: 0.9
11:35 ninjax INFO    :    batch_size: 30000
11:35 ninjax INFO    :    use_global: True
11:35 ninjax INFO    :    keep_quantile: 0.0
11:35 ninjax INFO    :    train_thinning: 10
11:35 ninjax INFO    :    output_thinning: 50
11:35 ninjax INFO    :    n_sample_max: 10000
11:35 ninjax INFO    :    num_layers: 10
11:35 ninjax INFO    :    hidden_size: [128, 128]
11:35 ninjax INFO    :    num_bins: 8
11:35 ninjax INFO    :    save_training_chains: False
11:35 ninjax INFO    :    eps_mass_matrix: 1e-05
11:35 ninjax INFO    :    use_scheduler: True
11:35 ninjax INFO    :    use_temperature: False
11:35 ninjax INFO    :    which_temperature_schedule: exponential
11:35 ninjax INFO    :    starting_temperature: 2.0
11:35 ninjax INFO    :    stop_tempering_iteration: 75
11:35 ninjax INFO    :    stopping_criterion_global_acc: 0.1
11:35 ninjax INFO    :    stopping_criterion_loss: -inf
11:35 ninjax INFO    :    nf_model_kwargs: {}
11:35 ninjax INFO    :    local sampler arg not shown (pretty print)
11:35 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[ 4.62861988e-23 -9.31852697e-23  2.10839676e-24  8.37266124e-23
 -6.18909122e-23 -5.66014629e-23  5.53728161e-24 -2.61285365e-23
 -6.80069295e-23 -4.24771876e-23]
[ 5.61621245e-23  4.46955577e-24  6.61602375e-23  5.18317179e-23
  3.63175916e-23 -6.83170024e-23 -1.06470374e-22 -3.51679832e-23
  1.15838493e-23  3.29362029e-23]
Checking the noise that was generated in inject_signal ifo:
[-5.63560374e-23  4.74756848e-23 -2.55032942e-23 -8.02986777e-25
 -4.99890583e-23  4.83596611e-23  1.90847533e-23  3.73582422e-23
  4.26644697e-23 -1.17413018e-23]
[ 2.50351647e-23 -6.53480057e-24  6.04792543e-23 -1.67750790e-23
 -2.90917556e-23 -3.47438892e-23  2.13384303e-23 -1.79930021e-23
 -1.68910465e-24  9.51277374e-23]
Checking the noise that was generated in inject_signal ifo:
[ 7.56723081e-23  1.60822613e-23 -6.66532330e-25 -1.68862665e-24
 -3.58443711e-23 -1.96155336e-23  9.18481143e-24  2.18738338e-23
  5.95290057e-23 -3.58147610e-23]
[-1.84873989e-23  4.80279360e-23 -9.33284680e-23 -3.21187490e-23
  1.44654980e-23 -4.88202067e-23 -2.29843898e-23 -3.63033192e-23
  3.51288360e-23 -1.04934751e-22]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.11047148704528809 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.7304783227784104, 'mass_2_source': 1.5243727789420292, 's1_z': 0.026300469107481836, 's2_z': -0.008688777649094016, 'cos_iota': 0.8003903613729237, 'd_L': 263.0851267078601, 't_c': 0.07920479984698003, 'phase_c': 4.820633990079921, 'psi': 1.1117896328525187, 'ra': 2.5927486422103376, 'sin_dec': 0.6910966864890664, 'q': 0.8808967780044401, 'M_c': 1.4973623381491914, 'eta': 0.24899756296300524, 'iota': Array(0.64285022, dtype=float64, weak_type=True), 'dec': Array(0.76300531, dtype=float64, weak_type=True), 'lambda_1': 188.8493790535199, 'lambda_2': 387.9494595435638, 'H1_SNR': 11.77066040855648, 'L1_SNR': 11.557533469628034, 'V1_SNR': 16.656288697928677, 'network_SNR': 23.44263166847694, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5134789943695068 seconds
Time for h_sky_low and h_sky_center: 5.3565449714660645 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.6963145732879639
Going to compute coefficients . . .
Time for computing coefficients: 124.78116226196289 seconds
Time for computing coefficients: 7.118944406509399 seconds
Time for computing coefficients: 6.958963394165039 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:00<6:41:17, 120.99s/it]Tuning global sampler:   1%|          | 2/200 [02:05<2:53:19, 52.52s/it] Tuning global sampler:   2%|▏         | 3/200 [02:10<1:40:38, 30.65s/it]Tuning global sampler:   2%|▏         | 4/200 [02:14<1:06:33, 20.38s/it]Tuning global sampler:   2%|▎         | 5/200 [02:19<47:45, 14.69s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:24<36:26, 11.27s/it]Tuning global sampler:   4%|▎         | 7/200 [02:29<30:05,  9.35s/it]Tuning global sampler:   4%|▍         | 8/200 [02:34<25:05,  7.84s/it]Tuning global sampler:   4%|▍         | 9/200 [02:38<21:42,  6.82s/it]Tuning global sampler:   5%|▌         | 10/200 [02:43<19:16,  6.09s/it]Tuning global sampler:   6%|▌         | 11/200 [02:47<17:44,  5.63s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:39,  5.32s/it]Tuning global sampler:   6%|▋         | 13/200 [02:56<15:51,  5.09s/it]Tuning global sampler:   7%|▋         | 14/200 [03:01<15:20,  4.95s/it]Tuning global sampler:   8%|▊         | 15/200 [03:06<14:58,  4.86s/it]Tuning global sampler:   8%|▊         | 16/200 [03:10<14:41,  4.79s/it]Tuning global sampler:   8%|▊         | 17/200 [03:15<14:28,  4.75s/it]Tuning global sampler:   9%|▉         | 18/200 [03:20<14:19,  4.72s/it]Tuning global sampler:  10%|▉         | 19/200 [03:24<14:10,  4.70s/it]Tuning global sampler:  10%|█         | 20/200 [03:29<14:02,  4.68s/it]Tuning global sampler:  10%|█         | 21/200 [03:34<13:56,  4.67s/it]Tuning global sampler:  11%|█         | 22/200 [03:39<14:35,  4.92s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:44<14:14,  4.83s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:48<13:48,  4.71s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:52<13:27,  4.61s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:57<13:12,  4.55s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:01<12:59,  4.50s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:06<12:48,  4.47s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:10<12:40,  4.45s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:14<12:33,  4.43s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:19<12:27,  4.42s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:23<12:21,  4.41s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:28<12:14,  4.40s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:32<12:08,  4.39s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:36<12:05,  4.40s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:41<12:01,  4.40s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:45<11:57,  4.40s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:50<11:52,  4.40s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:54<11:47,  4.39s/it]Tuning global sampler:  20%|██        | 40/200 [04:58<11:42,  4.39s/it]Tuning global sampler:  20%|██        | 41/200 [05:04<12:23,  4.67s/it]Tuning global sampler:  21%|██        | 42/200 [05:08<12:04,  4.59s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:13<12:06,  4.63s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:17<11:50,  4.56s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:22<11:37,  4.50s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:26<11:27,  4.47s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:30<11:20,  4.45s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:35<11:14,  4.44s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:39<11:09,  4.43s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:44<11:27,  4.58s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:48<11:13,  4.52s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:53<11:03,  4.48s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:57<10:54,  4.46s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:02<10:49,  4.45s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:06<10:40,  4.42s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:10<10:33,  4.40s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:15<10:29,  4.40s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:19<10:25,  4.40s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:24<10:20,  4.40s/it]Tuning global sampler:  30%|███       | 60/200 [06:28<10:17,  4.41s/it]Tuning global sampler:  30%|███       | 61/200 [06:33<10:52,  4.70s/it]Tuning global sampler:  31%|███       | 62/200 [06:38<10:36,  4.61s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:42<10:23,  4.55s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:47<10:12,  4.50s/it]Tuning global sampler:  32%|███▎      | 65/200 [06:51<10:03,  4.47s/it]Tuning global sampler:  32%|███▎      | 65/200 [06:55<14:23,  6.40s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.21s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.21s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.21s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.21s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.21s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.21s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.21s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.21s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]
11:43 ninjax INFO    : Saving samples to ./Aplus/injection_19/results_training.npz
11:43 ninjax INFO    : Saving the NF
11:43 ninjax INFO    : Time taken: 455.2931315898895 seconds (7.588218859831492 minutes)
11:43 ninjax INFO    : Creating the final corner plot
11:43 ninjax INFO    : Dumping the final production chains
11:43 ninjax INFO    : Chains shape is: (13, 220000)
11:43 ninjax INFO    : Key: M_c: ESS = 21042, Rhat = 1.030174907291066
11:43 ninjax INFO    : Key: q: ESS = 12900, Rhat = 1.0484051350076653
11:43 ninjax INFO    : Key: s1_z: ESS = 18053, Rhat = 1.0346643326851663
11:43 ninjax INFO    : Key: s2_z: ESS = 22502, Rhat = 1.0285448462014548
11:43 ninjax INFO    : Key: lambda_1: ESS = 25409, Rhat = 1.0241572549853164
11:43 ninjax INFO    : Key: lambda_2: ESS = 21559, Rhat = 1.0291880937589428
11:43 ninjax INFO    : Key: cos_iota: ESS = 20740, Rhat = 1.0295494478161609
11:43 ninjax INFO    : Key: d_L: ESS = 20196, Rhat = 1.030096930418693
11:43 ninjax INFO    : Key: t_c: ESS = 23036, Rhat = 1.0268965180759138
11:43 ninjax INFO    : Key: phase_c: ESS = 9869, Rhat = 1.0619113534044031
11:43 ninjax INFO    : Key: psi: ESS = 15886, Rhat = 1.0384942833162467
11:43 ninjax INFO    : Key: ra: ESS = 22088, Rhat = 1.0273742579997336
11:43 ninjax INFO    : Key: sin_dec: ESS = 25722, Rhat = 1.023935171361615
11:43 ninjax INFO    : Key: eta: ESS = 12900, Rhat = 1.0484051350076653
11:43 ninjax INFO    : Key: iota: ESS = 20740, Rhat = 1.0295494478161609
11:43 ninjax INFO    : Key: dec: ESS = 25722, Rhat = 1.023935171361615
11:43 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.503 +/- 0.120
q: 0.716 +/- 0.226
s1_z: 0.010 +/- 0.027
s2_z: 0.005 +/- 0.026
lambda_1: 1633.676 +/- 1477.275
lambda_2: 1834.583 +/- 1457.778
cos_iota: 0.444 +/- 0.528
d_L: 528.905 +/- 248.661
t_c: 0.065 +/- 0.032
phase_c: 2.691 +/- 1.721
psi: 1.505 +/- 0.816
ra: 2.680 +/- 0.933
sin_dec: 0.376 +/- 0.541
Log probability: 115.713 +/- 108.730
Local acceptance: 0.836 +/- 0.370
Global acceptance: 0.010 +/- 0.099
Max loss: 22.852, Min loss: 5.906
Production summary
==========
M_c: 1.497 +/- 0.000
q: 0.859 +/- 0.091
s1_z: 0.017 +/- 0.021
s2_z: 0.011 +/- 0.024
lambda_1: 211.207 +/- 196.184
lambda_2: 348.286 +/- 320.671
cos_iota: 0.838 +/- 0.119
d_L: 279.259 +/- 37.489
t_c: 0.079 +/- 0.000
phase_c: 3.075 +/- 1.797
psi: 1.597 +/- 0.893
ra: 2.588 +/- 0.009
sin_dec: 0.691 +/- 0.008
Log probability: 248.144 +/- 2.456
Local acceptance: 0.585 +/- 0.493
Global acceptance: 0.106 +/- 0.308
DONE

JOB STATISTICS
==============
Job ID: 10923052
Cluster: snellius
User/Group: twouters2/twouters2
State: RUNNING
Nodes: 1
Cores per node: 16
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 02:54:56 core-walltime
Job Wall-clock time: 00:10:56
Memory Utilized: 0.00 MB
Memory Efficiency: 0.00% of 10.00 GB (10.00 GB/node)
WARNING: Efficiency statistics can only be obtained after the job has ended as seff tool is based on the accounting database data.
