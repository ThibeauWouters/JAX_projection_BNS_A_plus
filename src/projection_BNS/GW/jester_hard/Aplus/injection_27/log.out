Wed Apr  2 11:33:01 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
11:33 ninjax INFO    : Checking and setting outdir
11:33 ninjax INFO    : Found generation prior file ./Aplus/injection_27/generation_prior.prior
11:33 ninjax INFO    : The outdir is set to ./Aplus/injection_27
11:33 ninjax INFO    : Loading the given config
11:33 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
11:33 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
11:33 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/jester_hard/Aplus/injection_27/complete_config.json
11:33 ninjax INFO    : No seed specified. Generating a random seed: 2630
11:33 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 902579
11:33 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 340197
11:33 ninjax INFO    : Loading the priors
11:33 ninjax INFO    : Setting up the prior
11:33 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
11:33 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
11:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
11:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
11:33 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
11:33 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
11:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
11:33 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
11:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
11:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
11:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
11:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
11:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
11:33 ninjax INFO    : Setting up the generation prior
11:33 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.4, naming=["mass_1_source"])
11:33 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.4, naming=["mass_2_source"])
11:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
11:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
11:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
11:33 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
11:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
11:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
11:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
11:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
11:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
11:33 ninjax INFO    : Finished prior setup
11:33 ninjax INFO    : Setting the transforms
11:33 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
11:33 ninjax INFO    : transforms_str_list has 3 elements
11:33 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
11:33 ninjax INFO    : Setting the likelihood
11:33 ninjax INFO    : GW likelihood provided, setting up the GW pipe
11:33 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz
11:33 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz for BNS injections
11:33 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
11:33 ninjax INFO    : self.is_BNS_run is True
11:33 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
11:33 ninjax INFO    : GW run is an injection
11:33 ninjax INFO    : Setting up GW injection . . . 
11:33 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
11:33 ninjax INFO    : Generating new injection
11:33 ninjax INFO    : Sanity check: generated parameters:
11:33 ninjax INFO    : {'mass_1_source': 1.5293526700258073, 'mass_2_source': 1.2412249169792073, 's1_z': 0.01691823299529087, 's2_z': 0.03043382125944319, 'cos_iota': 0.1879200970497945, 'd_L': 345.0868295005683, 't_c': -0.014011180367795889, 'phase_c': 5.058777069250205, 'psi': 0.24367783887695016, 'ra': 0.8120875177883203, 'sin_dec': -0.16422854807392318}
11:33 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz . . . 
11:33 ninjax INFO    : Injected lambda_1: 380.7209661543698
11:33 ninjax INFO    : Injected lambda_2: 1156.6335456627958
11:33 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.291544346306904 is 256.0
11:33 ninjax INFO    : After transforms, the injection parameters are:
11:33 ninjax INFO    : {'mass_1_source': 1.5293526700258073, 'mass_2_source': 1.2412249169792073, 's1_z': 0.01691823299529087, 's2_z': 0.03043382125944319, 'cos_iota': 0.1879200970497945, 'd_L': 345.0868295005683, 't_c': -0.014011180367795889, 'phase_c': 5.058777069250205, 'psi': 0.24367783887695016, 'ra': 0.8120875177883203, 'sin_dec': -0.16422854807392318, 'q': 0.811601497356566, 'M_c': 1.291544346306904, 'eta': 0.24729623114978475, 'iota': Array(1.38175224, dtype=float64, weak_type=True), 'dec': Array(-0.16497589, dtype=float64, weak_type=True), 'lambda_1': 380.7209661543698, 'lambda_2': 1156.6335456627958}
11:33 ninjax INFO    : The trial injection parameters are {'M_c': 1.291544346306904, 'eta': 0.24729623114978475, 's1_z': 0.01691823299529087, 's2_z': 0.03043382125944319, 'lambda_1': 380.7209661543698, 'lambda_2': 1156.6335456627958, 'd_L': 345.0868295005683, 'phase_c': 5.058777069250205, 'iota': 1.3817522409845973, 't_c': -0.014011180367795889, 'psi': 0.24367783887695016, 'ra': 0.8120875177883203, 'dec': -0.16497588967329066}
11:33 ninjax INFO    : Injecting signals . . .
11:33 ninjax INFO    : self.ifos
11:33 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
11:33 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
11:33 ninjax INFO    : [ 6.68420278e-23-3.14550002e-24j -2.18059163e-23+4.77127733e-23j
 -3.89638507e-23+4.21319636e-23j ...
  1.93080467e-23+2.85780326e-23j -1.87668630e-23+1.93914419e-24j
  1.71801045e-23-1.97247734e-23j]
11:33 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
11:33 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
11:33 ninjax INFO    : [-2.54525884e-23+1.12963102e-22j -3.55554705e-23+2.26163240e-23j
  3.56138661e-23-5.65834752e-23j ...
  1.00154125e-23+1.66317452e-23j  2.20567722e-23-3.10506646e-23j
 -5.76294442e-24-3.75506681e-23j]
11:33 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
11:33 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
11:33 ninjax INFO    : [ 2.35296419e-23+7.87225334e-23j -9.34683475e-23+1.06643025e-22j
 -5.78410200e-23-2.25016327e-23j ...
 -1.06092444e-22-8.02467667e-23j  5.11365119e-23+1.68493114e-23j
  4.04035320e-23+4.36805393e-23j]
11:33 ninjax INFO    : [1.43183556e-46 1.43058540e-46 1.42935095e-46 ... 6.39793039e-47
 6.39795354e-47 6.39797668e-47]
11:33 ninjax INFO    : SNR for ifo H1 is 2.0500226812037425
11:33 ninjax INFO    : SNR for ifo L1 is 3.223946883037
11:33 ninjax INFO    : SNR for ifo V1 is 2.917627277606977
11:33 ninjax INFO    : The network SNR is 4.807179571134208
11:33 ninjax INFO    : The network SNR does not pass the threshold, trying again
11:33 ninjax INFO    : Generating new injection
11:33 ninjax INFO    : Sanity check: generated parameters:
11:33 ninjax INFO    : {'mass_1_source': 2.181550193516448, 'mass_2_source': 1.9866338890969129, 's1_z': -0.03534246571364148, 's2_z': -0.023493461676123942, 'cos_iota': -0.07450927446136602, 'd_L': 220.9918243292261, 't_c': 0.09083374665472693, 'phase_c': 4.869035187529442, 'psi': 2.7114882798836044, 'ra': 2.9805711335559475, 'sin_dec': -0.063375960217535}
11:33 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz . . . 
11:33 ninjax INFO    : Injected lambda_1: 39.14851574852324
11:33 ninjax INFO    : Injected lambda_2: 79.38608626016232
11:33 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.902403593263544 is 128.0
11:33 ninjax INFO    : After transforms, the injection parameters are:
11:33 ninjax INFO    : {'mass_1_source': 2.181550193516448, 'mass_2_source': 1.9866338890969129, 's1_z': -0.03534246571364148, 's2_z': -0.023493461676123942, 'cos_iota': -0.07450927446136602, 'd_L': 220.9918243292261, 't_c': 0.09083374665472693, 'phase_c': 4.869035187529442, 'psi': 2.7114882798836044, 'ra': 2.9805711335559475, 'sin_dec': -0.063375960217535, 'q': 0.9106523860881932, 'M_c': 1.902403593263544, 'eta': 0.24945330819426936, 'iota': Array(1.64537472, dtype=float64, weak_type=True), 'dec': Array(-0.06341846, dtype=float64, weak_type=True), 'lambda_1': 39.14851574852324, 'lambda_2': 79.38608626016232}
11:33 ninjax INFO    : The trial injection parameters are {'M_c': 1.902403593263544, 'eta': 0.24945330819426936, 's1_z': -0.03534246571364148, 's2_z': -0.023493461676123942, 'lambda_1': 39.14851574852324, 'lambda_2': 79.38608626016232, 'd_L': 220.9918243292261, 'phase_c': 4.869035187529442, 'iota': 1.6453747154043685, 't_c': 0.09083374665472693, 'psi': 2.7114882798836044, 'ra': 2.9805711335559475, 'dec': -0.06341846213601289}
11:33 ninjax INFO    : Injecting signals . . .
11:33 ninjax INFO    : self.ifos
11:33 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
11:33 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:33 ninjax INFO    : [ 9.91656045e-23+3.90751153e-23j -9.03277024e-24+2.96001809e-23j
  1.72511443e-24+8.66247671e-24j ...
 -2.62024706e-23+3.06548170e-23j  6.36137013e-24-1.58198679e-23j
  1.03299003e-23+1.25754593e-23j]
11:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
11:33 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:33 ninjax INFO    : [ 6.54286721e-23+9.78822323e-24j -2.22167183e-23+1.56058585e-23j
 -8.94331176e-23-1.19971985e-23j ...
  8.93122416e-25+2.89443883e-25j  2.66668777e-23+2.20351417e-23j
  8.94684726e-24-2.52001743e-23j]
11:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
11:33 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:33 ninjax INFO    : [-5.97773123e-23-1.50765091e-24j -7.89947413e-24-2.20443492e-23j
 -7.86786441e-24+1.37686207e-23j ...
  1.76330626e-23-2.69764982e-23j  1.79359431e-23-1.75527655e-24j
  2.23293708e-23+1.54220919e-24j]
11:33 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
11:33 ninjax INFO    : SNR for ifo H1 is 11.953702207919019
11:33 ninjax INFO    : SNR for ifo L1 is 5.51299892668497
11:33 ninjax INFO    : SNR for ifo V1 is 1.6129201327443072
11:33 ninjax INFO    : The network SNR is 13.26218929874889
11:33 ninjax INFO    : Network SNR passes threshold
11:33 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
11:33 ninjax INFO    :    mass_1_source: 2.181550193516448
11:33 ninjax INFO    :    mass_2_source: 1.9866338890969129
11:33 ninjax INFO    :    s1_z: -0.03534246571364148
11:33 ninjax INFO    :    s2_z: -0.023493461676123942
11:33 ninjax INFO    :    cos_iota: -0.07450927446136602
11:33 ninjax INFO    :    d_L: 220.9918243292261
11:33 ninjax INFO    :    t_c: 0.09083374665472693
11:33 ninjax INFO    :    phase_c: 4.869035187529442
11:33 ninjax INFO    :    psi: 2.7114882798836044
11:33 ninjax INFO    :    ra: 2.9805711335559475
11:33 ninjax INFO    :    sin_dec: -0.063375960217535
11:33 ninjax INFO    :    q: 0.9106523860881932
11:33 ninjax INFO    :    M_c: 1.902403593263544
11:33 ninjax INFO    :    eta: 0.24945330819426936
11:33 ninjax INFO    :    iota: 1.6453747154043685
11:33 ninjax INFO    :    dec: -0.06341846213601289
11:33 ninjax INFO    :    lambda_1: 39.14851574852324
11:33 ninjax INFO    :    lambda_2: 79.38608626016232
11:33 ninjax INFO    :    H1_SNR: 11.953702207919019
11:33 ninjax INFO    :    L1_SNR: 5.51299892668497
11:33 ninjax INFO    :    V1_SNR: 1.6129201327443072
11:33 ninjax INFO    :    network_SNR: 13.26218929874889
11:33 ninjax INFO    :    epoch: 126.0
11:33 ninjax INFO    :    gmst: 2.7288901910520846
11:33 ninjax INFO    :    duration: 128.0
11:33 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
11:33 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
11:33 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
11:35 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 144.66353559494019 seconds = 2.4110589265823363 minutes
11:35 ninjax INFO    : The priors are not modified after their initialization
11:35 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
11:35 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
11:35 ninjax INFO    : sample: {'M_c': Array([1.95342139, 2.52219106, 1.80337385], dtype=float64), 'q': Array([0.33742207, 0.23558488, 0.27416965], dtype=float64), 's1_z': Array([-0.04124999,  0.02579789,  0.03252404], dtype=float64), 's2_z': Array([ 0.04410271,  0.048418  , -0.02993633], dtype=float64), 'lambda_1': Array([3644.02746032, 1306.52491632, 4269.43330323], dtype=float64), 'lambda_2': Array([2076.67798282, 1175.97002473,  805.28186136], dtype=float64), 'cos_iota': Array([-0.15708514,  0.24998339, -0.64476051], dtype=float64), 'd_L': Array([503.82519799, 804.55086712, 513.31287396], dtype=float64), 't_c': Array([0.02437402, 0.05195597, 0.04171311], dtype=float64), 'phase_c': Array([2.96626564, 1.9946017 , 4.66309596], dtype=float64), 'psi': Array([0.95000774, 0.1809181 , 2.88375995], dtype=float64), 'ra': Array([0.86226418, 5.64951922, 5.986063  ], dtype=float64), 'sin_dec': Array([-0.41251009,  0.11098272, -0.20693092], dtype=float64)}
11:35 ninjax INFO    : log_prob: [-33.88460937 -10.41490507 -50.33799522]
11:35 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 2.181550193516448, 'mass_2_source': 1.9866338890969129, 's1_z': -0.03534246571364148, 's2_z': -0.023493461676123942, 'cos_iota': -0.07450927446136602, 'd_L': 220.9918243292261, 't_c': 0.09083374665472693, 'phase_c': 4.869035187529442, 'psi': 2.7114882798836044, 'ra': 2.9805711335559475, 'sin_dec': -0.063375960217535, 'q': 0.9106523860881932, 'M_c': 1.902403593263544, 'eta': 0.24945330819426936, 'iota': Array(1.64537472, dtype=float64, weak_type=True), 'dec': Array(-0.06341846, dtype=float64, weak_type=True), 'lambda_1': 39.14851574852324, 'lambda_2': 79.38608626016232, 'H1_SNR': 11.953702207919019, 'L1_SNR': 5.51299892668497, 'V1_SNR': 1.6129201327443072, 'network_SNR': 13.26218929874889, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
11:35 ninjax INFO    : log_prob at the injection parameters is: 39.4191230234308
11:35 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
11:35 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
11:35 ninjax INFO    : Ninjax setup complete.
11:35 ninjax INFO    : Saving output to ./Aplus/injection_27/
11:35 ninjax INFO    : Using polynomial learning rate scheduler
11:35 ninjax INFO    : The hyperparameters passed to flowMC and jim are
11:35 ninjax INFO    :    n_loop_training: 200
11:35 ninjax INFO    :    n_loop_production: 10
11:35 ninjax INFO    :    n_local_steps: 100
11:35 ninjax INFO    :    n_global_steps: 1000
11:35 ninjax INFO    :    n_epochs: 25
11:35 ninjax INFO    :    n_chains: 1000
11:35 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x15279ae9c310>
11:35 ninjax INFO    :    max_samples: 50000
11:35 ninjax INFO    :    momentum: 0.9
11:35 ninjax INFO    :    batch_size: 30000
11:35 ninjax INFO    :    use_global: True
11:35 ninjax INFO    :    keep_quantile: 0.0
11:35 ninjax INFO    :    train_thinning: 10
11:35 ninjax INFO    :    output_thinning: 50
11:35 ninjax INFO    :    n_sample_max: 10000
11:35 ninjax INFO    :    num_layers: 10
11:35 ninjax INFO    :    hidden_size: [128, 128]
11:35 ninjax INFO    :    num_bins: 8
11:35 ninjax INFO    :    save_training_chains: False
11:35 ninjax INFO    :    eps_mass_matrix: 1e-05
11:35 ninjax INFO    :    use_scheduler: True
11:35 ninjax INFO    :    use_temperature: False
11:35 ninjax INFO    :    which_temperature_schedule: exponential
11:35 ninjax INFO    :    starting_temperature: 2.0
11:35 ninjax INFO    :    stop_tempering_iteration: 75
11:35 ninjax INFO    :    stopping_criterion_global_acc: 0.1
11:35 ninjax INFO    :    stopping_criterion_loss: -inf
11:35 ninjax INFO    :    nf_model_kwargs: {}
11:35 ninjax INFO    :    local sampler arg not shown (pretty print)
11:35 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[ 6.61724977e-23 -2.09005070e-23 -3.98927084e-23  3.23683743e-23
  9.50061003e-23  1.61248590e-23 -3.13874474e-23  2.90235953e-23
  1.26088036e-23 -5.61047465e-23]
[-2.47620793e-24  4.74370086e-23  4.19513377e-23  4.87214026e-23
 -9.65187330e-24 -2.58226941e-23 -2.57332110e-23  5.59910305e-23
 -9.07661163e-23 -1.50974519e-23]
Checking the noise that was generated in inject_signal ifo:
[-2.46659076e-23 -3.68439018e-23  3.71009894e-23  9.73326749e-23
  8.61751652e-23  9.44717553e-23 -2.87938691e-23 -5.59066404e-23
 -2.76162096e-23 -2.45938477e-23]
[ 1.11699114e-22  2.33616183e-23 -5.66379650e-23 -1.21551506e-22
 -6.71106663e-24 -7.59924074e-23 -1.47142460e-22 -3.88296801e-23
  1.01862559e-23 -7.22713997e-24]
Checking the noise that was generated in inject_signal ifo:
[ 2.47391550e-23 -9.39680045e-23 -5.81648789e-23 -8.71239255e-23
 -7.82562014e-23  1.24359078e-22  6.45629778e-24 -1.00211171e-22
 -2.55945319e-24 -1.19214257e-22]
[ 7.99315592e-23  1.05007889e-22 -2.08232095e-23 -1.61677983e-23
 -1.96253358e-23 -9.25792819e-23 -9.19312556e-24  9.85548152e-23
 -6.78115296e-23  9.80555338e-23]
Checking the noise that was generated in inject_signal ifo:
[ 1.04721881e-22 -1.30295400e-23  2.24847469e-24 -4.19238819e-23
  2.50037159e-24 -6.11432389e-23  2.63218709e-23  2.53926702e-23
 -2.49955576e-23  1.73187883e-23]
[ 3.93978689e-23  2.57305790e-23  1.41983348e-23  6.18260078e-23
 -6.58963765e-23 -8.12490570e-24  3.19658737e-23  5.12243072e-24
 -6.44222931e-24 -9.47906555e-23]
Checking the noise that was generated in inject_signal ifo:
[ 6.33005499e-23 -2.15423421e-23 -8.83370627e-23  1.87099687e-23
 -1.15870979e-23 -1.18622014e-23 -3.50170020e-23  1.89871039e-23
  5.29516681e-23 -7.58918452e-23]
[ 8.35301420e-24  1.80813193e-23 -1.43156724e-23  6.35518678e-23
  4.51499944e-23  2.50483759e-23 -5.43718585e-23 -1.46364864e-23
  2.65961526e-23 -8.37637441e-23]
Checking the noise that was generated in inject_signal ifo:
[-5.98234768e-23 -7.24333509e-24 -8.81398886e-24 -1.88555000e-23
  1.51422142e-23  2.88920193e-23  1.33973465e-22  6.32230139e-23
  4.14680626e-23 -3.04706268e-23]
[-5.56903188e-25 -2.27333365e-23  1.38647506e-23 -4.32231147e-23
  5.55748087e-23 -2.57901490e-23 -1.75557442e-23  6.22702632e-23
 -7.59124111e-24 -3.11102929e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.1086578369140625 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 2.181550193516448, 'mass_2_source': 1.9866338890969129, 's1_z': -0.03534246571364148, 's2_z': -0.023493461676123942, 'cos_iota': -0.07450927446136602, 'd_L': 220.9918243292261, 't_c': 0.09083374665472693, 'phase_c': 4.869035187529442, 'psi': 2.7114882798836044, 'ra': 2.9805711335559475, 'sin_dec': -0.063375960217535, 'q': 0.9106523860881932, 'M_c': 1.902403593263544, 'eta': 0.24945330819426936, 'iota': Array(1.64537472, dtype=float64, weak_type=True), 'dec': Array(-0.06341846, dtype=float64, weak_type=True), 'lambda_1': 39.14851574852324, 'lambda_2': 79.38608626016232, 'H1_SNR': 11.953702207919019, 'L1_SNR': 5.51299892668497, 'V1_SNR': 1.6129201327443072, 'network_SNR': 13.26218929874889, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5089099407196045 seconds
Time for h_sky_low and h_sky_center: 5.380710601806641 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.7013640403747559
Going to compute coefficients . . .
Time for computing coefficients: 123.68110084533691 seconds
Time for computing coefficients: 6.711580276489258 seconds
Time for computing coefficients: 7.0335001945495605 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:01<6:41:43, 121.12s/it]Tuning global sampler:   1%|          | 2/200 [02:05<2:53:25, 52.55s/it] Tuning global sampler:   2%|▏         | 3/200 [02:10<1:40:39, 30.66s/it]Tuning global sampler:   2%|▏         | 4/200 [02:14<1:06:33, 20.37s/it]Tuning global sampler:   2%|▎         | 5/200 [02:19<47:42, 14.68s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:24<36:23, 11.26s/it]Tuning global sampler:   4%|▎         | 7/200 [02:29<30:05,  9.36s/it]Tuning global sampler:   4%|▍         | 8/200 [02:34<25:04,  7.84s/it]Tuning global sampler:   4%|▍         | 9/200 [02:38<21:40,  6.81s/it]Tuning global sampler:   5%|▌         | 10/200 [02:43<19:13,  6.07s/it]Tuning global sampler:   6%|▌         | 11/200 [02:47<17:41,  5.61s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:37,  5.31s/it]Tuning global sampler:   6%|▋         | 13/200 [02:56<15:51,  5.09s/it]Tuning global sampler:   7%|▋         | 14/200 [03:01<15:22,  4.96s/it]Tuning global sampler:   8%|▊         | 15/200 [03:06<14:59,  4.86s/it]Tuning global sampler:   8%|▊         | 16/200 [03:10<14:44,  4.81s/it]Tuning global sampler:   8%|▊         | 17/200 [03:15<14:30,  4.76s/it]Tuning global sampler:   9%|▉         | 18/200 [03:20<14:19,  4.72s/it]Tuning global sampler:  10%|▉         | 19/200 [03:24<14:09,  4.70s/it]Tuning global sampler:  10%|█         | 20/200 [03:29<14:02,  4.68s/it]Tuning global sampler:  10%|█         | 21/200 [03:34<13:55,  4.67s/it]Tuning global sampler:  11%|█         | 22/200 [03:38<13:47,  4.65s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:44<14:29,  4.91s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:48<13:59,  4.77s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:52<13:35,  4.66s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:57<13:16,  4.58s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:01<13:02,  4.52s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:06<12:52,  4.49s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:10<12:43,  4.46s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:15<12:35,  4.45s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:19<12:28,  4.43s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:23<12:22,  4.42s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:28<12:14,  4.40s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:32<12:08,  4.39s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:36<12:03,  4.39s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:41<12:00,  4.39s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:45<11:55,  4.39s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:50<11:51,  4.39s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:54<11:46,  4.39s/it]Tuning global sampler:  20%|██        | 40/200 [04:58<11:42,  4.39s/it]Tuning global sampler:  20%|██        | 41/200 [05:03<11:38,  4.40s/it]Tuning global sampler:  21%|██        | 42/200 [05:07<11:34,  4.40s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:12<11:31,  4.40s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:17<12:09,  4.67s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:21<11:50,  4.58s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:26<11:36,  4.53s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:30<11:26,  4.48s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:34<11:17,  4.46s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:39<11:10,  4.44s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:43<11:03,  4.42s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:48<10:57,  4.41s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:52<10:51,  4.40s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:56<10:46,  4.40s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:01<10:42,  4.40s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:05<10:35,  4.38s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:09<10:29,  4.37s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:14<10:26,  4.38s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:18<10:22,  4.39s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:23<10:18,  4.38s/it]Tuning global sampler:  30%|███       | 60/200 [06:27<10:14,  4.39s/it]Tuning global sampler:  30%|███       | 61/200 [06:31<10:10,  4.39s/it]Tuning global sampler:  31%|███       | 62/200 [06:36<10:06,  4.40s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:40<10:02,  4.40s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:46<10:38,  4.69s/it]Tuning global sampler:  32%|███▎      | 65/200 [06:50<10:37,  4.72s/it]Tuning global sampler:  33%|███▎      | 66/200 [06:55<10:19,  4.62s/it]Tuning global sampler:  34%|███▎      | 67/200 [06:59<10:04,  4.55s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:04<09:58,  4.53s/it]Tuning global sampler:  34%|███▍      | 69/200 [07:08<09:48,  4.49s/it]Tuning global sampler:  35%|███▌      | 70/200 [07:12<09:40,  4.47s/it]Tuning global sampler:  36%|███▌      | 71/200 [07:17<09:34,  4.45s/it]Tuning global sampler:  36%|███▌      | 72/200 [07:21<09:28,  4.44s/it]Tuning global sampler:  36%|███▋      | 73/200 [07:26<09:22,  4.43s/it]Tuning global sampler:  37%|███▋      | 74/200 [07:30<09:16,  4.42s/it]Tuning global sampler:  38%|███▊      | 75/200 [07:35<09:14,  4.44s/it]Tuning global sampler:  38%|███▊      | 76/200 [07:39<09:08,  4.43s/it]Tuning global sampler:  38%|███▊      | 77/200 [07:43<09:02,  4.41s/it]Tuning global sampler:  39%|███▉      | 78/200 [07:48<08:55,  4.39s/it]Tuning global sampler:  40%|███▉      | 79/200 [07:52<08:51,  4.39s/it]Tuning global sampler:  40%|████      | 80/200 [07:57<08:47,  4.40s/it]Tuning global sampler:  40%|████      | 80/200 [08:01<12:02,  6.02s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.21s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.21s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.21s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.21s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.21s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.21s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.21s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.21s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]
11:44 ninjax INFO    : Saving samples to ./Aplus/injection_27/results_training.npz
11:44 ninjax INFO    : Saving the NF
11:44 ninjax INFO    : Time taken: 520.2027287483215 seconds (8.670045479138691 minutes)
11:44 ninjax INFO    : Creating the final corner plot
11:44 ninjax INFO    : Dumping the final production chains
11:44 ninjax INFO    : Chains shape is: (13, 220000)
11:44 ninjax INFO    : Key: M_c: ESS = 43060, Rhat = 1.015976175587415
11:44 ninjax INFO    : Key: q: ESS = 29579, Rhat = 1.0213358525293816
11:44 ninjax INFO    : Key: s1_z: ESS = 40379, Rhat = 1.0166477728413361
11:44 ninjax INFO    : Key: s2_z: ESS = 34886, Rhat = 1.0192993051521693
11:44 ninjax INFO    : Key: lambda_1: ESS = 44994, Rhat = 1.015218138195648
11:44 ninjax INFO    : Key: lambda_2: ESS = 38397, Rhat = 1.0169828544370003
11:44 ninjax INFO    : Key: cos_iota: ESS = 58033, Rhat = 1.0157445966137926
11:44 ninjax INFO    : Key: d_L: ESS = 18736, Rhat = 1.0328959722183733
11:44 ninjax INFO    : Key: t_c: ESS = 22665, Rhat = 1.0275040921982526
11:44 ninjax INFO    : Key: phase_c: ESS = 36219, Rhat = 1.018714541034118
11:44 ninjax INFO    : Key: psi: ESS = 39889, Rhat = 1.0196283359426896
11:44 ninjax INFO    : Key: ra: ESS = 24363, Rhat = 1.025554466337893
11:44 ninjax INFO    : Key: sin_dec: ESS = 21056, Rhat = 1.0291219710215038
11:44 ninjax INFO    : Key: eta: ESS = 29579, Rhat = 1.0213358525293816
11:44 ninjax INFO    : Key: iota: ESS = 58033, Rhat = 1.0154940530560737
11:44 ninjax INFO    : Key: dec: ESS = 21056, Rhat = 1.0291219710215038
11:44 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.731 +/- 0.323
q: 0.664 +/- 0.236
s1_z: 0.002 +/- 0.028
s2_z: 0.002 +/- 0.028
lambda_1: 1985.712 +/- 1426.164
lambda_2: 2178.680 +/- 1387.972
cos_iota: -0.085 +/- 0.447
d_L: 760.450 +/- 181.312
t_c: 0.053 +/- 0.057
phase_c: 3.079 +/- 1.788
psi: 1.717 +/- 0.873
ra: 3.172 +/- 1.135
sin_dec: -0.367 +/- 0.486
Log probability: 3.362 +/- 22.711
Local acceptance: 0.995 +/- 0.073
Global acceptance: 0.028 +/- 0.164
Max loss: 22.845, Min loss: 8.291
Production summary
==========
M_c: 1.903 +/- 0.001
q: 0.809 +/- 0.115
s1_z: 0.003 +/- 0.027
s2_z: 0.001 +/- 0.028
lambda_1: 821.995 +/- 708.514
lambda_2: 1496.448 +/- 1088.554
cos_iota: -0.093 +/- 0.627
d_L: 596.619 +/- 220.890
t_c: 0.088 +/- 0.003
phase_c: 3.092 +/- 1.797
psi: 1.726 +/- 0.872
ra: 3.157 +/- 0.103
sin_dec: -0.504 +/- 0.237
Log probability: 33.510 +/- 2.909
Local acceptance: 0.992 +/- 0.087
Global acceptance: 0.126 +/- 0.332
DONE

JOB STATISTICS
==============
Job ID: 10923060
Cluster: snellius
User/Group: twouters2/twouters2
State: RUNNING
Nodes: 1
Cores per node: 16
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 03:12:32 core-walltime
Job Wall-clock time: 00:12:02
Memory Utilized: 0.00 MB
Memory Efficiency: 0.00% of 10.00 GB (10.00 GB/node)
WARNING: Efficiency statistics can only be obtained after the job has ended as seff tool is based on the accounting database data.
