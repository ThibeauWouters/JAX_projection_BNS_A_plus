Wed Apr  2 11:32:59 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
11:33 ninjax INFO    : Checking and setting outdir
11:33 ninjax INFO    : Found generation prior file ./Aplus/injection_7/generation_prior.prior
11:33 ninjax INFO    : The outdir is set to ./Aplus/injection_7
11:33 ninjax INFO    : Loading the given config
11:33 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
11:33 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
11:33 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/jester_hard/Aplus/injection_7/complete_config.json
11:33 ninjax INFO    : No seed specified. Generating a random seed: 87371
11:33 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 535217
11:33 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 683403
11:33 ninjax INFO    : Loading the priors
11:33 ninjax INFO    : Setting up the prior
11:33 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
11:33 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
11:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
11:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
11:33 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
11:33 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
11:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
11:33 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
11:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
11:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
11:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
11:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
11:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
11:33 ninjax INFO    : Setting up the generation prior
11:33 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.4, naming=["mass_1_source"])
11:33 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.4, naming=["mass_2_source"])
11:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
11:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
11:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
11:33 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
11:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
11:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
11:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
11:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
11:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
11:33 ninjax INFO    : Finished prior setup
11:33 ninjax INFO    : Setting the transforms
11:33 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
11:33 ninjax INFO    : transforms_str_list has 3 elements
11:33 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
11:33 ninjax INFO    : Setting the likelihood
11:33 ninjax INFO    : GW likelihood provided, setting up the GW pipe
11:33 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz
11:33 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz for BNS injections
11:33 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
11:33 ninjax INFO    : self.is_BNS_run is True
11:33 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
11:33 ninjax INFO    : GW run is an injection
11:33 ninjax INFO    : Setting up GW injection . . . 
11:33 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
11:33 ninjax INFO    : Generating new injection
11:33 ninjax INFO    : Sanity check: generated parameters:
11:33 ninjax INFO    : {'mass_1_source': 2.3332426061212876, 'mass_2_source': 1.8638363842521788, 's1_z': 0.021612222941134657, 's2_z': 0.018394353820883197, 'cos_iota': -0.8077216410878192, 'd_L': 447.897096398704, 't_c': -0.08385719202468818, 'phase_c': 1.0398303332222323, 'psi': 2.688864560457388, 'ra': 1.619694690940315, 'sin_dec': 0.492776169342823}
11:33 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz . . . 
11:33 ninjax INFO    : Injected lambda_1: 19.978145055113078
11:33 ninjax INFO    : Injected lambda_2: 120.3743687357215
11:33 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.9966384341170553 is 128.0
11:33 ninjax INFO    : After transforms, the injection parameters are:
11:33 ninjax INFO    : {'mass_1_source': 2.3332426061212876, 'mass_2_source': 1.8638363842521788, 's1_z': 0.021612222941134657, 's2_z': 0.018394353820883197, 'cos_iota': -0.8077216410878192, 'd_L': 447.897096398704, 't_c': -0.08385719202468818, 'phase_c': 1.0398303332222323, 'psi': 2.688864560457388, 'ra': 1.619694690940315, 'sin_dec': 0.492776169342823, 'q': 0.7988180823384519, 'M_c': 1.9966384341170553, 'eta': 0.2468728882131846, 'iota': Array(2.51107367, dtype=float64, weak_type=True), 'dec': Array(0.51527731, dtype=float64, weak_type=True), 'lambda_1': 19.978145055113078, 'lambda_2': 120.3743687357215}
11:33 ninjax INFO    : The trial injection parameters are {'M_c': 1.9966384341170553, 'eta': 0.2468728882131846, 's1_z': 0.021612222941134657, 's2_z': 0.018394353820883197, 'lambda_1': 19.978145055113078, 'lambda_2': 120.3743687357215, 'd_L': 447.897096398704, 'phase_c': 1.0398303332222323, 'iota': 2.5110736666788864, 't_c': -0.08385719202468818, 'psi': 2.688864560457388, 'ra': 1.619694690940315, 'dec': 0.5152773081304018}
11:33 ninjax INFO    : Injecting signals . . .
11:33 ninjax INFO    : self.ifos
11:33 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
11:33 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:33 ninjax INFO    : [ 3.90272927e-23+3.11642106e-24j -9.23951243e-23-7.75505918e-23j
  6.34501977e-24+4.12169356e-24j ...
 -3.17821156e-23-3.10055197e-23j  1.61758164e-23+1.77465988e-23j
  3.44848744e-23-1.43254975e-23j]
11:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
11:33 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:33 ninjax INFO    : [-6.70573898e-23-2.03158251e-23j  4.95645316e-23+9.67783733e-23j
 -7.91077660e-23+2.82938662e-23j ...
 -6.33522394e-24+7.48471451e-25j -4.72700383e-23-2.23657076e-23j
  1.12847775e-23+4.25458429e-23j]
11:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
11:33 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:33 ninjax INFO    : [ 7.20772795e-23-1.16356447e-22j  4.55336984e-23-5.49830648e-23j
  2.20302092e-23+1.95478683e-24j ...
  2.61865651e-23-1.27853216e-23j -3.92436241e-23-2.96623518e-23j
 -2.27462531e-23+3.36318329e-23j]
11:33 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
11:33 ninjax INFO    : SNR for ifo H1 is 11.344701049800028
11:33 ninjax INFO    : SNR for ifo L1 is 15.0270430255993
11:33 ninjax INFO    : SNR for ifo V1 is 8.155683439863877
11:33 ninjax INFO    : The network SNR is 20.519001836683387
11:33 ninjax INFO    : Network SNR passes threshold
11:33 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
11:33 ninjax INFO    :    mass_1_source: 2.3332426061212876
11:33 ninjax INFO    :    mass_2_source: 1.8638363842521788
11:33 ninjax INFO    :    s1_z: 0.021612222941134657
11:33 ninjax INFO    :    s2_z: 0.018394353820883197
11:33 ninjax INFO    :    cos_iota: -0.8077216410878192
11:33 ninjax INFO    :    d_L: 447.897096398704
11:33 ninjax INFO    :    t_c: -0.08385719202468818
11:33 ninjax INFO    :    phase_c: 1.0398303332222323
11:33 ninjax INFO    :    psi: 2.688864560457388
11:33 ninjax INFO    :    ra: 1.619694690940315
11:33 ninjax INFO    :    sin_dec: 0.492776169342823
11:33 ninjax INFO    :    q: 0.7988180823384519
11:33 ninjax INFO    :    M_c: 1.9966384341170553
11:33 ninjax INFO    :    eta: 0.2468728882131846
11:33 ninjax INFO    :    iota: 2.5110736666788864
11:33 ninjax INFO    :    dec: 0.5152773081304018
11:33 ninjax INFO    :    lambda_1: 19.978145055113078
11:33 ninjax INFO    :    lambda_2: 120.3743687357215
11:33 ninjax INFO    :    H1_SNR: 11.344701049800028
11:33 ninjax INFO    :    L1_SNR: 15.0270430255993
11:33 ninjax INFO    :    V1_SNR: 8.155683439863877
11:33 ninjax INFO    :    network_SNR: 20.519001836683387
11:33 ninjax INFO    :    epoch: 126.0
11:33 ninjax INFO    :    gmst: 2.7288901910520846
11:33 ninjax INFO    :    duration: 128.0
11:33 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
11:33 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
11:33 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
11:35 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 145.35462427139282 seconds = 2.42257707118988 minutes
11:35 ninjax INFO    : The priors are not modified after their initialization
11:35 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
11:35 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
11:35 ninjax INFO    : sample: {'M_c': Array([2.12403917, 1.64732253, 1.63973888], dtype=float64), 'q': Array([0.4587145 , 0.5673524 , 0.47358872], dtype=float64), 's1_z': Array([ 0.02709773,  0.00680658, -0.02956003], dtype=float64), 's2_z': Array([ 0.02536524,  0.01681975, -0.00140473], dtype=float64), 'lambda_1': Array([2034.6403177 , 4058.25326274, 1030.69977217], dtype=float64), 'lambda_2': Array([1112.45670491, 2336.67487152, 1580.18603684], dtype=float64), 'cos_iota': Array([-0.08335635, -0.11412728,  0.18604177], dtype=float64), 'd_L': Array([832.32552757, 944.59833261, 558.21072918], dtype=float64), 't_c': Array([ 0.07140967,  0.06105942, -0.09210365], dtype=float64), 'phase_c': Array([1.7902527 , 4.00168888, 0.81462113], dtype=float64), 'psi': Array([0.82165402, 0.47617497, 1.08460086], dtype=float64), 'ra': Array([1.05757526, 3.52121037, 5.6464029 ], dtype=float64), 'sin_dec': Array([-0.63001057,  0.51694976, -0.86436449], dtype=float64)}
11:35 ninjax INFO    : log_prob: [ -0.69013979  -2.94041907 -23.20383164]
11:35 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 2.3332426061212876, 'mass_2_source': 1.8638363842521788, 's1_z': 0.021612222941134657, 's2_z': 0.018394353820883197, 'cos_iota': -0.8077216410878192, 'd_L': 447.897096398704, 't_c': -0.08385719202468818, 'phase_c': 1.0398303332222323, 'psi': 2.688864560457388, 'ra': 1.619694690940315, 'sin_dec': 0.492776169342823, 'q': 0.7988180823384519, 'M_c': 1.9966384341170553, 'eta': 0.2468728882131846, 'iota': Array(2.51107367, dtype=float64, weak_type=True), 'dec': Array(0.51527731, dtype=float64, weak_type=True), 'lambda_1': 19.978145055113078, 'lambda_2': 120.3743687357215, 'H1_SNR': 11.344701049800028, 'L1_SNR': 15.0270430255993, 'V1_SNR': 8.155683439863877, 'network_SNR': 20.519001836683387, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
11:35 ninjax INFO    : log_prob at the injection parameters is: 182.6239737853038
11:35 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
11:35 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
11:35 ninjax INFO    : Ninjax setup complete.
11:35 ninjax INFO    : Saving output to ./Aplus/injection_7/
11:35 ninjax INFO    : Using polynomial learning rate scheduler
11:35 ninjax INFO    : The hyperparameters passed to flowMC and jim are
11:35 ninjax INFO    :    n_loop_training: 200
11:35 ninjax INFO    :    n_loop_production: 10
11:35 ninjax INFO    :    n_local_steps: 100
11:35 ninjax INFO    :    n_global_steps: 1000
11:35 ninjax INFO    :    n_epochs: 25
11:35 ninjax INFO    :    n_chains: 1000
11:35 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x152950407be0>
11:35 ninjax INFO    :    max_samples: 50000
11:35 ninjax INFO    :    momentum: 0.9
11:35 ninjax INFO    :    batch_size: 30000
11:35 ninjax INFO    :    use_global: True
11:35 ninjax INFO    :    keep_quantile: 0.0
11:35 ninjax INFO    :    train_thinning: 10
11:35 ninjax INFO    :    output_thinning: 50
11:35 ninjax INFO    :    n_sample_max: 10000
11:35 ninjax INFO    :    num_layers: 10
11:35 ninjax INFO    :    hidden_size: [128, 128]
11:35 ninjax INFO    :    num_bins: 8
11:35 ninjax INFO    :    save_training_chains: False
11:35 ninjax INFO    :    eps_mass_matrix: 1e-05
11:35 ninjax INFO    :    use_scheduler: True
11:35 ninjax INFO    :    use_temperature: False
11:35 ninjax INFO    :    which_temperature_schedule: exponential
11:35 ninjax INFO    :    starting_temperature: 2.0
11:35 ninjax INFO    :    stop_tempering_iteration: 75
11:35 ninjax INFO    :    stopping_criterion_global_acc: 0.1
11:35 ninjax INFO    :    stopping_criterion_loss: -inf
11:35 ninjax INFO    :    nf_model_kwargs: {}
11:35 ninjax INFO    :    local sampler arg not shown (pretty print)
11:35 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[ 3.39698968e-23 -8.71649613e-23  1.89931737e-24 -5.90740435e-23
  4.88956809e-23 -5.70689118e-23 -2.09825370e-23 -1.11571380e-22
 -1.35646017e-23 -1.95501934e-23]
[ 4.64721783e-24 -7.68154787e-23  1.27473671e-24  4.71466874e-23
 -1.36616224e-23 -2.14461017e-23 -4.64127448e-23  1.62875684e-23
 -6.11638851e-23 -1.72466723e-22]
Checking the noise that was generated in inject_signal ifo:
[-6.01199129e-23  4.36618572e-23 -7.53106490e-23  3.85744187e-23
 -4.26259879e-23  7.39576037e-23  8.96449260e-24 -4.01935257e-23
 -2.45701248e-23  3.76416816e-23]
[-1.93890310e-23  9.30232356e-23  3.41658059e-23 -2.30560869e-23
  4.46521846e-23  2.20178048e-23  3.66356235e-23  3.18683902e-23
 -4.45956599e-23 -1.21602324e-22]
Checking the noise that was generated in inject_signal ifo:
[ 7.34674100e-23  4.62074162e-23  1.94336318e-23 -6.44593136e-23
  1.40504827e-23  4.67706107e-23 -7.23524509e-25 -4.67582156e-23
  1.21911065e-23  6.87802286e-23]
[-1.11746978e-22 -5.97479913e-23  6.00385884e-24 -5.40790558e-23
 -6.55621784e-23 -3.85514420e-23 -3.11661559e-24  4.02274842e-23
  4.69959172e-23  8.96132781e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.11135077476501465 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 2.3332426061212876, 'mass_2_source': 1.8638363842521788, 's1_z': 0.021612222941134657, 's2_z': 0.018394353820883197, 'cos_iota': -0.8077216410878192, 'd_L': 447.897096398704, 't_c': -0.08385719202468818, 'phase_c': 1.0398303332222323, 'psi': 2.688864560457388, 'ra': 1.619694690940315, 'sin_dec': 0.492776169342823, 'q': 0.7988180823384519, 'M_c': 1.9966384341170553, 'eta': 0.2468728882131846, 'iota': Array(2.51107367, dtype=float64, weak_type=True), 'dec': Array(0.51527731, dtype=float64, weak_type=True), 'lambda_1': 19.978145055113078, 'lambda_2': 120.3743687357215, 'H1_SNR': 11.344701049800028, 'L1_SNR': 15.0270430255993, 'V1_SNR': 8.155683439863877, 'network_SNR': 20.519001836683387, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5077846050262451 seconds
Time for h_sky_low and h_sky_center: 5.32552695274353 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.6854767799377441
Going to compute coefficients . . .
Time for computing coefficients: 124.26884031295776 seconds
Time for computing coefficients: 6.948367595672607 seconds
Time for computing coefficients: 6.9601335525512695 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:00<6:41:00, 120.91s/it]Tuning global sampler:   1%|          | 2/200 [02:05<2:53:11, 52.48s/it] Tuning global sampler:   2%|▏         | 3/200 [02:10<1:40:34, 30.63s/it]Tuning global sampler:   2%|▏         | 4/200 [02:14<1:06:31, 20.37s/it]Tuning global sampler:   2%|▎         | 5/200 [02:20<48:44, 15.00s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:24<37:05, 11.47s/it]Tuning global sampler:   4%|▎         | 7/200 [02:29<29:38,  9.21s/it]Tuning global sampler:   4%|▍         | 8/200 [02:34<24:48,  7.75s/it]Tuning global sampler:   4%|▍         | 9/200 [02:38<21:30,  6.76s/it]Tuning global sampler:   5%|▌         | 10/200 [02:43<19:07,  6.04s/it]Tuning global sampler:   6%|▌         | 11/200 [02:47<17:39,  5.60s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:35,  5.30s/it]Tuning global sampler:   6%|▋         | 13/200 [02:56<15:49,  5.08s/it]Tuning global sampler:   7%|▋         | 14/200 [03:01<15:19,  4.95s/it]Tuning global sampler:   8%|▊         | 15/200 [03:06<14:58,  4.86s/it]Tuning global sampler:   8%|▊         | 16/200 [03:10<14:41,  4.79s/it]Tuning global sampler:   8%|▊         | 17/200 [03:15<14:28,  4.75s/it]Tuning global sampler:   9%|▉         | 18/200 [03:20<14:18,  4.71s/it]Tuning global sampler:  10%|▉         | 19/200 [03:24<14:09,  4.69s/it]Tuning global sampler:  10%|█         | 20/200 [03:29<14:01,  4.68s/it]Tuning global sampler:  10%|█         | 21/200 [03:33<13:55,  4.67s/it]Tuning global sampler:  11%|█         | 22/200 [03:38<13:46,  4.65s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:43<13:40,  4.63s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:47<13:24,  4.57s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:52<13:57,  4.79s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:57<13:32,  4.67s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:01<13:13,  4.59s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:06<12:58,  4.53s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:10<12:47,  4.49s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:14<12:38,  4.46s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:19<12:30,  4.44s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:23<12:22,  4.42s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:27<12:14,  4.40s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:32<12:08,  4.39s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:36<12:03,  4.39s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:41<11:59,  4.39s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:45<11:54,  4.38s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:49<11:50,  4.38s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:54<11:45,  4.38s/it]Tuning global sampler:  20%|██        | 40/200 [04:58<11:51,  4.44s/it]Tuning global sampler:  20%|██        | 41/200 [05:03<11:43,  4.43s/it]Tuning global sampler:  21%|██        | 42/200 [05:07<11:37,  4.41s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:12<11:32,  4.41s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:17<12:09,  4.68s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:21<11:50,  4.58s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:26<11:36,  4.52s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:30<11:25,  4.48s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:34<11:16,  4.45s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:39<11:10,  4.44s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:43<11:03,  4.42s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:48<10:57,  4.41s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:52<10:51,  4.40s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:56<10:46,  4.40s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:01<10:41,  4.40s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:05<10:35,  4.38s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:09<10:29,  4.37s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:14<10:26,  4.38s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:18<10:22,  4.39s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:23<10:18,  4.39s/it]Tuning global sampler:  30%|███       | 60/200 [06:27<10:15,  4.39s/it]Tuning global sampler:  30%|███       | 60/200 [06:31<15:14,  6.53s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.21s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.21s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.21s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.21s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.21s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.21s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.21s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.21s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]
11:42 ninjax INFO    : Saving samples to ./Aplus/injection_7/results_training.npz
11:43 ninjax INFO    : Saving the NF
11:43 ninjax INFO    : Time taken: 430.82944917678833 seconds (7.180490819613139 minutes)
11:43 ninjax INFO    : Creating the final corner plot
11:43 ninjax INFO    : Dumping the final production chains
11:43 ninjax INFO    : Chains shape is: (13, 220000)
11:43 ninjax INFO    : Key: M_c: ESS = 75225, Rhat = 1.0100740935086574
11:43 ninjax INFO    : Key: q: ESS = 36464, Rhat = 1.0189190180232823
11:43 ninjax INFO    : Key: s1_z: ESS = 33248, Rhat = 1.0200053226079755
11:43 ninjax INFO    : Key: s2_z: ESS = 47944, Rhat = 1.014652309954688
11:43 ninjax INFO    : Key: lambda_1: ESS = 61626, Rhat = 1.0118648607585123
11:43 ninjax INFO    : Key: lambda_2: ESS = 59532, Rhat = 1.0122854094832698
11:43 ninjax INFO    : Key: cos_iota: ESS = 33760, Rhat = 1.0208429683404663
11:43 ninjax INFO    : Key: d_L: ESS = 41937, Rhat = 1.0177422256260338
11:43 ninjax INFO    : Key: t_c: ESS = 88224, Rhat = 1.0099354187970642
11:43 ninjax INFO    : Key: phase_c: ESS = 40229, Rhat = 1.0160436047007935
11:43 ninjax INFO    : Key: psi: ESS = 80309, Rhat = 1.0105790486766102
11:43 ninjax INFO    : Key: ra: ESS = 55905, Rhat = 1.0129293856300532
11:43 ninjax INFO    : Key: sin_dec: ESS = 84854, Rhat = 1.0102665739226522
11:43 ninjax INFO    : Key: eta: ESS = 36464, Rhat = 1.0189190180232823
11:43 ninjax INFO    : Key: iota: ESS = 33760, Rhat = 1.0208429683404663
11:43 ninjax INFO    : Key: dec: ESS = 84854, Rhat = 1.0102665739226522
11:43 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.953 +/- 0.178
q: 0.794 +/- 0.188
s1_z: 0.014 +/- 0.026
s2_z: 0.008 +/- 0.026
lambda_1: 1541.244 +/- 1484.274
lambda_2: 1532.376 +/- 1418.105
cos_iota: -0.322 +/- 0.549
d_L: 628.612 +/- 197.691
t_c: -0.075 +/- 0.028
phase_c: 3.135 +/- 1.756
psi: 1.643 +/- 0.909
ra: 1.673 +/- 0.814
sin_dec: 0.338 +/- 0.298
Log probability: 96.612 +/- 74.450
Local acceptance: 0.983 +/- 0.131
Global acceptance: 0.011 +/- 0.104
Max loss: 22.936, Min loss: 5.969
Production summary
==========
M_c: 1.997 +/- 0.000
q: 0.862 +/- 0.090
s1_z: 0.021 +/- 0.020
s2_z: 0.016 +/- 0.022
lambda_1: 158.295 +/- 143.454
lambda_2: 252.868 +/- 224.923
cos_iota: -0.814 +/- 0.143
d_L: 466.588 +/- 74.058
t_c: -0.083 +/- 0.001
phase_c: 3.170 +/- 1.813
psi: 1.599 +/- 0.904
ra: 1.615 +/- 0.008
sin_dec: 0.494 +/- 0.012
Log probability: 179.454 +/- 2.209
Local acceptance: 0.964 +/- 0.186
Global acceptance: 0.115 +/- 0.320
DONE

JOB STATISTICS
==============
Job ID: 10923040
Cluster: snellius
User/Group: twouters2/twouters2
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 00:09:38
CPU Efficiency: 5.76% of 02:47:12 core-walltime
Job Wall-clock time: 00:10:27
Memory Utilized: 4.19 GB
Memory Efficiency: 41.94% of 10.00 GB (10.00 GB/node)
