Wed Apr  2 11:32:54 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
11:33 ninjax INFO    : Checking and setting outdir
11:33 ninjax INFO    : Found generation prior file ./Aplus/injection_2/generation_prior.prior
11:33 ninjax INFO    : The outdir is set to ./Aplus/injection_2
11:33 ninjax INFO    : Loading the given config
11:33 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
11:33 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
11:33 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/jester_hard/Aplus/injection_2/complete_config.json
11:33 ninjax INFO    : No seed specified. Generating a random seed: 643111
11:33 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 93794
11:33 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 75520
11:33 ninjax INFO    : Loading the priors
11:33 ninjax INFO    : Setting up the prior
11:33 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
11:33 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
11:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
11:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
11:33 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
11:33 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
11:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
11:33 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
11:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
11:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
11:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
11:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
11:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
11:33 ninjax INFO    : Setting up the generation prior
11:33 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.4, naming=["mass_1_source"])
11:33 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.4, naming=["mass_2_source"])
11:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
11:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
11:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
11:33 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
11:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
11:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
11:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
11:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
11:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
11:33 ninjax INFO    : Finished prior setup
11:33 ninjax INFO    : Setting the transforms
11:33 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
11:33 ninjax INFO    : transforms_str_list has 3 elements
11:33 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
11:33 ninjax INFO    : Setting the likelihood
11:33 ninjax INFO    : GW likelihood provided, setting up the GW pipe
11:33 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz
11:33 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz for BNS injections
11:33 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
11:33 ninjax INFO    : self.is_BNS_run is True
11:33 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
11:33 ninjax INFO    : GW run is an injection
11:33 ninjax INFO    : Setting up GW injection . . . 
11:33 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
11:33 ninjax INFO    : Generating new injection
11:33 ninjax INFO    : Sanity check: generated parameters:
11:33 ninjax INFO    : {'mass_1_source': 1.7070700120801756, 'mass_2_source': 2.273374209521757, 's1_z': -0.016715589302251192, 's2_z': -0.03128515047869221, 'cos_iota': 0.3707336087712658, 'd_L': 409.8080053155394, 't_c': -0.010007326806163341, 'phase_c': 5.971271357432984, 'psi': 1.8362773952238673, 'ra': 5.026409536003942, 'sin_dec': -0.6870205890055532}
11:33 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz . . . 
11:33 ninjax INFO    : Injected lambda_1: 26.526692681678867
11:33 ninjax INFO    : Injected lambda_2: 204.07619595322114
11:33 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.869940256620886 is 128.0
11:33 ninjax INFO    : After transforms, the injection parameters are:
11:33 ninjax INFO    : {'mass_1_source': 2.273374209521757, 'mass_2_source': 1.7070700120801756, 's1_z': -0.016715589302251192, 's2_z': -0.03128515047869221, 'cos_iota': 0.3707336087712658, 'd_L': 409.8080053155394, 't_c': -0.010007326806163341, 'phase_c': 5.971271357432984, 'psi': 1.8362773952238673, 'ra': 5.026409536003942, 'sin_dec': -0.6870205890055532, 'q': 0.7508970608227701, 'M_c': 1.869940256620886, 'eta': 0.24493969743430993, 'iota': Array(1.19099753, dtype=float64, weak_type=True), 'dec': Array(-0.75738079, dtype=float64, weak_type=True), 'lambda_1': 26.526692681678867, 'lambda_2': 204.07619595322114}
11:33 ninjax INFO    : The trial injection parameters are {'M_c': 1.869940256620886, 'eta': 0.24493969743430993, 's1_z': -0.016715589302251192, 's2_z': -0.03128515047869221, 'lambda_1': 26.526692681678867, 'lambda_2': 204.07619595322114, 'd_L': 409.8080053155394, 'phase_c': 5.971271357432984, 'iota': 1.1909975330513376, 't_c': -0.010007326806163341, 'psi': 1.8362773952238673, 'ra': 5.026409536003942, 'dec': -0.7573807934970859}
11:33 ninjax INFO    : Injecting signals . . .
11:33 ninjax INFO    : self.ifos
11:33 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
11:33 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:33 ninjax INFO    : [-4.98875690e-23-5.86035164e-24j -1.29168581e-22-3.77789824e-23j
 -6.08335612e-23+1.81289081e-23j ...
  2.51549261e-23-1.71061497e-23j  2.64353462e-23+1.09468779e-24j
  3.31772758e-23+2.29887301e-24j]
11:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
11:33 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:33 ninjax INFO    : [ 7.62066595e-23+1.45906905e-23j -2.76799257e-23+8.82927635e-24j
 -1.36284895e-23+5.93076887e-24j ...
 -7.23075815e-24-1.19968362e-23j -6.30430660e-24-1.70483085e-25j
 -1.82785993e-24-6.06460297e-24j]
11:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
11:33 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:33 ninjax INFO    : [-5.81154019e-23-1.91095340e-23j -2.40780325e-24+8.52402751e-23j
 -2.83534671e-23+1.18375735e-22j ...
  2.67115609e-24+3.49889979e-23j  7.15008699e-24+2.89947291e-23j
  1.60146876e-23-2.80442145e-23j]
11:33 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
11:33 ninjax INFO    : SNR for ifo H1 is 5.960139347204075
11:33 ninjax INFO    : SNR for ifo L1 is 8.057296226981347
11:33 ninjax INFO    : SNR for ifo V1 is 7.07694505869033
11:33 ninjax INFO    : The network SNR is 12.268921504807974
11:33 ninjax INFO    : Network SNR passes threshold
11:33 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
11:33 ninjax INFO    :    mass_1_source: 2.273374209521757
11:33 ninjax INFO    :    mass_2_source: 1.7070700120801756
11:33 ninjax INFO    :    s1_z: -0.016715589302251192
11:33 ninjax INFO    :    s2_z: -0.03128515047869221
11:33 ninjax INFO    :    cos_iota: 0.3707336087712658
11:33 ninjax INFO    :    d_L: 409.8080053155394
11:33 ninjax INFO    :    t_c: -0.010007326806163341
11:33 ninjax INFO    :    phase_c: 5.971271357432984
11:33 ninjax INFO    :    psi: 1.8362773952238673
11:33 ninjax INFO    :    ra: 5.026409536003942
11:33 ninjax INFO    :    sin_dec: -0.6870205890055532
11:33 ninjax INFO    :    q: 0.7508970608227701
11:33 ninjax INFO    :    M_c: 1.869940256620886
11:33 ninjax INFO    :    eta: 0.24493969743430993
11:33 ninjax INFO    :    iota: 1.1909975330513376
11:33 ninjax INFO    :    dec: -0.7573807934970859
11:33 ninjax INFO    :    lambda_1: 26.526692681678867
11:33 ninjax INFO    :    lambda_2: 204.07619595322114
11:33 ninjax INFO    :    H1_SNR: 5.960139347204075
11:33 ninjax INFO    :    L1_SNR: 8.057296226981347
11:33 ninjax INFO    :    V1_SNR: 7.07694505869033
11:33 ninjax INFO    :    network_SNR: 12.268921504807974
11:33 ninjax INFO    :    epoch: 126.0
11:33 ninjax INFO    :    gmst: 2.7288901910520846
11:33 ninjax INFO    :    duration: 128.0
11:33 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
11:33 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
11:33 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
11:35 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 143.479088306427 seconds = 2.39131813844045 minutes
11:35 ninjax INFO    : The priors are not modified after their initialization
11:35 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
11:35 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
11:35 ninjax INFO    : sample: {'M_c': Array([1.4585074 , 2.08827956, 1.15646466], dtype=float64), 'q': Array([0.73518192, 0.57444192, 0.72302315], dtype=float64), 's1_z': Array([-0.02640487, -0.04509672,  0.03732426], dtype=float64), 's2_z': Array([ 0.0427519 , -0.01515863,  0.03659682], dtype=float64), 'lambda_1': Array([1290.99003263, 4649.76575246,  614.65495506], dtype=float64), 'lambda_2': Array([2352.4552953 , 3494.36182904, 3656.69858007], dtype=float64), 'cos_iota': Array([-0.604234  ,  0.90985182,  0.60734985], dtype=float64), 'd_L': Array([915.09705726, 918.33927681, 742.78360762], dtype=float64), 't_c': Array([ 0.07785879,  0.04399877, -0.00547478], dtype=float64), 'phase_c': Array([4.77053304, 1.99567673, 0.6570138 ], dtype=float64), 'psi': Array([1.30466124e+00, 1.28255736e-03, 3.21889925e-01], dtype=float64), 'ra': Array([5.14558514, 1.44863692, 3.90036848], dtype=float64), 'sin_dec': Array([ 0.96954042,  0.51170793, -0.57684654], dtype=float64)}
11:35 ninjax INFO    : log_prob: [-13.75992019 -77.02368404 -33.41452228]
11:35 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 2.273374209521757, 'mass_2_source': 1.7070700120801756, 's1_z': -0.016715589302251192, 's2_z': -0.03128515047869221, 'cos_iota': 0.3707336087712658, 'd_L': 409.8080053155394, 't_c': -0.010007326806163341, 'phase_c': 5.971271357432984, 'psi': 1.8362773952238673, 'ra': 5.026409536003942, 'sin_dec': -0.6870205890055532, 'q': 0.7508970608227701, 'M_c': 1.869940256620886, 'eta': 0.24493969743430993, 'iota': Array(1.19099753, dtype=float64, weak_type=True), 'dec': Array(-0.75738079, dtype=float64, weak_type=True), 'lambda_1': 26.526692681678867, 'lambda_2': 204.07619595322114, 'H1_SNR': 5.960139347204075, 'L1_SNR': 8.057296226981347, 'V1_SNR': 7.07694505869033, 'network_SNR': 12.268921504807974, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
11:35 ninjax INFO    : log_prob at the injection parameters is: 48.13129346652874
11:35 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
11:35 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
11:35 ninjax INFO    : Ninjax setup complete.
11:35 ninjax INFO    : Saving output to ./Aplus/injection_2/
11:35 ninjax INFO    : Using polynomial learning rate scheduler
11:35 ninjax INFO    : The hyperparameters passed to flowMC and jim are
11:35 ninjax INFO    :    n_loop_training: 200
11:35 ninjax INFO    :    n_loop_production: 10
11:35 ninjax INFO    :    n_local_steps: 100
11:35 ninjax INFO    :    n_global_steps: 1000
11:35 ninjax INFO    :    n_epochs: 25
11:35 ninjax INFO    :    n_chains: 1000
11:35 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x1503a3d9bbe0>
11:35 ninjax INFO    :    max_samples: 50000
11:35 ninjax INFO    :    momentum: 0.9
11:35 ninjax INFO    :    batch_size: 30000
11:35 ninjax INFO    :    use_global: True
11:35 ninjax INFO    :    keep_quantile: 0.0
11:35 ninjax INFO    :    train_thinning: 10
11:35 ninjax INFO    :    output_thinning: 50
11:35 ninjax INFO    :    n_sample_max: 10000
11:35 ninjax INFO    :    num_layers: 10
11:35 ninjax INFO    :    hidden_size: [128, 128]
11:35 ninjax INFO    :    num_bins: 8
11:35 ninjax INFO    :    save_training_chains: False
11:35 ninjax INFO    :    eps_mass_matrix: 1e-05
11:35 ninjax INFO    :    use_scheduler: True
11:35 ninjax INFO    :    use_temperature: False
11:35 ninjax INFO    :    which_temperature_schedule: exponential
11:35 ninjax INFO    :    starting_temperature: 2.0
11:35 ninjax INFO    :    stop_tempering_iteration: 75
11:35 ninjax INFO    :    stopping_criterion_global_acc: 0.1
11:35 ninjax INFO    :    stopping_criterion_loss: -inf
11:35 ninjax INFO    :    nf_model_kwargs: {}
11:35 ninjax INFO    :    local sampler arg not shown (pretty print)
11:35 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[-5.26503579e-23 -1.27097960e-22 -6.08931936e-23 -3.48649975e-23
  1.05661872e-22  5.50256800e-23  5.13925974e-24 -3.10388664e-23
 -6.70420621e-23 -3.66090792e-23]
[-5.59231580e-24 -3.59322791e-23  1.53563329e-23 -5.44616605e-23
 -7.33080535e-23 -8.17078011e-24 -7.98761595e-23  1.05519595e-23
 -9.38909122e-24 -2.19006597e-23]
Checking the noise that was generated in inject_signal ifo:
[ 7.85819823e-23 -3.14237905e-23 -1.09119065e-23  1.06673254e-22
 -1.11258776e-22 -2.08342327e-24 -4.84853032e-23  2.55363841e-24
  1.29025010e-22 -2.97663437e-23]
[ 1.16857429e-23  9.05609849e-24  8.51442084e-24  5.42194209e-23
  9.22557185e-23 -8.98813007e-23  2.36434757e-23  3.89738964e-23
  1.07326171e-22 -3.49861470e-24]
Checking the noise that was generated in inject_signal ifo:
[-5.83938816e-23  8.40941627e-25 -3.24849065e-23  3.87422521e-23
 -7.77159573e-23  6.25789751e-23  7.58796270e-23 -5.54783646e-23
 -3.77745923e-24 -2.90188196e-23]
[-1.49417040e-23  8.26176770e-23  1.17786159e-22 -3.90243721e-23
  1.35248995e-23 -1.39157848e-23  3.21874998e-24  1.33374641e-23
  6.31935596e-23  2.44504874e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.11003994941711426 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 2.273374209521757, 'mass_2_source': 1.7070700120801756, 's1_z': -0.016715589302251192, 's2_z': -0.03128515047869221, 'cos_iota': 0.3707336087712658, 'd_L': 409.8080053155394, 't_c': -0.010007326806163341, 'phase_c': 5.971271357432984, 'psi': 1.8362773952238673, 'ra': 5.026409536003942, 'sin_dec': -0.6870205890055532, 'q': 0.7508970608227701, 'M_c': 1.869940256620886, 'eta': 0.24493969743430993, 'iota': Array(1.19099753, dtype=float64, weak_type=True), 'dec': Array(-0.75738079, dtype=float64, weak_type=True), 'lambda_1': 26.526692681678867, 'lambda_2': 204.07619595322114, 'H1_SNR': 5.960139347204075, 'L1_SNR': 8.057296226981347, 'V1_SNR': 7.07694505869033, 'network_SNR': 12.268921504807974, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5117292404174805 seconds
Time for h_sky_low and h_sky_center: 5.330842018127441 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.6659002304077148
Going to compute coefficients . . .
Time for computing coefficients: 122.43632912635803 seconds
Time for computing coefficients: 6.9598658084869385 seconds
Time for computing coefficients: 6.9270994663238525 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:00<6:40:59, 120.90s/it]Tuning global sampler:   1%|          | 2/200 [02:05<2:53:09, 52.47s/it] Tuning global sampler:   2%|▏         | 3/200 [02:10<1:40:31, 30.62s/it]Tuning global sampler:   2%|▏         | 4/200 [02:14<1:06:28, 20.35s/it]Tuning global sampler:   2%|▎         | 5/200 [02:20<48:40, 14.98s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:24<37:01, 11.45s/it]Tuning global sampler:   4%|▎         | 7/200 [02:29<29:34,  9.20s/it]Tuning global sampler:   4%|▍         | 8/200 [02:33<24:44,  7.73s/it]Tuning global sampler:   4%|▍         | 9/200 [02:38<21:27,  6.74s/it]Tuning global sampler:   5%|▌         | 10/200 [02:42<19:04,  6.02s/it]Tuning global sampler:   6%|▌         | 11/200 [02:47<17:39,  5.61s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:35,  5.30s/it]Tuning global sampler:   6%|▋         | 13/200 [02:56<15:49,  5.08s/it]Tuning global sampler:   7%|▋         | 14/200 [03:01<15:22,  4.96s/it]Tuning global sampler:   8%|▊         | 15/200 [03:06<15:03,  4.88s/it]Tuning global sampler:   8%|▊         | 16/200 [03:10<14:44,  4.81s/it]Tuning global sampler:   8%|▊         | 17/200 [03:15<14:30,  4.76s/it]Tuning global sampler:   9%|▉         | 18/200 [03:19<14:18,  4.72s/it]Tuning global sampler:  10%|▉         | 19/200 [03:24<14:09,  4.69s/it]Tuning global sampler:  10%|█         | 20/200 [03:29<14:01,  4.68s/it]Tuning global sampler:  10%|█         | 21/200 [03:33<13:54,  4.66s/it]Tuning global sampler:  11%|█         | 22/200 [03:38<13:46,  4.64s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:43<13:39,  4.63s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:47<13:23,  4.57s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:52<13:58,  4.79s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:57<13:32,  4.67s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:01<13:13,  4.58s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:06<13:22,  4.67s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:10<13:03,  4.58s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:15<12:49,  4.53s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:19<12:37,  4.48s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:24<12:27,  4.45s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:28<12:17,  4.42s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:32<12:10,  4.40s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:37<12:21,  4.50s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:41<12:11,  4.46s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:46<12:03,  4.44s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:50<11:56,  4.42s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:54<11:50,  4.41s/it]Tuning global sampler:  20%|██        | 40/200 [04:59<11:44,  4.40s/it]Tuning global sampler:  20%|██        | 41/200 [05:03<11:39,  4.40s/it]Tuning global sampler:  21%|██        | 42/200 [05:08<11:53,  4.52s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:12<11:45,  4.49s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:18<12:19,  4.74s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:22<11:56,  4.62s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:27<11:41,  4.55s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:31<11:28,  4.50s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:35<11:18,  4.47s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:40<11:11,  4.45s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:44<11:06,  4.45s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:49<10:59,  4.43s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:53<10:53,  4.42s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:57<10:47,  4.41s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:02<10:44,  4.42s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:06<10:38,  4.40s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:10<10:31,  4.39s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:15<10:29,  4.40s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:19<10:25,  4.40s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:24<10:19,  4.40s/it]Tuning global sampler:  30%|███       | 60/200 [06:28<10:15,  4.40s/it]Tuning global sampler:  30%|███       | 61/200 [06:32<10:11,  4.40s/it]Tuning global sampler:  31%|███       | 62/200 [06:37<10:06,  4.40s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:41<10:03,  4.40s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:47<10:37,  4.69s/it]Tuning global sampler:  32%|███▎      | 65/200 [06:51<10:21,  4.60s/it]Tuning global sampler:  33%|███▎      | 66/200 [06:55<10:06,  4.53s/it]Tuning global sampler:  34%|███▎      | 67/200 [07:00<09:55,  4.47s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:04<09:46,  4.45s/it]Tuning global sampler:  34%|███▍      | 69/200 [07:09<09:40,  4.43s/it]Tuning global sampler:  35%|███▌      | 70/200 [07:13<09:34,  4.42s/it]Tuning global sampler:  36%|███▌      | 71/200 [07:17<09:29,  4.42s/it]Tuning global sampler:  36%|███▌      | 72/200 [07:22<09:24,  4.41s/it]Tuning global sampler:  36%|███▋      | 73/200 [07:26<09:19,  4.41s/it]Tuning global sampler:  37%|███▋      | 74/200 [07:31<09:14,  4.40s/it]Tuning global sampler:  38%|███▊      | 75/200 [07:35<09:10,  4.40s/it]Tuning global sampler:  38%|███▊      | 76/200 [07:39<09:05,  4.40s/it]Tuning global sampler:  38%|███▊      | 77/200 [07:44<08:59,  4.39s/it]Tuning global sampler:  39%|███▉      | 78/200 [07:48<08:54,  4.38s/it]Tuning global sampler:  40%|███▉      | 79/200 [07:52<08:50,  4.39s/it]Tuning global sampler:  40%|████      | 80/200 [07:57<08:46,  4.39s/it]Tuning global sampler:  40%|████      | 81/200 [08:01<08:43,  4.40s/it]Tuning global sampler:  41%|████      | 82/200 [08:06<08:39,  4.40s/it]Tuning global sampler:  42%|████▏     | 83/200 [08:10<08:34,  4.40s/it]Tuning global sampler:  42%|████▏     | 84/200 [08:14<08:30,  4.40s/it]Tuning global sampler:  42%|████▎     | 85/200 [08:20<09:00,  4.70s/it]Tuning global sampler:  43%|████▎     | 86/200 [08:24<08:45,  4.61s/it]Tuning global sampler:  44%|████▎     | 87/200 [08:29<08:34,  4.55s/it]Tuning global sampler:  44%|████▍     | 88/200 [08:33<08:23,  4.50s/it]Tuning global sampler:  44%|████▍     | 89/200 [08:37<08:14,  4.46s/it]Tuning global sampler:  45%|████▌     | 90/200 [08:42<08:08,  4.44s/it]Tuning global sampler:  46%|████▌     | 91/200 [08:46<08:02,  4.43s/it]Tuning global sampler:  46%|████▌     | 92/200 [08:51<07:57,  4.42s/it]Tuning global sampler:  46%|████▋     | 93/200 [08:55<07:53,  4.43s/it]Tuning global sampler:  47%|████▋     | 94/200 [08:59<07:48,  4.42s/it]Tuning global sampler:  48%|████▊     | 95/200 [09:04<07:44,  4.42s/it]Tuning global sampler:  48%|████▊     | 96/200 [09:08<07:40,  4.43s/it]Tuning global sampler:  48%|████▊     | 97/200 [09:13<07:36,  4.43s/it]Tuning global sampler:  49%|████▉     | 98/200 [09:17<07:31,  4.43s/it]Tuning global sampler:  50%|████▉     | 99/200 [09:22<07:25,  4.41s/it]Tuning global sampler:  50%|█████     | 100/200 [09:26<07:19,  4.39s/it]Tuning global sampler:  50%|█████     | 101/200 [09:30<07:15,  4.40s/it]Tuning global sampler:  51%|█████     | 102/200 [09:35<07:10,  4.40s/it]Tuning global sampler:  52%|█████▏    | 103/200 [09:39<07:06,  4.40s/it]Tuning global sampler:  52%|█████▏    | 104/200 [09:43<07:01,  4.40s/it]Tuning global sampler:  52%|█████▎    | 105/200 [09:49<07:28,  4.72s/it]Tuning global sampler:  53%|█████▎    | 106/200 [09:53<07:14,  4.63s/it]Tuning global sampler:  54%|█████▎    | 107/200 [09:58<07:03,  4.56s/it]Tuning global sampler:  54%|█████▍    | 108/200 [10:02<06:54,  4.51s/it]Tuning global sampler:  55%|█████▍    | 109/200 [10:07<06:46,  4.47s/it]Tuning global sampler:  55%|█████▌    | 110/200 [10:11<06:39,  4.44s/it]Tuning global sampler:  56%|█████▌    | 111/200 [10:15<06:32,  4.41s/it]Tuning global sampler:  56%|█████▌    | 112/200 [10:20<06:28,  4.41s/it]Tuning global sampler:  56%|█████▌    | 112/200 [10:24<08:10,  5.58s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.21s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.21s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.21s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.21s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.21s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.21s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.21s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.21s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]
11:46 ninjax INFO    : Saving samples to ./Aplus/injection_2/results_training.npz
11:46 ninjax INFO    : Saving the NF
11:46 ninjax INFO    : Time taken: 663.2071204185486 seconds (11.05345200697581 minutes)
11:46 ninjax INFO    : Creating the final corner plot
11:46 ninjax INFO    : Dumping the final production chains
11:46 ninjax INFO    : Chains shape is: (13, 220000)
11:46 ninjax INFO    : Key: M_c: ESS = 43215, Rhat = 1.016007669542445
11:46 ninjax INFO    : Key: q: ESS = 25360, Rhat = 1.0250828230828024
11:46 ninjax INFO    : Key: s1_z: ESS = 44639, Rhat = 1.0158494185347553
11:46 ninjax INFO    : Key: s2_z: ESS = 25953, Rhat = 1.0240871013979111
11:46 ninjax INFO    : Key: lambda_1: ESS = 23362, Rhat = 1.0268215550386188
11:46 ninjax INFO    : Key: lambda_2: ESS = 63091, Rhat = 1.0122993945144718
11:46 ninjax INFO    : Key: cos_iota: ESS = 48367, Rhat = 1.014437968505856
11:46 ninjax INFO    : Key: d_L: ESS = 51876, Rhat = 1.0133034594732855
11:46 ninjax INFO    : Key: t_c: ESS = 23488, Rhat = 1.0273644374035047
11:46 ninjax INFO    : Key: phase_c: ESS = 46505, Rhat = 1.0157484722005612
11:46 ninjax INFO    : Key: psi: ESS = 63352, Rhat = 1.0129729166270116
11:46 ninjax INFO    : Key: ra: ESS = 70771, Rhat = 1.0106296404452786
11:46 ninjax INFO    : Key: sin_dec: ESS = 87055, Rhat = 1.010587079222228
11:46 ninjax INFO    : Key: eta: ESS = 25360, Rhat = 1.0250828230828024
11:46 ninjax INFO    : Key: iota: ESS = 48367, Rhat = 1.014437968505856
11:46 ninjax INFO    : Key: dec: ESS = 87055, Rhat = 1.0105727243275782
11:46 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.736 +/- 0.298
q: 0.680 +/- 0.233
s1_z: 0.001 +/- 0.027
s2_z: -0.003 +/- 0.028
lambda_1: 2012.472 +/- 1491.326
lambda_2: 2191.204 +/- 1438.082
cos_iota: 0.245 +/- 0.429
d_L: 804.865 +/- 135.981
t_c: 0.005 +/- 0.037
phase_c: 3.209 +/- 1.760
psi: 1.614 +/- 0.889
ra: 3.000 +/- 2.112
sin_dec: 0.019 +/- 0.650
Log probability: 5.356 +/- 25.623
Local acceptance: 0.994 +/- 0.074
Global acceptance: 0.022 +/- 0.146
Max loss: 22.717, Min loss: 4.222
Production summary
==========
M_c: 1.870 +/- 0.000
q: 0.782 +/- 0.121
s1_z: -0.005 +/- 0.027
s2_z: -0.005 +/- 0.028
lambda_1: 429.978 +/- 528.674
lambda_2: 838.862 +/- 808.266
cos_iota: 0.799 +/- 0.151
d_L: 752.125 +/- 129.488
t_c: -0.008 +/- 0.001
phase_c: 3.141 +/- 1.819
psi: 1.570 +/- 0.913
ra: 5.023 +/- 0.013
sin_dec: -0.692 +/- 0.016
Log probability: 45.942 +/- 2.972
Local acceptance: 0.988 +/- 0.107
Global acceptance: 0.120 +/- 0.324
DONE

JOB STATISTICS
==============
Job ID: 10923034
Cluster: snellius
User/Group: twouters2/twouters2
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 00:12:26
CPU Efficiency: 5.41% of 03:49:52 core-walltime
Job Wall-clock time: 00:14:22
Memory Utilized: 4.59 GB
Memory Efficiency: 45.88% of 10.00 GB (10.00 GB/node)
