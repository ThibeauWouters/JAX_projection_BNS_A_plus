Sat Apr  5 09:52:53 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
09:53 ninjax INFO    : Checking and setting outdir
09:53 ninjax INFO    : Found generation prior file ./Aplus/injection_1/generation_prior.prior
09:53 ninjax INFO    : The outdir is set to ./Aplus/injection_1
09:53 ninjax INFO    : Loading the given config
09:53 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
09:53 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'True', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': '1', 'sampling_seed': '1', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
09:53 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/jester_hard/Aplus/injection_1/complete_config.json
09:53 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 959252
09:53 ninjax INFO    : Loading the priors
09:53 ninjax INFO    : Setting up the prior
09:53 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
09:53 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
09:53 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
09:53 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
09:53 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
09:53 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
09:53 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
09:53 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
09:53 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
09:53 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
09:53 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
09:53 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
09:53 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
09:53 ninjax INFO    : Setting up the generation prior
09:53 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.4, naming=["mass_1_source"])
09:53 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.4, naming=["mass_2_source"])
09:53 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
09:53 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
09:53 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
09:53 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
09:53 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
09:53 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
09:53 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
09:53 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
09:53 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
09:53 ninjax INFO    : Finished prior setup
09:53 ninjax INFO    : Setting the transforms
09:53 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
09:53 ninjax INFO    : transforms_str_list has 3 elements
09:53 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
09:53 ninjax INFO    : Setting the likelihood
09:53 ninjax INFO    : GW likelihood provided, setting up the GW pipe
09:53 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz
09:53 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz for BNS injections
09:53 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
09:53 ninjax INFO    : self.is_BNS_run is True
09:53 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
09:53 ninjax INFO    : GW run is an injection
09:53 ninjax INFO    : Setting up GW injection . . . 
09:53 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
09:53 ninjax INFO    : Loading existing injection, path: ./Aplus/injection_1/injection.json
09:53 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz . . . 
09:53 ninjax INFO    : Injected lambda_1: 61.246220267265905
09:53 ninjax INFO    : Injected lambda_2: 670.387236234257
09:53 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.5528347955675614 is 128.0
09:53 ninjax INFO    : After transforms, the injection parameters are:
09:53 ninjax INFO    : {'mass_1_source': 2.0616769343538883, 'mass_2_source': 1.3780992539931889, 's1_z': -0.030442787105926808, 's2_z': -0.02410855058633128, 'cos_iota': -0.8145209785152696, 'd_L': 276.6203967204946, 't_c': 0.050799982773990365, 'phase_c': 5.952935141375363, 'psi': 1.4967184593369591, 'ra': 0.4421855326970419, 'sin_dec': -0.5946844243053184, 'q': 0.6684360827973629, 'M_c': 1.5528347955675614, 'eta': 0.24012685795700048, 'iota': Array(2.52269933, dtype=float64, weak_type=True), 'dec': Array(-0.63687306, dtype=float64, weak_type=True), 'lambda_1': 61.246220267265905, 'lambda_2': 670.387236234257, 'H1_SNR': 2.3965375279638916, 'L1_SNR': 5.237135094432397, 'V1_SNR': 14.775014752204694, 'network_SNR': 15.857869877387095, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
09:53 ninjax INFO    : The trial injection parameters are {'M_c': 1.5528347955675614, 'eta': 0.24012685795700048, 's1_z': -0.030442787105926808, 's2_z': -0.02410855058633128, 'lambda_1': 61.246220267265905, 'lambda_2': 670.387236234257, 'd_L': 276.6203967204946, 'phase_c': 5.952935141375363, 'iota': 2.522699334257709, 't_c': 0.050799982773990365, 'psi': 1.4967184593369591, 'ra': 0.4421855326970419, 'dec': -0.6368730646985251}
09:53 ninjax INFO    : Injecting signals . . .
09:53 ninjax INFO    : self.ifos
09:53 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
09:53 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
09:53 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
09:53 ninjax INFO    : [ 3.64948447e-23-4.46230299e-23j -2.57610795e-23-1.26467482e-23j
 -6.75230894e-24-5.62589994e-24j ...
 -1.60138165e-23+3.55923942e-25j  3.63159104e-24+1.26140172e-23j
  5.24323709e-23+6.77994834e-24j]
09:53 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
09:53 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
09:53 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
09:53 ninjax INFO    : [-8.73156208e-23-5.22148578e-24j  1.31740878e-22-7.05290405e-24j
 -3.95531092e-25-2.15743509e-23j ...
 -1.70449643e-24+1.91440944e-23j  2.02536055e-23-7.32370021e-24j
  1.67233265e-23-7.00895348e-25j]
09:53 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
09:53 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
09:53 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
09:53 ninjax INFO    : [ 7.12572368e-23+1.02478353e-23j  5.17422924e-23-1.72230899e-23j
 -4.94851126e-25+1.27476278e-23j ...
  9.05805171e-24+5.36319833e-24j  4.73135850e-23-2.22405150e-23j
  1.40156040e-23-7.26009587e-25j]
09:53 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
09:53 ninjax INFO    : SNR for ifo H1 is 2.3965375279638916
09:53 ninjax INFO    : SNR for ifo L1 is 5.237135094432397
09:53 ninjax INFO    : SNR for ifo V1 is 14.775014752204694
09:53 ninjax INFO    : The network SNR is 15.857869877387095
09:53 ninjax INFO    : Network SNR passes threshold
09:53 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
09:53 ninjax INFO    :    mass_1_source: 2.0616769343538883
09:53 ninjax INFO    :    mass_2_source: 1.3780992539931889
09:53 ninjax INFO    :    s1_z: -0.030442787105926808
09:53 ninjax INFO    :    s2_z: -0.02410855058633128
09:53 ninjax INFO    :    cos_iota: -0.8145209785152696
09:53 ninjax INFO    :    d_L: 276.6203967204946
09:53 ninjax INFO    :    t_c: 0.050799982773990365
09:53 ninjax INFO    :    phase_c: 5.952935141375363
09:53 ninjax INFO    :    psi: 1.4967184593369591
09:53 ninjax INFO    :    ra: 0.4421855326970419
09:53 ninjax INFO    :    sin_dec: -0.5946844243053184
09:53 ninjax INFO    :    q: 0.6684360827973629
09:53 ninjax INFO    :    M_c: 1.5528347955675614
09:53 ninjax INFO    :    eta: 0.24012685795700048
09:53 ninjax INFO    :    iota: 2.522699334257709
09:53 ninjax INFO    :    dec: -0.6368730646985251
09:53 ninjax INFO    :    lambda_1: 61.246220267265905
09:53 ninjax INFO    :    lambda_2: 670.387236234257
09:53 ninjax INFO    :    H1_SNR: 2.3965375279638916
09:53 ninjax INFO    :    L1_SNR: 5.237135094432397
09:53 ninjax INFO    :    V1_SNR: 14.775014752204694
09:53 ninjax INFO    :    network_SNR: 15.857869877387095
09:53 ninjax INFO    :    epoch: 126.0
09:53 ninjax INFO    :    gmst: 2.7288901910520846
09:53 ninjax INFO    :    duration: 128.0
09:53 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
09:53 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
09:53 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
09:55 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 142.1930694580078 seconds = 2.369884490966797 minutes
09:55 ninjax INFO    : The priors are not modified after their initialization
09:55 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
09:55 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
09:55 ninjax INFO    : Ninjax setup complete.
09:55 ninjax INFO    : Saving output to ./Aplus/injection_1/
09:55 ninjax INFO    : Using polynomial learning rate scheduler
09:55 ninjax INFO    : The hyperparameters passed to flowMC and jim are
09:55 ninjax INFO    :    n_loop_training: 200
09:55 ninjax INFO    :    n_loop_production: 10
09:55 ninjax INFO    :    n_local_steps: 100
09:55 ninjax INFO    :    n_global_steps: 1000
09:55 ninjax INFO    :    n_epochs: 25
09:55 ninjax INFO    :    n_chains: 1000
09:55 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x153f493f1870>
09:55 ninjax INFO    :    max_samples: 50000
09:55 ninjax INFO    :    momentum: 0.9
09:55 ninjax INFO    :    batch_size: 30000
09:55 ninjax INFO    :    use_global: True
09:55 ninjax INFO    :    keep_quantile: 0.0
09:55 ninjax INFO    :    train_thinning: 10
09:55 ninjax INFO    :    output_thinning: 50
09:55 ninjax INFO    :    n_sample_max: 10000
09:55 ninjax INFO    :    num_layers: 10
09:55 ninjax INFO    :    hidden_size: [128, 128]
09:55 ninjax INFO    :    num_bins: 8
09:55 ninjax INFO    :    save_training_chains: False
09:55 ninjax INFO    :    eps_mass_matrix: 1e-05
09:55 ninjax INFO    :    use_scheduler: True
09:55 ninjax INFO    :    use_temperature: False
09:55 ninjax INFO    :    which_temperature_schedule: exponential
09:55 ninjax INFO    :    starting_temperature: 2.0
09:55 ninjax INFO    :    stop_tempering_iteration: 75
09:55 ninjax INFO    :    stopping_criterion_global_acc: 0.1
09:55 ninjax INFO    :    stopping_criterion_loss: -inf
09:55 ninjax INFO    :    nf_model_kwargs: {}
09:55 ninjax INFO    :    local sampler arg not shown (pretty print)
09:55 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[ 3.65229012e-23 -2.48601635e-23 -5.69027658e-24 -6.48483310e-24
 -6.21728597e-23  1.26041693e-23  3.96239776e-23 -1.99014984e-23
  6.79801617e-24 -5.21344036e-23]
[-4.35110743e-23 -1.19952503e-23 -5.95309202e-24 -6.10746640e-23
 -6.06777622e-23 -6.07141768e-23 -4.11038373e-23 -7.09405060e-24
  4.09692263e-23 -6.90183394e-23]
Checking the noise that was generated in inject_signal ifo:
[-8.54244974e-23  1.31673184e-22 -2.37470835e-24 -2.01580873e-23
  2.54031730e-23 -2.42497134e-23 -8.46016590e-23  1.69720179e-23
  2.04429121e-24  2.52388249e-23]
[-6.74859416e-24 -9.48156883e-24 -2.29816345e-23 -3.03923164e-23
 -3.84865704e-23  6.31479210e-24 -2.32896965e-23 -1.83386616e-23
  3.42806202e-23 -2.78026745e-23]
Checking the noise that was generated in inject_signal ifo:
[ 7.37131641e-23  4.65919818e-23 -9.18255384e-24  5.26578581e-23
  3.33825704e-23  7.89777657e-23 -6.10133009e-23  6.22788098e-24
  9.08823401e-23 -4.99268121e-24]
[ 1.90567740e-24 -2.42251042e-23  1.26552039e-23  4.57736050e-23
 -3.81200567e-23  1.40428450e-23 -3.33917838e-25 -9.45604587e-23
  6.09410130e-23 -7.58650650e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.11163997650146484 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 2.0616769343538883, 'mass_2_source': 1.3780992539931889, 's1_z': -0.030442787105926808, 's2_z': -0.02410855058633128, 'cos_iota': -0.8145209785152696, 'd_L': 276.6203967204946, 't_c': 0.050799982773990365, 'phase_c': 5.952935141375363, 'psi': 1.4967184593369591, 'ra': 0.4421855326970419, 'sin_dec': -0.5946844243053184, 'q': 0.6684360827973629, 'M_c': 1.5528347955675614, 'eta': 0.24012685795700048, 'iota': Array(2.52269933, dtype=float64, weak_type=True), 'dec': Array(-0.63687306, dtype=float64, weak_type=True), 'lambda_1': 61.246220267265905, 'lambda_2': 670.387236234257, 'H1_SNR': 2.3965375279638916, 'L1_SNR': 5.237135094432397, 'V1_SNR': 14.775014752204694, 'network_SNR': 15.857869877387095, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5077879428863525 seconds
Time for h_sky_low and h_sky_center: 5.2176337242126465 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.6986205577850342
Going to compute coefficients . . .
Time for computing coefficients: 120.46929574012756 seconds
Time for computing coefficients: 7.36788535118103 seconds
Time for computing coefficients: 7.290459632873535 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:01<6:41:25, 121.03s/it]Tuning global sampler:   1%|          | 2/200 [02:05<2:53:20, 52.53s/it] Tuning global sampler:   2%|▏         | 3/200 [02:10<1:40:37, 30.65s/it]Tuning global sampler:   2%|▏         | 4/200 [02:14<1:06:31, 20.37s/it]Tuning global sampler:   2%|▎         | 5/200 [02:19<47:44, 14.69s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:24<36:24, 11.26s/it]Tuning global sampler:   4%|▎         | 7/200 [02:29<30:02,  9.34s/it]Tuning global sampler:   4%|▍         | 8/200 [02:34<25:04,  7.84s/it]Tuning global sampler:   4%|▍         | 9/200 [02:38<21:40,  6.81s/it]Tuning global sampler:   5%|▌         | 10/200 [02:43<19:13,  6.07s/it]Tuning global sampler:   6%|▌         | 11/200 [02:47<17:41,  5.62s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:37,  5.31s/it]Tuning global sampler:   6%|▋         | 13/200 [02:56<15:50,  5.08s/it]Tuning global sampler:   7%|▋         | 14/200 [03:01<15:20,  4.95s/it]Tuning global sampler:   8%|▊         | 15/200 [03:06<14:57,  4.85s/it]Tuning global sampler:   8%|▊         | 16/200 [03:10<14:40,  4.79s/it]Tuning global sampler:   8%|▊         | 17/200 [03:15<14:27,  4.74s/it]Tuning global sampler:   9%|▉         | 18/200 [03:19<14:16,  4.71s/it]Tuning global sampler:  10%|▉         | 19/200 [03:24<14:07,  4.68s/it]Tuning global sampler:  10%|█         | 20/200 [03:29<13:59,  4.66s/it]Tuning global sampler:  10%|█         | 21/200 [03:33<13:52,  4.65s/it]Tuning global sampler:  11%|█         | 22/200 [03:38<13:44,  4.63s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:43<13:38,  4.62s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:47<13:23,  4.57s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:51<13:09,  4.51s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:57<13:45,  4.74s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:01<13:22,  4.64s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:05<13:05,  4.57s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:10<12:52,  4.52s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:14<12:41,  4.48s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:19<12:31,  4.45s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:23<12:24,  4.43s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:27<12:15,  4.40s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:32<12:08,  4.39s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:36<12:03,  4.39s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:40<11:59,  4.39s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:45<11:54,  4.38s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:49<11:50,  4.38s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:54<11:45,  4.38s/it]Tuning global sampler:  20%|██        | 40/200 [04:58<11:40,  4.38s/it]Tuning global sampler:  20%|██        | 41/200 [05:02<11:36,  4.38s/it]Tuning global sampler:  21%|██        | 42/200 [05:07<11:32,  4.38s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:11<11:28,  4.39s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:15<11:22,  4.38s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:21<11:59,  4.64s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:25<11:42,  4.56s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:29<11:29,  4.51s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:34<11:19,  4.47s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:38<11:11,  4.45s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:43<11:04,  4.43s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:47<10:58,  4.42s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:51<10:53,  4.41s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:56<10:47,  4.40s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:00<10:42,  4.40s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:05<10:35,  4.39s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:09<10:29,  4.37s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:13<10:26,  4.38s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:18<10:22,  4.39s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:22<10:19,  4.39s/it]Tuning global sampler:  30%|███       | 60/200 [06:27<10:15,  4.40s/it]Tuning global sampler:  30%|███       | 61/200 [06:31<10:10,  4.39s/it]Tuning global sampler:  31%|███       | 62/200 [06:35<10:06,  4.40s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:40<10:02,  4.40s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:44<09:57,  4.39s/it]Tuning global sampler:  32%|███▎      | 65/200 [06:49<10:30,  4.67s/it]Tuning global sampler:  33%|███▎      | 66/200 [06:54<10:12,  4.57s/it]Tuning global sampler:  34%|███▎      | 67/200 [06:58<09:59,  4.51s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:02<09:51,  4.48s/it]Tuning global sampler:  34%|███▍      | 69/200 [07:07<09:42,  4.45s/it]Tuning global sampler:  35%|███▌      | 70/200 [07:11<09:36,  4.43s/it]Tuning global sampler:  36%|███▌      | 71/200 [07:16<09:30,  4.43s/it]Tuning global sampler:  36%|███▌      | 72/200 [07:20<09:25,  4.42s/it]Tuning global sampler:  36%|███▋      | 73/200 [07:24<09:20,  4.41s/it]Tuning global sampler:  37%|███▋      | 74/200 [07:29<09:14,  4.40s/it]Tuning global sampler:  38%|███▊      | 75/200 [07:33<09:10,  4.40s/it]Tuning global sampler:  38%|███▊      | 76/200 [07:38<09:04,  4.39s/it]Tuning global sampler:  38%|███▊      | 77/200 [07:42<08:58,  4.38s/it]Tuning global sampler:  38%|███▊      | 77/200 [07:46<12:25,  6.06s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.22s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.22s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.22s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.22s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.22s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.22s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.22s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.22s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]
10:03 ninjax INFO    : Saving samples to ./Aplus/injection_1/results_training.npz
10:03 ninjax INFO    : Saving the NF
10:03 ninjax INFO    : Time taken: 505.7291462421417 seconds (8.428819104035695 minutes)
10:03 ninjax INFO    : Creating the final corner plot
10:03 ninjax INFO    : Dumping the final production chains
10:03 ninjax INFO    : Chains shape is: (13, 220000)
10:04 ninjax INFO    : Key: M_c: ESS = 32915, Rhat = 1.019539650047575
10:04 ninjax INFO    : Key: q: ESS = 13981, Rhat = 1.0432814385076132
10:04 ninjax INFO    : Key: s1_z: ESS = 21545, Rhat = 1.0291243227613072
10:04 ninjax INFO    : Key: s2_z: ESS = 27827, Rhat = 1.0228633313250712
10:04 ninjax INFO    : Key: lambda_1: ESS = 17197, Rhat = 1.0359315267392233
10:04 ninjax INFO    : Key: lambda_2: ESS = 31765, Rhat = 1.020827699056884
10:04 ninjax INFO    : Key: cos_iota: ESS = 24983, Rhat = 1.0260985979732833
10:04 ninjax INFO    : Key: d_L: ESS = 26368, Rhat = 1.024954721183642
10:04 ninjax INFO    : Key: t_c: ESS = 21340, Rhat = 1.0291569255376636
10:04 ninjax INFO    : Key: phase_c: ESS = 25605, Rhat = 1.0249178164407466
10:04 ninjax INFO    : Key: psi: ESS = 42183, Rhat = 1.0217239305163879
10:04 ninjax INFO    : Key: ra: ESS = 25805, Rhat = 1.0242008932637112
10:04 ninjax INFO    : Key: sin_dec: ESS = 31093, Rhat = 1.0202022824799415
10:04 ninjax INFO    : Key: eta: ESS = 13981, Rhat = 1.0432814385076132
10:04 ninjax INFO    : Key: iota: ESS = 24983, Rhat = 1.0260985979732833
10:04 ninjax INFO    : Key: dec: ESS = 31093, Rhat = 1.0202022824799415
10:04 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.558 +/- 0.225
q: 0.625 +/- 0.207
s1_z: -0.001 +/- 0.028
s2_z: -0.006 +/- 0.028
lambda_1: 2024.297 +/- 1443.508
lambda_2: 2451.267 +/- 1418.166
cos_iota: -0.267 +/- 0.469
d_L: 583.275 +/- 255.518
t_c: 0.041 +/- 0.039
phase_c: 3.177 +/- 1.759
psi: 1.611 +/- 0.883
ra: 1.341 +/- 1.685
sin_dec: -0.343 +/- 0.464
Log probability: 25.820 +/- 43.284
Local acceptance: 0.969 +/- 0.173
Global acceptance: 0.017 +/- 0.130
Max loss: 22.791, Min loss: 8.724
Production summary
==========
M_c: 1.553 +/- 0.000
q: 0.710 +/- 0.126
s1_z: -0.013 +/- 0.027
s2_z: -0.011 +/- 0.028
lambda_1: 748.990 +/- 634.804
lambda_2: 1880.600 +/- 1257.670
cos_iota: -0.769 +/- 0.194
d_L: 306.982 +/- 61.530
t_c: 0.053 +/- 0.001
phase_c: 3.169 +/- 1.808
psi: 1.602 +/- 0.900
ra: 0.331 +/- 0.056
sin_dec: -0.562 +/- 0.023
Log probability: 88.120 +/- 2.296
Local acceptance: 0.911 +/- 0.284
Global acceptance: 0.101 +/- 0.301
DONE

JOB STATISTICS
==============
Job ID: 10990382
Cluster: snellius
User/Group: twouters2/twouters2
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 00:10:14
CPU Efficiency: 5.57% of 03:03:44 core-walltime
Job Wall-clock time: 00:11:29
Memory Utilized: 4.22 GB
Memory Efficiency: 42.16% of 10.00 GB (10.00 GB/node)
