Wed Apr  2 11:32:54 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
11:33 ninjax INFO    : Checking and setting outdir
11:33 ninjax INFO    : Found generation prior file ./Aplus/injection_1/generation_prior.prior
11:33 ninjax INFO    : The outdir is set to ./Aplus/injection_1
11:33 ninjax INFO    : Loading the given config
11:33 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
11:33 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
11:33 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/jester_hard/Aplus/injection_1/complete_config.json
11:33 ninjax INFO    : No seed specified. Generating a random seed: 262638
11:33 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 128802
11:33 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 996173
11:33 ninjax INFO    : Loading the priors
11:33 ninjax INFO    : Setting up the prior
11:33 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
11:33 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
11:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
11:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
11:33 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
11:33 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
11:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
11:33 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
11:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
11:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
11:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
11:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
11:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
11:33 ninjax INFO    : Setting up the generation prior
11:33 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.4, naming=["mass_1_source"])
11:33 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.4, naming=["mass_2_source"])
11:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
11:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
11:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
11:33 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
11:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
11:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
11:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
11:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
11:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
11:33 ninjax INFO    : Finished prior setup
11:33 ninjax INFO    : Setting the transforms
11:33 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
11:33 ninjax INFO    : transforms_str_list has 3 elements
11:33 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
11:33 ninjax INFO    : Setting the likelihood
11:33 ninjax INFO    : GW likelihood provided, setting up the GW pipe
11:33 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz
11:33 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz for BNS injections
11:33 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
11:33 ninjax INFO    : self.is_BNS_run is True
11:33 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
11:33 ninjax INFO    : GW run is an injection
11:33 ninjax INFO    : Setting up GW injection . . . 
11:33 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
11:33 ninjax INFO    : Generating new injection
11:33 ninjax INFO    : Sanity check: generated parameters:
11:33 ninjax INFO    : {'mass_1_source': 1.0793560813518324, 'mass_2_source': 2.2398439118298517, 's1_z': -0.0485479960861291, 's2_z': 0.02628480634372299, 'cos_iota': -0.5430778480647982, 'd_L': 430.82942119387735, 't_c': -0.0833456893018778, 'phase_c': 2.1778578967896047, 'psi': 1.555964900521592, 'ra': 1.4154165077848393, 'sin_dec': -0.7677708970004327}
11:33 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz . . . 
11:33 ninjax INFO    : Injected lambda_1: 30.740638136780987
11:33 ninjax INFO    : Injected lambda_2: 2364.725626379753
11:33 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.4661129842062586 is 128.0
11:33 ninjax INFO    : After transforms, the injection parameters are:
11:33 ninjax INFO    : {'mass_1_source': 2.2398439118298517, 'mass_2_source': 1.0793560813518324, 's1_z': -0.0485479960861291, 's2_z': 0.02628480634372299, 'cos_iota': -0.5430778480647982, 'd_L': 430.82942119387735, 't_c': -0.0833456893018778, 'phase_c': 2.1778578967896047, 'psi': 1.555964900521592, 'ra': 1.4154165077848393, 'sin_dec': -0.7677708970004327, 'q': 0.48188897255347, 'M_c': 1.4661129842062586, 'eta': 0.21943992977121704, 'iota': Array(2.1448946, dtype=float64, weak_type=True), 'dec': Array(-0.87535483, dtype=float64, weak_type=True), 'lambda_1': 30.740638136780987, 'lambda_2': 2364.725626379753}
11:33 ninjax INFO    : The trial injection parameters are {'M_c': 1.4661129842062586, 'eta': 0.21943992977121704, 's1_z': -0.0485479960861291, 's2_z': 0.02628480634372299, 'lambda_1': 30.740638136780987, 'lambda_2': 2364.725626379753, 'd_L': 430.82942119387735, 'phase_c': 2.1778578967896047, 'iota': 2.1448946006702982, 't_c': -0.0833456893018778, 'psi': 1.555964900521592, 'ra': 1.4154165077848393, 'dec': -0.875354827147792}
11:33 ninjax INFO    : Injecting signals . . .
11:33 ninjax INFO    : self.ifos
11:33 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
11:33 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:33 ninjax INFO    : [-1.78333041e-23-6.24678554e-23j -8.12220945e-23+4.65046686e-23j
  9.33692621e-23-7.50190695e-24j ...
 -1.73407309e-23+1.37154974e-23j  1.57689636e-23-6.61857095e-24j
  2.86555869e-23-2.32213236e-23j]
11:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
11:33 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:33 ninjax INFO    : [ 8.75946955e-23+6.90689737e-23j  1.79494038e-23+1.12314046e-23j
 -4.05593286e-23+2.51906644e-23j ...
  1.03088628e-23-1.57387230e-23j  1.03624102e-23-2.21015416e-23j
  1.18633463e-24-2.01008183e-23j]
11:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
11:33 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:33 ninjax INFO    : [ 2.86540452e-23+4.74064177e-23j -2.94908409e-23+2.70646836e-23j
 -5.13604643e-23-1.09251295e-23j ...
  4.71988757e-23-2.23326493e-23j -2.46058052e-23+3.90805698e-23j
 -4.16533856e-23+1.45242665e-23j]
11:33 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
11:33 ninjax INFO    : SNR for ifo H1 is 4.841589239058978
11:33 ninjax INFO    : SNR for ifo L1 is 4.950495250311761
11:33 ninjax INFO    : SNR for ifo V1 is 4.380961553503004
11:33 ninjax INFO    : The network SNR is 8.193974232105106
11:33 ninjax INFO    : The network SNR does not pass the threshold, trying again
11:33 ninjax INFO    : Generating new injection
11:33 ninjax INFO    : Sanity check: generated parameters:
11:33 ninjax INFO    : {'mass_1_source': 1.3780992539931889, 'mass_2_source': 2.0616769343538883, 's1_z': -0.030442787105926808, 's2_z': -0.02410855058633128, 'cos_iota': -0.8145209785152696, 'd_L': 276.6203967204946, 't_c': 0.050799982773990365, 'phase_c': 5.952935141375363, 'psi': 1.4967184593369591, 'ra': 0.4421855326970419, 'sin_dec': -0.5946844243053184}
11:33 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz . . . 
11:33 ninjax INFO    : Injected lambda_1: 61.246220267265905
11:33 ninjax INFO    : Injected lambda_2: 670.387236234257
11:33 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.5528347955675614 is 128.0
11:33 ninjax INFO    : After transforms, the injection parameters are:
11:33 ninjax INFO    : {'mass_1_source': 2.0616769343538883, 'mass_2_source': 1.3780992539931889, 's1_z': -0.030442787105926808, 's2_z': -0.02410855058633128, 'cos_iota': -0.8145209785152696, 'd_L': 276.6203967204946, 't_c': 0.050799982773990365, 'phase_c': 5.952935141375363, 'psi': 1.4967184593369591, 'ra': 0.4421855326970419, 'sin_dec': -0.5946844243053184, 'q': 0.6684360827973629, 'M_c': 1.5528347955675614, 'eta': 0.24012685795700048, 'iota': Array(2.52269933, dtype=float64, weak_type=True), 'dec': Array(-0.63687306, dtype=float64, weak_type=True), 'lambda_1': 61.246220267265905, 'lambda_2': 670.387236234257}
11:33 ninjax INFO    : The trial injection parameters are {'M_c': 1.5528347955675614, 'eta': 0.24012685795700048, 's1_z': -0.030442787105926808, 's2_z': -0.02410855058633128, 'lambda_1': 61.246220267265905, 'lambda_2': 670.387236234257, 'd_L': 276.6203967204946, 'phase_c': 5.952935141375363, 'iota': 2.522699334257709, 't_c': 0.050799982773990365, 'psi': 1.4967184593369591, 'ra': 0.4421855326970419, 'dec': -0.6368730646985251}
11:33 ninjax INFO    : Injecting signals . . .
11:33 ninjax INFO    : self.ifos
11:33 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
11:33 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:33 ninjax INFO    : [-1.91522298e-23-6.54244603e-23j -8.40158981e-23+4.46360407e-23j
  9.00928369e-23-7.57000539e-24j ...
 -1.73407309e-23+1.37154974e-23j  1.57689636e-23-6.61857095e-24j
  2.86555869e-23-2.32213236e-23j]
11:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
11:33 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:33 ninjax INFO    : [ 8.41539059e-23+7.22984978e-23j  1.72278802e-23+1.58215418e-23j
 -3.84782856e-23+2.88956865e-23j ...
  1.03088628e-23-1.57387230e-23j  1.03624102e-23-2.21015416e-23j
  1.18633463e-24-2.01008183e-23j]
11:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
11:33 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:33 ninjax INFO    : [ 2.79773600e-23+5.76199113e-23j -2.19855277e-23+3.51228480e-23j
 -4.00938649e-23-1.07642890e-23j ...
  4.71988757e-23-2.23326493e-23j -2.46058052e-23+3.90805698e-23j
 -4.16533856e-23+1.45242665e-23j]
11:33 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
11:33 ninjax INFO    : SNR for ifo H1 is 2.3965375279638916
11:33 ninjax INFO    : SNR for ifo L1 is 5.237135094432397
11:33 ninjax INFO    : SNR for ifo V1 is 14.775014752204694
11:33 ninjax INFO    : The network SNR is 15.857869877387095
11:33 ninjax INFO    : Network SNR passes threshold
11:33 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
11:33 ninjax INFO    :    mass_1_source: 2.0616769343538883
11:33 ninjax INFO    :    mass_2_source: 1.3780992539931889
11:33 ninjax INFO    :    s1_z: -0.030442787105926808
11:33 ninjax INFO    :    s2_z: -0.02410855058633128
11:33 ninjax INFO    :    cos_iota: -0.8145209785152696
11:33 ninjax INFO    :    d_L: 276.6203967204946
11:33 ninjax INFO    :    t_c: 0.050799982773990365
11:33 ninjax INFO    :    phase_c: 5.952935141375363
11:33 ninjax INFO    :    psi: 1.4967184593369591
11:33 ninjax INFO    :    ra: 0.4421855326970419
11:33 ninjax INFO    :    sin_dec: -0.5946844243053184
11:33 ninjax INFO    :    q: 0.6684360827973629
11:33 ninjax INFO    :    M_c: 1.5528347955675614
11:33 ninjax INFO    :    eta: 0.24012685795700048
11:33 ninjax INFO    :    iota: 2.522699334257709
11:33 ninjax INFO    :    dec: -0.6368730646985251
11:33 ninjax INFO    :    lambda_1: 61.246220267265905
11:33 ninjax INFO    :    lambda_2: 670.387236234257
11:33 ninjax INFO    :    H1_SNR: 2.3965375279638916
11:33 ninjax INFO    :    L1_SNR: 5.237135094432397
11:33 ninjax INFO    :    V1_SNR: 14.775014752204694
11:33 ninjax INFO    :    network_SNR: 15.857869877387095
11:33 ninjax INFO    :    epoch: 126.0
11:33 ninjax INFO    :    gmst: 2.7288901910520846
11:33 ninjax INFO    :    duration: 128.0
11:33 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
11:33 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
11:33 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
11:35 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 146.9267132282257 seconds = 2.448778553803762 minutes
11:35 ninjax INFO    : The priors are not modified after their initialization
11:35 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
11:35 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
11:35 ninjax INFO    : sample: {'M_c': Array([1.22055968, 2.15501555, 1.48785388], dtype=float64), 'q': Array([0.37657935, 0.90763693, 0.90274226], dtype=float64), 's1_z': Array([ 0.01481931, -0.01277182, -0.01835966], dtype=float64), 's2_z': Array([-0.04096519, -0.00135665,  0.04731835], dtype=float64), 'lambda_1': Array([ 946.13688814, 1048.07386901, 4759.93743015], dtype=float64), 'lambda_2': Array([1661.61347615, 2551.96191827, 4953.51613572], dtype=float64), 'cos_iota': Array([ 0.17861268, -0.52971918, -0.73461295], dtype=float64), 'd_L': Array([619.92178797, 529.77473579, 867.90223026], dtype=float64), 't_c': Array([-0.03112159, -0.05473574,  0.01910607], dtype=float64), 'phase_c': Array([5.91955011, 2.36044783, 4.70541706], dtype=float64), 'psi': Array([0.29921361, 1.79319491, 3.04610441], dtype=float64), 'ra': Array([1.03113672, 0.243108  , 2.61502814], dtype=float64), 'sin_dec': Array([ 0.25406509, -0.57895641, -0.00540415], dtype=float64)}
11:35 ninjax INFO    : log_prob: [ -3.96524465 -19.04986525 -10.17771578]
11:35 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 2.0616769343538883, 'mass_2_source': 1.3780992539931889, 's1_z': -0.030442787105926808, 's2_z': -0.02410855058633128, 'cos_iota': -0.8145209785152696, 'd_L': 276.6203967204946, 't_c': 0.050799982773990365, 'phase_c': 5.952935141375363, 'psi': 1.4967184593369591, 'ra': 0.4421855326970419, 'sin_dec': -0.5946844243053184, 'q': 0.6684360827973629, 'M_c': 1.5528347955675614, 'eta': 0.24012685795700048, 'iota': Array(2.52269933, dtype=float64, weak_type=True), 'dec': Array(-0.63687306, dtype=float64, weak_type=True), 'lambda_1': 61.246220267265905, 'lambda_2': 670.387236234257, 'H1_SNR': 2.3965375279638916, 'L1_SNR': 5.237135094432397, 'V1_SNR': 14.775014752204694, 'network_SNR': 15.857869877387095, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
11:35 ninjax INFO    : log_prob at the injection parameters is: 115.20546108739376
11:35 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
11:35 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
11:35 ninjax INFO    : Ninjax setup complete.
11:35 ninjax INFO    : Saving output to ./Aplus/injection_1/
11:35 ninjax INFO    : Using polynomial learning rate scheduler
11:35 ninjax INFO    : The hyperparameters passed to flowMC and jim are
11:35 ninjax INFO    :    n_loop_training: 200
11:35 ninjax INFO    :    n_loop_production: 10
11:35 ninjax INFO    :    n_local_steps: 100
11:35 ninjax INFO    :    n_global_steps: 1000
11:35 ninjax INFO    :    n_epochs: 25
11:35 ninjax INFO    :    n_chains: 1000
11:35 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x1485f4521000>
11:35 ninjax INFO    :    max_samples: 50000
11:35 ninjax INFO    :    momentum: 0.9
11:35 ninjax INFO    :    batch_size: 30000
11:35 ninjax INFO    :    use_global: True
11:35 ninjax INFO    :    keep_quantile: 0.0
11:35 ninjax INFO    :    train_thinning: 10
11:35 ninjax INFO    :    output_thinning: 50
11:35 ninjax INFO    :    n_sample_max: 10000
11:35 ninjax INFO    :    num_layers: 10
11:35 ninjax INFO    :    hidden_size: [128, 128]
11:35 ninjax INFO    :    num_bins: 8
11:35 ninjax INFO    :    save_training_chains: False
11:35 ninjax INFO    :    eps_mass_matrix: 1e-05
11:35 ninjax INFO    :    use_scheduler: True
11:35 ninjax INFO    :    use_temperature: False
11:35 ninjax INFO    :    which_temperature_schedule: exponential
11:35 ninjax INFO    :    starting_temperature: 2.0
11:35 ninjax INFO    :    stop_tempering_iteration: 75
11:35 ninjax INFO    :    stopping_criterion_global_acc: 0.1
11:35 ninjax INFO    :    stopping_criterion_loss: -inf
11:35 ninjax INFO    :    nf_model_kwargs: {}
11:35 ninjax INFO    :    local sampler arg not shown (pretty print)
11:35 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[-1.91241733e-23 -8.31149821e-23  9.11548693e-23  9.95563004e-24
 -1.85953938e-23  5.71668271e-23  1.92578264e-23  9.89464073e-23
 -2.41457623e-23  3.64616508e-23]
[-6.43125046e-23  4.52875386e-23 -7.89719748e-24 -3.02936961e-23
  8.51252675e-23  2.07912243e-24  4.69543304e-23 -3.06810822e-24
  5.14704236e-23  1.73535603e-23]
Checking the noise that was generated in inject_signal ifo:
[ 8.60450292e-23  1.71601856e-23 -4.04574628e-23  6.51982910e-23
  2.80802293e-23  1.38254943e-23 -6.27395179e-23 -3.37163335e-23
  1.04662043e-22 -4.18147683e-23]
[ 7.07713894e-23  1.33928771e-23  2.74884029e-23 -4.81578414e-23
 -3.64908598e-23  3.73534383e-23  6.93838533e-24  2.64582270e-23
 -3.54423754e-24 -3.69587596e-23]
Checking the noise that was generated in inject_signal ifo:
[ 3.04332873e-23 -2.71358383e-23 -4.87815676e-23 -8.69308454e-23
 -4.54298766e-23  7.09999826e-23 -2.94963480e-23  4.58225491e-23
  3.00474696e-23 -6.33657047e-24]
[ 4.92777534e-23  2.81208337e-23 -1.08567130e-23  8.91517057e-23
  4.19745298e-23 -7.60856732e-23  1.16316653e-23  1.32132864e-23
  2.01004980e-23 -1.47985914e-23]
Checking the noise that was generated in inject_signal ifo:
[-1.91241733e-23 -8.31149821e-23  9.11548693e-23  9.95563004e-24
 -1.85953938e-23  5.71668271e-23  1.92578264e-23  9.89464073e-23
 -2.41457623e-23  3.64616508e-23]
[-6.43125046e-23  4.52875386e-23 -7.89719748e-24 -3.02936961e-23
  8.51252675e-23  2.07912243e-24  4.69543304e-23 -3.06810822e-24
  5.14704236e-23  1.73535603e-23]
Checking the noise that was generated in inject_signal ifo:
[ 8.60450292e-23  1.71601856e-23 -4.04574628e-23  6.51982910e-23
  2.80802293e-23  1.38254943e-23 -6.27395179e-23 -3.37163335e-23
  1.04662043e-22 -4.18147683e-23]
[ 7.07713894e-23  1.33928771e-23  2.74884029e-23 -4.81578414e-23
 -3.64908598e-23  3.73534383e-23  6.93838533e-24  2.64582270e-23
 -3.54423754e-24 -3.69587596e-23]
Checking the noise that was generated in inject_signal ifo:
[ 3.04332873e-23 -2.71358383e-23 -4.87815676e-23 -8.69308454e-23
 -4.54298766e-23  7.09999826e-23 -2.94963480e-23  4.58225491e-23
  3.00474696e-23 -6.33657047e-24]
[ 4.92777534e-23  2.81208337e-23 -1.08567130e-23  8.91517057e-23
  4.19745298e-23 -7.60856732e-23  1.16316653e-23  1.32132864e-23
  2.01004980e-23 -1.47985914e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.10835123062133789 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 2.0616769343538883, 'mass_2_source': 1.3780992539931889, 's1_z': -0.030442787105926808, 's2_z': -0.02410855058633128, 'cos_iota': -0.8145209785152696, 'd_L': 276.6203967204946, 't_c': 0.050799982773990365, 'phase_c': 5.952935141375363, 'psi': 1.4967184593369591, 'ra': 0.4421855326970419, 'sin_dec': -0.5946844243053184, 'q': 0.6684360827973629, 'M_c': 1.5528347955675614, 'eta': 0.24012685795700048, 'iota': Array(2.52269933, dtype=float64, weak_type=True), 'dec': Array(-0.63687306, dtype=float64, weak_type=True), 'lambda_1': 61.246220267265905, 'lambda_2': 670.387236234257, 'H1_SNR': 2.3965375279638916, 'L1_SNR': 5.237135094432397, 'V1_SNR': 14.775014752204694, 'network_SNR': 15.857869877387095, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5058174133300781 seconds
Time for h_sky_low and h_sky_center: 5.354614734649658 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.6885325908660889
Going to compute coefficients . . .
Time for computing coefficients: 125.89139175415039 seconds
Time for computing coefficients: 6.898023366928101 seconds
Time for computing coefficients: 6.941578149795532 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:01<6:43:24, 121.63s/it]Tuning global sampler:   1%|          | 2/200 [02:06<2:54:11, 52.79s/it] Tuning global sampler:   2%|▏         | 3/200 [02:10<1:41:07, 30.80s/it]Tuning global sampler:   2%|▏         | 4/200 [02:15<1:06:53, 20.48s/it]Tuning global sampler:   2%|▎         | 5/200 [02:21<49:02, 15.09s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:25<37:17, 11.53s/it]Tuning global sampler:   4%|▎         | 7/200 [02:30<29:46,  9.26s/it]Tuning global sampler:   4%|▍         | 8/200 [02:34<24:54,  7.79s/it]Tuning global sampler:   4%|▍         | 9/200 [02:39<21:33,  6.77s/it]Tuning global sampler:   5%|▌         | 10/200 [02:43<19:16,  6.09s/it]Tuning global sampler:   6%|▌         | 11/200 [02:48<17:44,  5.63s/it]Tuning global sampler:   6%|▌         | 12/200 [02:53<16:38,  5.31s/it]Tuning global sampler:   6%|▋         | 13/200 [02:57<15:55,  5.11s/it]Tuning global sampler:   7%|▋         | 14/200 [03:02<15:35,  5.03s/it]Tuning global sampler:   8%|▊         | 15/200 [03:07<15:09,  4.92s/it]Tuning global sampler:   8%|▊         | 16/200 [03:11<14:50,  4.84s/it]Tuning global sampler:   8%|▊         | 17/200 [03:16<14:36,  4.79s/it]Tuning global sampler:   9%|▉         | 18/200 [03:21<14:23,  4.75s/it]Tuning global sampler:  10%|▉         | 19/200 [03:25<14:14,  4.72s/it]Tuning global sampler:  10%|█         | 20/200 [03:30<14:08,  4.72s/it]Tuning global sampler:  10%|█         | 21/200 [03:35<14:02,  4.71s/it]Tuning global sampler:  11%|█         | 22/200 [03:39<13:53,  4.68s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:44<13:45,  4.67s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:49<14:18,  4.88s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:54<13:48,  4.74s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:58<13:26,  4.63s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:03<13:10,  4.57s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:07<12:56,  4.52s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:12<12:47,  4.49s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:16<12:40,  4.47s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:20<12:32,  4.45s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:25<12:25,  4.44s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:29<12:22,  4.44s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:34<12:13,  4.42s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:38<12:09,  4.42s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:42<12:03,  4.41s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:47<11:59,  4.41s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:51<11:53,  4.41s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:56<11:48,  4.40s/it]Tuning global sampler:  20%|██        | 40/200 [05:00<11:43,  4.40s/it]Tuning global sampler:  20%|██        | 41/200 [05:04<11:39,  4.40s/it]Tuning global sampler:  21%|██        | 42/200 [05:09<11:34,  4.40s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:13<11:31,  4.40s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:18<12:08,  4.67s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:23<11:51,  4.59s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:27<11:38,  4.53s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:32<11:27,  4.49s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:36<11:18,  4.46s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:41<11:17,  4.49s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:45<11:08,  4.46s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:49<11:01,  4.44s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:54<10:55,  4.43s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:58<10:49,  4.42s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:03<10:44,  4.42s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:07<10:37,  4.40s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:11<10:33,  4.40s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:16<10:30,  4.41s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:20<10:25,  4.41s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:25<10:21,  4.41s/it]Tuning global sampler:  30%|███       | 60/200 [06:29<10:18,  4.42s/it]Tuning global sampler:  30%|███       | 61/200 [06:33<10:14,  4.42s/it]Tuning global sampler:  31%|███       | 62/200 [06:38<10:11,  4.43s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:42<10:07,  4.43s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:48<10:42,  4.72s/it]Tuning global sampler:  32%|███▎      | 65/200 [06:52<10:25,  4.63s/it]Tuning global sampler:  33%|███▎      | 66/200 [06:57<10:10,  4.56s/it]Tuning global sampler:  34%|███▎      | 67/200 [07:01<09:59,  4.51s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:05<09:51,  4.48s/it]Tuning global sampler:  34%|███▍      | 69/200 [07:10<09:44,  4.46s/it]Tuning global sampler:  35%|███▌      | 70/200 [07:14<09:39,  4.45s/it]Tuning global sampler:  36%|███▌      | 71/200 [07:19<09:33,  4.45s/it]Tuning global sampler:  36%|███▌      | 71/200 [07:23<13:26,  6.25s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.22s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.22s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.22s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.22s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.22s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.22s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.22s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.22s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]
11:43 ninjax INFO    : Saving samples to ./Aplus/injection_1/results_training.npz
11:43 ninjax INFO    : Saving the NF
11:43 ninjax INFO    : Time taken: 482.19052386283875 seconds (8.036508731047313 minutes)
11:43 ninjax INFO    : Creating the final corner plot
11:43 ninjax INFO    : Dumping the final production chains
11:43 ninjax INFO    : Chains shape is: (13, 220000)
11:44 ninjax INFO    : Key: M_c: ESS = 62943, Rhat = 1.0115058552862741
11:44 ninjax INFO    : Key: q: ESS = 34408, Rhat = 1.0189970787432028
11:44 ninjax INFO    : Key: s1_z: ESS = 40786, Rhat = 1.0166092116534784
11:44 ninjax INFO    : Key: s2_z: ESS = 51144, Rhat = 1.0131579296933528
11:44 ninjax INFO    : Key: lambda_1: ESS = 37800, Rhat = 1.016971209820342
11:44 ninjax INFO    : Key: lambda_2: ESS = 48126, Rhat = 1.0146212371282577
11:44 ninjax INFO    : Key: cos_iota: ESS = 25409, Rhat = 1.0246683000079861
11:44 ninjax INFO    : Key: d_L: ESS = 23341, Rhat = 1.0268300848377412
11:44 ninjax INFO    : Key: t_c: ESS = 37631, Rhat = 1.0173116068010455
11:44 ninjax INFO    : Key: phase_c: ESS = 50339, Rhat = 1.0136404649515915
11:44 ninjax INFO    : Key: psi: ESS = 46197, Rhat = 1.0182137977410468
11:44 ninjax INFO    : Key: ra: ESS = 34647, Rhat = 1.018015688800849
11:44 ninjax INFO    : Key: sin_dec: ESS = 43273, Rhat = 1.0151389182819623
11:44 ninjax INFO    : Key: eta: ESS = 34408, Rhat = 1.0189970787432028
11:44 ninjax INFO    : Key: iota: ESS = 25409, Rhat = 1.0246683000079861
11:44 ninjax INFO    : Key: dec: ESS = 43273, Rhat = 1.0151389182819623
11:44 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.556 +/- 0.185
q: 0.642 +/- 0.208
s1_z: -0.006 +/- 0.028
s2_z: -0.004 +/- 0.028
lambda_1: 1900.396 +/- 1470.057
lambda_2: 2118.078 +/- 1422.360
cos_iota: -0.370 +/- 0.517
d_L: 543.190 +/- 270.663
t_c: 0.045 +/- 0.033
phase_c: 3.008 +/- 1.756
psi: 1.628 +/- 0.877
ra: 1.121 +/- 1.497
sin_dec: -0.438 +/- 0.426
Log probability: 46.764 +/- 53.614
Local acceptance: 0.950 +/- 0.219
Global acceptance: 0.018 +/- 0.132
Max loss: 106.600, Min loss: 8.173
Production summary
==========
M_c: 1.553 +/- 0.000
q: 0.682 +/- 0.120
s1_z: -0.014 +/- 0.027
s2_z: -0.011 +/- 0.028
lambda_1: 575.164 +/- 642.349
lambda_2: 1504.680 +/- 1232.212
cos_iota: -0.788 +/- 0.172
d_L: 269.389 +/- 49.979
t_c: 0.052 +/- 0.001
phase_c: 3.136 +/- 1.803
psi: 1.562 +/- 0.903
ra: 0.427 +/- 0.050
sin_dec: -0.590 +/- 0.018
Log probability: 111.059 +/- 2.626
Local acceptance: 0.878 +/- 0.327
Global acceptance: 0.109 +/- 0.311
DONE

JOB STATISTICS
==============
Job ID: 10923033
Cluster: snellius
User/Group: twouters2/twouters2
State: RUNNING
Nodes: 1
Cores per node: 16
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 03:02:40 core-walltime
Job Wall-clock time: 00:11:25
Memory Utilized: 0.00 MB
Memory Efficiency: 0.00% of 10.00 GB (10.00 GB/node)
WARNING: Efficiency statistics can only be obtained after the job has ended as seff tool is based on the accounting database data.
