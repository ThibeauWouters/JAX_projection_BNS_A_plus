Sat Apr  5 10:13:27 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
10:13 ninjax INFO    : Checking and setting outdir
10:13 ninjax INFO    : Generation prior equals the prior file
10:13 ninjax INFO    : The outdir is set to ./Aplus/injection_1_v2
10:13 ninjax INFO    : Loading the given config
10:13 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
10:13 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'True', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'm1_m2_to_Mc_q,q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': '1', 'sampling_seed': '1', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
10:13 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/jester_hard/Aplus/injection_1_v2/complete_config.json
10:13 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 438973
10:13 ninjax INFO    : Loading the priors
10:13 ninjax INFO    : Setting up the prior
10:13 ninjax INFO    :    masses_lambdas_prior = NFPrior("/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/NFprior/NFPrior.eqx", naming = ["m_1_source", "m_2_source", "lambda_1", "lambda_2"])
10:13 ninjax INFO    : Reading the NF kwargs
10:13 ninjax INFO    : Initializing the NF prior: deserializing leaves
10:13 ninjax INFO    : Initializing the NF prior: deserializing leaves DONE
10:13 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
10:13 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
10:13 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
10:13 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
10:13 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
10:13 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
10:13 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
10:13 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
10:13 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
10:13 ninjax INFO    : Setting up the generation prior
10:13 ninjax INFO    :    masses_lambdas_prior = NFPrior("/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/NFprior/NFPrior.eqx", naming = ["m_1_source", "m_2_source", "lambda_1", "lambda_2"])
10:13 ninjax INFO    : Reading the NF kwargs
10:13 ninjax INFO    : Initializing the NF prior: deserializing leaves
10:13 ninjax INFO    : Initializing the NF prior: deserializing leaves DONE
10:13 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
10:13 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
10:13 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
10:13 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
10:13 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
10:13 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
10:13 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
10:13 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
10:13 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
10:13 ninjax INFO    : Finished prior setup
10:13 ninjax INFO    : Setting the transforms
10:13 ninjax INFO    : Raw transforms list is m1_m2_to_Mc_q,q_to_eta,cos_iota_to_iota,sin_dec_to_dec
10:13 ninjax INFO    : transforms_str_list has 4 elements
10:13 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
10:13 ninjax INFO    : Setting the likelihood
10:13 ninjax INFO    : GW likelihood provided, setting up the GW pipe
10:13 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz
10:13 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz for BNS injections
10:13 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
10:13 ninjax INFO    : self.is_BNS_run is True
10:13 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
10:13 ninjax INFO    : GW run is an injection
10:13 ninjax INFO    : Setting up GW injection . . . 
10:13 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
10:13 ninjax INFO    : Loading existing injection, path: ./Aplus/injection_1_v2/injection.json
10:13 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz . . . 
10:13 ninjax INFO    : Injected lambda_1: 61.246220267265905
10:13 ninjax INFO    : Injected lambda_2: 670.387236234257
10:13 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.5528347955675614 is 128.0
10:13 ninjax ERROR   : Error in applying transforms: 'm_1_source'
10:13 ninjax INFO    : After transforms, the injection parameters are:
10:13 ninjax INFO    : {'mass_1_source': 2.0616769343538883, 'mass_2_source': 1.3780992539931889, 's1_z': -0.030442787105926808, 's2_z': -0.02410855058633128, 'cos_iota': -0.8145209785152696, 'd_L': 276.6203967204946, 't_c': 0.050799982773990365, 'phase_c': 5.952935141375363, 'psi': 1.4967184593369591, 'ra': 0.4421855326970419, 'sin_dec': -0.5946844243053184, 'q': 0.6684360827973629, 'M_c': 1.5528347955675614, 'eta': 0.24012685795700048, 'iota': 2.522699334257709, 'dec': -0.6368730646985251, 'lambda_1': 61.246220267265905, 'lambda_2': 670.387236234257, 'H1_SNR': 2.3965375279638916, 'L1_SNR': 5.237135094432397, 'V1_SNR': 14.775014752204694, 'network_SNR': 15.857869877387095, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
10:13 ninjax INFO    : The trial injection parameters are {'M_c': 1.5528347955675614, 'eta': 0.24012685795700048, 's1_z': -0.030442787105926808, 's2_z': -0.02410855058633128, 'lambda_1': 61.246220267265905, 'lambda_2': 670.387236234257, 'd_L': 276.6203967204946, 'phase_c': 5.952935141375363, 'iota': 2.522699334257709, 't_c': 0.050799982773990365, 'psi': 1.4967184593369591, 'ra': 0.4421855326970419, 'dec': -0.6368730646985251}
10:13 ninjax INFO    : Injecting signals . . .
10:13 ninjax INFO    : self.ifos
10:13 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
10:13 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
10:13 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
10:13 ninjax INFO    : [ 3.64948447e-23-4.46230299e-23j -2.57610795e-23-1.26467482e-23j
 -6.75230894e-24-5.62589994e-24j ...
 -1.60138165e-23+3.55923942e-25j  3.63159104e-24+1.26140172e-23j
  5.24323709e-23+6.77994834e-24j]
10:13 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
10:13 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
10:13 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
10:13 ninjax INFO    : [-8.73156208e-23-5.22148578e-24j  1.31740878e-22-7.05290405e-24j
 -3.95531092e-25-2.15743509e-23j ...
 -1.70449643e-24+1.91440944e-23j  2.02536055e-23-7.32370021e-24j
  1.67233265e-23-7.00895348e-25j]
10:13 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
10:13 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
10:13 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
10:13 ninjax INFO    : [ 7.12572368e-23+1.02478353e-23j  5.17422924e-23-1.72230899e-23j
 -4.94851126e-25+1.27476278e-23j ...
  9.05805171e-24+5.36319833e-24j  4.73135850e-23-2.22405150e-23j
  1.40156040e-23-7.26009587e-25j]
10:13 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
10:13 ninjax INFO    : SNR for ifo H1 is 2.3965375279638916
10:13 ninjax INFO    : SNR for ifo L1 is 5.237135094432397
10:13 ninjax INFO    : SNR for ifo V1 is 14.775014752204694
10:13 ninjax INFO    : The network SNR is 15.857869877387095
10:13 ninjax INFO    : Network SNR passes threshold
10:13 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
10:13 ninjax INFO    :    mass_1_source: 2.0616769343538883
10:13 ninjax INFO    :    mass_2_source: 1.3780992539931889
10:13 ninjax INFO    :    s1_z: -0.030442787105926808
10:13 ninjax INFO    :    s2_z: -0.02410855058633128
10:13 ninjax INFO    :    cos_iota: -0.8145209785152696
10:13 ninjax INFO    :    d_L: 276.6203967204946
10:13 ninjax INFO    :    t_c: 0.050799982773990365
10:13 ninjax INFO    :    phase_c: 5.952935141375363
10:13 ninjax INFO    :    psi: 1.4967184593369591
10:13 ninjax INFO    :    ra: 0.4421855326970419
10:13 ninjax INFO    :    sin_dec: -0.5946844243053184
10:13 ninjax INFO    :    q: 0.6684360827973629
10:13 ninjax INFO    :    M_c: 1.5528347955675614
10:13 ninjax INFO    :    eta: 0.24012685795700048
10:13 ninjax INFO    :    iota: 2.522699334257709
10:13 ninjax INFO    :    dec: -0.6368730646985251
10:13 ninjax INFO    :    lambda_1: 61.246220267265905
10:13 ninjax INFO    :    lambda_2: 670.387236234257
10:13 ninjax INFO    :    H1_SNR: 2.3965375279638916
10:13 ninjax INFO    :    L1_SNR: 5.237135094432397
10:13 ninjax INFO    :    V1_SNR: 14.775014752204694
10:13 ninjax INFO    :    network_SNR: 15.857869877387095
10:13 ninjax INFO    :    epoch: 126.0
10:13 ninjax INFO    :    gmst: 2.7288901910520846
10:13 ninjax INFO    :    duration: 128.0
10:13 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
10:13 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
10:13 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
10:16 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 143.902108669281 seconds = 2.39836847782135 minutes
10:16 ninjax INFO    : The priors are not modified after their initialization
10:16 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
10:16 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
10:16 ninjax INFO    : Ninjax setup complete.
10:16 ninjax INFO    : Saving output to ./Aplus/injection_1_v2/
10:16 ninjax INFO    : Using polynomial learning rate scheduler
10:16 ninjax INFO    : The hyperparameters passed to flowMC and jim are
10:16 ninjax INFO    :    n_loop_training: 200
10:16 ninjax INFO    :    n_loop_production: 10
10:16 ninjax INFO    :    n_local_steps: 100
10:16 ninjax INFO    :    n_global_steps: 1000
10:16 ninjax INFO    :    n_epochs: 25
10:16 ninjax INFO    :    n_chains: 1000
10:16 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x14cba77c80d0>
10:16 ninjax INFO    :    max_samples: 50000
10:16 ninjax INFO    :    momentum: 0.9
10:16 ninjax INFO    :    batch_size: 30000
10:16 ninjax INFO    :    use_global: True
10:16 ninjax INFO    :    keep_quantile: 0.0
10:16 ninjax INFO    :    train_thinning: 10
10:16 ninjax INFO    :    output_thinning: 50
10:16 ninjax INFO    :    n_sample_max: 10000
10:16 ninjax INFO    :    num_layers: 10
10:16 ninjax INFO    :    hidden_size: [128, 128]
10:16 ninjax INFO    :    num_bins: 8
10:16 ninjax INFO    :    save_training_chains: False
10:16 ninjax INFO    :    eps_mass_matrix: 1e-05
10:16 ninjax INFO    :    use_scheduler: True
10:16 ninjax INFO    :    use_temperature: False
10:16 ninjax INFO    :    which_temperature_schedule: exponential
10:16 ninjax INFO    :    starting_temperature: 2.0
10:16 ninjax INFO    :    stop_tempering_iteration: 75
10:16 ninjax INFO    :    stopping_criterion_global_acc: 0.1
10:16 ninjax INFO    :    stopping_criterion_loss: -inf
10:16 ninjax INFO    :    nf_model_kwargs: {}
10:16 ninjax INFO    :    local sampler arg not shown (pretty print)
10:16 ninjax INFO    : Fetching the injected values for plotting
The NF kwargs are: {'nn_depth': 5, 'nn_block_dim': 8}
The NF kwargs are: {'nn_depth': 5, 'nn_block_dim': 8}
Checking the noise that was generated in inject_signal ifo:
[ 3.65229012e-23 -2.48601635e-23 -5.69027658e-24 -6.48483310e-24
 -6.21728597e-23  1.26041693e-23  3.96239776e-23 -1.99014984e-23
  6.79801617e-24 -5.21344036e-23]
[-4.35110743e-23 -1.19952503e-23 -5.95309202e-24 -6.10746640e-23
 -6.06777622e-23 -6.07141768e-23 -4.11038373e-23 -7.09405060e-24
  4.09692263e-23 -6.90183394e-23]
Checking the noise that was generated in inject_signal ifo:
[-8.54244974e-23  1.31673184e-22 -2.37470835e-24 -2.01580873e-23
  2.54031730e-23 -2.42497134e-23 -8.46016590e-23  1.69720179e-23
  2.04429121e-24  2.52388249e-23]
[-6.74859416e-24 -9.48156883e-24 -2.29816345e-23 -3.03923164e-23
 -3.84865704e-23  6.31479210e-24 -2.32896965e-23 -1.83386616e-23
  3.42806202e-23 -2.78026745e-23]
Checking the noise that was generated in inject_signal ifo:
[ 7.37131641e-23  4.65919818e-23 -9.18255384e-24  5.26578581e-23
  3.33825704e-23  7.89777657e-23 -6.10133009e-23  6.22788098e-24
  9.08823401e-23 -4.99268121e-24]
[ 1.90567740e-24 -2.42251042e-23  1.26552039e-23  4.57736050e-23
 -3.81200567e-23  1.40428450e-23 -3.33917838e-25 -9.45604587e-23
  6.09410130e-23 -7.58650650e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.10792660713195801 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 2.0616769343538883, 'mass_2_source': 1.3780992539931889, 's1_z': -0.030442787105926808, 's2_z': -0.02410855058633128, 'cos_iota': -0.8145209785152696, 'd_L': 276.6203967204946, 't_c': 0.050799982773990365, 'phase_c': 5.952935141375363, 'psi': 1.4967184593369591, 'ra': 0.4421855326970419, 'sin_dec': -0.5946844243053184, 'q': 0.6684360827973629, 'M_c': 1.5528347955675614, 'eta': 0.24012685795700048, 'iota': 2.522699334257709, 'dec': -0.6368730646985251, 'lambda_1': 61.246220267265905, 'lambda_2': 670.387236234257, 'H1_SNR': 2.3965375279638916, 'L1_SNR': 5.237135094432397, 'V1_SNR': 14.775014752204694, 'network_SNR': 15.857869877387095, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5108850002288818 seconds
Time for h_sky_low and h_sky_center: 5.415841579437256 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.6943809986114502
Going to compute coefficients . . .
Time for computing coefficients: 122.08627080917358 seconds
Time for computing coefficients: 7.284048795700073 seconds
Time for computing coefficients: 7.270254373550415 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:08<7:07:29, 128.89s/it]Tuning global sampler:   1%|          | 2/200 [02:13<3:04:13, 55.82s/it] Tuning global sampler:   2%|▏         | 3/200 [02:18<1:46:41, 32.49s/it]Tuning global sampler:   2%|▏         | 4/200 [02:23<1:10:19, 21.53s/it]Tuning global sampler:   2%|▎         | 5/200 [02:27<50:16, 15.47s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:32<38:11, 11.81s/it]Tuning global sampler:   4%|▎         | 7/200 [02:37<30:28,  9.47s/it]Tuning global sampler:   4%|▍         | 8/200 [02:42<26:24,  8.25s/it]Tuning global sampler:   4%|▍         | 9/200 [02:47<22:41,  7.13s/it]Tuning global sampler:   5%|▌         | 10/200 [02:51<20:02,  6.33s/it]Tuning global sampler:   6%|▌         | 11/200 [02:56<18:21,  5.83s/it]Tuning global sampler:   6%|▌         | 12/200 [03:01<17:11,  5.49s/it]Tuning global sampler:   6%|▋         | 13/200 [03:06<16:19,  5.24s/it]Tuning global sampler:   7%|▋         | 14/200 [03:10<15:46,  5.09s/it]Tuning global sampler:   8%|▊         | 15/200 [03:15<15:22,  4.99s/it]Tuning global sampler:   8%|▊         | 16/200 [03:20<15:04,  4.91s/it]Tuning global sampler:   8%|▊         | 17/200 [03:24<14:50,  4.86s/it]Tuning global sampler:   9%|▉         | 18/200 [03:29<14:38,  4.83s/it]Tuning global sampler:  10%|▉         | 19/200 [03:34<14:29,  4.81s/it]Tuning global sampler:  10%|█         | 20/200 [03:39<14:22,  4.79s/it]Tuning global sampler:  10%|█         | 21/200 [03:43<14:15,  4.78s/it]Tuning global sampler:  11%|█         | 22/200 [03:48<14:08,  4.76s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:53<14:00,  4.75s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:57<13:45,  4.69s/it]Tuning global sampler:  12%|█▎        | 25/200 [04:02<13:30,  4.63s/it]Tuning global sampler:  13%|█▎        | 26/200 [04:07<13:19,  4.60s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:11<13:10,  4.57s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:16<13:02,  4.55s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:20<12:55,  4.54s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:25<13:38,  4.82s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:30<13:18,  4.72s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:35<13:02,  4.66s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:39<12:48,  4.60s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:43<12:37,  4.56s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:48<12:31,  4.55s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:52<12:24,  4.54s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:57<12:17,  4.53s/it]Tuning global sampler:  19%|█▉        | 38/200 [05:01<12:12,  4.52s/it]Tuning global sampler:  20%|█▉        | 39/200 [05:06<12:07,  4.52s/it]Tuning global sampler:  20%|██        | 40/200 [05:10<12:02,  4.51s/it]Tuning global sampler:  20%|██        | 41/200 [05:15<11:57,  4.51s/it]Tuning global sampler:  21%|██        | 42/200 [05:20<11:52,  4.51s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:24<11:48,  4.51s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:29<11:42,  4.50s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:33<11:36,  4.49s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:37<11:32,  4.50s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:42<11:28,  4.50s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:46<11:24,  4.50s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:51<11:20,  4.51s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:57<12:00,  4.80s/it]Tuning global sampler:  26%|██▌       | 51/200 [06:01<11:42,  4.71s/it]Tuning global sampler:  26%|██▌       | 52/200 [06:06<11:28,  4.65s/it]Tuning global sampler:  26%|██▋       | 53/200 [06:10<11:17,  4.61s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:15<11:09,  4.58s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:19<10:59,  4.55s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:23<10:51,  4.52s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:28<10:46,  4.52s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:33<10:41,  4.52s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:37<10:36,  4.52s/it]Tuning global sampler:  30%|███       | 60/200 [06:42<10:32,  4.52s/it]Tuning global sampler:  30%|███       | 61/200 [06:46<10:27,  4.51s/it]Tuning global sampler:  31%|███       | 62/200 [06:51<10:22,  4.51s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:55<10:18,  4.52s/it]Tuning global sampler:  32%|███▏      | 64/200 [07:00<10:13,  4.51s/it]Tuning global sampler:  32%|███▎      | 65/200 [07:04<10:08,  4.51s/it]Tuning global sampler:  33%|███▎      | 66/200 [07:09<10:02,  4.50s/it]Tuning global sampler:  34%|███▎      | 67/200 [07:13<09:57,  4.49s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:18<09:53,  4.50s/it]Tuning global sampler:  34%|███▍      | 69/200 [07:22<09:49,  4.50s/it]Tuning global sampler:  35%|███▌      | 70/200 [07:27<09:45,  4.51s/it]Tuning global sampler:  36%|███▌      | 71/200 [07:32<10:19,  4.80s/it]Tuning global sampler:  36%|███▌      | 72/200 [07:37<10:03,  4.72s/it]Tuning global sampler:  36%|███▋      | 73/200 [07:41<09:51,  4.65s/it]Tuning global sampler:  37%|███▋      | 74/200 [07:46<09:40,  4.61s/it]Tuning global sampler:  38%|███▊      | 75/200 [07:50<09:32,  4.58s/it]Tuning global sampler:  38%|███▊      | 76/200 [07:55<09:25,  4.56s/it]Tuning global sampler:  38%|███▊      | 77/200 [07:59<09:18,  4.54s/it]Tuning global sampler:  39%|███▉      | 78/200 [08:04<09:11,  4.52s/it]Tuning global sampler:  40%|███▉      | 79/200 [08:08<09:06,  4.51s/it]Tuning global sampler:  40%|████      | 80/200 [08:13<09:02,  4.52s/it]Tuning global sampler:  40%|████      | 81/200 [08:17<08:58,  4.52s/it]Tuning global sampler:  41%|████      | 82/200 [08:22<08:53,  4.52s/it]Tuning global sampler:  42%|████▏     | 83/200 [08:26<08:48,  4.52s/it]Tuning global sampler:  42%|████▏     | 84/200 [08:31<08:44,  4.52s/it]Tuning global sampler:  42%|████▎     | 85/200 [08:35<08:39,  4.52s/it]Tuning global sampler:  43%|████▎     | 86/200 [08:40<08:35,  4.52s/it]Tuning global sampler:  44%|████▎     | 87/200 [08:44<08:31,  4.52s/it]Tuning global sampler:  44%|████▍     | 88/200 [08:49<08:25,  4.51s/it]Tuning global sampler:  44%|████▍     | 89/200 [08:53<08:20,  4.51s/it]Tuning global sampler:  45%|████▌     | 90/200 [08:58<08:16,  4.51s/it]Tuning global sampler:  46%|████▌     | 91/200 [09:03<08:44,  4.82s/it]Tuning global sampler:  46%|████▌     | 92/200 [09:08<08:31,  4.73s/it]Tuning global sampler:  46%|████▋     | 93/200 [09:12<08:21,  4.68s/it]Tuning global sampler:  47%|████▋     | 94/200 [09:17<08:11,  4.64s/it]Tuning global sampler:  48%|████▊     | 95/200 [09:21<08:03,  4.61s/it]Tuning global sampler:  48%|████▊     | 96/200 [09:26<07:57,  4.59s/it]Tuning global sampler:  48%|████▊     | 97/200 [09:31<07:51,  4.58s/it]Tuning global sampler:  49%|████▉     | 98/200 [09:35<07:45,  4.57s/it]Tuning global sampler:  50%|████▉     | 99/200 [09:40<07:38,  4.54s/it]Tuning global sampler:  50%|█████     | 100/200 [09:44<07:32,  4.52s/it]Tuning global sampler:  50%|█████     | 101/200 [09:49<07:27,  4.52s/it]Tuning global sampler:  51%|█████     | 102/200 [09:53<07:23,  4.52s/it]Tuning global sampler:  52%|█████▏    | 103/200 [09:58<07:18,  4.52s/it]Tuning global sampler:  52%|█████▏    | 104/200 [10:02<07:13,  4.51s/it]Tuning global sampler:  52%|█████▎    | 105/200 [10:07<07:08,  4.51s/it]Tuning global sampler:  53%|█████▎    | 106/200 [10:11<07:04,  4.51s/it]Tuning global sampler:  54%|█████▎    | 107/200 [10:16<06:59,  4.51s/it]Tuning global sampler:  54%|█████▍    | 108/200 [10:20<06:54,  4.51s/it]Tuning global sampler:  55%|█████▍    | 109/200 [10:25<06:50,  4.51s/it]Tuning global sampler:  55%|█████▌    | 110/200 [10:29<06:44,  4.50s/it]Tuning global sampler:  56%|█████▌    | 111/200 [10:34<06:39,  4.49s/it]Tuning global sampler:  56%|█████▌    | 112/200 [10:38<06:36,  4.50s/it]Tuning global sampler:  56%|█████▋    | 113/200 [10:44<07:00,  4.83s/it]Tuning global sampler:  57%|█████▋    | 114/200 [10:48<06:48,  4.75s/it]Tuning global sampler:  57%|█████▊    | 115/200 [10:53<06:37,  4.68s/it]Tuning global sampler:  58%|█████▊    | 116/200 [10:57<06:29,  4.63s/it]Tuning global sampler:  58%|█████▊    | 117/200 [11:02<06:21,  4.60s/it]Tuning global sampler:  59%|█████▉    | 118/200 [11:06<06:15,  4.57s/it]Tuning global sampler:  60%|█████▉    | 119/200 [11:11<06:09,  4.57s/it]Tuning global sampler:  60%|██████    | 120/200 [11:15<06:03,  4.55s/it]Tuning global sampler:  60%|██████    | 121/200 [11:20<05:57,  4.53s/it]Tuning global sampler:  61%|██████    | 122/200 [11:24<05:51,  4.51s/it]Tuning global sampler:  62%|██████▏   | 123/200 [11:29<05:47,  4.52s/it]Tuning global sampler:  62%|██████▏   | 124/200 [11:33<05:43,  4.52s/it]Tuning global sampler:  62%|██████▎   | 125/200 [11:38<05:39,  4.52s/it]Tuning global sampler:  63%|██████▎   | 126/200 [11:43<05:34,  4.52s/it]Tuning global sampler:  64%|██████▎   | 127/200 [11:47<05:30,  4.53s/it]Tuning global sampler:  64%|██████▍   | 128/200 [11:52<05:25,  4.53s/it]Tuning global sampler:  64%|██████▍   | 129/200 [11:56<05:20,  4.52s/it]Tuning global sampler:  65%|██████▌   | 130/200 [12:01<05:16,  4.52s/it]Tuning global sampler:  66%|██████▌   | 131/200 [12:05<05:12,  4.52s/it]Tuning global sampler:  66%|██████▌   | 132/200 [12:10<05:06,  4.51s/it]Tuning global sampler:  66%|██████▋   | 133/200 [12:14<05:01,  4.50s/it]Tuning global sampler:  67%|██████▋   | 134/200 [12:19<04:57,  4.51s/it]Tuning global sampler:  68%|██████▊   | 135/200 [12:24<05:14,  4.84s/it]Tuning global sampler:  68%|██████▊   | 136/200 [12:29<05:03,  4.75s/it]Tuning global sampler:  68%|██████▊   | 137/200 [12:33<04:54,  4.68s/it]Tuning global sampler:  69%|██████▉   | 138/200 [12:38<04:47,  4.64s/it]Tuning global sampler:  70%|██████▉   | 139/200 [12:42<04:40,  4.60s/it]Tuning global sampler:  70%|███████   | 140/200 [12:47<04:34,  4.58s/it]Tuning global sampler:  70%|███████   | 141/200 [12:51<04:29,  4.56s/it]Tuning global sampler:  71%|███████   | 142/200 [12:56<04:24,  4.56s/it]Tuning global sampler:  72%|███████▏  | 143/200 [13:00<04:18,  4.54s/it]Tuning global sampler:  72%|███████▏  | 144/200 [13:05<04:13,  4.52s/it]Tuning global sampler:  72%|███████▎  | 145/200 [13:09<04:08,  4.53s/it]Tuning global sampler:  73%|███████▎  | 146/200 [13:14<04:04,  4.52s/it]Tuning global sampler:  74%|███████▎  | 147/200 [13:18<03:59,  4.52s/it]Tuning global sampler:  74%|███████▍  | 148/200 [13:23<03:55,  4.53s/it]Tuning global sampler:  74%|███████▍  | 149/200 [13:28<03:51,  4.53s/it]Tuning global sampler:  75%|███████▌  | 150/200 [13:32<03:46,  4.53s/it]Tuning global sampler:  76%|███████▌  | 151/200 [13:37<03:42,  4.53s/it]Tuning global sampler:  76%|███████▌  | 152/200 [13:41<03:37,  4.53s/it]Tuning global sampler:  76%|███████▋  | 153/200 [13:46<03:33,  4.54s/it]Tuning global sampler:  77%|███████▋  | 154/200 [13:50<03:28,  4.53s/it]Tuning global sampler:  78%|███████▊  | 155/200 [13:55<03:23,  4.52s/it]Tuning global sampler:  78%|███████▊  | 156/200 [13:59<03:18,  4.52s/it]Tuning global sampler:  78%|███████▊  | 157/200 [14:05<03:29,  4.86s/it]Tuning global sampler:  79%|███████▉  | 158/200 [14:09<03:19,  4.76s/it]Tuning global sampler:  80%|███████▉  | 159/200 [14:14<03:12,  4.69s/it]Tuning global sampler:  80%|████████  | 160/200 [14:19<03:05,  4.65s/it]Tuning global sampler:  80%|████████  | 161/200 [14:23<02:59,  4.61s/it]Tuning global sampler:  81%|████████  | 162/200 [14:28<02:54,  4.59s/it]Tuning global sampler:  82%|████████▏ | 163/200 [14:32<02:49,  4.57s/it]Tuning global sampler:  82%|████████▏ | 164/200 [14:37<02:44,  4.56s/it]Tuning global sampler:  82%|████████▎ | 165/200 [14:41<02:38,  4.54s/it]Tuning global sampler:  83%|████████▎ | 166/200 [14:46<02:33,  4.53s/it]Tuning global sampler:  84%|████████▎ | 167/200 [14:50<02:29,  4.53s/it]Tuning global sampler:  84%|████████▍ | 168/200 [14:55<02:24,  4.53s/it]Tuning global sampler:  84%|████████▍ | 169/200 [14:59<02:20,  4.53s/it]Tuning global sampler:  85%|████████▌ | 170/200 [15:04<02:15,  4.53s/it]Tuning global sampler:  86%|████████▌ | 171/200 [15:08<02:11,  4.53s/it]Tuning global sampler:  86%|████████▌ | 172/200 [15:13<02:06,  4.53s/it]Tuning global sampler:  86%|████████▋ | 173/200 [15:17<02:02,  4.53s/it]Tuning global sampler:  87%|████████▋ | 174/200 [15:22<01:57,  4.53s/it]Tuning global sampler:  88%|████████▊ | 175/200 [15:26<01:53,  4.55s/it]Tuning global sampler:  88%|████████▊ | 176/200 [15:31<01:48,  4.53s/it]Tuning global sampler:  88%|████████▊ | 177/200 [15:35<01:43,  4.52s/it]Tuning global sampler:  89%|████████▉ | 178/200 [15:40<01:39,  4.52s/it]Tuning global sampler:  90%|████████▉ | 179/200 [15:46<01:42,  4.86s/it]Tuning global sampler:  90%|█████████ | 180/200 [15:50<01:35,  4.76s/it]Tuning global sampler:  90%|█████████ | 181/200 [15:55<01:29,  4.69s/it]Tuning global sampler:  91%|█████████ | 182/200 [15:59<01:23,  4.64s/it]Tuning global sampler:  92%|█████████▏| 183/200 [16:04<01:18,  4.60s/it]Tuning global sampler:  92%|█████████▏| 184/200 [16:08<01:13,  4.58s/it]Tuning global sampler:  92%|█████████▎| 185/200 [16:13<01:08,  4.57s/it]Tuning global sampler:  93%|█████████▎| 186/200 [16:17<01:03,  4.56s/it]Tuning global sampler:  94%|█████████▎| 187/200 [16:22<00:58,  4.54s/it]Tuning global sampler:  94%|█████████▍| 188/200 [16:26<00:54,  4.52s/it]Tuning global sampler:  94%|█████████▍| 189/200 [16:31<00:49,  4.53s/it]Tuning global sampler:  95%|█████████▌| 190/200 [16:35<00:45,  4.53s/it]Tuning global sampler:  96%|█████████▌| 191/200 [16:40<00:40,  4.53s/it]Tuning global sampler:  96%|█████████▌| 192/200 [16:44<00:36,  4.52s/it]Tuning global sampler:  96%|█████████▋| 193/200 [16:49<00:31,  4.52s/it]Tuning global sampler:  97%|█████████▋| 194/200 [16:53<00:27,  4.53s/it]Tuning global sampler:  98%|█████████▊| 195/200 [16:58<00:22,  4.53s/it]Tuning global sampler:  98%|█████████▊| 196/200 [17:03<00:18,  4.53s/it]Tuning global sampler:  98%|█████████▊| 197/200 [17:07<00:13,  4.52s/it]Tuning global sampler:  99%|█████████▉| 198/200 [17:12<00:09,  4.51s/it]Tuning global sampler: 100%|█████████▉| 199/200 [17:16<00:04,  4.50s/it]Tuning global sampler: 100%|██████████| 200/200 [17:21<00:00,  4.51s/it]Tuning global sampler: 100%|██████████| 200/200 [17:21<00:00,  5.21s/it]
Compiling MALA body
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:29,  3.33s/it]Production run:  20%|██        | 2/10 [00:06<00:26,  3.33s/it]Production run:  30%|███       | 3/10 [00:09<00:23,  3.33s/it]Production run:  40%|████      | 4/10 [00:13<00:19,  3.33s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.33s/it]Production run:  60%|██████    | 6/10 [00:19<00:13,  3.33s/it]Production run:  70%|███████   | 7/10 [00:23<00:09,  3.33s/it]Production run:  80%|████████  | 8/10 [00:26<00:06,  3.33s/it]Production run:  90%|█████████ | 9/10 [00:29<00:03,  3.33s/it]Production run: 100%|██████████| 10/10 [00:33<00:00,  3.33s/it]Production run: 100%|██████████| 10/10 [00:33<00:00,  3.33s/it]
10:34 ninjax INFO    : Saving samples to ./Aplus/injection_1_v2/results_training.npz
10:34 ninjax INFO    : Saving the NF
10:34 ninjax INFO    : Time taken: 1084.3702070713043 seconds (18.072836784521737 minutes)
10:34 ninjax INFO    : Creating the final corner plot
10:34 ninjax INFO    : Dumping the final production chains
10:34 ninjax INFO    : Chains shape is: (13, 220000)
10:34 ninjax INFO    : Key: m_1_source: ESS = 20582, Rhat = 1.032771783672837
10:34 ninjax INFO    : Key: m_2_source: ESS = 20145, Rhat = 1.0332301891375333
10:34 ninjax INFO    : Key: lambda_1: ESS = 25048, Rhat = 1.0275168094791196
10:34 ninjax INFO    : Key: lambda_2: ESS = 28780, Rhat = 1.0243651114585322
10:34 ninjax INFO    : Key: s1_z: ESS = 27248, Rhat = 1.0260027726790333
10:34 ninjax INFO    : Key: s2_z: ESS = 30400, Rhat = 1.0227522223418402
10:34 ninjax INFO    : Key: cos_iota: ESS = 17222, Rhat = 1.0371743896983694
10:34 ninjax INFO    : Key: d_L: ESS = 17265, Rhat = 1.0366948250876422
10:34 ninjax INFO    : Key: t_c: ESS = 19836, Rhat = 1.0328425495915856
10:34 ninjax INFO    : Key: phase_c: ESS = 26415, Rhat = 1.0260476969171097
10:34 ninjax INFO    : Key: psi: ESS = 33997, Rhat = 1.0235841026105157
10:34 ninjax INFO    : Key: ra: ESS = 20420, Rhat = 1.033086169143551
10:34 ninjax INFO    : Key: sin_dec: ESS = 25676, Rhat = 1.0264803534638656
10:34 ninjax INFO    : Key: M_c: ESS = 36632, Rhat = 1.0211710983805773
10:34 ninjax INFO    : Key: q: ESS = 20742, Rhat = 1.0325705493522843
10:34 ninjax INFO    : Key: eta: ESS = 20742, Rhat = 1.0325705493522843
10:34 ninjax INFO    : Key: iota: ESS = 17222, Rhat = 1.0371743896983694
10:34 ninjax INFO    : Key: dec: ESS = 25676, Rhat = 1.0264803534638656
10:34 ninjax INFO    : Finished successfully!
Training summary
==========
m_1_source: 2.066 +/- 0.198
m_2_source: 1.305 +/- 0.113
lambda_1: 67.356 +/- 142.930
lambda_2: 1037.466 +/- 635.937
s1_z: -0.011 +/- 0.026
s2_z: -0.009 +/- 0.028
cos_iota: -0.567 +/- 0.468
d_L: 431.257 +/- 213.648
t_c: 0.049 +/- 0.022
phase_c: 3.155 +/- 1.787
psi: 1.582 +/- 0.874
ra: 0.699 +/- 1.115
sin_dec: -0.483 +/- 0.311
Log probability: 70.849 +/- 38.239
Local acceptance: 0.975 +/- 0.155
Global acceptance: 0.013 +/- 0.112
Max loss: 22.664, Min loss: 4.048
Production summary
==========
m_1_source: 2.124 +/- 0.135
m_2_source: 1.325 +/- 0.079
lambda_1: 46.032 +/- 39.920
lambda_2: 955.173 +/- 449.143
s1_z: -0.016 +/- 0.026
s2_z: -0.010 +/- 0.028
cos_iota: -0.795 +/- 0.180
d_L: 316.896 +/- 59.620
t_c: 0.050 +/- 0.000
phase_c: 3.128 +/- 1.815
psi: 1.604 +/- 0.898
ra: 0.326 +/- 0.053
sin_dec: -0.558 +/- 0.023
Log probability: 94.091 +/- 2.476
Local acceptance: 0.967 +/- 0.179
Global acceptance: 0.018 +/- 0.131
DONE

JOB STATISTICS
==============
Job ID: 10990463
Cluster: snellius
User/Group: twouters2/twouters2
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 00:17:34
CPU Efficiency: 5.19% of 05:38:40 core-walltime
Job Wall-clock time: 00:21:10
Memory Utilized: 5.08 GB
Memory Efficiency: 50.84% of 10.00 GB (10.00 GB/node)
