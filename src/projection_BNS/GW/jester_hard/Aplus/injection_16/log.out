Wed Apr  2 11:33:01 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
11:33 ninjax INFO    : Checking and setting outdir
11:33 ninjax INFO    : Found generation prior file ./Aplus/injection_16/generation_prior.prior
11:33 ninjax INFO    : The outdir is set to ./Aplus/injection_16
11:33 ninjax INFO    : Loading the given config
11:33 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
11:33 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
11:33 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/jester_hard/Aplus/injection_16/complete_config.json
11:33 ninjax INFO    : No seed specified. Generating a random seed: 406045
11:33 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 627685
11:33 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 699678
11:33 ninjax INFO    : Loading the priors
11:33 ninjax INFO    : Setting up the prior
11:33 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
11:33 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
11:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
11:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
11:33 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
11:33 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
11:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
11:33 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
11:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
11:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
11:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
11:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
11:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
11:33 ninjax INFO    : Setting up the generation prior
11:33 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.4, naming=["mass_1_source"])
11:33 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.4, naming=["mass_2_source"])
11:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
11:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
11:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
11:33 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
11:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
11:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
11:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
11:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
11:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
11:33 ninjax INFO    : Finished prior setup
11:33 ninjax INFO    : Setting the transforms
11:33 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
11:33 ninjax INFO    : transforms_str_list has 3 elements
11:33 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
11:33 ninjax INFO    : Setting the likelihood
11:33 ninjax INFO    : GW likelihood provided, setting up the GW pipe
11:33 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz
11:33 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz for BNS injections
11:33 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
11:33 ninjax INFO    : self.is_BNS_run is True
11:33 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
11:33 ninjax INFO    : GW run is an injection
11:33 ninjax INFO    : Setting up GW injection . . . 
11:33 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
11:33 ninjax INFO    : Generating new injection
11:33 ninjax INFO    : Sanity check: generated parameters:
11:33 ninjax INFO    : {'mass_1_source': 1.9332666362368152, 'mass_2_source': 1.4549287150203596, 's1_z': -0.04617136230857526, 's2_z': 0.030581672848137134, 'cos_iota': 0.061218839746407294, 'd_L': 440.8089281284453, 't_c': 0.07436102148937684, 'phase_c': 0.9887185566618345, 'psi': 2.2785903019487748, 'ra': 4.527954565073172, 'sin_dec': -0.9615376571753353}
11:33 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz . . . 
11:33 ninjax INFO    : Injected lambda_1: 95.15803421011009
11:33 ninjax INFO    : Injected lambda_2: 500.90565873509365
11:33 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.6022214165803428 is 128.0
11:33 ninjax INFO    : After transforms, the injection parameters are:
11:33 ninjax INFO    : {'mass_1_source': 1.9332666362368152, 'mass_2_source': 1.4549287150203596, 's1_z': -0.04617136230857526, 's2_z': 0.030581672848137134, 'cos_iota': 0.061218839746407294, 'd_L': 440.8089281284453, 't_c': 0.07436102148937684, 'phase_c': 0.9887185566618345, 'psi': 2.2785903019487748, 'ra': 4.527954565073172, 'sin_dec': -0.9615376571753353, 'q': 0.7525752980729237, 'M_c': 1.6022214165803428, 'eta': 0.24501720812273167, 'iota': Array(1.50953918, dtype=float64, weak_type=True), 'dec': Array(-1.29254658, dtype=float64, weak_type=True), 'lambda_1': 95.15803421011009, 'lambda_2': 500.90565873509365}
11:33 ninjax INFO    : The trial injection parameters are {'M_c': 1.6022214165803428, 'eta': 0.24501720812273167, 's1_z': -0.04617136230857526, 's2_z': 0.030581672848137134, 'lambda_1': 95.15803421011009, 'lambda_2': 500.90565873509365, 'd_L': 440.8089281284453, 'phase_c': 0.9887185566618345, 'iota': 1.5095391836346645, 't_c': 0.07436102148937684, 'psi': 2.2785903019487748, 'ra': 4.527954565073172, 'dec': -1.292546575607579}
11:33 ninjax INFO    : Injecting signals . . .
11:33 ninjax INFO    : self.ifos
11:33 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
11:33 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:33 ninjax INFO    : [-5.22886577e-23+4.59257939e-23j -2.77440239e-23+2.93386300e-23j
 -5.04217963e-23-2.42694866e-23j ...
 -1.18624760e-23+1.65792725e-23j  2.42274821e-23+5.20135519e-24j
 -1.89672780e-23+1.48879504e-25j]
11:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
11:33 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:33 ninjax INFO    : [ 9.20755310e-24+7.21739642e-24j  4.19569520e-23-1.01728063e-23j
  2.45291772e-23+1.31409369e-23j ...
 -1.17040266e-23+2.07651745e-23j  1.32933909e-23+1.50217865e-23j
 -2.51524530e-23+1.94601649e-23j]
11:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
11:33 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:33 ninjax INFO    : [ 3.15607610e-23-4.93531883e-23j  4.61182185e-23+6.25673173e-23j
 -1.24794156e-23+9.67868627e-23j ...
  2.35537377e-23-1.80814845e-23j -8.32834553e-23-3.42146890e-23j
 -3.81344159e-23+2.56422733e-25j]
11:33 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
11:33 ninjax INFO    : SNR for ifo H1 is 1.0367574112752689
11:33 ninjax INFO    : SNR for ifo L1 is 2.1882319446621397
11:33 ninjax INFO    : SNR for ifo V1 is 3.3964432606787547
11:33 ninjax INFO    : The network SNR is 4.171217064177334
11:33 ninjax INFO    : The network SNR does not pass the threshold, trying again
11:33 ninjax INFO    : Generating new injection
11:33 ninjax INFO    : Sanity check: generated parameters:
11:33 ninjax INFO    : {'mass_1_source': 1.3583397544033855, 'mass_2_source': 1.290254551039384, 's1_z': 0.03470328044818154, 's2_z': 0.00991368622423916, 'cos_iota': 0.8517217596502431, 'd_L': 438.87224717322874, 't_c': 0.056782205549909565, 'phase_c': 5.000622572468658, 'psi': 3.02597821663924, 'ra': 1.9166700992330665, 'sin_dec': 0.9658579549611592}
11:33 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz . . . 
11:33 ninjax INFO    : Injected lambda_1: 720.5576807819377
11:33 ninjax INFO    : Injected lambda_2: 943.3245476547102
11:33 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.266690366094702 is 256.0
11:33 ninjax INFO    : After transforms, the injection parameters are:
11:33 ninjax INFO    : {'mass_1_source': 1.3583397544033855, 'mass_2_source': 1.290254551039384, 's1_z': 0.03470328044818154, 's2_z': 0.00991368622423916, 'cos_iota': 0.8517217596502431, 'd_L': 438.87224717322874, 't_c': 0.056782205549909565, 'phase_c': 5.000622572468658, 'psi': 3.02597821663924, 'ra': 1.9166700992330665, 'sin_dec': 0.9658579549611592, 'q': 0.9498761608476178, 'M_c': 1.266690366094702, 'eta': 0.2498347982647634, 'iota': Array(0.55153392, dtype=float64, weak_type=True), 'dec': Array(1.30873483, dtype=float64, weak_type=True), 'lambda_1': 720.5576807819377, 'lambda_2': 943.3245476547102}
11:33 ninjax INFO    : The trial injection parameters are {'M_c': 1.266690366094702, 'eta': 0.2498347982647634, 's1_z': 0.03470328044818154, 's2_z': 0.00991368622423916, 'lambda_1': 720.5576807819377, 'lambda_2': 943.3245476547102, 'd_L': 438.87224717322874, 'phase_c': 5.000622572468658, 'iota': 0.5515339188028338, 't_c': 0.056782205549909565, 'psi': 3.02597821663924, 'ra': 1.9166700992330665, 'dec': 1.308734832514364}
11:33 ninjax INFO    : Injecting signals . . .
11:33 ninjax INFO    : self.ifos
11:33 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
11:33 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
11:33 ninjax INFO    : [-5.79295192e-23-4.07166029e-23j  6.35175334e-24-6.89245448e-23j
 -4.40451180e-23-4.01378490e-23j ...
  1.59185445e-23-1.93471486e-23j -1.40646531e-23-4.58625516e-23j
  1.32494845e-24+3.13620758e-24j]
11:33 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
11:33 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
11:33 ninjax INFO    : [ 5.83574727e-23+8.09159942e-23j  7.86797586e-23+5.98728642e-23j
 -5.18236297e-23+1.23711441e-23j ...
  4.38239592e-23-3.98953491e-23j -1.46004176e-24-1.50742391e-23j
 -3.78627825e-24-4.55647734e-24j]
11:33 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
11:33 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
11:33 ninjax INFO    : [-7.28613040e-23+1.60715501e-23j  3.48391723e-23+1.07661938e-22j
  7.82193668e-23-1.05055529e-23j ...
 -2.23045483e-23+4.65824805e-24j  4.10116217e-23-4.49431277e-23j
  3.52040645e-23-1.92321996e-23j]
11:33 ninjax INFO    : [1.43183556e-46 1.43058540e-46 1.42935095e-46 ... 6.39793039e-47
 6.39795354e-47 6.39797668e-47]
11:33 ninjax INFO    : SNR for ifo H1 is 9.144514191240509
11:33 ninjax INFO    : SNR for ifo L1 is 8.023834119293209
11:33 ninjax INFO    : SNR for ifo V1 is 7.334221979780907
11:33 ninjax INFO    : The network SNR is 14.205451975084577
11:33 ninjax INFO    : Network SNR passes threshold
11:33 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
11:33 ninjax INFO    :    mass_1_source: 1.3583397544033855
11:33 ninjax INFO    :    mass_2_source: 1.290254551039384
11:33 ninjax INFO    :    s1_z: 0.03470328044818154
11:33 ninjax INFO    :    s2_z: 0.00991368622423916
11:33 ninjax INFO    :    cos_iota: 0.8517217596502431
11:33 ninjax INFO    :    d_L: 438.87224717322874
11:33 ninjax INFO    :    t_c: 0.056782205549909565
11:33 ninjax INFO    :    phase_c: 5.000622572468658
11:33 ninjax INFO    :    psi: 3.02597821663924
11:33 ninjax INFO    :    ra: 1.9166700992330665
11:33 ninjax INFO    :    sin_dec: 0.9658579549611592
11:33 ninjax INFO    :    q: 0.9498761608476178
11:33 ninjax INFO    :    M_c: 1.266690366094702
11:33 ninjax INFO    :    eta: 0.2498347982647634
11:33 ninjax INFO    :    iota: 0.5515339188028338
11:33 ninjax INFO    :    dec: 1.308734832514364
11:33 ninjax INFO    :    lambda_1: 720.5576807819377
11:33 ninjax INFO    :    lambda_2: 943.3245476547102
11:33 ninjax INFO    :    H1_SNR: 9.144514191240509
11:33 ninjax INFO    :    L1_SNR: 8.023834119293209
11:33 ninjax INFO    :    V1_SNR: 7.334221979780907
11:33 ninjax INFO    :    network_SNR: 14.205451975084577
11:33 ninjax INFO    :    epoch: 254.0
11:33 ninjax INFO    :    gmst: 2.7288901910520846
11:33 ninjax INFO    :    duration: 256.0
11:33 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
11:33 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
11:33 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
11:36 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 187.08988046646118 seconds = 3.1181646744410196 minutes
11:36 ninjax INFO    : The priors are not modified after their initialization
11:36 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
11:36 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
11:36 ninjax INFO    : sample: {'M_c': Array([1.04932074, 1.5416511 , 2.38873015], dtype=float64), 'q': Array([0.24137853, 0.37820807, 0.27584078], dtype=float64), 's1_z': Array([ 0.04673196,  0.04101204, -0.02628225], dtype=float64), 's2_z': Array([0.04021404, 0.00594036, 0.04354325], dtype=float64), 'lambda_1': Array([1689.62211392, 2982.48022969, 3997.18553276], dtype=float64), 'lambda_2': Array([ 511.47171816, 4185.52278386, 2242.43945412], dtype=float64), 'cos_iota': Array([ 0.33747818,  0.07819689, -0.97362659], dtype=float64), 'd_L': Array([953.91374584, 729.409809  , 972.6947273 ], dtype=float64), 't_c': Array([ 0.05176972, -0.06588512,  0.02938793], dtype=float64), 'phase_c': Array([3.12220115, 4.2667812 , 5.09141267], dtype=float64), 'psi': Array([1.857339  , 0.50042985, 2.21995364], dtype=float64), 'ra': Array([4.57899205, 2.29400946, 3.83033451], dtype=float64), 'sin_dec': Array([0.64318131, 0.3619404 , 0.18763243], dtype=float64)}
11:36 ninjax INFO    : log_prob: [ -1.8689059   -3.6001707  -34.40018676]
11:36 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.3583397544033855, 'mass_2_source': 1.290254551039384, 's1_z': 0.03470328044818154, 's2_z': 0.00991368622423916, 'cos_iota': 0.8517217596502431, 'd_L': 438.87224717322874, 't_c': 0.056782205549909565, 'phase_c': 5.000622572468658, 'psi': 3.02597821663924, 'ra': 1.9166700992330665, 'sin_dec': 0.9658579549611592, 'q': 0.9498761608476178, 'M_c': 1.266690366094702, 'eta': 0.2498347982647634, 'iota': Array(0.55153392, dtype=float64, weak_type=True), 'dec': Array(1.30873483, dtype=float64, weak_type=True), 'lambda_1': 720.5576807819377, 'lambda_2': 943.3245476547102, 'H1_SNR': 9.144514191240509, 'L1_SNR': 8.023834119293209, 'V1_SNR': 7.334221979780907, 'network_SNR': 14.205451975084577, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
11:36 ninjax INFO    : log_prob at the injection parameters is: 80.41584860200868
11:36 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
11:36 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
11:36 ninjax INFO    : Ninjax setup complete.
11:36 ninjax INFO    : Saving output to ./Aplus/injection_16/
11:36 ninjax INFO    : Using polynomial learning rate scheduler
11:36 ninjax INFO    : The hyperparameters passed to flowMC and jim are
11:36 ninjax INFO    :    n_loop_training: 200
11:36 ninjax INFO    :    n_loop_production: 10
11:36 ninjax INFO    :    n_local_steps: 100
11:36 ninjax INFO    :    n_global_steps: 1000
11:36 ninjax INFO    :    n_epochs: 25
11:36 ninjax INFO    :    n_chains: 1000
11:36 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x14cbe79d1f30>
11:36 ninjax INFO    :    max_samples: 50000
11:36 ninjax INFO    :    momentum: 0.9
11:36 ninjax INFO    :    batch_size: 30000
11:36 ninjax INFO    :    use_global: True
11:36 ninjax INFO    :    keep_quantile: 0.0
11:36 ninjax INFO    :    train_thinning: 10
11:36 ninjax INFO    :    output_thinning: 50
11:36 ninjax INFO    :    n_sample_max: 10000
11:36 ninjax INFO    :    num_layers: 10
11:36 ninjax INFO    :    hidden_size: [128, 128]
11:36 ninjax INFO    :    num_bins: 8
11:36 ninjax INFO    :    save_training_chains: False
11:36 ninjax INFO    :    eps_mass_matrix: 1e-05
11:36 ninjax INFO    :    use_scheduler: True
11:36 ninjax INFO    :    use_temperature: False
11:36 ninjax INFO    :    which_temperature_schedule: exponential
11:36 ninjax INFO    :    starting_temperature: 2.0
11:36 ninjax INFO    :    stop_tempering_iteration: 75
11:36 ninjax INFO    :    stopping_criterion_global_acc: 0.1
11:36 ninjax INFO    :    stopping_criterion_loss: -inf
11:36 ninjax INFO    :    nf_model_kwargs: {}
11:36 ninjax INFO    :    local sampler arg not shown (pretty print)
11:36 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[-5.20018508e-23 -2.72786491e-23 -5.03624158e-23  7.27059646e-24
 -2.74418405e-23 -9.09533784e-24 -5.34241483e-23  3.35949384e-23
 -1.68206729e-23 -6.72688805e-23]
[ 4.63120848e-23  2.92174149e-23 -2.47464866e-23 -1.52346119e-23
 -1.54976029e-22 -3.91872437e-23  1.83853897e-23 -3.16213658e-23
 -5.41661208e-23 -2.69785365e-23]
Checking the noise that was generated in inject_signal ifo:
[ 8.36291774e-24  4.11182453e-23  2.47500996e-23 -8.93441106e-23
 -6.32156651e-23  6.00593929e-24  3.92397486e-23  1.90790750e-23
  2.59715854e-23  5.19720228e-23]
[ 6.65366499e-24 -9.60111709e-24  1.41311427e-23  2.44032942e-23
 -1.06041719e-22 -1.12789106e-22 -4.09327276e-23  6.77185150e-23
  3.65650365e-23 -3.09638713e-23]
Checking the noise that was generated in inject_signal ifo:
[ 3.34885177e-23  4.73296566e-23 -1.35069912e-23  6.02819210e-24
 -6.65225913e-23 -7.01358238e-23 -4.92326725e-23  3.55906273e-23
  3.04273812e-23 -1.06910852e-23]
[-4.88249668e-23  6.09786003e-23  9.50745434e-23 -4.70359899e-23
  1.86426352e-24 -8.18224422e-23  4.04917061e-23 -4.24613588e-23
 -3.24052150e-23 -7.94153644e-23]
Checking the noise that was generated in inject_signal ifo:
[-6.15899825e-23  8.16426062e-24 -4.33740272e-23  4.96428737e-23
 -2.10696952e-23  4.98733915e-23 -3.65872725e-23 -3.03033003e-23
  1.90114497e-23  1.22041783e-22]
[-4.28186949e-23 -6.51134499e-23 -4.43033161e-23 -7.74088483e-23
  1.22107941e-22  2.14030934e-23 -9.92622551e-24 -1.65749555e-23
  3.36443329e-23 -5.43095123e-23]
Checking the noise that was generated in inject_signal ifo:
[ 6.14890657e-23  7.72310000e-23 -5.25650292e-23  1.52931333e-22
  2.92709085e-23  4.32910936e-23 -9.52246882e-23  2.78931868e-23
  1.34208269e-22  5.52241975e-23]
[ 8.28936941e-23  5.64650801e-23  1.59982569e-23 -1.20856715e-22
 -5.25291588e-23  2.85081728e-23 -6.15170330e-24  5.61559850e-23
 -3.84243120e-23  8.99355059e-23]
Checking the noise that was generated in inject_signal ifo:
[-6.88670175e-23  3.06537638e-23  8.11136298e-23 -7.48363200e-23
  1.27721744e-22  2.60048354e-23 -3.64678939e-23  3.29914756e-23
  2.14966168e-23  3.49106114e-23]
[ 1.44862972e-23  1.06691754e-22 -7.33164419e-24  1.05715731e-22
 -4.77792068e-23  7.63040439e-23  5.02586217e-23 -7.47160432e-23
  3.87365137e-23 -7.89488980e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.1841752529144287 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.3583397544033855, 'mass_2_source': 1.290254551039384, 's1_z': 0.03470328044818154, 's2_z': 0.00991368622423916, 'cos_iota': 0.8517217596502431, 'd_L': 438.87224717322874, 't_c': 0.056782205549909565, 'phase_c': 5.000622572468658, 'psi': 3.02597821663924, 'ra': 1.9166700992330665, 'sin_dec': 0.9658579549611592, 'q': 0.9498761608476178, 'M_c': 1.266690366094702, 'eta': 0.2498347982647634, 'iota': Array(0.55153392, dtype=float64, weak_type=True), 'dec': Array(1.30873483, dtype=float64, weak_type=True), 'lambda_1': 720.5576807819377, 'lambda_2': 943.3245476547102, 'H1_SNR': 9.144514191240509, 'L1_SNR': 8.023834119293209, 'V1_SNR': 7.334221979780907, 'network_SNR': 14.205451975084577, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5308454036712646 seconds
Time for h_sky_low and h_sky_center: 5.593790054321289 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.7469854354858398
Going to compute coefficients . . .
Time for computing coefficients: 164.58496856689453 seconds
Time for computing coefficients: 7.5378782749176025 seconds
Time for computing coefficients: 7.369877099990845 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:02<6:46:05, 122.44s/it]Tuning global sampler:   1%|          | 2/200 [02:07<2:55:14, 53.10s/it] Tuning global sampler:   2%|▏         | 3/200 [02:11<1:41:40, 30.97s/it]Tuning global sampler:   2%|▏         | 4/200 [02:16<1:07:10, 20.56s/it]Tuning global sampler:   2%|▎         | 5/200 [02:20<48:07, 14.81s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:25<36:40, 11.34s/it]Tuning global sampler:   4%|▎         | 7/200 [02:29<29:18,  9.11s/it]Tuning global sampler:   4%|▍         | 8/200 [02:34<24:33,  7.68s/it]Tuning global sampler:   4%|▍         | 9/200 [02:39<21:18,  6.69s/it]Tuning global sampler:   5%|▌         | 10/200 [02:43<18:58,  5.99s/it]Tuning global sampler:   6%|▌         | 11/200 [02:48<17:32,  5.57s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:30,  5.27s/it]Tuning global sampler:   6%|▋         | 13/200 [02:57<15:44,  5.05s/it]Tuning global sampler:   7%|▋         | 14/200 [03:01<15:15,  4.92s/it]Tuning global sampler:   8%|▊         | 15/200 [03:06<14:55,  4.84s/it]Tuning global sampler:   8%|▊         | 16/200 [03:11<14:38,  4.78s/it]Tuning global sampler:   8%|▊         | 17/200 [03:15<14:26,  4.73s/it]Tuning global sampler:   9%|▉         | 18/200 [03:20<14:15,  4.70s/it]Tuning global sampler:  10%|▉         | 19/200 [03:25<14:07,  4.68s/it]Tuning global sampler:  10%|█         | 20/200 [03:30<14:53,  4.96s/it]Tuning global sampler:  10%|█         | 21/200 [03:35<14:30,  4.87s/it]Tuning global sampler:  11%|█         | 22/200 [03:39<14:12,  4.79s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:44<13:57,  4.73s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:48<13:36,  4.64s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:53<13:18,  4.56s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:57<13:04,  4.51s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:02<12:53,  4.47s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:06<12:44,  4.44s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:10<12:36,  4.43s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:15<12:29,  4.41s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:19<12:24,  4.40s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:24<12:18,  4.40s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:28<12:11,  4.38s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:32<12:05,  4.37s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:37<12:02,  4.38s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:41<11:57,  4.38s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:45<11:53,  4.38s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:50<11:49,  4.38s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:54<11:45,  4.38s/it]Tuning global sampler:  20%|██        | 40/200 [05:00<12:30,  4.69s/it]Tuning global sampler:  20%|██        | 41/200 [05:04<12:10,  4.60s/it]Tuning global sampler:  21%|██        | 42/200 [05:08<12:02,  4.57s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:13<11:49,  4.52s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:17<11:37,  4.47s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:22<11:27,  4.43s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:26<11:20,  4.42s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:30<11:14,  4.41s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:35<11:08,  4.40s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:39<11:05,  4.41s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:44<11:00,  4.40s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:48<10:56,  4.41s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:52<10:51,  4.41s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:57<10:46,  4.40s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:01<10:41,  4.39s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:05<10:35,  4.38s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:10<10:29,  4.37s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:14<10:26,  4.38s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:19<10:22,  4.38s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:23<10:19,  4.40s/it]Tuning global sampler:  30%|███       | 60/200 [06:27<10:15,  4.40s/it]Tuning global sampler:  30%|███       | 61/200 [06:32<10:11,  4.40s/it]Tuning global sampler:  31%|███       | 62/200 [06:37<10:49,  4.71s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:42<10:32,  4.62s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:46<10:18,  4.55s/it]Tuning global sampler:  32%|███▎      | 65/200 [06:50<10:07,  4.50s/it]Tuning global sampler:  33%|███▎      | 66/200 [06:55<09:56,  4.45s/it]Tuning global sampler:  34%|███▎      | 67/200 [06:59<09:48,  4.42s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:04<09:42,  4.42s/it]Tuning global sampler:  34%|███▍      | 69/200 [07:08<09:38,  4.41s/it]Tuning global sampler:  35%|███▌      | 70/200 [07:12<09:33,  4.41s/it]Tuning global sampler:  36%|███▌      | 71/200 [07:17<09:31,  4.43s/it]Tuning global sampler:  36%|███▌      | 72/200 [07:21<09:25,  4.42s/it]Tuning global sampler:  36%|███▋      | 73/200 [07:26<09:20,  4.41s/it]Tuning global sampler:  37%|███▋      | 74/200 [07:30<09:15,  4.41s/it]Tuning global sampler:  38%|███▊      | 75/200 [07:34<09:11,  4.41s/it]Tuning global sampler:  38%|███▊      | 76/200 [07:39<09:06,  4.41s/it]Tuning global sampler:  38%|███▊      | 77/200 [07:43<09:00,  4.39s/it]Tuning global sampler:  39%|███▉      | 78/200 [07:47<08:54,  4.38s/it]Tuning global sampler:  40%|███▉      | 79/200 [07:52<08:49,  4.38s/it]Tuning global sampler:  40%|████      | 80/200 [07:56<08:45,  4.38s/it]Tuning global sampler:  40%|████      | 81/200 [08:01<08:42,  4.39s/it]Tuning global sampler:  41%|████      | 82/200 [08:05<08:38,  4.39s/it]Tuning global sampler:  42%|████▏     | 83/200 [08:11<09:11,  4.71s/it]Tuning global sampler:  42%|████▏     | 84/200 [08:15<09:00,  4.66s/it]Tuning global sampler:  42%|████▎     | 85/200 [08:19<08:46,  4.58s/it]Tuning global sampler:  43%|████▎     | 86/200 [08:24<08:35,  4.52s/it]Tuning global sampler:  44%|████▎     | 87/200 [08:28<08:27,  4.49s/it]Tuning global sampler:  44%|████▍     | 88/200 [08:33<08:18,  4.45s/it]Tuning global sampler:  44%|████▍     | 89/200 [08:37<08:10,  4.42s/it]Tuning global sampler:  45%|████▌     | 90/200 [08:41<08:04,  4.41s/it]Tuning global sampler:  46%|████▌     | 91/200 [08:46<08:00,  4.41s/it]Tuning global sampler:  46%|████▌     | 92/200 [08:50<07:56,  4.41s/it]Tuning global sampler:  46%|████▋     | 93/200 [08:55<07:52,  4.41s/it]Tuning global sampler:  47%|████▋     | 94/200 [08:59<07:47,  4.41s/it]Tuning global sampler:  48%|████▊     | 95/200 [09:03<07:43,  4.41s/it]Tuning global sampler:  48%|████▊     | 96/200 [09:08<07:39,  4.42s/it]Tuning global sampler:  48%|████▊     | 97/200 [09:12<07:35,  4.42s/it]Tuning global sampler:  49%|████▉     | 98/200 [09:17<07:30,  4.42s/it]Tuning global sampler:  50%|████▉     | 99/200 [09:21<07:24,  4.40s/it]Tuning global sampler:  50%|█████     | 100/200 [09:25<07:18,  4.39s/it]Tuning global sampler:  50%|█████     | 101/200 [09:30<07:14,  4.39s/it]Tuning global sampler:  51%|█████     | 102/200 [09:34<07:10,  4.39s/it]Tuning global sampler:  52%|█████▏    | 103/200 [09:39<07:06,  4.39s/it]Tuning global sampler:  52%|█████▏    | 104/200 [09:44<07:33,  4.73s/it]Tuning global sampler:  52%|█████▎    | 105/200 [09:48<07:19,  4.62s/it]Tuning global sampler:  53%|█████▎    | 106/200 [09:53<07:08,  4.55s/it]Tuning global sampler:  54%|█████▎    | 107/200 [09:57<06:59,  4.51s/it]Tuning global sampler:  54%|█████▍    | 108/200 [10:02<06:51,  4.47s/it]Tuning global sampler:  55%|█████▍    | 109/200 [10:06<06:44,  4.44s/it]Tuning global sampler:  55%|█████▌    | 110/200 [10:10<06:37,  4.42s/it]Tuning global sampler:  56%|█████▌    | 111/200 [10:15<06:31,  4.40s/it]Tuning global sampler:  56%|█████▌    | 112/200 [10:19<06:26,  4.40s/it]Tuning global sampler:  56%|█████▋    | 113/200 [10:24<06:22,  4.39s/it]Tuning global sampler:  57%|█████▋    | 114/200 [10:28<06:18,  4.40s/it]Tuning global sampler:  57%|█████▊    | 115/200 [10:32<06:13,  4.40s/it]Tuning global sampler:  58%|█████▊    | 116/200 [10:37<06:09,  4.40s/it]Tuning global sampler:  58%|█████▊    | 117/200 [10:41<06:04,  4.40s/it]Tuning global sampler:  59%|█████▉    | 118/200 [10:46<06:00,  4.40s/it]Tuning global sampler:  60%|█████▉    | 119/200 [10:50<05:56,  4.40s/it]Tuning global sampler:  60%|██████    | 120/200 [10:54<05:51,  4.40s/it]Tuning global sampler:  60%|██████    | 121/200 [10:59<05:46,  4.38s/it]Tuning global sampler:  61%|██████    | 122/200 [11:03<05:41,  4.38s/it]Tuning global sampler:  62%|██████▏   | 123/200 [11:07<05:37,  4.39s/it]Tuning global sampler:  62%|██████▏   | 124/200 [11:12<05:33,  4.39s/it]Tuning global sampler:  62%|██████▎   | 125/200 [11:16<05:29,  4.40s/it]Tuning global sampler:  63%|██████▎   | 126/200 [11:22<05:52,  4.76s/it]Tuning global sampler:  64%|██████▎   | 127/200 [11:26<05:39,  4.65s/it]Tuning global sampler:  64%|██████▍   | 128/200 [11:31<05:29,  4.58s/it]Tuning global sampler:  64%|██████▍   | 129/200 [11:35<05:21,  4.52s/it]Tuning global sampler:  65%|██████▌   | 130/200 [11:39<05:14,  4.49s/it]Tuning global sampler:  66%|██████▌   | 131/200 [11:44<05:08,  4.47s/it]Tuning global sampler:  66%|██████▌   | 132/200 [11:48<05:01,  4.44s/it]Tuning global sampler:  66%|██████▋   | 133/200 [11:53<04:56,  4.42s/it]Tuning global sampler:  66%|██████▋   | 133/200 [11:57<06:01,  5.40s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.21s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.21s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.21s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.21s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.21s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.21s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.21s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.21s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.20s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]
11:49 ninjax INFO    : Saving samples to ./Aplus/injection_16/results_training.npz
11:49 ninjax INFO    : Saving the NF
11:49 ninjax INFO    : Time taken: 755.941015958786 seconds (12.599016932646434 minutes)
11:49 ninjax INFO    : Creating the final corner plot
11:49 ninjax INFO    : Dumping the final production chains
11:49 ninjax INFO    : Chains shape is: (13, 220000)
11:49 ninjax INFO    : Key: M_c: ESS = 21321, Rhat = 1.0285116354252037
11:49 ninjax INFO    : Key: q: ESS = 23382, Rhat = 1.0269924511485677
11:49 ninjax INFO    : Key: s1_z: ESS = 19042, Rhat = 1.0327997525769492
11:49 ninjax INFO    : Key: s2_z: ESS = 27733, Rhat = 1.0228383935452792
11:49 ninjax INFO    : Key: lambda_1: ESS = 27836, Rhat = 1.023122587829247
11:49 ninjax INFO    : Key: lambda_2: ESS = 25425, Rhat = 1.0239039535709347
11:49 ninjax INFO    : Key: cos_iota: ESS = 14645, Rhat = 1.0419166954499977
11:49 ninjax INFO    : Key: d_L: ESS = 16552, Rhat = 1.0372959688552477
11:49 ninjax INFO    : Key: t_c: ESS = 21463, Rhat = 1.0292134931413894
11:49 ninjax INFO    : Key: phase_c: ESS = 15001, Rhat = 1.0415285404943149
11:49 ninjax INFO    : Key: psi: ESS = 23362, Rhat = 1.0267455093092863
11:49 ninjax INFO    : Key: ra: ESS = 19514, Rhat = 1.0314822457956259
11:49 ninjax INFO    : Key: sin_dec: ESS = 28328, Rhat = 1.0222471488768037
11:49 ninjax INFO    : Key: eta: ESS = 23382, Rhat = 1.0269924511485677
11:49 ninjax INFO    : Key: iota: ESS = 14645, Rhat = 1.0419166954499977
11:49 ninjax INFO    : Key: dec: ESS = 28328, Rhat = 1.0222471488768037
11:49 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.368 +/- 0.292
q: 0.715 +/- 0.240
s1_z: 0.011 +/- 0.028
s2_z: 0.011 +/- 0.028
lambda_1: 2037.239 +/- 1409.869
lambda_2: 2185.332 +/- 1363.966
cos_iota: 0.168 +/- 0.548
d_L: 702.186 +/- 201.558
t_c: 0.035 +/- 0.044
phase_c: 2.658 +/- 1.814
psi: 1.593 +/- 0.882
ra: 2.271 +/- 1.582
sin_dec: 0.448 +/- 0.591
Log probability: 16.730 +/- 39.341
Local acceptance: 0.884 +/- 0.320
Global acceptance: 0.022 +/- 0.145
Max loss: 22.743, Min loss: 5.273
Production summary
==========
M_c: 1.267 +/- 0.000
q: 0.881 +/- 0.079
s1_z: 0.031 +/- 0.014
s2_z: 0.029 +/- 0.016
lambda_1: 1040.839 +/- 876.833
lambda_2: 1469.821 +/- 1120.989
cos_iota: 0.799 +/- 0.158
d_L: 423.918 +/- 79.371
t_c: 0.057 +/- 0.001
phase_c: 3.113 +/- 1.811
psi: 1.632 +/- 0.916
ra: 1.950 +/- 0.096
sin_dec: 0.960 +/- 0.055
Log probability: 77.682 +/- 2.298
Local acceptance: 0.618 +/- 0.486
Global acceptance: 0.097 +/- 0.296
DONE

JOB STATISTICS
==============
Job ID: 10923049
Cluster: snellius
User/Group: twouters2/twouters2
State: RUNNING
Nodes: 1
Cores per node: 16
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 04:26:56 core-walltime
Job Wall-clock time: 00:16:41
Memory Utilized: 0.00 MB
Memory Efficiency: 0.00% of 10.00 GB (10.00 GB/node)
WARNING: Efficiency statistics can only be obtained after the job has ended as seff tool is based on the accounting database data.
