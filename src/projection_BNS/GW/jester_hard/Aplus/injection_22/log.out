Wed Apr  2 11:33:01 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
11:33 ninjax INFO    : Checking and setting outdir
11:33 ninjax INFO    : Found generation prior file ./Aplus/injection_22/generation_prior.prior
11:33 ninjax INFO    : The outdir is set to ./Aplus/injection_22
11:33 ninjax INFO    : Loading the given config
11:33 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
11:33 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
11:33 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/jester_hard/Aplus/injection_22/complete_config.json
11:33 ninjax INFO    : No seed specified. Generating a random seed: 261807
11:33 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 208971
11:33 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 576760
11:33 ninjax INFO    : Loading the priors
11:33 ninjax INFO    : Setting up the prior
11:33 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
11:33 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
11:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
11:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
11:33 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
11:33 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
11:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
11:33 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
11:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
11:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
11:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
11:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
11:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
11:33 ninjax INFO    : Setting up the generation prior
11:33 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.4, naming=["mass_1_source"])
11:33 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.4, naming=["mass_2_source"])
11:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
11:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
11:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
11:33 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
11:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
11:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
11:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
11:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
11:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
11:33 ninjax INFO    : Finished prior setup
11:33 ninjax INFO    : Setting the transforms
11:33 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
11:33 ninjax INFO    : transforms_str_list has 3 elements
11:33 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
11:33 ninjax INFO    : Setting the likelihood
11:33 ninjax INFO    : GW likelihood provided, setting up the GW pipe
11:33 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz
11:33 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz for BNS injections
11:33 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
11:33 ninjax INFO    : self.is_BNS_run is True
11:33 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
11:33 ninjax INFO    : GW run is an injection
11:33 ninjax INFO    : Setting up GW injection . . . 
11:33 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
11:33 ninjax INFO    : Generating new injection
11:33 ninjax INFO    : Sanity check: generated parameters:
11:33 ninjax INFO    : {'mass_1_source': 2.27798529580351, 'mass_2_source': 1.309328259935786, 's1_z': 0.024698837411333746, 's2_z': 0.030768809555934085, 'cos_iota': 0.20695142845479975, 'd_L': 413.6048933117975, 't_c': 0.04618769364732653, 'phase_c': 6.097323400874057, 'psi': 1.400177971594644, 'ra': 0.5248218867786526, 'sin_dec': 0.8491184752268834}
11:33 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz . . . 
11:33 ninjax INFO    : Injected lambda_1: 25.985412577471784
11:33 ninjax INFO    : Injected lambda_2: 877.0704726737273
11:33 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.6315762420889066 is 128.0
11:33 ninjax INFO    : After transforms, the injection parameters are:
11:33 ninjax INFO    : {'mass_1_source': 2.27798529580351, 'mass_2_source': 1.309328259935786, 's1_z': 0.024698837411333746, 's2_z': 0.030768809555934085, 'cos_iota': 0.20695142845479975, 'd_L': 413.6048933117975, 't_c': 0.04618769364732653, 'phase_c': 6.097323400874057, 'psi': 1.400177971594644, 'ra': 0.5248218867786526, 'sin_dec': 0.8491184752268834, 'q': 0.5747746758277248, 'M_c': 1.6315762420889066, 'eta': 0.2317718998504944, 'iota': Array(1.36233843, dtype=float64, weak_type=True), 'dec': Array(1.01431413, dtype=float64, weak_type=True), 'lambda_1': 25.985412577471784, 'lambda_2': 877.0704726737273}
11:33 ninjax INFO    : The trial injection parameters are {'M_c': 1.6315762420889066, 'eta': 0.2317718998504944, 's1_z': 0.024698837411333746, 's2_z': 0.030768809555934085, 'lambda_1': 25.985412577471784, 'lambda_2': 877.0704726737273, 'd_L': 413.6048933117975, 'phase_c': 6.097323400874057, 'iota': 1.362338429502678, 't_c': 0.04618769364732653, 'psi': 1.400177971594644, 'ra': 0.5248218867786526, 'dec': 1.0143141336308341}
11:33 ninjax INFO    : Injecting signals . . .
11:33 ninjax INFO    : self.ifos
11:33 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
11:33 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:33 ninjax INFO    : [-2.71534695e-23-5.20131885e-23j -1.94439943e-24+2.98924264e-23j
 -3.19587412e-23+8.47580053e-23j ...
 -1.02846292e-23+4.18998944e-24j -1.78760446e-23-1.91602616e-23j
 -4.26414940e-24+1.53241600e-23j]
11:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
11:33 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:33 ninjax INFO    : [-5.39822756e-23+3.06275737e-24j -1.16743623e-22+2.11579353e-23j
  3.64534910e-23-8.23131226e-23j ...
 -1.37417833e-23-7.56312693e-25j  2.16272025e-24-6.56874560e-24j
  1.06068961e-23-1.13950594e-24j]
11:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
11:33 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:33 ninjax INFO    : [-3.26293022e-23+2.68277918e-23j -2.73305868e-23+2.43474799e-23j
  7.22211239e-23-5.81732419e-23j ...
 -4.28080837e-23+1.94960394e-24j  1.64098491e-23-1.73052674e-23j
  5.01799727e-23-4.78674510e-23j]
11:33 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
11:33 ninjax INFO    : SNR for ifo H1 is 5.344982833616773
11:33 ninjax INFO    : SNR for ifo L1 is 4.085091764655245
11:33 ninjax INFO    : SNR for ifo V1 is 2.2429224099883833
11:33 ninjax INFO    : The network SNR is 7.091369201680321
11:33 ninjax INFO    : The network SNR does not pass the threshold, trying again
11:33 ninjax INFO    : Generating new injection
11:33 ninjax INFO    : Sanity check: generated parameters:
11:33 ninjax INFO    : {'mass_1_source': 2.1529873644612256, 'mass_2_source': 1.2099759783647823, 's1_z': 0.03755995347161932, 's2_z': 0.01910055419108736, 'cos_iota': 0.9899144282826176, 'd_L': 416.2264889708863, 't_c': 0.012370049555802787, 'phase_c': 5.23111901882902, 'psi': 1.8679687080683025, 'ra': 6.137165684849719, 'sin_dec': 0.26082600449173343}
11:33 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz . . . 
11:33 ninjax INFO    : Injected lambda_1: 43.74974581287896
11:33 ninjax INFO    : Injected lambda_2: 1322.6192566745897
11:33 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.524696089444381 is 128.0
11:33 ninjax INFO    : After transforms, the injection parameters are:
11:33 ninjax INFO    : {'mass_1_source': 2.1529873644612256, 'mass_2_source': 1.2099759783647823, 's1_z': 0.03755995347161932, 's2_z': 0.01910055419108736, 'cos_iota': 0.9899144282826176, 'd_L': 416.2264889708863, 't_c': 0.012370049555802787, 'phase_c': 5.23111901882902, 'psi': 1.8679687080683025, 'ra': 6.137165684849719, 'sin_dec': 0.26082600449173343, 'q': 0.5619986435301597, 'M_c': 1.524696089444381, 'eta': 0.2303424397754825, 'iota': Array(0.14214479, dtype=float64, weak_type=True), 'dec': Array(0.26387773, dtype=float64, weak_type=True), 'lambda_1': 43.74974581287896, 'lambda_2': 1322.6192566745897}
11:33 ninjax INFO    : The trial injection parameters are {'M_c': 1.524696089444381, 'eta': 0.2303424397754825, 's1_z': 0.03755995347161932, 's2_z': 0.01910055419108736, 'lambda_1': 43.74974581287896, 'lambda_2': 1322.6192566745897, 'd_L': 416.2264889708863, 'phase_c': 5.23111901882902, 'iota': 0.14214478947229045, 't_c': 0.012370049555802787, 'psi': 1.8679687080683025, 'ra': 6.137165684849719, 'dec': 0.2638777252473343}
11:33 ninjax INFO    : Injecting signals . . .
11:33 ninjax INFO    : self.ifos
11:33 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
11:33 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:33 ninjax INFO    : [-2.10944374e-23-4.70685260e-23j  4.88666152e-24+2.83341255e-23j
 -2.92963625e-23+7.96381356e-23j ...
 -1.02846292e-23+4.18998944e-24j -1.78760446e-23-1.91602616e-23j
 -4.26414940e-24+1.53241600e-23j]
11:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
11:33 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:33 ninjax INFO    : [-5.91768465e-23+4.91925119e-24j -1.18303005e-22+2.65480459e-23j
  3.97203151e-23-7.81534341e-23j ...
 -1.37417833e-23-7.56312693e-25j  2.16272025e-24-6.56874560e-24j
  1.06068961e-23-1.13950594e-24j]
11:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
11:33 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:33 ninjax INFO    : [-3.57022495e-23+3.06343934e-23j -2.69251621e-23+2.84710538e-23j
  7.46280801e-23-5.56793147e-23j ...
 -4.28080837e-23+1.94960394e-24j  1.64098491e-23-1.73052674e-23j
  5.01799727e-23-4.78674510e-23j]
11:33 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
11:33 ninjax INFO    : SNR for ifo H1 is 12.086808003231738
11:33 ninjax INFO    : SNR for ifo L1 is 8.039647557097734
11:33 ninjax INFO    : SNR for ifo V1 is 7.661212637526685
11:33 ninjax INFO    : The network SNR is 16.414050067753934
11:33 ninjax INFO    : Network SNR passes threshold
11:33 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
11:33 ninjax INFO    :    mass_1_source: 2.1529873644612256
11:33 ninjax INFO    :    mass_2_source: 1.2099759783647823
11:33 ninjax INFO    :    s1_z: 0.03755995347161932
11:33 ninjax INFO    :    s2_z: 0.01910055419108736
11:33 ninjax INFO    :    cos_iota: 0.9899144282826176
11:33 ninjax INFO    :    d_L: 416.2264889708863
11:33 ninjax INFO    :    t_c: 0.012370049555802787
11:33 ninjax INFO    :    phase_c: 5.23111901882902
11:33 ninjax INFO    :    psi: 1.8679687080683025
11:33 ninjax INFO    :    ra: 6.137165684849719
11:33 ninjax INFO    :    sin_dec: 0.26082600449173343
11:33 ninjax INFO    :    q: 0.5619986435301597
11:33 ninjax INFO    :    M_c: 1.524696089444381
11:33 ninjax INFO    :    eta: 0.2303424397754825
11:33 ninjax INFO    :    iota: 0.14214478947229045
11:33 ninjax INFO    :    dec: 0.2638777252473343
11:33 ninjax INFO    :    lambda_1: 43.74974581287896
11:33 ninjax INFO    :    lambda_2: 1322.6192566745897
11:33 ninjax INFO    :    H1_SNR: 12.086808003231738
11:33 ninjax INFO    :    L1_SNR: 8.039647557097734
11:33 ninjax INFO    :    V1_SNR: 7.661212637526685
11:33 ninjax INFO    :    network_SNR: 16.414050067753934
11:33 ninjax INFO    :    epoch: 126.0
11:33 ninjax INFO    :    gmst: 2.7288901910520846
11:33 ninjax INFO    :    duration: 128.0
11:33 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
11:33 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
11:33 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
11:35 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 144.9775743484497 seconds = 2.416292905807495 minutes
11:35 ninjax INFO    : The priors are not modified after their initialization
11:35 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
11:35 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
11:35 ninjax INFO    : sample: {'M_c': Array([1.99552766, 2.15257398, 1.44693287], dtype=float64), 'q': Array([0.64719777, 0.18905909, 0.96941262], dtype=float64), 's1_z': Array([-0.02607259,  0.02892926,  0.02120013], dtype=float64), 's2_z': Array([0.0483344 , 0.04963343, 0.04010878], dtype=float64), 'lambda_1': Array([ 130.77167624, 4063.31046598, 3940.81701355], dtype=float64), 'lambda_2': Array([1036.01588173, 3952.36739375, 2638.30622034], dtype=float64), 'cos_iota': Array([-0.57472738, -0.97969825, -0.25195592], dtype=float64), 'd_L': Array([878.4785168 , 772.06130186, 700.71455596], dtype=float64), 't_c': Array([-0.06912657, -0.00404646,  0.01024218], dtype=float64), 'phase_c': Array([5.3087766 , 1.35686688, 1.1766764 ], dtype=float64), 'psi': Array([1.14418013, 2.62014528, 0.26559023], dtype=float64), 'ra': Array([1.53873664, 3.81539207, 3.97007899], dtype=float64), 'sin_dec': Array([0.39362203, 0.20710287, 0.83975795], dtype=float64)}
11:35 ninjax INFO    : log_prob: [-25.70866467 -63.40271062  -1.96154731]
11:35 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 2.1529873644612256, 'mass_2_source': 1.2099759783647823, 's1_z': 0.03755995347161932, 's2_z': 0.01910055419108736, 'cos_iota': 0.9899144282826176, 'd_L': 416.2264889708863, 't_c': 0.012370049555802787, 'phase_c': 5.23111901882902, 'psi': 1.8679687080683025, 'ra': 6.137165684849719, 'sin_dec': 0.26082600449173343, 'q': 0.5619986435301597, 'M_c': 1.524696089444381, 'eta': 0.2303424397754825, 'iota': Array(0.14214479, dtype=float64, weak_type=True), 'dec': Array(0.26387773, dtype=float64, weak_type=True), 'lambda_1': 43.74974581287896, 'lambda_2': 1322.6192566745897, 'H1_SNR': 12.086808003231738, 'L1_SNR': 8.039647557097734, 'V1_SNR': 7.661212637526685, 'network_SNR': 16.414050067753934, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
11:35 ninjax INFO    : log_prob at the injection parameters is: 117.77956395581072
11:35 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
11:35 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
11:35 ninjax INFO    : Ninjax setup complete.
11:35 ninjax INFO    : Saving output to ./Aplus/injection_22/
11:35 ninjax INFO    : Using polynomial learning rate scheduler
11:35 ninjax INFO    : The hyperparameters passed to flowMC and jim are
11:35 ninjax INFO    :    n_loop_training: 200
11:35 ninjax INFO    :    n_loop_production: 10
11:35 ninjax INFO    :    n_local_steps: 100
11:35 ninjax INFO    :    n_global_steps: 1000
11:35 ninjax INFO    :    n_epochs: 25
11:35 ninjax INFO    :    n_chains: 1000
11:35 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x15234f331000>
11:35 ninjax INFO    :    max_samples: 50000
11:35 ninjax INFO    :    momentum: 0.9
11:35 ninjax INFO    :    batch_size: 30000
11:35 ninjax INFO    :    use_global: True
11:35 ninjax INFO    :    keep_quantile: 0.0
11:35 ninjax INFO    :    train_thinning: 10
11:35 ninjax INFO    :    output_thinning: 50
11:35 ninjax INFO    :    n_sample_max: 10000
11:35 ninjax INFO    :    num_layers: 10
11:35 ninjax INFO    :    hidden_size: [128, 128]
11:35 ninjax INFO    :    num_bins: 8
11:35 ninjax INFO    :    save_training_chains: False
11:35 ninjax INFO    :    eps_mass_matrix: 1e-05
11:35 ninjax INFO    :    use_scheduler: True
11:35 ninjax INFO    :    use_temperature: False
11:35 ninjax INFO    :    which_temperature_schedule: exponential
11:35 ninjax INFO    :    starting_temperature: 2.0
11:35 ninjax INFO    :    stop_tempering_iteration: 75
11:35 ninjax INFO    :    stopping_criterion_global_acc: 0.1
11:35 ninjax INFO    :    stopping_criterion_loss: -inf
11:35 ninjax INFO    :    nf_model_kwargs: {}
11:35 ninjax INFO    :    local sampler arg not shown (pretty print)
11:35 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[-2.47739798e-23 -6.89315110e-25 -3.37492783e-23  9.69861674e-23
 -1.51112926e-23 -4.25815663e-23 -5.08687085e-23  1.09280907e-23
 -4.40598664e-23 -2.36468325e-23]
[-5.13019268e-23  2.77507037e-23  8.30402902e-23 -3.55723100e-23
  6.80220679e-23 -1.45766089e-24 -4.22248149e-23  7.42915094e-23
  1.48857551e-23 -8.55406529e-23]
Checking the noise that was generated in inject_signal ifo:
[-5.58768450e-23 -1.17080086e-22  3.81906714e-23 -3.58257470e-23
 -2.33045900e-23 -3.30921636e-23 -2.28675780e-23 -1.26109553e-23
 -3.79748382e-23 -4.92640543e-23]
[ 3.17874730e-24  2.30251091e-23 -8.15525618e-23 -4.16075088e-23
 -8.92314195e-23 -3.63585264e-23 -6.47347700e-23 -1.16104509e-23
 -2.47082349e-23 -4.34003689e-23]
Checking the noise that was generated in inject_signal ifo:
[-3.20371772e-23 -2.60434239e-23  7.22318118e-23 -6.39181968e-23
 -3.53717714e-23 -4.16492612e-23 -2.24699006e-23 -5.42866590e-24
  3.71407089e-23  1.16377621e-22]
[ 2.80089707e-23  2.40518325e-23 -5.94932737e-23  2.86334120e-23
 -5.47437120e-23  2.19724992e-23 -2.72614009e-23 -1.02045183e-23
 -5.21935124e-23 -3.00390656e-23]
Checking the noise that was generated in inject_signal ifo:
[-2.47739798e-23 -6.89315110e-25 -3.37492783e-23  9.69861674e-23
 -1.51112926e-23 -4.25815663e-23 -5.08687085e-23  1.09280907e-23
 -4.40598664e-23 -2.36468325e-23]
[-5.13019268e-23  2.77507037e-23  8.30402902e-23 -3.55723100e-23
  6.80220679e-23 -1.45766089e-24 -4.22248149e-23  7.42915094e-23
  1.48857551e-23 -8.55406529e-23]
Checking the noise that was generated in inject_signal ifo:
[-5.58768450e-23 -1.17080086e-22  3.81906714e-23 -3.58257470e-23
 -2.33045900e-23 -3.30921636e-23 -2.28675780e-23 -1.26109553e-23
 -3.79748382e-23 -4.92640543e-23]
[ 3.17874730e-24  2.30251091e-23 -8.15525618e-23 -4.16075088e-23
 -8.92314195e-23 -3.63585264e-23 -6.47347700e-23 -1.16104509e-23
 -2.47082349e-23 -4.34003689e-23]
Checking the noise that was generated in inject_signal ifo:
[-3.20371772e-23 -2.60434239e-23  7.22318118e-23 -6.39181968e-23
 -3.53717714e-23 -4.16492612e-23 -2.24699006e-23 -5.42866590e-24
  3.71407089e-23  1.16377621e-22]
[ 2.80089707e-23  2.40518325e-23 -5.94932737e-23  2.86334120e-23
 -5.47437120e-23  2.19724992e-23 -2.72614009e-23 -1.02045183e-23
 -5.21935124e-23 -3.00390656e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.10693550109863281 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 2.1529873644612256, 'mass_2_source': 1.2099759783647823, 's1_z': 0.03755995347161932, 's2_z': 0.01910055419108736, 'cos_iota': 0.9899144282826176, 'd_L': 416.2264889708863, 't_c': 0.012370049555802787, 'phase_c': 5.23111901882902, 'psi': 1.8679687080683025, 'ra': 6.137165684849719, 'sin_dec': 0.26082600449173343, 'q': 0.5619986435301597, 'M_c': 1.524696089444381, 'eta': 0.2303424397754825, 'iota': Array(0.14214479, dtype=float64, weak_type=True), 'dec': Array(0.26387773, dtype=float64, weak_type=True), 'lambda_1': 43.74974581287896, 'lambda_2': 1322.6192566745897, 'H1_SNR': 12.086808003231738, 'L1_SNR': 8.039647557097734, 'V1_SNR': 7.661212637526685, 'network_SNR': 16.414050067753934, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.49585390090942383 seconds
Time for h_sky_low and h_sky_center: 5.306100130081177 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.6897578239440918
Going to compute coefficients . . .
Time for computing coefficients: 123.31075310707092 seconds
Time for computing coefficients: 7.194854021072388 seconds
Time for computing coefficients: 7.328415155410767 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:01<6:41:22, 121.02s/it]Tuning global sampler:   1%|          | 2/200 [02:05<2:53:21, 52.53s/it] Tuning global sampler:   2%|▏         | 3/200 [02:10<1:40:38, 30.65s/it]Tuning global sampler:   2%|▏         | 4/200 [02:14<1:06:34, 20.38s/it]Tuning global sampler:   2%|▎         | 5/200 [02:20<48:46, 15.01s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:24<37:06, 11.48s/it]Tuning global sampler:   4%|▎         | 7/200 [02:29<29:37,  9.21s/it]Tuning global sampler:   4%|▍         | 8/200 [02:34<24:47,  7.75s/it]Tuning global sampler:   4%|▍         | 9/200 [02:38<21:29,  6.75s/it]Tuning global sampler:   5%|▌         | 10/200 [02:43<19:06,  6.03s/it]Tuning global sampler:   6%|▌         | 11/200 [02:47<17:36,  5.59s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:46,  5.35s/it]Tuning global sampler:   6%|▋         | 13/200 [02:57<15:56,  5.11s/it]Tuning global sampler:   7%|▋         | 14/200 [03:01<15:25,  4.97s/it]Tuning global sampler:   8%|▊         | 15/200 [03:06<15:01,  4.88s/it]Tuning global sampler:   8%|▊         | 16/200 [03:11<14:45,  4.81s/it]Tuning global sampler:   8%|▊         | 17/200 [03:15<14:32,  4.77s/it]Tuning global sampler:   9%|▉         | 18/200 [03:20<14:21,  4.73s/it]Tuning global sampler:  10%|▉         | 19/200 [03:24<14:11,  4.71s/it]Tuning global sampler:  10%|█         | 20/200 [03:30<14:52,  4.96s/it]Tuning global sampler:  10%|█         | 21/200 [03:35<14:31,  4.87s/it]Tuning global sampler:  11%|█         | 22/200 [03:39<14:12,  4.79s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:44<14:03,  4.77s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:48<13:42,  4.67s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:53<13:23,  4.59s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:57<13:14,  4.56s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:02<13:00,  4.51s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:06<13:06,  4.57s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:12<13:39,  4.80s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:16<13:16,  4.68s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:21<13:12,  4.69s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:25<12:54,  4.61s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:30<13:14,  4.76s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:37<14:27,  5.23s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:41<13:41,  4.98s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:47<14:22,  5.26s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:52<13:38,  5.02s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:56<13:03,  4.83s/it]Tuning global sampler:  20%|█▉        | 39/200 [05:01<12:45,  4.75s/it]Tuning global sampler:  20%|██        | 40/200 [05:07<13:46,  5.17s/it]Tuning global sampler:  20%|██        | 41/200 [05:11<13:05,  4.94s/it]Tuning global sampler:  21%|██        | 42/200 [05:19<15:26,  5.87s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:24<14:18,  5.47s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:28<13:25,  5.16s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:33<13:08,  5.09s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:37<12:31,  4.88s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:42<12:05,  4.74s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:47<12:07,  4.78s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:52<12:09,  4.83s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:56<11:45,  4.70s/it]Tuning global sampler:  26%|██▌       | 51/200 [06:00<11:28,  4.62s/it]Tuning global sampler:  26%|██▌       | 52/200 [06:05<11:15,  4.57s/it]Tuning global sampler:  26%|██▋       | 53/200 [06:10<11:15,  4.60s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:14<11:03,  4.54s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:18<10:51,  4.49s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:23<10:41,  4.46s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:27<10:35,  4.44s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:32<10:30,  4.44s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:37<11:03,  4.71s/it]Tuning global sampler:  30%|███       | 60/200 [06:41<10:47,  4.62s/it]Tuning global sampler:  30%|███       | 61/200 [06:46<10:33,  4.56s/it]Tuning global sampler:  31%|███       | 62/200 [06:50<10:22,  4.51s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:55<10:14,  4.49s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:59<10:06,  4.46s/it]Tuning global sampler:  32%|███▎      | 65/200 [07:03<09:59,  4.44s/it]Tuning global sampler:  33%|███▎      | 66/200 [07:08<10:01,  4.49s/it]Tuning global sampler:  34%|███▎      | 67/200 [07:12<09:52,  4.45s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:17<09:45,  4.44s/it]Tuning global sampler:  34%|███▍      | 69/200 [07:21<09:39,  4.43s/it]Tuning global sampler:  35%|███▌      | 70/200 [07:26<09:35,  4.42s/it]Tuning global sampler:  36%|███▌      | 71/200 [07:30<09:30,  4.42s/it]Tuning global sampler:  36%|███▌      | 72/200 [07:34<09:25,  4.42s/it]Tuning global sampler:  36%|███▋      | 73/200 [07:39<09:20,  4.41s/it]Tuning global sampler:  37%|███▋      | 74/200 [07:43<09:15,  4.41s/it]Tuning global sampler:  37%|███▋      | 74/200 [07:48<13:17,  6.33s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.21s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.21s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.21s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.21s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.21s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.21s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.21s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.21s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]
11:44 ninjax INFO    : Saving samples to ./Aplus/injection_22/results_training.npz
11:44 ninjax INFO    : Saving the NF
11:44 ninjax INFO    : Time taken: 507.3093755245209 seconds (8.455156258742015 minutes)
11:44 ninjax INFO    : Creating the final corner plot
11:44 ninjax INFO    : Dumping the final production chains
11:44 ninjax INFO    : Chains shape is: (13, 220000)
11:44 ninjax INFO    : Key: M_c: ESS = 40481, Rhat = 1.016087739941168
11:44 ninjax INFO    : Key: q: ESS = 18686, Rhat = 1.0326107022798812
11:44 ninjax INFO    : Key: s1_z: ESS = 33534, Rhat = 1.0192169693012896
11:44 ninjax INFO    : Key: s2_z: ESS = 24589, Rhat = 1.0256811320564119
11:44 ninjax INFO    : Key: lambda_1: ESS = 26210, Rhat = 1.0240123071779874
11:44 ninjax INFO    : Key: lambda_2: ESS = 25177, Rhat = 1.0247697656966444
11:44 ninjax INFO    : Key: cos_iota: ESS = 20969, Rhat = 1.029011945882571
11:44 ninjax INFO    : Key: d_L: ESS = 21934, Rhat = 1.027969085813048
11:44 ninjax INFO    : Key: t_c: ESS = 25864, Rhat = 1.0235574275603465
11:44 ninjax INFO    : Key: phase_c: ESS = 38821, Rhat = 1.0173304748801903
11:44 ninjax INFO    : Key: psi: ESS = 29009, Rhat = 1.0209919334529547
11:44 ninjax INFO    : Key: ra: ESS = 26896, Rhat = 1.0226250530440757
11:44 ninjax INFO    : Key: sin_dec: ESS = 30922, Rhat = 1.0199038646904524
11:44 ninjax INFO    : Key: eta: ESS = 18686, Rhat = 1.0326107022798812
11:44 ninjax INFO    : Key: iota: ESS = 20969, Rhat = 1.029011945882571
11:44 ninjax INFO    : Key: dec: ESS = 30922, Rhat = 1.0199038646904524
11:44 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.548 +/- 0.212
q: 0.679 +/- 0.222
s1_z: 0.003 +/- 0.027
s2_z: 0.000 +/- 0.027
lambda_1: 1965.847 +/- 1431.394
lambda_2: 2401.895 +/- 1420.613
cos_iota: 0.446 +/- 0.466
d_L: 643.257 +/- 236.653
t_c: 0.007 +/- 0.028
phase_c: 3.208 +/- 1.823
psi: 1.600 +/- 0.860
ra: 5.189 +/- 1.572
sin_dec: 0.219 +/- 0.385
Log probability: 40.022 +/- 54.066
Local acceptance: 0.948 +/- 0.221
Global acceptance: 0.014 +/- 0.119
Max loss: 22.785, Min loss: 8.627
Production summary
==========
M_c: 1.525 +/- 0.000
q: 0.802 +/- 0.117
s1_z: 0.002 +/- 0.026
s2_z: -0.000 +/- 0.028
lambda_1: 727.301 +/- 777.597
lambda_2: 1245.969 +/- 1027.606
cos_iota: 0.806 +/- 0.149
d_L: 345.123 +/- 59.661
t_c: 0.013 +/- 0.002
phase_c: 3.144 +/- 1.807
psi: 1.515 +/- 0.914
ra: 6.118 +/- 0.027
sin_dec: 0.218 +/- 0.059
Log probability: 112.394 +/- 2.626
Local acceptance: 0.850 +/- 0.357
Global acceptance: 0.123 +/- 0.328
DONE

JOB STATISTICS
==============
Job ID: 10923055
Cluster: snellius
User/Group: twouters2/twouters2
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 00:10:24
CPU Efficiency: 5.52% of 03:08:32 core-walltime
Job Wall-clock time: 00:11:47
Memory Utilized: 4.36 GB
Memory Efficiency: 43.59% of 10.00 GB (10.00 GB/node)
