Wed Apr  2 11:33:01 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
11:33 ninjax INFO    : Checking and setting outdir
11:33 ninjax INFO    : Found generation prior file ./Aplus/injection_25/generation_prior.prior
11:33 ninjax INFO    : The outdir is set to ./Aplus/injection_25
11:33 ninjax INFO    : Loading the given config
11:33 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
11:33 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
11:33 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/jester_hard/Aplus/injection_25/complete_config.json
11:33 ninjax INFO    : No seed specified. Generating a random seed: 1266
11:33 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 408720
11:33 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 334030
11:33 ninjax INFO    : Loading the priors
11:33 ninjax INFO    : Setting up the prior
11:33 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
11:33 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
11:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
11:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
11:33 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
11:33 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
11:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
11:33 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
11:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
11:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
11:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
11:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
11:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
11:33 ninjax INFO    : Setting up the generation prior
11:33 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.4, naming=["mass_1_source"])
11:33 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.4, naming=["mass_2_source"])
11:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
11:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
11:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
11:33 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
11:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
11:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
11:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
11:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
11:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
11:33 ninjax INFO    : Finished prior setup
11:33 ninjax INFO    : Setting the transforms
11:33 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
11:33 ninjax INFO    : transforms_str_list has 3 elements
11:33 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
11:33 ninjax INFO    : Setting the likelihood
11:33 ninjax INFO    : GW likelihood provided, setting up the GW pipe
11:33 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz
11:33 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz for BNS injections
11:33 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
11:33 ninjax INFO    : self.is_BNS_run is True
11:33 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
11:33 ninjax INFO    : GW run is an injection
11:33 ninjax INFO    : Setting up GW injection . . . 
11:33 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
11:33 ninjax INFO    : Generating new injection
11:33 ninjax INFO    : Sanity check: generated parameters:
11:33 ninjax INFO    : {'mass_1_source': 1.1943251604949712, 'mass_2_source': 1.005994389667515, 's1_z': -0.036717547088278374, 's2_z': 0.001344130773793209, 'cos_iota': 0.005562809992059936, 'd_L': 389.2944551814126, 't_c': 0.07123763367888017, 'phase_c': 5.791317838236918, 'psi': 0.7214840570086649, 'ra': 0.4968978805696505, 'sin_dec': -0.007553338517533703}
11:33 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz . . . 
11:33 ninjax INFO    : Injected lambda_1: 1413.0467981193813
11:33 ninjax INFO    : Injected lambda_2: 3332.4318278011147
11:33 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.037404374080396 is 256.0
11:33 ninjax INFO    : After transforms, the injection parameters are:
11:33 ninjax INFO    : {'mass_1_source': 1.1943251604949712, 'mass_2_source': 1.005994389667515, 's1_z': -0.036717547088278374, 's2_z': 0.001344130773793209, 'cos_iota': 0.005562809992059936, 'd_L': 389.2944551814126, 't_c': 0.07123763367888017, 'phase_c': 5.791317838236918, 'psi': 0.7214840570086649, 'ra': 0.4968978805696505, 'sin_dec': -0.007553338517533703, 'q': 0.8423119791352255, 'M_c': 1.037404374080396, 'eta': 0.24816848254718657, 'iota': Array(1.56523349, dtype=float64, weak_type=True), 'dec': Array(-0.00755341, dtype=float64, weak_type=True), 'lambda_1': 1413.0467981193813, 'lambda_2': 3332.4318278011147}
11:33 ninjax INFO    : The trial injection parameters are {'M_c': 1.037404374080396, 'eta': 0.24816848254718657, 's1_z': -0.036717547088278374, 's2_z': 0.001344130773793209, 'lambda_1': 1413.0467981193813, 'lambda_2': 3332.4318278011147, 'd_L': 389.2944551814126, 'phase_c': 5.791317838236918, 'iota': 1.565233488112379, 't_c': 0.07123763367888017, 'psi': 0.7214840570086649, 'ra': 0.4968978805696505, 'dec': -0.007553410342717582}
11:33 ninjax INFO    : Injecting signals . . .
11:33 ninjax INFO    : self.ifos
11:33 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
11:33 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
11:33 ninjax INFO    : [-2.00917821e-23+1.14576374e-23j  2.49803457e-23+1.88049149e-22j
  3.78384291e-23-2.65136787e-23j ...
 -1.13361947e-23+6.58167199e-24j -9.25254959e-24-2.06280025e-23j
 -3.06224770e-24-3.12494854e-23j]
11:33 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
11:33 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
11:33 ninjax INFO    : [-1.14320109e-22-6.01518657e-23j -6.25512539e-23+3.58817393e-23j
 -1.78391122e-23-2.14593669e-23j ...
  3.55652461e-23-2.03008850e-23j  4.47214492e-24-2.37926389e-23j
  2.15712735e-23+7.46279607e-24j]
11:33 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
11:33 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
11:33 ninjax INFO    : [-7.50463675e-24+6.18792468e-23j -4.29202969e-23-6.70346440e-23j
  9.52058200e-23-2.51156497e-24j ...
 -5.23956702e-23-2.01564461e-23j  2.89691260e-23-1.08443578e-22j
 -6.96795309e-23+2.75881681e-23j]
11:33 ninjax INFO    : [1.43183556e-46 1.43058540e-46 1.42935095e-46 ... 6.39793039e-47
 6.39795354e-47 6.39797668e-47]
11:33 ninjax INFO    : SNR for ifo H1 is 4.356601607490608
11:33 ninjax INFO    : SNR for ifo L1 is 3.757263912610947
11:33 ninjax INFO    : SNR for ifo V1 is 3.098819791333065
11:33 ninjax INFO    : The network SNR is 6.534500269688247
11:33 ninjax INFO    : The network SNR does not pass the threshold, trying again
11:33 ninjax INFO    : Generating new injection
11:33 ninjax INFO    : Sanity check: generated parameters:
11:33 ninjax INFO    : {'mass_1_source': 1.7441281037664356, 'mass_2_source': 1.7398324389176119, 's1_z': 0.04580181995813813, 's2_z': 0.017419998876675488, 'cos_iota': -0.3716772210047852, 'd_L': 125.99818102226806, 't_c': -0.08367790083048497, 'phase_c': 4.836954613493268, 'psi': 1.2732246433029306, 'ra': 3.583511454192504, 'sin_dec': 0.3617902980822585}
11:33 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz . . . 
11:33 ninjax INFO    : Injected lambda_1: 180.38452439898919
11:33 ninjax INFO    : Injected lambda_2: 183.04846300882986
11:33 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.5596548527123395 is 128.0
11:33 ninjax INFO    : After transforms, the injection parameters are:
11:33 ninjax INFO    : {'mass_1_source': 1.7441281037664356, 'mass_2_source': 1.7398324389176119, 's1_z': 0.04580181995813813, 's2_z': 0.017419998876675488, 'cos_iota': -0.3716772210047852, 'd_L': 125.99818102226806, 't_c': -0.08367790083048497, 'phase_c': 4.836954613493268, 'psi': 1.2732246433029306, 'ra': 3.583511454192504, 'sin_dec': 0.3617902980822585, 'q': 0.9975370703335682, 'M_c': 1.5596548527123395, 'eta': 0.2499996199381018, 'iota': Array(1.95161134, dtype=float64, weak_type=True), 'dec': Array(0.37018757, dtype=float64, weak_type=True), 'lambda_1': 180.38452439898919, 'lambda_2': 183.04846300882986}
11:33 ninjax INFO    : The trial injection parameters are {'M_c': 1.5596548527123395, 'eta': 0.2499996199381018, 's1_z': 0.04580181995813813, 's2_z': 0.017419998876675488, 'lambda_1': 180.38452439898919, 'lambda_2': 183.04846300882986, 'd_L': 125.99818102226806, 'phase_c': 4.836954613493268, 'iota': 1.9516113409972362, 't_c': -0.08367790083048497, 'psi': 1.2732246433029306, 'ra': 3.583511454192504, 'dec': 0.3701875655370527}
11:33 ninjax INFO    : Injecting signals . . .
11:33 ninjax INFO    : self.ifos
11:33 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
11:33 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:33 ninjax INFO    : [-3.10741946e-24+1.30667689e-22j -8.13176106e-24-4.04833478e-23j
 -4.23581750e-23+1.14087461e-23j ...
  1.67720288e-23+7.47239865e-24j  2.08914266e-24+3.20416681e-23j
 -4.01980956e-24-8.51135904e-24j]
11:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
11:33 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:33 ninjax INFO    : [-5.96171140e-23+6.98927117e-24j  6.49038780e-23-5.00079633e-23j
  1.38154335e-23-4.06651551e-23j ...
  1.01837459e-23+7.18799989e-24j  4.39741674e-24+8.42772489e-25j
  6.65936926e-24-6.11356130e-24j]
11:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
11:33 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:33 ninjax INFO    : [ 6.23096632e-23+1.76442436e-23j -5.06066816e-23-7.40631279e-24j
 -1.35430151e-23+5.33083158e-23j ...
  1.85408879e-23+1.40049184e-23j -5.43745730e-23+4.32219076e-23j
  1.16216409e-23-1.07431222e-23j]
11:33 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
11:33 ninjax INFO    : SNR for ifo H1 is 8.90601694714174
11:33 ninjax INFO    : SNR for ifo L1 is 10.278644487229354
11:33 ninjax INFO    : SNR for ifo V1 is 15.413500829507255
11:33 ninjax INFO    : The network SNR is 20.55586724462987
11:33 ninjax INFO    : Network SNR passes threshold
11:33 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
11:33 ninjax INFO    :    mass_1_source: 1.7441281037664356
11:33 ninjax INFO    :    mass_2_source: 1.7398324389176119
11:33 ninjax INFO    :    s1_z: 0.04580181995813813
11:33 ninjax INFO    :    s2_z: 0.017419998876675488
11:33 ninjax INFO    :    cos_iota: -0.3716772210047852
11:33 ninjax INFO    :    d_L: 125.99818102226806
11:33 ninjax INFO    :    t_c: -0.08367790083048497
11:33 ninjax INFO    :    phase_c: 4.836954613493268
11:33 ninjax INFO    :    psi: 1.2732246433029306
11:33 ninjax INFO    :    ra: 3.583511454192504
11:33 ninjax INFO    :    sin_dec: 0.3617902980822585
11:33 ninjax INFO    :    q: 0.9975370703335682
11:33 ninjax INFO    :    M_c: 1.5596548527123395
11:33 ninjax INFO    :    eta: 0.2499996199381018
11:33 ninjax INFO    :    iota: 1.9516113409972362
11:33 ninjax INFO    :    dec: 0.3701875655370527
11:33 ninjax INFO    :    lambda_1: 180.38452439898919
11:33 ninjax INFO    :    lambda_2: 183.04846300882986
11:33 ninjax INFO    :    H1_SNR: 8.90601694714174
11:33 ninjax INFO    :    L1_SNR: 10.278644487229354
11:33 ninjax INFO    :    V1_SNR: 15.413500829507255
11:33 ninjax INFO    :    network_SNR: 20.55586724462987
11:33 ninjax INFO    :    epoch: 126.0
11:33 ninjax INFO    :    gmst: 2.7288901910520846
11:33 ninjax INFO    :    duration: 128.0
11:33 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
11:33 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
11:33 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
11:35 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 145.4488389492035 seconds = 2.424147315820058 minutes
11:35 ninjax INFO    : The priors are not modified after their initialization
11:35 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
11:35 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
11:35 ninjax INFO    : sample: {'M_c': Array([1.93819889, 1.18780897, 2.24992349], dtype=float64), 'q': Array([0.19000756, 0.14779533, 0.28257708], dtype=float64), 's1_z': Array([ 0.01238401, -0.04769622, -0.02372016], dtype=float64), 's2_z': Array([-0.03065344, -0.03564132,  0.04710422], dtype=float64), 'lambda_1': Array([4641.5274693 ,  612.30746313, 1967.52872291], dtype=float64), 'lambda_2': Array([1758.83483563, 4551.83896126, 1016.16276587], dtype=float64), 'cos_iota': Array([ 0.0238597 , -0.74313645,  0.59155816], dtype=float64), 'd_L': Array([713.74698856, 868.68641585, 192.25995304], dtype=float64), 't_c': Array([0.04217881, 0.00898288, 0.03363783], dtype=float64), 'phase_c': Array([1.50684768, 1.88303424, 5.95389056], dtype=float64), 'psi': Array([2.23527708, 2.55325171, 0.75124351], dtype=float64), 'ra': Array([1.3893708 , 3.92847788, 0.30941947], dtype=float64), 'sin_dec': Array([ 0.83970994, -0.32378127,  0.01855607], dtype=float64)}
11:35 ninjax INFO    : log_prob: [  -3.00733551  -15.95922217 -569.39850411]
11:35 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.7441281037664356, 'mass_2_source': 1.7398324389176119, 's1_z': 0.04580181995813813, 's2_z': 0.017419998876675488, 'cos_iota': -0.3716772210047852, 'd_L': 125.99818102226806, 't_c': -0.08367790083048497, 'phase_c': 4.836954613493268, 'psi': 1.2732246433029306, 'ra': 3.583511454192504, 'sin_dec': 0.3617902980822585, 'q': 0.9975370703335682, 'M_c': 1.5596548527123395, 'eta': 0.2499996199381018, 'iota': Array(1.95161134, dtype=float64, weak_type=True), 'dec': Array(0.37018757, dtype=float64, weak_type=True), 'lambda_1': 180.38452439898919, 'lambda_2': 183.04846300882986, 'H1_SNR': 8.90601694714174, 'L1_SNR': 10.278644487229354, 'V1_SNR': 15.413500829507255, 'network_SNR': 20.55586724462987, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
11:35 ninjax INFO    : log_prob at the injection parameters is: 199.59431960074284
11:35 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
11:35 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
11:35 ninjax INFO    : Ninjax setup complete.
11:35 ninjax INFO    : Saving output to ./Aplus/injection_25/
11:35 ninjax INFO    : Using polynomial learning rate scheduler
11:35 ninjax INFO    : The hyperparameters passed to flowMC and jim are
11:35 ninjax INFO    :    n_loop_training: 200
11:35 ninjax INFO    :    n_loop_production: 10
11:35 ninjax INFO    :    n_local_steps: 100
11:35 ninjax INFO    :    n_global_steps: 1000
11:35 ninjax INFO    :    n_epochs: 25
11:35 ninjax INFO    :    n_chains: 1000
11:35 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x14b2155e4310>
11:35 ninjax INFO    :    max_samples: 50000
11:35 ninjax INFO    :    momentum: 0.9
11:35 ninjax INFO    :    batch_size: 30000
11:35 ninjax INFO    :    use_global: True
11:35 ninjax INFO    :    keep_quantile: 0.0
11:35 ninjax INFO    :    train_thinning: 10
11:35 ninjax INFO    :    output_thinning: 50
11:35 ninjax INFO    :    n_sample_max: 10000
11:35 ninjax INFO    :    num_layers: 10
11:35 ninjax INFO    :    hidden_size: [128, 128]
11:35 ninjax INFO    :    num_bins: 8
11:35 ninjax INFO    :    save_training_chains: False
11:35 ninjax INFO    :    eps_mass_matrix: 1e-05
11:35 ninjax INFO    :    use_scheduler: True
11:35 ninjax INFO    :    use_temperature: False
11:35 ninjax INFO    :    which_temperature_schedule: exponential
11:35 ninjax INFO    :    starting_temperature: 2.0
11:35 ninjax INFO    :    stop_tempering_iteration: 75
11:35 ninjax INFO    :    stopping_criterion_global_acc: 0.1
11:35 ninjax INFO    :    stopping_criterion_loss: -inf
11:35 ninjax INFO    :    nf_model_kwargs: {}
11:35 ninjax INFO    :    local sampler arg not shown (pretty print)
11:35 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[-1.98554586e-23  2.68525174e-23  3.93486007e-23  2.04962539e-23
  1.25177996e-23  7.16257750e-23 -9.74237528e-23  3.74754252e-24
 -9.20920381e-23  3.98633306e-23]
[ 1.34509596e-23  1.88771860e-22 -2.78346172e-23  1.48723957e-22
  5.71213045e-24 -5.30147437e-23 -5.18497863e-23  9.79132146e-23
 -4.78528236e-23 -1.35785739e-22]
Checking the noise that was generated in inject_signal ifo:
[-1.14504542e-22 -6.41587448e-23 -1.91542878e-23  8.15782662e-23
 -7.83302310e-23  7.73895784e-23  2.40663333e-26  1.75418772e-23
 -8.13815301e-23 -3.18687767e-23]
[-6.18731534e-23  3.52402965e-23 -2.03349028e-23 -2.64900911e-23
  8.59504970e-23 -1.72049621e-23 -1.50378768e-23  7.94952476e-23
  4.27442528e-23  1.28861244e-22]
Checking the noise that was generated in inject_signal ifo:
[-7.95311366e-24 -4.46825198e-23  9.40125807e-23  7.02812261e-23
 -3.45586309e-25 -1.59393456e-22  1.75153883e-23 -1.23665464e-22
  5.97403508e-24  8.59428920e-23]
[ 6.01228179e-23 -6.74580130e-23 -1.14798559e-24 -4.86218969e-23
 -7.56964069e-23 -1.28561246e-22 -9.16888080e-23  7.59530900e-23
  5.06966318e-23 -3.36576183e-24]
Checking the noise that was generated in inject_signal ifo:
[ 4.82513133e-25 -7.67313728e-24 -4.54230456e-23 -1.78261317e-24
 -5.76381661e-23  1.69156292e-23  3.39638980e-23 -3.29620070e-24
 -6.96165402e-24  3.84079355e-23]
[ 1.28641025e-22 -4.45783552e-23  8.65730143e-24  4.57391402e-23
  3.72415877e-24 -1.37915768e-24 -1.12699379e-23 -1.73098053e-23
  5.06318017e-23 -9.59591193e-24]
Checking the noise that was generated in inject_signal ifo:
[-6.03435919e-23  6.82891253e-23  1.84987000e-23  2.30462454e-23
  1.61192370e-23 -6.03950395e-23  1.66829410e-23  9.27012267e-23
  6.16730142e-23 -2.03448618e-23]
[ 1.16913526e-23 -4.66677969e-23 -4.14793574e-23  8.17418579e-24
  4.40576291e-23 -7.56761881e-24  1.88074303e-23  8.61039396e-23
 -5.44957540e-23 -8.91441005e-23]
Checking the noise that was generated in inject_signal ifo:
[ 5.46572174e-23 -5.11759724e-23 -6.53379884e-24  1.80752518e-24
  5.93622421e-23  2.48545289e-23  5.53318621e-24  5.20968391e-23
 -3.16156440e-24 -5.55428978e-25]
[ 2.24816256e-23  1.62480305e-24  5.90250529e-23 -4.84560059e-23
  1.30907534e-22  3.32217722e-23 -1.17783443e-23  1.25297339e-23
 -6.24891700e-23  8.01605195e-24]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.10867500305175781 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.7441281037664356, 'mass_2_source': 1.7398324389176119, 's1_z': 0.04580181995813813, 's2_z': 0.017419998876675488, 'cos_iota': -0.3716772210047852, 'd_L': 125.99818102226806, 't_c': -0.08367790083048497, 'phase_c': 4.836954613493268, 'psi': 1.2732246433029306, 'ra': 3.583511454192504, 'sin_dec': 0.3617902980822585, 'q': 0.9975370703335682, 'M_c': 1.5596548527123395, 'eta': 0.2499996199381018, 'iota': Array(1.95161134, dtype=float64, weak_type=True), 'dec': Array(0.37018757, dtype=float64, weak_type=True), 'lambda_1': 180.38452439898919, 'lambda_2': 183.04846300882986, 'H1_SNR': 8.90601694714174, 'L1_SNR': 10.278644487229354, 'V1_SNR': 15.413500829507255, 'network_SNR': 20.55586724462987, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5145606994628906 seconds
Time for h_sky_low and h_sky_center: 5.358821630477905 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.6931078433990479
Going to compute coefficients . . .
Time for computing coefficients: 124.81622099876404 seconds
Time for computing coefficients: 6.719171762466431 seconds
Time for computing coefficients: 6.700943231582642 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:01<6:43:19, 121.61s/it]Tuning global sampler:   1%|          | 2/200 [02:06<2:54:11, 52.78s/it] Tuning global sampler:   2%|▏         | 3/200 [02:10<1:41:07, 30.80s/it]Tuning global sampler:   2%|▏         | 4/200 [02:15<1:06:51, 20.47s/it]Tuning global sampler:   2%|▎         | 5/200 [02:20<48:59, 15.07s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:25<37:15, 11.52s/it]Tuning global sampler:   4%|▎         | 7/200 [02:30<29:44,  9.25s/it]Tuning global sampler:   4%|▍         | 8/200 [02:34<24:53,  7.78s/it]Tuning global sampler:   4%|▍         | 9/200 [02:39<21:33,  6.77s/it]Tuning global sampler:   5%|▌         | 10/200 [02:43<19:10,  6.05s/it]Tuning global sampler:   6%|▌         | 11/200 [02:48<17:40,  5.61s/it]Tuning global sampler:   6%|▌         | 12/200 [02:53<16:36,  5.30s/it]Tuning global sampler:   6%|▋         | 13/200 [02:57<15:51,  5.09s/it]Tuning global sampler:   7%|▋         | 14/200 [03:02<15:22,  4.96s/it]Tuning global sampler:   8%|▊         | 15/200 [03:06<15:00,  4.87s/it]Tuning global sampler:   8%|▊         | 16/200 [03:11<14:44,  4.81s/it]Tuning global sampler:   8%|▊         | 17/200 [03:16<14:31,  4.76s/it]Tuning global sampler:   9%|▉         | 18/200 [03:20<14:20,  4.73s/it]Tuning global sampler:  10%|▉         | 19/200 [03:25<14:11,  4.71s/it]Tuning global sampler:  10%|█         | 20/200 [03:30<14:04,  4.69s/it]Tuning global sampler:  10%|█         | 21/200 [03:34<13:57,  4.68s/it]Tuning global sampler:  11%|█         | 22/200 [03:40<14:39,  4.94s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:45<14:17,  4.85s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:49<13:51,  4.73s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:53<13:30,  4.63s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:58<13:13,  4.56s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:02<13:01,  4.51s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:07<12:50,  4.48s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:11<12:42,  4.46s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:15<12:35,  4.44s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:20<12:29,  4.43s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:24<12:23,  4.43s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:29<12:16,  4.41s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:33<12:10,  4.40s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:37<12:07,  4.41s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:42<12:02,  4.40s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:46<11:57,  4.40s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:51<11:53,  4.40s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:55<11:50,  4.41s/it]Tuning global sampler:  20%|██        | 40/200 [05:00<11:49,  4.43s/it]Tuning global sampler:  20%|██        | 41/200 [05:04<11:43,  4.42s/it]Tuning global sampler:  21%|██        | 42/200 [05:09<12:23,  4.70s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:14<12:05,  4.62s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:18<11:50,  4.55s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:23<11:40,  4.52s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:27<11:30,  4.49s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:32<11:53,  4.66s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:36<11:37,  4.59s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:41<11:25,  4.54s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:45<11:15,  4.50s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:50<11:06,  4.47s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:54<10:58,  4.45s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:58<10:52,  4.44s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:03<10:47,  4.43s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:07<10:39,  4.41s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:12<10:33,  4.40s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:16<10:30,  4.41s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:20<10:26,  4.41s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:25<10:21,  4.41s/it]Tuning global sampler:  30%|███       | 60/200 [06:29<10:17,  4.41s/it]Tuning global sampler:  30%|███       | 61/200 [06:34<10:13,  4.41s/it]Tuning global sampler:  31%|███       | 62/200 [06:38<10:09,  4.42s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:44<10:45,  4.71s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:48<10:28,  4.62s/it]Tuning global sampler:  32%|███▎      | 65/200 [06:52<10:14,  4.55s/it]Tuning global sampler:  33%|███▎      | 66/200 [06:57<10:03,  4.50s/it]Tuning global sampler:  34%|███▎      | 67/200 [07:01<09:54,  4.47s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:06<09:47,  4.45s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:10<13:55,  6.33s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.22s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.22s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.22s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.22s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.22s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.22s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.22s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.22s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]
11:43 ninjax INFO    : Saving samples to ./Aplus/injection_25/results_training.npz
11:43 ninjax INFO    : Saving the NF
11:43 ninjax INFO    : Time taken: 470.0019724369049 seconds (7.833366207281748 minutes)
11:43 ninjax INFO    : Creating the final corner plot
11:43 ninjax INFO    : Dumping the final production chains
11:43 ninjax INFO    : Chains shape is: (13, 220000)
11:43 ninjax INFO    : Key: M_c: ESS = 14682, Rhat = 1.0410734142639129
11:43 ninjax INFO    : Key: q: ESS = 11454, Rhat = 1.052396957328061
11:43 ninjax INFO    : Key: s1_z: ESS = 14692, Rhat = 1.040714577255787
11:43 ninjax INFO    : Key: s2_z: ESS = 11825, Rhat = 1.0512151255496012
11:43 ninjax INFO    : Key: lambda_1: ESS = 14183, Rhat = 1.0428129773841626
11:43 ninjax INFO    : Key: lambda_2: ESS = 13592, Rhat = 1.0460241179765064
11:43 ninjax INFO    : Key: cos_iota: ESS = 7986, Rhat = 1.0777006454108213
11:43 ninjax INFO    : Key: d_L: ESS = 7799, Rhat = 1.0796925761558422
11:43 ninjax INFO    : Key: t_c: ESS = 12023, Rhat = 1.0501445042100772
11:43 ninjax INFO    : Key: phase_c: ESS = 6189, Rhat = 1.1018412020780497
11:43 ninjax INFO    : Key: psi: ESS = 8995, Rhat = 1.067815274190227
11:43 ninjax INFO    : Key: ra: ESS = 11363, Rhat = 1.052646226800235
11:43 ninjax INFO    : Key: sin_dec: ESS = 13294, Rhat = 1.0451631179950238
11:43 ninjax INFO    : Key: eta: ESS = 11454, Rhat = 1.052396957328061
11:43 ninjax INFO    : Key: iota: ESS = 7986, Rhat = 1.0777006454108213
11:43 ninjax INFO    : Key: dec: ESS = 13294, Rhat = 1.0451631179950238
11:43 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.568 +/- 0.177
q: 0.778 +/- 0.208
s1_z: 0.019 +/- 0.028
s2_z: 0.017 +/- 0.028
lambda_1: 1681.228 +/- 1430.633
lambda_2: 1798.599 +/- 1468.403
cos_iota: -0.534 +/- 0.447
d_L: 571.695 +/- 261.348
t_c: -0.072 +/- 0.038
phase_c: 2.893 +/- 1.801
psi: 1.375 +/- 0.876
ra: 3.535 +/- 0.944
sin_dec: 0.227 +/- 0.325
Log probability: 84.544 +/- 85.696
Local acceptance: 0.915 +/- 0.280
Global acceptance: 0.014 +/- 0.116
Max loss: 22.788, Min loss: 7.148
Production summary
==========
M_c: 1.560 +/- 0.000
q: 0.915 +/- 0.058
s1_z: 0.041 +/- 0.008
s2_z: 0.040 +/- 0.008
lambda_1: 365.139 +/- 301.998
lambda_2: 486.429 +/- 385.126
cos_iota: -0.764 +/- 0.181
d_L: 241.564 +/- 53.070
t_c: -0.083 +/- 0.001
phase_c: 3.197 +/- 1.757
psi: 1.652 +/- 0.891
ra: 3.616 +/- 0.023
sin_dec: 0.345 +/- 0.015
Log probability: 196.500 +/- 2.150
Local acceptance: 0.762 +/- 0.426
Global acceptance: 0.109 +/- 0.311
DONE

JOB STATISTICS
==============
Job ID: 10923058
Cluster: snellius
User/Group: twouters2/twouters2
State: RUNNING
Nodes: 1
Cores per node: 16
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 02:59:28 core-walltime
Job Wall-clock time: 00:11:13
Memory Utilized: 0.00 MB
Memory Efficiency: 0.00% of 10.00 GB (10.00 GB/node)
WARNING: Efficiency statistics can only be obtained after the job has ended as seff tool is based on the accounting database data.
