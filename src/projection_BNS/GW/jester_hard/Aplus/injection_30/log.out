Wed Apr  2 11:32:59 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
11:33 ninjax INFO    : Checking and setting outdir
11:33 ninjax INFO    : Found generation prior file ./Aplus/injection_30/generation_prior.prior
11:33 ninjax INFO    : The outdir is set to ./Aplus/injection_30
11:33 ninjax INFO    : Loading the given config
11:33 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
11:33 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
11:33 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/jester_hard/Aplus/injection_30/complete_config.json
11:33 ninjax INFO    : No seed specified. Generating a random seed: 926519
11:33 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 391973
11:33 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 733539
11:33 ninjax INFO    : Loading the priors
11:33 ninjax INFO    : Setting up the prior
11:33 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
11:33 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
11:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
11:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
11:33 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
11:33 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
11:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
11:33 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
11:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
11:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
11:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
11:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
11:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
11:33 ninjax INFO    : Setting up the generation prior
11:33 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.4, naming=["mass_1_source"])
11:33 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.4, naming=["mass_2_source"])
11:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
11:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
11:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
11:33 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
11:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
11:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
11:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
11:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
11:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
11:33 ninjax INFO    : Finished prior setup
11:33 ninjax INFO    : Setting the transforms
11:33 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
11:33 ninjax INFO    : transforms_str_list has 3 elements
11:33 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
11:33 ninjax INFO    : Setting the likelihood
11:33 ninjax INFO    : GW likelihood provided, setting up the GW pipe
11:33 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz
11:33 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz for BNS injections
11:33 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
11:33 ninjax INFO    : self.is_BNS_run is True
11:33 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
11:33 ninjax INFO    : GW run is an injection
11:33 ninjax INFO    : Setting up GW injection . . . 
11:33 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
11:33 ninjax INFO    : Generating new injection
11:33 ninjax INFO    : Sanity check: generated parameters:
11:33 ninjax INFO    : {'mass_1_source': 1.8684613764235447, 'mass_2_source': 1.3368101003891981, 's1_z': 0.04235967840822355, 's2_z': 0.022949980159273298, 'cos_iota': 0.4578911057398072, 'd_L': 321.1513570971858, 't_c': 0.06530514622670833, 'phase_c': 4.114274998881559, 'psi': 1.3691250912292152, 'ra': 5.413464550341734, 'sin_dec': -0.8573159496908183}
11:33 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz . . . 
11:33 ninjax INFO    : Injected lambda_1: 118.46921082493155
11:33 ninjax INFO    : Injected lambda_2: 784.7897545787532
11:33 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.4715785203042275 is 128.0
11:33 ninjax INFO    : After transforms, the injection parameters are:
11:33 ninjax INFO    : {'mass_1_source': 1.8684613764235447, 'mass_2_source': 1.3368101003891981, 's1_z': 0.04235967840822355, 's2_z': 0.022949980159273298, 'cos_iota': 0.4578911057398072, 'd_L': 321.1513570971858, 't_c': 0.06530514622670833, 'phase_c': 4.114274998881559, 'psi': 1.3691250912292152, 'ra': 5.413464550341734, 'sin_dec': -0.8573159496908183, 'q': 0.7154603874916645, 'M_c': 1.4715785203042275, 'eta': 0.24312196958213148, 'iota': Array(1.09517477, dtype=float64, weak_type=True), 'dec': Array(-1.03003295, dtype=float64, weak_type=True), 'lambda_1': 118.46921082493155, 'lambda_2': 784.7897545787532}
11:33 ninjax INFO    : The trial injection parameters are {'M_c': 1.4715785203042275, 'eta': 0.24312196958213148, 's1_z': 0.04235967840822355, 's2_z': 0.022949980159273298, 'lambda_1': 118.46921082493155, 'lambda_2': 784.7897545787532, 'd_L': 321.1513570971858, 'phase_c': 4.114274998881559, 'iota': 1.0951747688694198, 't_c': 0.06530514622670833, 'psi': 1.3691250912292152, 'ra': 5.413464550341734, 'dec': -1.0300329455062545}
11:33 ninjax INFO    : Injecting signals . . .
11:33 ninjax INFO    : self.ifos
11:33 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
11:33 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:33 ninjax INFO    : [-5.29740748e-23-4.74714576e-24j  5.62124634e-23-5.71296142e-24j
 -2.09056177e-24+9.64931455e-24j ...
  4.86945456e-24-2.50767972e-23j -7.12750556e-24-1.05663086e-23j
  2.06668789e-23-4.70611889e-24j]
11:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
11:33 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:33 ninjax INFO    : [-5.50107582e-23-1.11101270e-23j  4.12965935e-23+1.85877181e-23j
  2.39073255e-23+2.69495920e-23j ...
 -6.98078413e-24-2.05829172e-24j  1.82200179e-23-1.99690754e-23j
  1.05142155e-23+2.10359466e-24j]
11:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
11:33 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:33 ninjax INFO    : [-3.28399046e-23+8.85622616e-23j -5.15193777e-24+5.23276947e-23j
 -5.25682061e-23-5.15092126e-23j ...
 -1.27896696e-23+4.67036915e-23j -3.57650431e-23-3.95738007e-23j
 -5.44910821e-23+1.63627755e-23j]
11:33 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
11:33 ninjax INFO    : SNR for ifo H1 is 7.118646915646899
11:33 ninjax INFO    : SNR for ifo L1 is 7.641834848164892
11:33 ninjax INFO    : SNR for ifo V1 is 8.315550804024953
11:33 ninjax INFO    : The network SNR is 13.34994977258703
11:33 ninjax INFO    : Network SNR passes threshold
11:33 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
11:33 ninjax INFO    :    mass_1_source: 1.8684613764235447
11:33 ninjax INFO    :    mass_2_source: 1.3368101003891981
11:33 ninjax INFO    :    s1_z: 0.04235967840822355
11:33 ninjax INFO    :    s2_z: 0.022949980159273298
11:33 ninjax INFO    :    cos_iota: 0.4578911057398072
11:33 ninjax INFO    :    d_L: 321.1513570971858
11:33 ninjax INFO    :    t_c: 0.06530514622670833
11:33 ninjax INFO    :    phase_c: 4.114274998881559
11:33 ninjax INFO    :    psi: 1.3691250912292152
11:33 ninjax INFO    :    ra: 5.413464550341734
11:33 ninjax INFO    :    sin_dec: -0.8573159496908183
11:33 ninjax INFO    :    q: 0.7154603874916645
11:33 ninjax INFO    :    M_c: 1.4715785203042275
11:33 ninjax INFO    :    eta: 0.24312196958213148
11:33 ninjax INFO    :    iota: 1.0951747688694198
11:33 ninjax INFO    :    dec: -1.0300329455062545
11:33 ninjax INFO    :    lambda_1: 118.46921082493155
11:33 ninjax INFO    :    lambda_2: 784.7897545787532
11:33 ninjax INFO    :    H1_SNR: 7.118646915646899
11:33 ninjax INFO    :    L1_SNR: 7.641834848164892
11:33 ninjax INFO    :    V1_SNR: 8.315550804024953
11:33 ninjax INFO    :    network_SNR: 13.34994977258703
11:33 ninjax INFO    :    epoch: 126.0
11:33 ninjax INFO    :    gmst: 2.7288901910520846
11:33 ninjax INFO    :    duration: 128.0
11:33 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
11:33 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
11:33 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
11:35 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 140.9226212501526 seconds = 2.3487103541692096 minutes
11:35 ninjax INFO    : The priors are not modified after their initialization
11:35 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
11:35 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
11:35 ninjax INFO    : sample: {'M_c': Array([2.14499205, 2.32434097, 1.73662639], dtype=float64), 'q': Array([0.28993478, 0.37072091, 0.38773775], dtype=float64), 's1_z': Array([ 0.04049847,  0.02437476, -0.00146876], dtype=float64), 's2_z': Array([-0.01619099,  0.0080449 ,  0.03730271], dtype=float64), 'lambda_1': Array([1787.13224899, 4970.05392393, 2482.84727008], dtype=float64), 'lambda_2': Array([2058.80148291, 1786.66787653, 3213.58102832], dtype=float64), 'cos_iota': Array([ 0.27116296, -0.22777524, -0.87416757], dtype=float64), 'd_L': Array([952.64136999, 706.58758835, 846.9926078 ], dtype=float64), 't_c': Array([-0.03449507, -0.00448533,  0.0345782 ], dtype=float64), 'phase_c': Array([1.69966116, 4.8370577 , 3.14595601], dtype=float64), 'psi': Array([1.96031907, 0.57608537, 0.16821225], dtype=float64), 'ra': Array([2.6428354 , 5.37197087, 3.51469322], dtype=float64), 'sin_dec': Array([ 0.16366544,  0.63884043, -0.94494032], dtype=float64)}
11:35 ninjax INFO    : log_prob: [ -5.84102094  -4.45775345 -52.32076893]
11:35 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.8684613764235447, 'mass_2_source': 1.3368101003891981, 's1_z': 0.04235967840822355, 's2_z': 0.022949980159273298, 'cos_iota': 0.4578911057398072, 'd_L': 321.1513570971858, 't_c': 0.06530514622670833, 'phase_c': 4.114274998881559, 'psi': 1.3691250912292152, 'ra': 5.413464550341734, 'sin_dec': -0.8573159496908183, 'q': 0.7154603874916645, 'M_c': 1.4715785203042275, 'eta': 0.24312196958213148, 'iota': Array(1.09517477, dtype=float64, weak_type=True), 'dec': Array(-1.03003295, dtype=float64, weak_type=True), 'lambda_1': 118.46921082493155, 'lambda_2': 784.7897545787532, 'H1_SNR': 7.118646915646899, 'L1_SNR': 7.641834848164892, 'V1_SNR': 8.315550804024953, 'network_SNR': 13.34994977258703, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
11:35 ninjax INFO    : log_prob at the injection parameters is: 69.6896856547351
11:35 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
11:35 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
11:35 ninjax INFO    : Ninjax setup complete.
11:35 ninjax INFO    : Saving output to ./Aplus/injection_30/
11:35 ninjax INFO    : Using polynomial learning rate scheduler
11:35 ninjax INFO    : The hyperparameters passed to flowMC and jim are
11:35 ninjax INFO    :    n_loop_training: 200
11:35 ninjax INFO    :    n_loop_production: 10
11:35 ninjax INFO    :    n_local_steps: 100
11:35 ninjax INFO    :    n_global_steps: 1000
11:35 ninjax INFO    :    n_epochs: 25
11:35 ninjax INFO    :    n_chains: 1000
11:35 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x14831aa67be0>
11:35 ninjax INFO    :    max_samples: 50000
11:35 ninjax INFO    :    momentum: 0.9
11:35 ninjax INFO    :    batch_size: 30000
11:35 ninjax INFO    :    use_global: True
11:35 ninjax INFO    :    keep_quantile: 0.0
11:35 ninjax INFO    :    train_thinning: 10
11:35 ninjax INFO    :    output_thinning: 50
11:35 ninjax INFO    :    n_sample_max: 10000
11:35 ninjax INFO    :    num_layers: 10
11:35 ninjax INFO    :    hidden_size: [128, 128]
11:35 ninjax INFO    :    num_bins: 8
11:35 ninjax INFO    :    save_training_chains: False
11:35 ninjax INFO    :    eps_mass_matrix: 1e-05
11:35 ninjax INFO    :    use_scheduler: True
11:35 ninjax INFO    :    use_temperature: False
11:35 ninjax INFO    :    which_temperature_schedule: exponential
11:35 ninjax INFO    :    starting_temperature: 2.0
11:35 ninjax INFO    :    stop_tempering_iteration: 75
11:35 ninjax INFO    :    stopping_criterion_global_acc: 0.1
11:35 ninjax INFO    :    stopping_criterion_loss: -inf
11:35 ninjax INFO    :    nf_model_kwargs: {}
11:35 ninjax INFO    :    local sampler arg not shown (pretty print)
11:35 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[-5.58671868e-23  5.42224367e-23 -2.80863084e-24 -5.22445416e-23
 -3.04429495e-23  7.00740746e-23  1.31794613e-23 -3.97284940e-23
  1.93371629e-23 -6.44099239e-24]
[-3.16993833e-24 -3.08855039e-24  1.28621307e-23  2.36664164e-25
  5.25743326e-23  1.93849755e-23 -5.74423724e-23  1.25998897e-23
 -7.08216330e-23 -7.41139452e-23]
Checking the noise that was generated in inject_signal ifo:
[-5.31315396e-23  4.17800320e-23  2.28908243e-23  2.99731685e-23
 -6.91628923e-23  8.61007540e-23  7.04756509e-23 -3.34339043e-23
  6.91144437e-23 -1.25643223e-22]
[-1.41069331e-23  1.50852704e-23  2.35649005e-23  5.84556984e-23
  2.76491605e-23 -9.39659520e-24 -6.20846605e-23  8.31061964e-23
 -1.13379174e-22 -8.91300732e-24]
Checking the noise that was generated in inject_signal ifo:
[-2.81445827e-23 -3.21406349e-25 -4.84703001e-23  1.04857418e-22
  7.84003948e-24 -6.33288210e-23  6.55770241e-24 -3.26460935e-24
  1.20814022e-23  3.90948704e-23]
[ 8.99055170e-23  5.16244797e-23 -5.41575901e-23  1.13903132e-23
  6.48541708e-23  4.36430908e-23 -1.71838250e-24 -1.81556129e-23
 -1.98005899e-23  3.36059783e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.10994935035705566 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.8684613764235447, 'mass_2_source': 1.3368101003891981, 's1_z': 0.04235967840822355, 's2_z': 0.022949980159273298, 'cos_iota': 0.4578911057398072, 'd_L': 321.1513570971858, 't_c': 0.06530514622670833, 'phase_c': 4.114274998881559, 'psi': 1.3691250912292152, 'ra': 5.413464550341734, 'sin_dec': -0.8573159496908183, 'q': 0.7154603874916645, 'M_c': 1.4715785203042275, 'eta': 0.24312196958213148, 'iota': Array(1.09517477, dtype=float64, weak_type=True), 'dec': Array(-1.03003295, dtype=float64, weak_type=True), 'lambda_1': 118.46921082493155, 'lambda_2': 784.7897545787532, 'H1_SNR': 7.118646915646899, 'L1_SNR': 7.641834848164892, 'V1_SNR': 8.315550804024953, 'network_SNR': 13.34994977258703, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5127630233764648 seconds
Time for h_sky_low and h_sky_center: 5.209561347961426 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.6674273014068604
Going to compute coefficients . . .
Time for computing coefficients: 119.50504684448242 seconds
Time for computing coefficients: 7.231764554977417 seconds
Time for computing coefficients: 7.160188674926758 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:01<6:42:09, 121.25s/it]Tuning global sampler:   1%|          | 2/200 [02:05<2:53:36, 52.61s/it] Tuning global sampler:   2%|▏         | 3/200 [02:10<1:40:43, 30.68s/it]Tuning global sampler:   2%|▏         | 4/200 [02:14<1:06:33, 20.37s/it]Tuning global sampler:   2%|▎         | 5/200 [02:20<48:44, 15.00s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:25<37:01, 11.45s/it]Tuning global sampler:   4%|▎         | 7/200 [02:29<29:32,  9.18s/it]Tuning global sampler:   4%|▍         | 8/200 [02:34<24:41,  7.72s/it]Tuning global sampler:   4%|▍         | 9/200 [02:38<21:22,  6.71s/it]Tuning global sampler:   5%|▌         | 10/200 [02:43<19:00,  6.00s/it]Tuning global sampler:   6%|▌         | 11/200 [02:47<17:30,  5.56s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:28,  5.26s/it]Tuning global sampler:   6%|▋         | 13/200 [02:56<15:41,  5.04s/it]Tuning global sampler:   7%|▋         | 14/200 [03:01<15:12,  4.91s/it]Tuning global sampler:   8%|▊         | 15/200 [03:05<14:51,  4.82s/it]Tuning global sampler:   8%|▊         | 16/200 [03:10<14:34,  4.75s/it]Tuning global sampler:   8%|▊         | 17/200 [03:15<14:23,  4.72s/it]Tuning global sampler:   9%|▉         | 18/200 [03:19<14:14,  4.69s/it]Tuning global sampler:  10%|▉         | 19/200 [03:24<14:05,  4.67s/it]Tuning global sampler:  10%|█         | 20/200 [03:28<13:58,  4.66s/it]Tuning global sampler:  10%|█         | 21/200 [03:33<13:51,  4.65s/it]Tuning global sampler:  11%|█         | 22/200 [03:38<13:43,  4.63s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:42<13:36,  4.61s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:47<13:20,  4.55s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:52<13:54,  4.77s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:56<13:28,  4.65s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:01<13:09,  4.56s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:05<12:54,  4.50s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:09<12:42,  4.46s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:14<12:34,  4.44s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:18<12:26,  4.42s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:23<12:21,  4.42s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:27<12:13,  4.39s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:31<12:06,  4.38s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:36<12:02,  4.38s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:40<11:58,  4.38s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:44<11:53,  4.37s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:49<11:48,  4.38s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:53<11:45,  4.38s/it]Tuning global sampler:  20%|██        | 40/200 [04:58<11:40,  4.38s/it]Tuning global sampler:  20%|██        | 41/200 [05:02<11:36,  4.38s/it]Tuning global sampler:  21%|██        | 42/200 [05:06<11:31,  4.38s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:11<11:28,  4.38s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:16<12:07,  4.66s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:20<11:47,  4.56s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:25<11:33,  4.50s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:29<11:22,  4.46s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:33<11:16,  4.45s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:38<11:09,  4.43s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:42<11:01,  4.41s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:47<10:55,  4.40s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:51<10:49,  4.39s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:55<10:44,  4.38s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:00<10:42,  4.40s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:04<10:34,  4.38s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:08<10:28,  4.36s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:13<10:24,  4.37s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:17<10:20,  4.37s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:22<10:16,  4.37s/it]Tuning global sampler:  30%|███       | 60/200 [06:26<10:13,  4.38s/it]Tuning global sampler:  30%|███       | 61/200 [06:30<10:09,  4.38s/it]Tuning global sampler:  31%|███       | 62/200 [06:35<10:05,  4.39s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:39<10:00,  4.39s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:44<10:35,  4.67s/it]Tuning global sampler:  32%|███▎      | 65/200 [06:49<10:18,  4.58s/it]Tuning global sampler:  33%|███▎      | 66/200 [06:53<10:03,  4.51s/it]Tuning global sampler:  34%|███▎      | 67/200 [06:58<09:53,  4.46s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:02<09:45,  4.43s/it]Tuning global sampler:  34%|███▍      | 69/200 [07:06<09:38,  4.42s/it]Tuning global sampler:  35%|███▌      | 70/200 [07:11<09:33,  4.41s/it]Tuning global sampler:  36%|███▌      | 71/200 [07:15<09:28,  4.41s/it]Tuning global sampler:  36%|███▌      | 72/200 [07:19<09:23,  4.40s/it]Tuning global sampler:  36%|███▋      | 73/200 [07:24<09:17,  4.39s/it]Tuning global sampler:  37%|███▋      | 74/200 [07:28<09:12,  4.39s/it]Tuning global sampler:  38%|███▊      | 75/200 [07:33<09:08,  4.39s/it]Tuning global sampler:  38%|███▊      | 76/200 [07:37<09:03,  4.38s/it]Tuning global sampler:  38%|███▊      | 77/200 [07:41<08:58,  4.37s/it]Tuning global sampler:  39%|███▉      | 78/200 [07:46<08:53,  4.37s/it]Tuning global sampler:  40%|███▉      | 79/200 [07:50<08:49,  4.38s/it]Tuning global sampler:  40%|████      | 80/200 [07:54<08:45,  4.38s/it]Tuning global sampler:  40%|████      | 81/200 [07:59<08:41,  4.38s/it]Tuning global sampler:  41%|████      | 82/200 [08:03<08:37,  4.39s/it]Tuning global sampler:  42%|████▏     | 83/200 [08:08<08:33,  4.39s/it]Tuning global sampler:  42%|████▏     | 84/200 [08:12<08:29,  4.39s/it]Tuning global sampler:  42%|████▎     | 85/200 [08:17<08:59,  4.69s/it]Tuning global sampler:  43%|████▎     | 86/200 [08:22<08:44,  4.60s/it]Tuning global sampler:  44%|████▎     | 87/200 [08:26<08:32,  4.54s/it]Tuning global sampler:  44%|████▍     | 88/200 [08:31<08:22,  4.48s/it]Tuning global sampler:  44%|████▍     | 89/200 [08:35<08:13,  4.44s/it]Tuning global sampler:  45%|████▌     | 90/200 [08:39<08:07,  4.43s/it]Tuning global sampler:  46%|████▌     | 91/200 [08:44<08:00,  4.41s/it]Tuning global sampler:  46%|████▌     | 92/200 [08:48<07:56,  4.41s/it]Tuning global sampler:  46%|████▋     | 93/200 [08:53<07:52,  4.42s/it]Tuning global sampler:  47%|████▋     | 94/200 [08:57<07:47,  4.41s/it]Tuning global sampler:  48%|████▊     | 95/200 [09:01<07:43,  4.41s/it]Tuning global sampler:  48%|████▊     | 96/200 [09:06<07:39,  4.42s/it]Tuning global sampler:  48%|████▊     | 97/200 [09:10<07:35,  4.42s/it]Tuning global sampler:  49%|████▉     | 98/200 [09:15<07:30,  4.42s/it]Tuning global sampler:  50%|████▉     | 99/200 [09:19<07:24,  4.40s/it]Tuning global sampler:  50%|█████     | 100/200 [09:23<07:18,  4.38s/it]Tuning global sampler:  50%|█████     | 101/200 [09:28<07:14,  4.39s/it]Tuning global sampler:  51%|█████     | 102/200 [09:32<07:09,  4.39s/it]Tuning global sampler:  52%|█████▏    | 103/200 [09:36<07:05,  4.38s/it]Tuning global sampler:  52%|█████▏    | 104/200 [09:41<07:00,  4.38s/it]Tuning global sampler:  52%|█████▎    | 105/200 [09:46<07:26,  4.70s/it]Tuning global sampler:  53%|█████▎    | 106/200 [09:51<07:12,  4.60s/it]Tuning global sampler:  54%|█████▎    | 107/200 [09:55<07:01,  4.54s/it]Tuning global sampler:  54%|█████▍    | 108/200 [09:59<06:52,  4.49s/it]Tuning global sampler:  55%|█████▍    | 109/200 [10:04<06:45,  4.45s/it]Tuning global sampler:  55%|█████▍    | 109/200 [10:08<08:28,  5.58s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.21s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.21s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.21s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.21s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.21s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.21s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.21s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.21s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]
11:46 ninjax INFO    : Saving samples to ./Aplus/injection_30/results_training.npz
11:46 ninjax INFO    : Saving the NF
11:46 ninjax INFO    : Time taken: 646.6337461471558 seconds (10.777229102452596 minutes)
11:46 ninjax INFO    : Creating the final corner plot
11:46 ninjax INFO    : Dumping the final production chains
11:46 ninjax INFO    : Chains shape is: (13, 220000)
11:46 ninjax INFO    : Key: M_c: ESS = 19827, Rhat = 1.0301516267120987
11:46 ninjax INFO    : Key: q: ESS = 20811, Rhat = 1.0300471237124669
11:46 ninjax INFO    : Key: s1_z: ESS = 21909, Rhat = 1.0279836571436103
11:46 ninjax INFO    : Key: s2_z: ESS = 21681, Rhat = 1.0283219096219332
11:46 ninjax INFO    : Key: lambda_1: ESS = 25854, Rhat = 1.0243685946093504
11:46 ninjax INFO    : Key: lambda_2: ESS = 21504, Rhat = 1.0289654775537174
11:46 ninjax INFO    : Key: cos_iota: ESS = 14712, Rhat = 1.0424843664248842
11:46 ninjax INFO    : Key: d_L: ESS = 15639, Rhat = 1.0392069672334314
11:46 ninjax INFO    : Key: t_c: ESS = 21757, Rhat = 1.028708635324538
11:46 ninjax INFO    : Key: phase_c: ESS = 27138, Rhat = 1.0234674618977881
11:46 ninjax INFO    : Key: psi: ESS = 21146, Rhat = 1.0347826263147781
11:46 ninjax INFO    : Key: ra: ESS = 28354, Rhat = 1.0222842887367776
11:46 ninjax INFO    : Key: sin_dec: ESS = 29695, Rhat = 1.0215123733905165
11:46 ninjax INFO    : Key: eta: ESS = 20811, Rhat = 1.0300471237124669
11:46 ninjax INFO    : Key: iota: ESS = 14712, Rhat = 1.0424843664248842
11:46 ninjax INFO    : Key: dec: ESS = 29695, Rhat = 1.0215123733905165
11:46 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.500 +/- 0.288
q: 0.642 +/- 0.231
s1_z: 0.007 +/- 0.028
s2_z: 0.006 +/- 0.028
lambda_1: 2148.535 +/- 1470.070
lambda_2: 2218.868 +/- 1413.574
cos_iota: 0.244 +/- 0.486
d_L: 760.142 +/- 172.296
t_c: 0.040 +/- 0.051
phase_c: 3.042 +/- 1.745
psi: 1.524 +/- 0.896
ra: 4.039 +/- 1.829
sin_dec: -0.289 +/- 0.631
Log probability: 7.120 +/- 33.216
Local acceptance: 0.973 +/- 0.163
Global acceptance: 0.023 +/- 0.149
Max loss: 22.781, Min loss: 4.832
Production summary
==========
M_c: 1.471 +/- 0.000
q: 0.861 +/- 0.090
s1_z: 0.023 +/- 0.019
s2_z: 0.017 +/- 0.022
lambda_1: 689.051 +/- 668.864
lambda_2: 1073.146 +/- 956.393
cos_iota: 0.772 +/- 0.171
d_L: 490.473 +/- 101.729
t_c: 0.066 +/- 0.001
phase_c: 3.130 +/- 1.795
psi: 1.523 +/- 0.940
ra: 5.383 +/- 0.016
sin_dec: -0.844 +/- 0.012
Log probability: 66.721 +/- 2.483
Local acceptance: 0.891 +/- 0.311
Global acceptance: 0.113 +/- 0.316
DONE

JOB STATISTICS
==============
Job ID: 10923063
Cluster: snellius
User/Group: twouters2/twouters2
State: RUNNING
Nodes: 1
Cores per node: 16
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 03:44:00 core-walltime
Job Wall-clock time: 00:14:00
Memory Utilized: 0.00 MB
Memory Efficiency: 0.00% of 10.00 GB (10.00 GB/node)
WARNING: Efficiency statistics can only be obtained after the job has ended as seff tool is based on the accounting database data.
