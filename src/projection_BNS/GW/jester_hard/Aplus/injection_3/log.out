Wed Apr  2 11:32:53 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
11:33 ninjax INFO    : Checking and setting outdir
11:33 ninjax INFO    : Found generation prior file ./Aplus/injection_3/generation_prior.prior
11:33 ninjax INFO    : The outdir is set to ./Aplus/injection_3
11:33 ninjax INFO    : Loading the given config
11:33 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
11:33 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
11:33 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/jester_hard/Aplus/injection_3/complete_config.json
11:33 ninjax INFO    : No seed specified. Generating a random seed: 567692
11:33 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 809598
11:33 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 711231
11:33 ninjax INFO    : Loading the priors
11:33 ninjax INFO    : Setting up the prior
11:33 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
11:33 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
11:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
11:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
11:33 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
11:33 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
11:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
11:33 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
11:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
11:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
11:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
11:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
11:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
11:33 ninjax INFO    : Setting up the generation prior
11:33 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.4, naming=["mass_1_source"])
11:33 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.4, naming=["mass_2_source"])
11:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
11:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
11:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
11:33 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
11:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
11:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
11:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
11:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
11:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
11:33 ninjax INFO    : Finished prior setup
11:33 ninjax INFO    : Setting the transforms
11:33 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
11:33 ninjax INFO    : transforms_str_list has 3 elements
11:33 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
11:33 ninjax INFO    : Setting the likelihood
11:33 ninjax INFO    : GW likelihood provided, setting up the GW pipe
11:33 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz
11:33 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz for BNS injections
11:33 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
11:33 ninjax INFO    : self.is_BNS_run is True
11:33 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
11:33 ninjax INFO    : GW run is an injection
11:33 ninjax INFO    : Setting up GW injection . . . 
11:33 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
11:33 ninjax INFO    : Generating new injection
11:33 ninjax INFO    : Sanity check: generated parameters:
11:33 ninjax INFO    : {'mass_1_source': 1.9893440547529546, 'mass_2_source': 2.240695714613368, 's1_z': 0.03866525813882234, 's2_z': 0.021901264231486195, 'cos_iota': 0.29875168464471, 'd_L': 287.3872290580679, 't_c': 0.0578951909061185, 'phase_c': 2.67991399248455, 'psi': 1.1964145732229496, 'ra': 6.06295081443661, 'sin_dec': 0.12294205149087567}
11:33 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz . . . 
11:33 ninjax INFO    : Injected lambda_1: 30.62993417752877
11:33 ninjax INFO    : Injected lambda_2: 78.6624341872421
11:33 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.9566388858202342 is 128.0
11:33 ninjax INFO    : After transforms, the injection parameters are:
11:33 ninjax INFO    : {'mass_1_source': 2.240695714613368, 'mass_2_source': 1.9893440547529546, 's1_z': 0.03866525813882234, 's2_z': 0.021901264231486195, 'cos_iota': 0.29875168464471, 'd_L': 287.3872290580679, 't_c': 0.0578951909061185, 'phase_c': 2.67991399248455, 'psi': 1.1964145732229496, 'ra': 6.06295081443661, 'sin_dec': 0.12294205149087567, 'q': 0.8878242778699721, 'M_c': 1.9566388858202342, 'eta': 0.2491172969589705, 'iota': Array(1.26741199, dtype=float64, weak_type=True), 'dec': Array(0.12325388, dtype=float64, weak_type=True), 'lambda_1': 30.62993417752877, 'lambda_2': 78.6624341872421}
11:33 ninjax INFO    : The trial injection parameters are {'M_c': 1.9566388858202342, 'eta': 0.2491172969589705, 's1_z': 0.03866525813882234, 's2_z': 0.021901264231486195, 'lambda_1': 30.62993417752877, 'lambda_2': 78.6624341872421, 'd_L': 287.3872290580679, 'phase_c': 2.67991399248455, 'iota': 1.2674119940580868, 't_c': 0.0578951909061185, 'psi': 1.1964145732229496, 'ra': 6.06295081443661, 'dec': 0.12325388350509693}
11:33 ninjax INFO    : Injecting signals . . .
11:33 ninjax INFO    : self.ifos
11:33 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
11:33 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:33 ninjax INFO    : [-2.76997402e-24+3.30872931e-23j  2.55644431e-23+5.34959716e-23j
  1.25871041e-22-5.30479467e-24j ...
 -2.14909766e-23+1.65276177e-23j -1.61209405e-23+2.19766764e-24j
 -4.02956653e-25-2.00991050e-23j]
11:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
11:33 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:33 ninjax INFO    : [-2.62743535e-23-7.60466727e-23j -1.92418202e-23-5.26386566e-24j
  8.69477902e-25+7.20693882e-23j ...
  1.15173428e-23+1.40447854e-23j -5.38543989e-25-1.95698520e-23j
 -2.04865030e-23+1.64818289e-23j]
11:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
11:33 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:33 ninjax INFO    : [ 4.49731264e-23+1.31640045e-25j  1.29986040e-23-2.70991436e-23j
 -4.05144910e-23-5.09104901e-24j ...
  2.59275391e-23+1.21784532e-23j  1.26624266e-23-1.12465906e-23j
  3.52124534e-23+4.76276760e-24j]
11:33 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
11:33 ninjax INFO    : SNR for ifo H1 is 6.175435741270514
11:33 ninjax INFO    : SNR for ifo L1 is 6.624527877439807
11:33 ninjax INFO    : SNR for ifo V1 is 8.838312528728855
11:33 ninjax INFO    : The network SNR is 12.654491082182005
11:33 ninjax INFO    : Network SNR passes threshold
11:33 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
11:33 ninjax INFO    :    mass_1_source: 2.240695714613368
11:33 ninjax INFO    :    mass_2_source: 1.9893440547529546
11:33 ninjax INFO    :    s1_z: 0.03866525813882234
11:33 ninjax INFO    :    s2_z: 0.021901264231486195
11:33 ninjax INFO    :    cos_iota: 0.29875168464471
11:33 ninjax INFO    :    d_L: 287.3872290580679
11:33 ninjax INFO    :    t_c: 0.0578951909061185
11:33 ninjax INFO    :    phase_c: 2.67991399248455
11:33 ninjax INFO    :    psi: 1.1964145732229496
11:33 ninjax INFO    :    ra: 6.06295081443661
11:33 ninjax INFO    :    sin_dec: 0.12294205149087567
11:33 ninjax INFO    :    q: 0.8878242778699721
11:33 ninjax INFO    :    M_c: 1.9566388858202342
11:33 ninjax INFO    :    eta: 0.2491172969589705
11:33 ninjax INFO    :    iota: 1.2674119940580868
11:33 ninjax INFO    :    dec: 0.12325388350509693
11:33 ninjax INFO    :    lambda_1: 30.62993417752877
11:33 ninjax INFO    :    lambda_2: 78.6624341872421
11:33 ninjax INFO    :    H1_SNR: 6.175435741270514
11:33 ninjax INFO    :    L1_SNR: 6.624527877439807
11:33 ninjax INFO    :    V1_SNR: 8.838312528728855
11:33 ninjax INFO    :    network_SNR: 12.654491082182005
11:33 ninjax INFO    :    epoch: 126.0
11:33 ninjax INFO    :    gmst: 2.7288901910520846
11:33 ninjax INFO    :    duration: 128.0
11:33 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
11:33 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
11:33 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
11:35 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 143.43627262115479 seconds = 2.390604543685913 minutes
11:35 ninjax INFO    : The priors are not modified after their initialization
11:35 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
11:35 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
11:35 ninjax INFO    : sample: {'M_c': Array([1.99758066, 1.12299342, 1.03391435], dtype=float64), 'q': Array([0.33831226, 0.83457726, 0.17442024], dtype=float64), 's1_z': Array([-0.03608178, -0.03844745, -0.02707479], dtype=float64), 's2_z': Array([0.03356604, 0.03432   , 0.00713437], dtype=float64), 'lambda_1': Array([2081.83536091,  144.35771127, 3136.56584367], dtype=float64), 'lambda_2': Array([3096.16616687,  829.00888183,   76.81302581], dtype=float64), 'cos_iota': Array([ 0.75325672,  0.62296981, -0.25551562], dtype=float64), 'd_L': Array([455.96282983, 967.09311415, 748.19011701], dtype=float64), 't_c': Array([ 0.07460501, -0.07792913,  0.05266111], dtype=float64), 'phase_c': Array([6.13063758, 0.14428371, 6.0709618 ], dtype=float64), 'psi': Array([1.58711589, 3.04954583, 2.24388892], dtype=float64), 'ra': Array([0.21890073, 1.25176391, 2.90934281], dtype=float64), 'sin_dec': Array([ 0.64600067, -0.5882303 ,  0.80875624], dtype=float64)}
11:35 ninjax INFO    : log_prob: [-150.1621627    -7.74421053   -3.15239864]
11:35 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 2.240695714613368, 'mass_2_source': 1.9893440547529546, 's1_z': 0.03866525813882234, 's2_z': 0.021901264231486195, 'cos_iota': 0.29875168464471, 'd_L': 287.3872290580679, 't_c': 0.0578951909061185, 'phase_c': 2.67991399248455, 'psi': 1.1964145732229496, 'ra': 6.06295081443661, 'sin_dec': 0.12294205149087567, 'q': 0.8878242778699721, 'M_c': 1.9566388858202342, 'eta': 0.2491172969589705, 'iota': Array(1.26741199, dtype=float64, weak_type=True), 'dec': Array(0.12325388, dtype=float64, weak_type=True), 'lambda_1': 30.62993417752877, 'lambda_2': 78.6624341872421, 'H1_SNR': 6.175435741270514, 'L1_SNR': 6.624527877439807, 'V1_SNR': 8.838312528728855, 'network_SNR': 12.654491082182005, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
11:35 ninjax INFO    : log_prob at the injection parameters is: 52.261232798318304
11:35 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
11:35 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
11:35 ninjax INFO    : Ninjax setup complete.
11:35 ninjax INFO    : Saving output to ./Aplus/injection_3/
11:35 ninjax INFO    : Using polynomial learning rate scheduler
11:35 ninjax INFO    : The hyperparameters passed to flowMC and jim are
11:35 ninjax INFO    :    n_loop_training: 200
11:35 ninjax INFO    :    n_loop_production: 10
11:35 ninjax INFO    :    n_local_steps: 100
11:35 ninjax INFO    :    n_global_steps: 1000
11:35 ninjax INFO    :    n_epochs: 25
11:35 ninjax INFO    :    n_chains: 1000
11:35 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x150150e63be0>
11:35 ninjax INFO    :    max_samples: 50000
11:35 ninjax INFO    :    momentum: 0.9
11:35 ninjax INFO    :    batch_size: 30000
11:35 ninjax INFO    :    use_global: True
11:35 ninjax INFO    :    keep_quantile: 0.0
11:35 ninjax INFO    :    train_thinning: 10
11:35 ninjax INFO    :    output_thinning: 50
11:35 ninjax INFO    :    n_sample_max: 10000
11:35 ninjax INFO    :    num_layers: 10
11:35 ninjax INFO    :    hidden_size: [128, 128]
11:35 ninjax INFO    :    num_bins: 8
11:35 ninjax INFO    :    save_training_chains: False
11:35 ninjax INFO    :    eps_mass_matrix: 1e-05
11:35 ninjax INFO    :    use_scheduler: True
11:35 ninjax INFO    :    use_temperature: False
11:35 ninjax INFO    :    which_temperature_schedule: exponential
11:35 ninjax INFO    :    starting_temperature: 2.0
11:35 ninjax INFO    :    stop_tempering_iteration: 75
11:35 ninjax INFO    :    stopping_criterion_global_acc: 0.1
11:35 ninjax INFO    :    stopping_criterion_loss: -inf
11:35 ninjax INFO    :    nf_model_kwargs: {}
11:35 ninjax INFO    :    local sampler arg not shown (pretty print)
11:35 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[-4.99364511e-24  2.65191682e-23  1.26451389e-22  1.81199395e-23
  1.13832978e-23  4.10037581e-23  9.97864145e-23 -1.69142843e-23
  3.20562154e-23  9.04039791e-23]
[ 3.12685520e-23  5.62040093e-23 -8.11559701e-24 -6.38261492e-23
  2.42475648e-23  1.61252901e-23  1.72073869e-23  5.37184494e-23
 -4.22508298e-23  1.20977118e-24]
Checking the noise that was generated in inject_signal ifo:
[-2.43267959e-23 -2.21449930e-23  3.88596561e-24  9.36917267e-23
  5.08691728e-23  5.93616972e-23  4.51961903e-23 -1.63720515e-23
  3.42326975e-24  4.51104251e-23]
[-7.84348692e-23 -4.23461991e-24  7.26857227e-23 -1.14085837e-23
 -2.94220188e-23  6.59534933e-23  9.79575668e-25  5.98955928e-23
 -3.15157348e-23  9.21425376e-23]
Checking the noise that was generated in inject_signal ifo:
[ 4.95440695e-23  7.79358464e-24 -3.61730246e-23  5.15625795e-23
  2.58526116e-23 -1.64801231e-23 -1.19539458e-23 -2.34165448e-24
  3.32904360e-23 -6.18303663e-23]
[-2.37344970e-24 -2.73268872e-23 -2.21513306e-24 -1.13392971e-22
  3.03539866e-24  3.90298375e-23 -2.17789727e-23  4.49440038e-23
  2.32144204e-23  4.47460139e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.10956549644470215 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 2.240695714613368, 'mass_2_source': 1.9893440547529546, 's1_z': 0.03866525813882234, 's2_z': 0.021901264231486195, 'cos_iota': 0.29875168464471, 'd_L': 287.3872290580679, 't_c': 0.0578951909061185, 'phase_c': 2.67991399248455, 'psi': 1.1964145732229496, 'ra': 6.06295081443661, 'sin_dec': 0.12294205149087567, 'q': 0.8878242778699721, 'M_c': 1.9566388858202342, 'eta': 0.2491172969589705, 'iota': Array(1.26741199, dtype=float64, weak_type=True), 'dec': Array(0.12325388, dtype=float64, weak_type=True), 'lambda_1': 30.62993417752877, 'lambda_2': 78.6624341872421, 'H1_SNR': 6.175435741270514, 'L1_SNR': 6.624527877439807, 'V1_SNR': 8.838312528728855, 'network_SNR': 12.654491082182005, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5142464637756348 seconds
Time for h_sky_low and h_sky_center: 5.255106687545776 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.696791410446167
Going to compute coefficients . . .
Time for computing coefficients: 122.14079356193542 seconds
Time for computing coefficients: 7.104838848114014 seconds
Time for computing coefficients: 7.084719896316528 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:00<6:39:41, 120.51s/it]Tuning global sampler:   1%|          | 2/200 [02:05<2:52:39, 52.32s/it] Tuning global sampler:   2%|▏         | 3/200 [02:09<1:40:15, 30.54s/it]Tuning global sampler:   2%|▏         | 4/200 [02:14<1:06:17, 20.29s/it]Tuning global sampler:   2%|▎         | 5/200 [02:19<48:34, 14.95s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:24<36:56, 11.43s/it]Tuning global sampler:   4%|▎         | 7/200 [02:28<29:30,  9.17s/it]Tuning global sampler:   4%|▍         | 8/200 [02:33<24:41,  7.71s/it]Tuning global sampler:   4%|▍         | 9/200 [02:38<21:23,  6.72s/it]Tuning global sampler:   5%|▌         | 10/200 [02:42<19:01,  6.01s/it]Tuning global sampler:   6%|▌         | 11/200 [02:47<17:32,  5.57s/it]Tuning global sampler:   6%|▌         | 12/200 [02:51<16:30,  5.27s/it]Tuning global sampler:   6%|▋         | 13/200 [02:56<15:44,  5.05s/it]Tuning global sampler:   7%|▋         | 14/200 [03:00<15:15,  4.92s/it]Tuning global sampler:   8%|▊         | 15/200 [03:05<14:54,  4.83s/it]Tuning global sampler:   8%|▊         | 16/200 [03:10<14:37,  4.77s/it]Tuning global sampler:   8%|▊         | 17/200 [03:14<14:24,  4.72s/it]Tuning global sampler:   9%|▉         | 18/200 [03:19<14:14,  4.69s/it]Tuning global sampler:  10%|▉         | 19/200 [03:23<14:05,  4.67s/it]Tuning global sampler:  10%|█         | 20/200 [03:28<13:58,  4.66s/it]Tuning global sampler:  10%|█         | 21/200 [03:33<13:51,  4.65s/it]Tuning global sampler:  11%|█         | 22/200 [03:37<13:44,  4.63s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:42<13:37,  4.62s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:46<13:21,  4.56s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:52<13:56,  4.78s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:56<13:30,  4.66s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:00<13:11,  4.58s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:05<12:57,  4.52s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:09<12:45,  4.48s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:14<12:41,  4.48s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:18<12:32,  4.45s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:22<12:24,  4.43s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:27<12:15,  4.40s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:31<12:08,  4.39s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:35<12:03,  4.38s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:40<11:58,  4.38s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:44<11:54,  4.38s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:48<11:49,  4.38s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:53<11:45,  4.38s/it]Tuning global sampler:  20%|██        | 40/200 [04:57<11:40,  4.38s/it]Tuning global sampler:  20%|██        | 41/200 [05:02<11:37,  4.38s/it]Tuning global sampler:  21%|██        | 42/200 [05:06<11:32,  4.38s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:13<13:11,  5.04s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:18<13:18,  5.12s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:22<12:37,  4.89s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:27<12:09,  4.74s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:31<11:48,  4.63s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:35<11:32,  4.55s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:40<11:20,  4.51s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:44<11:10,  4.47s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:49<11:01,  4.44s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:53<10:54,  4.42s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:57<10:48,  4.41s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:02<10:43,  4.41s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:06<10:36,  4.39s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:10<10:30,  4.38s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:15<10:28,  4.39s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:19<10:24,  4.39s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:24<10:19,  4.39s/it]Tuning global sampler:  30%|███       | 60/200 [06:28<10:15,  4.40s/it]Tuning global sampler:  30%|███       | 61/200 [06:32<10:10,  4.39s/it]Tuning global sampler:  31%|███       | 62/200 [06:37<10:06,  4.39s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:41<10:02,  4.40s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:47<10:36,  4.68s/it]Tuning global sampler:  32%|███▎      | 65/200 [06:51<10:19,  4.59s/it]Tuning global sampler:  33%|███▎      | 66/200 [06:55<10:05,  4.52s/it]Tuning global sampler:  34%|███▎      | 67/200 [07:00<09:53,  4.46s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:04<09:45,  4.44s/it]Tuning global sampler:  34%|███▍      | 69/200 [07:08<09:39,  4.42s/it]Tuning global sampler:  35%|███▌      | 70/200 [07:13<09:33,  4.41s/it]Tuning global sampler:  36%|███▌      | 71/200 [07:17<09:28,  4.41s/it]Tuning global sampler:  36%|███▌      | 72/200 [07:22<09:24,  4.41s/it]Tuning global sampler:  36%|███▋      | 73/200 [07:26<09:18,  4.40s/it]Tuning global sampler:  37%|███▋      | 74/200 [07:30<09:13,  4.39s/it]Tuning global sampler:  38%|███▊      | 75/200 [07:35<09:09,  4.40s/it]Tuning global sampler:  38%|███▊      | 76/200 [07:39<09:05,  4.40s/it]Tuning global sampler:  38%|███▊      | 77/200 [07:43<08:59,  4.38s/it]Tuning global sampler:  39%|███▉      | 78/200 [07:48<08:53,  4.37s/it]Tuning global sampler:  40%|███▉      | 79/200 [07:52<08:49,  4.37s/it]Tuning global sampler:  40%|████      | 80/200 [07:57<08:45,  4.38s/it]Tuning global sampler:  40%|████      | 81/200 [08:01<08:41,  4.38s/it]Tuning global sampler:  40%|████      | 81/200 [08:05<11:53,  6.00s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.22s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.22s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.22s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.22s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.22s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.22s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.22s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.22s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]
11:44 ninjax INFO    : Saving samples to ./Aplus/injection_3/results_training.npz
11:44 ninjax INFO    : Saving the NF
11:44 ninjax INFO    : Time taken: 524.7167794704437 seconds (8.74527965784073 minutes)
11:44 ninjax INFO    : Creating the final corner plot
11:44 ninjax INFO    : Dumping the final production chains
11:44 ninjax INFO    : Chains shape is: (13, 220000)
11:44 ninjax INFO    : Key: M_c: ESS = 27711, Rhat = 1.0235353027367498
11:44 ninjax INFO    : Key: q: ESS = 23529, Rhat = 1.0276425306906087
11:44 ninjax INFO    : Key: s1_z: ESS = 24425, Rhat = 1.026044061258992
11:44 ninjax INFO    : Key: s2_z: ESS = 24508, Rhat = 1.0259542808800743
11:44 ninjax INFO    : Key: lambda_1: ESS = 25710, Rhat = 1.0246464369337123
11:44 ninjax INFO    : Key: lambda_2: ESS = 28020, Rhat = 1.0233099800174499
11:44 ninjax INFO    : Key: cos_iota: ESS = 10427, Rhat = 1.0596869036533234
11:44 ninjax INFO    : Key: d_L: ESS = 10543, Rhat = 1.0591543768773208
11:44 ninjax INFO    : Key: t_c: ESS = 12051, Rhat = 1.050937303217588
11:44 ninjax INFO    : Key: phase_c: ESS = 23213, Rhat = 1.0272083014889604
11:44 ninjax INFO    : Key: psi: ESS = 30299, Rhat = 1.022525715776699
11:44 ninjax INFO    : Key: ra: ESS = 9607, Rhat = 1.0641584770526615
11:44 ninjax INFO    : Key: sin_dec: ESS = 9699, Rhat = 1.063408938301603
11:44 ninjax INFO    : Key: eta: ESS = 23529, Rhat = 1.0276425306906087
11:44 ninjax INFO    : Key: iota: ESS = 10427, Rhat = 1.0596869036533234
11:44 ninjax INFO    : Key: dec: ESS = 9699, Rhat = 1.0634122613393
11:44 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.786 +/- 0.335
q: 0.706 +/- 0.242
s1_z: 0.010 +/- 0.029
s2_z: 0.008 +/- 0.028
lambda_1: 2023.983 +/- 1513.182
lambda_2: 2026.140 +/- 1513.914
cos_iota: 0.356 +/- 0.418
d_L: 765.432 +/- 166.376
t_c: 0.035 +/- 0.046
phase_c: 3.106 +/- 1.757
psi: 1.672 +/- 0.885
ra: 4.849 +/- 1.802
sin_dec: 0.039 +/- 0.381
Log probability: 4.317 +/- 26.177
Local acceptance: 0.995 +/- 0.068
Global acceptance: 0.023 +/- 0.149
Max loss: 22.803, Min loss: 8.578
Production summary
==========
M_c: 1.956 +/- 0.000
q: 0.889 +/- 0.074
s1_z: 0.032 +/- 0.014
s2_z: 0.030 +/- 0.015
lambda_1: 254.953 +/- 257.961
lambda_2: 363.557 +/- 351.394
cos_iota: 0.632 +/- 0.252
d_L: 505.801 +/- 151.859
t_c: 0.057 +/- 0.001
phase_c: 3.218 +/- 1.778
psi: 1.802 +/- 0.872
ra: 6.030 +/- 0.022
sin_dec: 0.015 +/- 0.068
Log probability: 46.412 +/- 2.661
Local acceptance: 0.992 +/- 0.092
Global acceptance: 0.103 +/- 0.305
DONE

JOB STATISTICS
==============
Job ID: 10923035
Cluster: snellius
User/Group: twouters2/twouters2
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 00:10:40
CPU Efficiency: 5.54% of 03:12:32 core-walltime
Job Wall-clock time: 00:12:02
Memory Utilized: 4.28 GB
Memory Efficiency: 42.83% of 10.00 GB (10.00 GB/node)
