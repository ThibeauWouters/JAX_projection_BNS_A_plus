Wed Apr  2 11:33:01 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
11:33 ninjax INFO    : Checking and setting outdir
11:33 ninjax INFO    : Found generation prior file ./Aplus/injection_24/generation_prior.prior
11:33 ninjax INFO    : The outdir is set to ./Aplus/injection_24
11:33 ninjax INFO    : Loading the given config
11:33 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
11:33 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
11:33 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/jester_hard/Aplus/injection_24/complete_config.json
11:33 ninjax INFO    : No seed specified. Generating a random seed: 239439
11:33 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 992564
11:33 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 40409
11:33 ninjax INFO    : Loading the priors
11:33 ninjax INFO    : Setting up the prior
11:33 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
11:33 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
11:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
11:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
11:33 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
11:33 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
11:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
11:33 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
11:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
11:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
11:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
11:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
11:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
11:33 ninjax INFO    : Setting up the generation prior
11:33 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.4, naming=["mass_1_source"])
11:33 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.4, naming=["mass_2_source"])
11:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
11:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
11:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
11:33 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
11:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
11:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
11:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
11:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
11:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
11:33 ninjax INFO    : Finished prior setup
11:33 ninjax INFO    : Setting the transforms
11:33 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
11:33 ninjax INFO    : transforms_str_list has 3 elements
11:33 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
11:33 ninjax INFO    : Setting the likelihood
11:33 ninjax INFO    : GW likelihood provided, setting up the GW pipe
11:33 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz
11:33 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz for BNS injections
11:33 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
11:33 ninjax INFO    : self.is_BNS_run is True
11:33 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
11:33 ninjax INFO    : GW run is an injection
11:33 ninjax INFO    : Setting up GW injection . . . 
11:33 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
11:33 ninjax INFO    : Generating new injection
11:33 ninjax INFO    : Sanity check: generated parameters:
11:33 ninjax INFO    : {'mass_1_source': 1.223970273432132, 'mass_2_source': 1.7746041013509382, 's1_z': 0.0450406426857833, 's2_z': -0.020271366282890214, 'cos_iota': 0.4548368930033986, 'd_L': 258.7648938529114, 't_c': -0.028458796822043025, 'phase_c': 4.039261259814565, 'psi': 2.2245964081672875, 'ra': 3.9392370276308286, 'sin_dec': -0.6882498143813018}
11:33 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz . . . 
11:33 ninjax INFO    : Injected lambda_1: 162.42046727592356
11:33 ninjax INFO    : Injected lambda_2: 1245.0549723217014
11:33 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.353377087276684 is 256.0
11:33 ninjax INFO    : After transforms, the injection parameters are:
11:33 ninjax INFO    : {'mass_1_source': 1.7746041013509382, 'mass_2_source': 1.223970273432132, 's1_z': 0.0450406426857833, 's2_z': -0.020271366282890214, 'cos_iota': 0.4548368930033986, 'd_L': 258.7648938529114, 't_c': -0.028458796822043025, 'phase_c': 4.039261259814565, 'psi': 2.2245964081672875, 'ra': 3.9392370276308286, 'sin_dec': -0.6882498143813018, 'q': 0.6897145523896684, 'M_c': 1.353377087276684, 'eta': 0.24156983383072875, 'iota': Array(1.09860727, dtype=float64, weak_type=True), 'dec': Array(-0.75907381, dtype=float64, weak_type=True), 'lambda_1': 162.42046727592356, 'lambda_2': 1245.0549723217014}
11:33 ninjax INFO    : The trial injection parameters are {'M_c': 1.353377087276684, 'eta': 0.24156983383072875, 's1_z': 0.0450406426857833, 's2_z': -0.020271366282890214, 'lambda_1': 162.42046727592356, 'lambda_2': 1245.0549723217014, 'd_L': 258.7648938529114, 'phase_c': 4.039261259814565, 'iota': 1.0986072692455227, 't_c': -0.028458796822043025, 'psi': 2.2245964081672875, 'ra': 3.9392370276308286, 'dec': -0.759073810727193}
11:33 ninjax INFO    : Injecting signals . . .
11:33 ninjax INFO    : self.ifos
11:33 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
11:33 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
11:33 ninjax INFO    : [-1.29169873e-22-1.59741005e-22j  9.42805996e-23+2.34260704e-24j
  1.90943054e-23+4.52696941e-23j ...
 -1.13404213e-23+2.26224349e-23j -1.09294525e-23-1.04296124e-23j
  3.18115322e-23-2.72492472e-23j]
11:33 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
11:33 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
11:33 ninjax INFO    : [-6.32638500e-23+1.46632420e-24j -2.11480193e-23+4.43402400e-23j
  3.69007542e-23-4.67594314e-23j ...
 -1.96115883e-23+3.87194543e-23j  3.00154031e-24+8.20992404e-24j
 -8.06489623e-24+3.85276899e-23j]
11:33 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
11:33 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
11:33 ninjax INFO    : [-3.17530915e-23+1.33172425e-22j  1.39743716e-23-1.13781117e-22j
  4.35528168e-23+8.23908977e-24j ...
  5.79947987e-23+1.36666683e-24j  5.10852858e-24-9.40431168e-23j
  2.98454539e-24+2.13497590e-23j]
11:33 ninjax INFO    : [1.43183556e-46 1.43058540e-46 1.42935095e-46 ... 6.39793039e-47
 6.39795354e-47 6.39797668e-47]
11:33 ninjax INFO    : SNR for ifo H1 is 14.908456009574488
11:33 ninjax INFO    : SNR for ifo L1 is 14.090697567264474
11:33 ninjax INFO    : SNR for ifo V1 is 2.925287994549765
11:33 ninjax INFO    : The network SNR is 20.721175844352743
11:33 ninjax INFO    : Network SNR passes threshold
11:33 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
11:33 ninjax INFO    :    mass_1_source: 1.7746041013509382
11:33 ninjax INFO    :    mass_2_source: 1.223970273432132
11:33 ninjax INFO    :    s1_z: 0.0450406426857833
11:33 ninjax INFO    :    s2_z: -0.020271366282890214
11:33 ninjax INFO    :    cos_iota: 0.4548368930033986
11:33 ninjax INFO    :    d_L: 258.7648938529114
11:33 ninjax INFO    :    t_c: -0.028458796822043025
11:33 ninjax INFO    :    phase_c: 4.039261259814565
11:33 ninjax INFO    :    psi: 2.2245964081672875
11:33 ninjax INFO    :    ra: 3.9392370276308286
11:33 ninjax INFO    :    sin_dec: -0.6882498143813018
11:33 ninjax INFO    :    q: 0.6897145523896684
11:33 ninjax INFO    :    M_c: 1.353377087276684
11:33 ninjax INFO    :    eta: 0.24156983383072875
11:33 ninjax INFO    :    iota: 1.0986072692455227
11:33 ninjax INFO    :    dec: -0.759073810727193
11:33 ninjax INFO    :    lambda_1: 162.42046727592356
11:33 ninjax INFO    :    lambda_2: 1245.0549723217014
11:33 ninjax INFO    :    H1_SNR: 14.908456009574488
11:33 ninjax INFO    :    L1_SNR: 14.090697567264474
11:33 ninjax INFO    :    V1_SNR: 2.925287994549765
11:33 ninjax INFO    :    network_SNR: 20.721175844352743
11:33 ninjax INFO    :    epoch: 254.0
11:33 ninjax INFO    :    gmst: 2.7288901910520846
11:33 ninjax INFO    :    duration: 256.0
11:33 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
11:33 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
11:33 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
11:36 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 184.68106889724731 seconds = 3.078017814954122 minutes
11:36 ninjax INFO    : The priors are not modified after their initialization
11:36 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
11:36 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
11:36 ninjax INFO    : sample: {'M_c': Array([2.41541165, 1.78680235, 1.73945689], dtype=float64), 'q': Array([0.20629227, 0.17922547, 0.95892742], dtype=float64), 's1_z': Array([ 0.03610516,  0.0319421 , -0.04249743], dtype=float64), 's2_z': Array([ 0.0052553 ,  0.02495565, -0.00937058], dtype=float64), 'lambda_1': Array([4819.62497912, 4279.48377036, 2738.92250825], dtype=float64), 'lambda_2': Array([2320.29249709, 2667.66560891, 1415.57767725], dtype=float64), 'cos_iota': Array([-0.66081865,  0.89073532, -0.91915327], dtype=float64), 'd_L': Array([826.76279403, 807.43332135, 977.5267145 ], dtype=float64), 't_c': Array([-0.04014358, -0.06283318,  0.04648365], dtype=float64), 'phase_c': Array([3.31248302, 5.23551079, 5.04016408], dtype=float64), 'psi': Array([2.54719923, 0.45801558, 1.05587905], dtype=float64), 'ra': Array([2.54992907, 1.77995321, 5.30112717], dtype=float64), 'sin_dec': Array([-0.66878472,  0.14490287, -0.2958551 ], dtype=float64)}
11:36 ninjax INFO    : log_prob: [-34.58909798 -25.45346238 -26.00360622]
11:36 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.7746041013509382, 'mass_2_source': 1.223970273432132, 's1_z': 0.0450406426857833, 's2_z': -0.020271366282890214, 'cos_iota': 0.4548368930033986, 'd_L': 258.7648938529114, 't_c': -0.028458796822043025, 'phase_c': 4.039261259814565, 'psi': 2.2245964081672875, 'ra': 3.9392370276308286, 'sin_dec': -0.6882498143813018, 'q': 0.6897145523896684, 'M_c': 1.353377087276684, 'eta': 0.24156983383072875, 'iota': Array(1.09860727, dtype=float64, weak_type=True), 'dec': Array(-0.75907381, dtype=float64, weak_type=True), 'lambda_1': 162.42046727592356, 'lambda_2': 1245.0549723217014, 'H1_SNR': 14.908456009574488, 'L1_SNR': 14.090697567264474, 'V1_SNR': 2.925287994549765, 'network_SNR': 20.721175844352743, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
11:36 ninjax INFO    : log_prob at the injection parameters is: 179.54985521976715
11:36 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
11:36 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
11:36 ninjax INFO    : Ninjax setup complete.
11:36 ninjax INFO    : Saving output to ./Aplus/injection_24/
11:36 ninjax INFO    : Using polynomial learning rate scheduler
11:36 ninjax INFO    : The hyperparameters passed to flowMC and jim are
11:36 ninjax INFO    :    n_loop_training: 200
11:36 ninjax INFO    :    n_loop_production: 10
11:36 ninjax INFO    :    n_local_steps: 100
11:36 ninjax INFO    :    n_global_steps: 1000
11:36 ninjax INFO    :    n_epochs: 25
11:36 ninjax INFO    :    n_chains: 1000
11:36 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x14b8cb7b64d0>
11:36 ninjax INFO    :    max_samples: 50000
11:36 ninjax INFO    :    momentum: 0.9
11:36 ninjax INFO    :    batch_size: 30000
11:36 ninjax INFO    :    use_global: True
11:36 ninjax INFO    :    keep_quantile: 0.0
11:36 ninjax INFO    :    train_thinning: 10
11:36 ninjax INFO    :    output_thinning: 50
11:36 ninjax INFO    :    n_sample_max: 10000
11:36 ninjax INFO    :    num_layers: 10
11:36 ninjax INFO    :    hidden_size: [128, 128]
11:36 ninjax INFO    :    num_bins: 8
11:36 ninjax INFO    :    save_training_chains: False
11:36 ninjax INFO    :    eps_mass_matrix: 1e-05
11:36 ninjax INFO    :    use_scheduler: True
11:36 ninjax INFO    :    use_temperature: False
11:36 ninjax INFO    :    which_temperature_schedule: exponential
11:36 ninjax INFO    :    starting_temperature: 2.0
11:36 ninjax INFO    :    stop_tempering_iteration: 75
11:36 ninjax INFO    :    stopping_criterion_global_acc: 0.1
11:36 ninjax INFO    :    stopping_criterion_loss: -inf
11:36 ninjax INFO    :    nf_model_kwargs: {}
11:36 ninjax INFO    :    local sampler arg not shown (pretty print)
11:36 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[-1.22305932e-22  8.74445603e-23  2.55743401e-23 -5.55843503e-23
 -1.85016817e-23 -1.06742960e-22  4.08160302e-23 -4.63807091e-23
 -5.46461212e-23  3.10833590e-23]
[-1.60382041e-22  1.46429842e-24  4.76128257e-23  3.33093462e-23
 -1.66196700e-23 -8.32959372e-23  8.45724342e-24 -2.18192062e-23
  1.81778840e-24  7.78677480e-23]
Checking the noise that was generated in inject_signal ifo:
[-6.97703324e-23 -1.48769263e-23  3.11644136e-23  2.50882344e-23
  4.73044333e-23  6.39708267e-23  9.62112395e-23 -1.98436642e-23
 -2.00678166e-23 -2.31501917e-24]
[ 1.12041123e-24  4.61031705e-23 -4.98431797e-23 -7.62686780e-24
  1.04330271e-23  3.36419755e-23 -1.76072754e-23 -3.08028083e-23
  2.93262501e-23 -6.85199202e-23]
Checking the noise that was generated in inject_signal ifo:
[-3.05993710e-23  1.31279889e-23  4.40535495e-23 -1.75681733e-24
  6.08170656e-23  6.07249173e-23  2.44341991e-23  6.12090156e-23
  4.53456337e-23 -2.49054865e-23]
[ 1.34443429e-22 -1.15274037e-22  9.88015414e-24 -5.37812697e-23
 -6.79865512e-23 -8.41408846e-23 -9.96559151e-24  1.30911095e-22
 -3.23633406e-23  3.90902448e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.1811983585357666 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.7746041013509382, 'mass_2_source': 1.223970273432132, 's1_z': 0.0450406426857833, 's2_z': -0.020271366282890214, 'cos_iota': 0.4548368930033986, 'd_L': 258.7648938529114, 't_c': -0.028458796822043025, 'phase_c': 4.039261259814565, 'psi': 2.2245964081672875, 'ra': 3.9392370276308286, 'sin_dec': -0.6882498143813018, 'q': 0.6897145523896684, 'M_c': 1.353377087276684, 'eta': 0.24156983383072875, 'iota': Array(1.09860727, dtype=float64, weak_type=True), 'dec': Array(-0.75907381, dtype=float64, weak_type=True), 'lambda_1': 162.42046727592356, 'lambda_2': 1245.0549723217014, 'H1_SNR': 14.908456009574488, 'L1_SNR': 14.090697567264474, 'V1_SNR': 2.925287994549765, 'network_SNR': 20.721175844352743, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5144636631011963 seconds
Time for h_sky_low and h_sky_center: 5.511229515075684 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.7514469623565674
Going to compute coefficients . . .
Time for computing coefficients: 162.87645959854126 seconds
Time for computing coefficients: 7.21935772895813 seconds
Time for computing coefficients: 7.089472532272339 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:02<6:46:28, 122.56s/it]Tuning global sampler:   1%|          | 2/200 [02:07<2:55:24, 53.15s/it] Tuning global sampler:   2%|▏         | 3/200 [02:11<1:41:46, 31.00s/it]Tuning global sampler:   2%|▏         | 4/200 [02:16<1:07:13, 20.58s/it]Tuning global sampler:   2%|▎         | 5/200 [02:20<48:09, 14.82s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:25<36:40, 11.34s/it]Tuning global sampler:   4%|▎         | 7/200 [02:30<29:20,  9.12s/it]Tuning global sampler:   4%|▍         | 8/200 [02:34<24:35,  7.68s/it]Tuning global sampler:   4%|▍         | 9/200 [02:39<21:20,  6.70s/it]Tuning global sampler:   5%|▌         | 10/200 [02:43<19:00,  6.00s/it]Tuning global sampler:   6%|▌         | 11/200 [02:48<17:32,  5.57s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:30,  5.27s/it]Tuning global sampler:   6%|▋         | 13/200 [02:57<15:46,  5.06s/it]Tuning global sampler:   7%|▋         | 14/200 [03:02<15:17,  4.93s/it]Tuning global sampler:   8%|▊         | 15/200 [03:07<15:36,  5.06s/it]Tuning global sampler:   8%|▊         | 16/200 [03:12<15:07,  4.93s/it]Tuning global sampler:   8%|▊         | 17/200 [03:16<14:46,  4.85s/it]Tuning global sampler:   9%|▉         | 18/200 [03:22<15:25,  5.09s/it]Tuning global sampler:  10%|▉         | 19/200 [03:27<14:56,  4.95s/it]Tuning global sampler:  10%|█         | 20/200 [03:31<14:34,  4.86s/it]Tuning global sampler:  10%|█         | 21/200 [03:36<14:17,  4.79s/it]Tuning global sampler:  11%|█         | 22/200 [03:40<14:02,  4.74s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:45<13:51,  4.70s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:49<13:31,  4.61s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:54<13:15,  4.54s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:58<13:03,  4.50s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:03<12:53,  4.47s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:07<12:44,  4.45s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:11<12:37,  4.43s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:16<12:36,  4.45s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:20<12:28,  4.43s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:25<12:21,  4.41s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:29<12:13,  4.39s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:33<12:07,  4.38s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:38<12:02,  4.38s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:42<11:58,  4.38s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:47<12:43,  4.68s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:52<12:24,  4.59s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:56<12:09,  4.53s/it]Tuning global sampler:  20%|██        | 40/200 [05:01<11:58,  4.49s/it]Tuning global sampler:  20%|██        | 41/200 [05:05<11:49,  4.46s/it]Tuning global sampler:  21%|██        | 42/200 [05:09<11:41,  4.44s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:14<11:34,  4.43s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:18<11:27,  4.41s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:23<11:20,  4.39s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:27<11:16,  4.40s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:31<11:11,  4.39s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:36<11:07,  4.39s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:40<11:03,  4.39s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:45<10:59,  4.40s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:49<10:55,  4.40s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:53<10:51,  4.41s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:58<10:46,  4.40s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:02<10:42,  4.40s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:06<10:35,  4.39s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:11<10:30,  4.38s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:15<10:27,  4.39s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:21<11:06,  4.70s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:25<10:49,  4.61s/it]Tuning global sampler:  30%|███       | 60/200 [06:29<10:35,  4.54s/it]Tuning global sampler:  30%|███       | 61/200 [06:34<10:25,  4.50s/it]Tuning global sampler:  31%|███       | 62/200 [06:38<10:16,  4.47s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:43<10:09,  4.45s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:47<10:02,  4.43s/it]Tuning global sampler:  32%|███▎      | 65/200 [06:51<09:56,  4.42s/it]Tuning global sampler:  33%|███▎      | 66/200 [06:56<09:49,  4.40s/it]Tuning global sampler:  34%|███▎      | 67/200 [07:00<09:43,  4.39s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:05<09:39,  4.39s/it]Tuning global sampler:  34%|███▍      | 69/200 [07:09<09:36,  4.40s/it]Tuning global sampler:  35%|███▌      | 70/200 [07:13<09:31,  4.40s/it]Tuning global sampler:  36%|███▌      | 71/200 [07:18<09:27,  4.40s/it]Tuning global sampler:  36%|███▌      | 72/200 [07:22<09:22,  4.40s/it]Tuning global sampler:  36%|███▋      | 73/200 [07:27<09:18,  4.40s/it]Tuning global sampler:  37%|███▋      | 74/200 [07:31<09:14,  4.40s/it]Tuning global sampler:  38%|███▊      | 75/200 [07:35<09:10,  4.40s/it]Tuning global sampler:  38%|███▊      | 76/200 [07:40<09:05,  4.40s/it]Tuning global sampler:  38%|███▊      | 77/200 [07:44<08:59,  4.38s/it]Tuning global sampler:  39%|███▉      | 78/200 [07:48<08:53,  4.37s/it]Tuning global sampler:  40%|███▉      | 79/200 [07:54<09:27,  4.69s/it]Tuning global sampler:  40%|████      | 80/200 [07:58<09:12,  4.60s/it]Tuning global sampler:  40%|████      | 81/200 [08:03<09:00,  4.54s/it]Tuning global sampler:  41%|████      | 82/200 [08:07<08:50,  4.49s/it]Tuning global sampler:  41%|████      | 82/200 [08:11<11:47,  6.00s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.21s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.21s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.21s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.21s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.21s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.21s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.21s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.21s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]
11:45 ninjax INFO    : Saving samples to ./Aplus/injection_24/results_training.npz
11:45 ninjax INFO    : Saving the NF
11:45 ninjax INFO    : Time taken: 531.220189332962 seconds (8.853669822216034 minutes)
11:45 ninjax INFO    : Creating the final corner plot
11:45 ninjax INFO    : Dumping the final production chains
11:45 ninjax INFO    : Chains shape is: (13, 220000)
11:45 ninjax INFO    : Key: M_c: ESS = 35525, Rhat = 1.018489328041836
11:45 ninjax INFO    : Key: q: ESS = 26122, Rhat = 1.0248179013688299
11:45 ninjax INFO    : Key: s1_z: ESS = 34372, Rhat = 1.019772267247907
11:45 ninjax INFO    : Key: s2_z: ESS = 27699, Rhat = 1.0232920644510666
11:45 ninjax INFO    : Key: lambda_1: ESS = 36053, Rhat = 1.018625126916443
11:45 ninjax INFO    : Key: lambda_2: ESS = 39322, Rhat = 1.0167535303069524
11:45 ninjax INFO    : Key: cos_iota: ESS = 20803, Rhat = 1.029773553553206
11:45 ninjax INFO    : Key: d_L: ESS = 19869, Rhat = 1.0310438871635577
11:45 ninjax INFO    : Key: t_c: ESS = 22273, Rhat = 1.0269334164074182
11:45 ninjax INFO    : Key: phase_c: ESS = 25388, Rhat = 1.0252750993182755
11:45 ninjax INFO    : Key: psi: ESS = 28677, Rhat = 1.0218434503674914
11:45 ninjax INFO    : Key: ra: ESS = 15126, Rhat = 1.0389613119425152
11:45 ninjax INFO    : Key: sin_dec: ESS = 15599, Rhat = 1.037902924099874
11:45 ninjax INFO    : Key: eta: ESS = 26122, Rhat = 1.0248179013688299
11:45 ninjax INFO    : Key: iota: ESS = 20803, Rhat = 1.029773553553206
11:45 ninjax INFO    : Key: dec: ESS = 15599, Rhat = 1.037902924099874
11:45 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.371 +/- 0.143
q: 0.744 +/- 0.206
s1_z: 0.008 +/- 0.026
s2_z: 0.004 +/- 0.026
lambda_1: 1784.490 +/- 1459.162
lambda_2: 1867.349 +/- 1350.798
cos_iota: 0.281 +/- 0.528
d_L: 535.106 +/- 235.726
t_c: -0.012 +/- 0.027
phase_c: 3.542 +/- 1.779
psi: 1.643 +/- 0.949
ra: 2.793 +/- 1.497
sin_dec: -0.143 +/- 0.609
Log probability: 96.876 +/- 77.090
Local acceptance: 0.727 +/- 0.445
Global acceptance: 0.008 +/- 0.091
Max loss: 22.806, Min loss: 0.380
Production summary
==========
M_c: 1.353 +/- 0.000
q: 0.838 +/- 0.102
s1_z: 0.012 +/- 0.024
s2_z: 0.005 +/- 0.027
lambda_1: 523.442 +/- 389.854
lambda_2: 918.435 +/- 654.205
cos_iota: 0.692 +/- 0.279
d_L: 346.842 +/- 77.527
t_c: -0.028 +/- 0.003
phase_c: 3.236 +/- 1.781
psi: 1.484 +/- 0.882
ra: 3.894 +/- 0.183
sin_dec: -0.654 +/- 0.088
Log probability: 176.516 +/- 2.439
Local acceptance: 0.465 +/- 0.499
Global acceptance: 0.105 +/- 0.307
DONE

JOB STATISTICS
==============
Job ID: 10923057
Cluster: snellius
User/Group: twouters2/twouters2
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 00:11:30
CPU Efficiency: 5.60% of 03:25:20 core-walltime
Job Wall-clock time: 00:12:50
Memory Utilized: 4.92 GB
Memory Efficiency: 49.15% of 10.00 GB (10.00 GB/node)
