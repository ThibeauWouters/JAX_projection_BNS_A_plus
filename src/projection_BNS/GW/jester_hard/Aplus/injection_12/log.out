Wed Apr  2 11:33:00 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
11:33 ninjax INFO    : Checking and setting outdir
11:33 ninjax INFO    : Found generation prior file ./Aplus/injection_12/generation_prior.prior
11:33 ninjax INFO    : The outdir is set to ./Aplus/injection_12
11:33 ninjax INFO    : Loading the given config
11:33 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
11:33 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
11:33 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/jester_hard/Aplus/injection_12/complete_config.json
11:33 ninjax INFO    : No seed specified. Generating a random seed: 730096
11:33 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 800312
11:33 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 828477
11:33 ninjax INFO    : Loading the priors
11:33 ninjax INFO    : Setting up the prior
11:33 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
11:33 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
11:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
11:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
11:33 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
11:33 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
11:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
11:33 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
11:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
11:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
11:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
11:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
11:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
11:33 ninjax INFO    : Setting up the generation prior
11:33 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.4, naming=["mass_1_source"])
11:33 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.4, naming=["mass_2_source"])
11:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
11:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
11:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
11:33 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
11:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
11:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
11:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
11:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
11:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
11:33 ninjax INFO    : Finished prior setup
11:33 ninjax INFO    : Setting the transforms
11:33 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
11:33 ninjax INFO    : transforms_str_list has 3 elements
11:33 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
11:33 ninjax INFO    : Setting the likelihood
11:33 ninjax INFO    : GW likelihood provided, setting up the GW pipe
11:33 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz
11:33 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz for BNS injections
11:33 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
11:33 ninjax INFO    : self.is_BNS_run is True
11:33 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
11:33 ninjax INFO    : GW run is an injection
11:33 ninjax INFO    : Setting up GW injection . . . 
11:33 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
11:33 ninjax INFO    : Generating new injection
11:33 ninjax INFO    : Sanity check: generated parameters:
11:33 ninjax INFO    : {'mass_1_source': 1.0026802229442637, 'mass_2_source': 1.3465992610647404, 's1_z': 0.014822784703905259, 's2_z': 0.040937493866096714, 'cos_iota': 0.6735659489045673, 'd_L': 166.1951281452067, 't_c': -0.09763375036992877, 'phase_c': 3.0391945105603773, 'psi': 2.111245879850297, 'ra': 3.329479011987352, 'sin_dec': 0.06247559399780522}
11:33 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_hard.npz . . . 
11:33 ninjax INFO    : Injected lambda_1: 754.4551391017283
11:33 ninjax INFO    : Injected lambda_2: 3391.173233812704
11:33 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.0472823356134089 is 256.0
11:33 ninjax INFO    : After transforms, the injection parameters are:
11:33 ninjax INFO    : {'mass_1_source': 1.3465992610647404, 'mass_2_source': 1.0026802229442637, 's1_z': 0.014822784703905259, 's2_z': 0.040937493866096714, 'cos_iota': 0.6735659489045673, 'd_L': 166.1951281452067, 't_c': -0.09763375036992877, 'phase_c': 3.0391945105603773, 'psi': 2.111245879850297, 'ra': 3.329479011987352, 'sin_dec': 0.06247559399780522, 'q': 0.7446017920368203, 'M_c': 1.0472823356134089, 'eta': 0.24464224227079265, 'iota': Array(0.83177354, dtype=float64, weak_type=True), 'dec': Array(0.06251631, dtype=float64, weak_type=True), 'lambda_1': 754.4551391017283, 'lambda_2': 3391.173233812704}
11:33 ninjax INFO    : The trial injection parameters are {'M_c': 1.0472823356134089, 'eta': 0.24464224227079265, 's1_z': 0.014822784703905259, 's2_z': 0.040937493866096714, 'lambda_1': 754.4551391017283, 'lambda_2': 3391.173233812704, 'd_L': 166.1951281452067, 'phase_c': 3.0391945105603773, 'iota': 0.8317735395361561, 't_c': -0.09763375036992877, 'psi': 2.111245879850297, 'ra': 3.329479011987352, 'dec': 0.06251630800493645}
11:33 ninjax INFO    : Injecting signals . . .
11:33 ninjax INFO    : self.ifos
11:33 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
11:33 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
11:33 ninjax INFO    : [-8.83791871e-23+5.07682858e-23j  9.35882230e-25+3.29249730e-23j
 -3.34524096e-23+1.90067242e-23j ...
  1.05579862e-23-1.28259283e-23j -5.59724078e-25+2.08605515e-23j
  2.44560775e-23+3.27183502e-24j]
11:33 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
11:33 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
11:33 ninjax INFO    : [-7.08107282e-23-4.04829630e-23j  2.16318105e-23-1.59552935e-23j
  1.24483587e-22-9.21625378e-23j ...
  6.82542734e-24+3.80941512e-24j -3.62857523e-23-3.33992694e-23j
 -1.30064797e-23-4.79345348e-23j]
11:33 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
11:33 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
11:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
11:33 ninjax INFO    : [-1.71639840e-22+1.98256366e-24j  4.48048211e-23-2.31419861e-23j
 -2.62582737e-23-6.86090056e-23j ...
  1.07420950e-23+2.97836703e-23j  5.66991950e-23-2.67679379e-23j
 -4.60933937e-23-5.04308034e-23j]
11:33 ninjax INFO    : [1.43183556e-46 1.43058540e-46 1.42935095e-46 ... 6.39793039e-47
 6.39795354e-47 6.39797668e-47]
11:33 ninjax INFO    : SNR for ifo H1 is 14.097396565407244
11:33 ninjax INFO    : SNR for ifo L1 is 14.001103584010583
11:33 ninjax INFO    : SNR for ifo V1 is 12.947602478983491
11:33 ninjax INFO    : The network SNR is 23.715140763789055
11:33 ninjax INFO    : Network SNR passes threshold
11:33 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
11:33 ninjax INFO    :    mass_1_source: 1.3465992610647404
11:33 ninjax INFO    :    mass_2_source: 1.0026802229442637
11:33 ninjax INFO    :    s1_z: 0.014822784703905259
11:33 ninjax INFO    :    s2_z: 0.040937493866096714
11:33 ninjax INFO    :    cos_iota: 0.6735659489045673
11:33 ninjax INFO    :    d_L: 166.1951281452067
11:33 ninjax INFO    :    t_c: -0.09763375036992877
11:33 ninjax INFO    :    phase_c: 3.0391945105603773
11:33 ninjax INFO    :    psi: 2.111245879850297
11:33 ninjax INFO    :    ra: 3.329479011987352
11:33 ninjax INFO    :    sin_dec: 0.06247559399780522
11:33 ninjax INFO    :    q: 0.7446017920368203
11:33 ninjax INFO    :    M_c: 1.0472823356134089
11:33 ninjax INFO    :    eta: 0.24464224227079265
11:33 ninjax INFO    :    iota: 0.8317735395361561
11:33 ninjax INFO    :    dec: 0.06251630800493645
11:33 ninjax INFO    :    lambda_1: 754.4551391017283
11:33 ninjax INFO    :    lambda_2: 3391.173233812704
11:33 ninjax INFO    :    H1_SNR: 14.097396565407244
11:33 ninjax INFO    :    L1_SNR: 14.001103584010583
11:33 ninjax INFO    :    V1_SNR: 12.947602478983491
11:33 ninjax INFO    :    network_SNR: 23.715140763789055
11:33 ninjax INFO    :    epoch: 254.0
11:33 ninjax INFO    :    gmst: 2.7288901910520846
11:33 ninjax INFO    :    duration: 256.0
11:33 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
11:33 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
11:33 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
11:36 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 194.20131921768188 seconds = 3.2366886536280313 minutes
11:36 ninjax INFO    : The priors are not modified after their initialization
11:36 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
11:36 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
11:36 ninjax INFO    : sample: {'M_c': Array([1.67969058, 2.56989327, 2.44316099], dtype=float64), 'q': Array([0.65195985, 0.71763981, 0.87426452], dtype=float64), 's1_z': Array([ 0.01427049, -0.03914527,  0.0440688 ], dtype=float64), 's2_z': Array([-0.00103727,  0.04718193,  0.04822854], dtype=float64), 'lambda_1': Array([4468.84383065,  818.56654169,   77.85825214], dtype=float64), 'lambda_2': Array([3357.4943891 ,  464.93377463, 3504.23489275], dtype=float64), 'cos_iota': Array([-0.90542077, -0.27745797,  0.5829705 ], dtype=float64), 'd_L': Array([770.14303552, 870.3749565 , 985.85114619], dtype=float64), 't_c': Array([ 0.03048108,  0.01454382, -0.00739241], dtype=float64), 'phase_c': Array([5.70785078, 2.27355746, 5.61036899], dtype=float64), 'psi': Array([1.74813398, 0.89869813, 0.97141589], dtype=float64), 'ra': Array([6.15139103, 2.43311448, 0.47141142], dtype=float64), 'sin_dec': Array([0.45600091, 0.59694002, 0.93549745], dtype=float64)}
11:36 ninjax INFO    : log_prob: [-45.70515359 -18.93220895 -35.56700677]
11:36 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.3465992610647404, 'mass_2_source': 1.0026802229442637, 's1_z': 0.014822784703905259, 's2_z': 0.040937493866096714, 'cos_iota': 0.6735659489045673, 'd_L': 166.1951281452067, 't_c': -0.09763375036992877, 'phase_c': 3.0391945105603773, 'psi': 2.111245879850297, 'ra': 3.329479011987352, 'sin_dec': 0.06247559399780522, 'q': 0.7446017920368203, 'M_c': 1.0472823356134089, 'eta': 0.24464224227079265, 'iota': Array(0.83177354, dtype=float64, weak_type=True), 'dec': Array(0.06251631, dtype=float64, weak_type=True), 'lambda_1': 754.4551391017283, 'lambda_2': 3391.173233812704, 'H1_SNR': 14.097396565407244, 'L1_SNR': 14.001103584010583, 'V1_SNR': 12.947602478983491, 'network_SNR': 23.715140763789055, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
11:36 ninjax INFO    : log_prob at the injection parameters is: 262.52415313157076
11:36 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
11:36 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
11:36 ninjax INFO    : Ninjax setup complete.
11:36 ninjax INFO    : Saving output to ./Aplus/injection_12/
11:36 ninjax INFO    : Using polynomial learning rate scheduler
11:36 ninjax INFO    : The hyperparameters passed to flowMC and jim are
11:36 ninjax INFO    :    n_loop_training: 200
11:36 ninjax INFO    :    n_loop_production: 10
11:36 ninjax INFO    :    n_local_steps: 100
11:36 ninjax INFO    :    n_global_steps: 1000
11:36 ninjax INFO    :    n_epochs: 25
11:36 ninjax INFO    :    n_chains: 1000
11:36 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x146e8b80e4d0>
11:36 ninjax INFO    :    max_samples: 50000
11:36 ninjax INFO    :    momentum: 0.9
11:36 ninjax INFO    :    batch_size: 30000
11:36 ninjax INFO    :    use_global: True
11:36 ninjax INFO    :    keep_quantile: 0.0
11:36 ninjax INFO    :    train_thinning: 10
11:36 ninjax INFO    :    output_thinning: 50
11:36 ninjax INFO    :    n_sample_max: 10000
11:36 ninjax INFO    :    num_layers: 10
11:36 ninjax INFO    :    hidden_size: [128, 128]
11:36 ninjax INFO    :    num_bins: 8
11:36 ninjax INFO    :    save_training_chains: False
11:36 ninjax INFO    :    eps_mass_matrix: 1e-05
11:36 ninjax INFO    :    use_scheduler: True
11:36 ninjax INFO    :    use_temperature: False
11:36 ninjax INFO    :    which_temperature_schedule: exponential
11:36 ninjax INFO    :    starting_temperature: 2.0
11:36 ninjax INFO    :    stop_tempering_iteration: 75
11:36 ninjax INFO    :    stopping_criterion_global_acc: 0.1
11:36 ninjax INFO    :    stopping_criterion_loss: -inf
11:36 ninjax INFO    :    nf_model_kwargs: {}
11:36 ninjax INFO    :    local sampler arg not shown (pretty print)
11:36 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[-8.33944207e-23  6.73940249e-24 -3.38107884e-23  5.95370392e-23
 -2.74500750e-24  8.72067110e-24  4.49025592e-25 -1.79921570e-24
 -3.61287169e-24 -1.26351825e-22]
[ 5.49265358e-23  3.00200090e-23  1.25281468e-23 -4.72125088e-24
 -1.36014975e-22 -7.37185163e-23  9.96822480e-23 -4.61529346e-23
  5.13940095e-23 -4.37605121e-23]
Checking the noise that was generated in inject_signal ifo:
[-7.12846051e-23  1.55507651e-23  1.20105938e-22  4.59150389e-23
  4.59007745e-23  3.60525182e-23  3.01164509e-23  1.86505814e-23
  2.45142785e-24 -5.95953131e-23]
[-4.69126350e-23 -1.80923744e-23 -8.74335410e-23 -4.70422442e-23
 -5.60334550e-23 -9.40242210e-23  5.66416800e-23 -6.49864043e-24
  2.27888317e-23 -6.14777547e-24]
Checking the noise that was generated in inject_signal ifo:
[-1.71572770e-22  3.78962289e-23 -3.18452503e-23 -4.84819625e-23
 -2.64069858e-24  1.08245230e-24 -2.51307620e-23 -1.10597859e-23
 -1.09172727e-23 -1.15891552e-23]
[-5.58839185e-24 -2.62353659e-23 -6.35043868e-23  1.72806114e-23
  1.36684168e-22 -6.43201674e-23 -2.65532540e-23  5.04516755e-23
  8.50298158e-24  2.06370272e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.1847062110900879 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.3465992610647404, 'mass_2_source': 1.0026802229442637, 's1_z': 0.014822784703905259, 's2_z': 0.040937493866096714, 'cos_iota': 0.6735659489045673, 'd_L': 166.1951281452067, 't_c': -0.09763375036992877, 'phase_c': 3.0391945105603773, 'psi': 2.111245879850297, 'ra': 3.329479011987352, 'sin_dec': 0.06247559399780522, 'q': 0.7446017920368203, 'M_c': 1.0472823356134089, 'eta': 0.24464224227079265, 'iota': Array(0.83177354, dtype=float64, weak_type=True), 'dec': Array(0.06251631, dtype=float64, weak_type=True), 'lambda_1': 754.4551391017283, 'lambda_2': 3391.173233812704, 'H1_SNR': 14.097396565407244, 'L1_SNR': 14.001103584010583, 'V1_SNR': 12.947602478983491, 'network_SNR': 23.715140763789055, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5297210216522217 seconds
Time for h_sky_low and h_sky_center: 5.714015007019043 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.7420833110809326
Going to compute coefficients . . .
Time for computing coefficients: 172.0909779071808 seconds
Time for computing coefficients: 7.217188596725464 seconds
Time for computing coefficients: 7.158758163452148 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:02<6:46:05, 122.44s/it]Tuning global sampler:   1%|          | 2/200 [02:07<2:55:22, 53.14s/it] Tuning global sampler:   2%|▏         | 3/200 [02:11<1:41:51, 31.02s/it]Tuning global sampler:   2%|▏         | 4/200 [02:16<1:07:23, 20.63s/it]Tuning global sampler:   2%|▎         | 5/200 [02:21<48:21, 14.88s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:25<36:55, 11.42s/it]Tuning global sampler:   4%|▎         | 7/200 [02:30<29:34,  9.19s/it]Tuning global sampler:   4%|▍         | 8/200 [02:35<24:49,  7.76s/it]Tuning global sampler:   4%|▍         | 9/200 [02:39<21:33,  6.77s/it]Tuning global sampler:   5%|▌         | 10/200 [02:44<19:18,  6.10s/it]Tuning global sampler:   6%|▌         | 11/200 [02:49<17:50,  5.66s/it]Tuning global sampler:   6%|▌         | 12/200 [02:53<16:47,  5.36s/it]Tuning global sampler:   6%|▋         | 13/200 [02:58<16:00,  5.14s/it]Tuning global sampler:   7%|▋         | 14/200 [03:03<15:31,  5.01s/it]Tuning global sampler:   8%|▊         | 15/200 [03:07<15:10,  4.92s/it]Tuning global sampler:   8%|▊         | 16/200 [03:13<15:27,  5.04s/it]Tuning global sampler:   8%|▊         | 17/200 [03:18<15:42,  5.15s/it]Tuning global sampler:   9%|▉         | 18/200 [03:24<16:16,  5.37s/it]Tuning global sampler:  10%|▉         | 19/200 [03:29<15:34,  5.16s/it]Tuning global sampler:  10%|█         | 20/200 [03:33<15:02,  5.02s/it]Tuning global sampler:  10%|█         | 21/200 [03:39<15:47,  5.29s/it]Tuning global sampler:  11%|█         | 22/200 [03:44<15:07,  5.10s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:50<16:07,  5.46s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:56<16:02,  5.47s/it]Tuning global sampler:  12%|█▎        | 25/200 [04:00<15:02,  5.15s/it]Tuning global sampler:  13%|█▎        | 26/200 [04:04<14:18,  4.94s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:09<14:00,  4.86s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:14<13:33,  4.73s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:19<13:41,  4.80s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:23<13:20,  4.71s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:31<15:58,  5.67s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:35<14:56,  5.33s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:40<14:04,  5.05s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:45<13:47,  4.99s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:49<13:15,  4.82s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:54<12:52,  4.71s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:59<13:23,  4.93s/it]Tuning global sampler:  19%|█▉        | 38/200 [05:04<12:58,  4.81s/it]Tuning global sampler:  20%|█▉        | 39/200 [05:08<12:35,  4.69s/it]Tuning global sampler:  20%|██        | 40/200 [05:12<12:17,  4.61s/it]Tuning global sampler:  20%|██        | 41/200 [05:17<12:05,  4.56s/it]Tuning global sampler:  21%|██        | 42/200 [05:22<12:07,  4.61s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:26<11:54,  4.55s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:30<11:42,  4.50s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:35<11:32,  4.47s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:39<11:25,  4.45s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:44<11:20,  4.44s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:48<11:14,  4.44s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:52<11:10,  4.44s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:57<11:06,  4.44s/it]Tuning global sampler:  26%|██▌       | 51/200 [06:01<11:00,  4.44s/it]Tuning global sampler:  26%|██▌       | 52/200 [06:06<10:56,  4.44s/it]Tuning global sampler:  26%|██▋       | 53/200 [06:10<10:51,  4.43s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:15<10:47,  4.43s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:19<10:40,  4.42s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:23<10:35,  4.41s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:28<10:31,  4.42s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:33<11:11,  4.73s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:38<10:53,  4.64s/it]Tuning global sampler:  30%|███       | 60/200 [06:42<10:39,  4.57s/it]Tuning global sampler:  30%|███       | 61/200 [06:47<10:28,  4.52s/it]Tuning global sampler:  31%|███       | 62/200 [06:51<10:21,  4.50s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:55<10:17,  4.51s/it]Tuning global sampler:  32%|███▏      | 64/200 [07:00<10:09,  4.48s/it]Tuning global sampler:  32%|███▎      | 65/200 [07:04<10:02,  4.46s/it]Tuning global sampler:  33%|███▎      | 66/200 [07:09<09:54,  4.43s/it]Tuning global sampler:  34%|███▎      | 67/200 [07:13<09:47,  4.42s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:17<09:43,  4.42s/it]Tuning global sampler:  34%|███▍      | 69/200 [07:22<09:39,  4.42s/it]Tuning global sampler:  35%|███▌      | 70/200 [07:26<09:35,  4.43s/it]Tuning global sampler:  36%|███▌      | 71/200 [07:31<09:31,  4.43s/it]Tuning global sampler:  36%|███▌      | 72/200 [07:35<09:26,  4.43s/it]Tuning global sampler:  36%|███▋      | 73/200 [07:40<09:22,  4.43s/it]Tuning global sampler:  37%|███▋      | 74/200 [07:44<09:21,  4.46s/it]Tuning global sampler:  38%|███▊      | 75/200 [07:49<09:17,  4.46s/it]Tuning global sampler:  38%|███▊      | 76/200 [07:53<09:11,  4.45s/it]Tuning global sampler:  38%|███▊      | 77/200 [07:57<09:04,  4.43s/it]Tuning global sampler:  39%|███▉      | 78/200 [08:02<08:58,  4.41s/it]Tuning global sampler:  40%|███▉      | 79/200 [08:07<09:33,  4.74s/it]Tuning global sampler:  40%|████      | 80/200 [08:12<09:16,  4.64s/it]Tuning global sampler:  40%|████      | 81/200 [08:16<09:04,  4.58s/it]Tuning global sampler:  41%|████      | 82/200 [08:21<08:54,  4.53s/it]Tuning global sampler:  42%|████▏     | 83/200 [08:25<08:46,  4.50s/it]Tuning global sampler:  42%|████▏     | 84/200 [08:30<08:42,  4.50s/it]Tuning global sampler:  42%|████▎     | 85/200 [08:34<08:34,  4.48s/it]Tuning global sampler:  43%|████▎     | 86/200 [08:38<08:28,  4.46s/it]Tuning global sampler:  44%|████▎     | 87/200 [08:43<08:23,  4.45s/it]Tuning global sampler:  44%|████▍     | 88/200 [08:47<08:16,  4.44s/it]Tuning global sampler:  44%|████▍     | 89/200 [08:52<08:10,  4.42s/it]Tuning global sampler:  45%|████▌     | 90/200 [08:56<08:06,  4.42s/it]Tuning global sampler:  46%|████▌     | 91/200 [09:00<08:03,  4.44s/it]Tuning global sampler:  46%|████▌     | 92/200 [09:05<07:59,  4.44s/it]Tuning global sampler:  46%|████▋     | 93/200 [09:09<07:55,  4.45s/it]Tuning global sampler:  47%|████▋     | 94/200 [09:14<07:51,  4.45s/it]Tuning global sampler:  48%|████▊     | 95/200 [09:18<07:46,  4.45s/it]Tuning global sampler:  48%|████▊     | 96/200 [09:23<07:43,  4.46s/it]Tuning global sampler:  48%|████▊     | 97/200 [09:27<07:39,  4.46s/it]Tuning global sampler:  49%|████▉     | 98/200 [09:32<07:34,  4.45s/it]Tuning global sampler:  50%|████▉     | 99/200 [09:36<07:28,  4.44s/it]Tuning global sampler:  50%|█████     | 100/200 [09:42<07:56,  4.76s/it]Tuning global sampler:  50%|█████     | 101/200 [09:46<07:41,  4.66s/it]Tuning global sampler:  51%|█████     | 102/200 [09:50<07:29,  4.59s/it]Tuning global sampler:  52%|█████▏    | 103/200 [09:55<07:20,  4.54s/it]Tuning global sampler:  52%|█████▏    | 104/200 [09:59<07:16,  4.54s/it]Tuning global sampler:  52%|█████▎    | 105/200 [10:04<07:07,  4.50s/it]Tuning global sampler:  53%|█████▎    | 106/200 [10:08<07:01,  4.48s/it]Tuning global sampler:  54%|█████▎    | 107/200 [10:13<06:56,  4.48s/it]Tuning global sampler:  54%|█████▍    | 108/200 [10:17<06:51,  4.47s/it]Tuning global sampler:  55%|█████▍    | 109/200 [10:22<06:45,  4.45s/it]Tuning global sampler:  55%|█████▌    | 110/200 [10:26<06:38,  4.43s/it]Tuning global sampler:  56%|█████▌    | 111/200 [10:30<06:33,  4.42s/it]Tuning global sampler:  56%|█████▌    | 112/200 [10:35<06:28,  4.42s/it]Tuning global sampler:  56%|█████▋    | 113/200 [10:39<06:24,  4.42s/it]Tuning global sampler:  57%|█████▋    | 114/200 [10:44<06:20,  4.43s/it]Tuning global sampler:  57%|█████▋    | 114/200 [10:48<08:09,  5.69s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.22s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.22s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.22s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.22s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.22s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.22s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.22s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.22s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]
11:48 ninjax INFO    : Saving samples to ./Aplus/injection_12/results_training.npz
11:48 ninjax INFO    : Saving the NF
11:48 ninjax INFO    : Time taken: 687.9023671150208 seconds (11.465039451917013 minutes)
11:48 ninjax INFO    : Creating the final corner plot
11:48 ninjax INFO    : Dumping the final production chains
11:48 ninjax INFO    : Chains shape is: (13, 220000)
11:48 ninjax INFO    : Key: M_c: ESS = 22431, Rhat = 1.0276706634312383
11:48 ninjax INFO    : Key: q: ESS = 21407, Rhat = 1.0290080386866622
11:48 ninjax INFO    : Key: s1_z: ESS = 36377, Rhat = 1.0182592394550138
11:48 ninjax INFO    : Key: s2_z: ESS = 22783, Rhat = 1.0266927885595505
11:48 ninjax INFO    : Key: lambda_1: ESS = 23086, Rhat = 1.0269650772915273
11:48 ninjax INFO    : Key: lambda_2: ESS = 25792, Rhat = 1.025848781895164
11:48 ninjax INFO    : Key: cos_iota: ESS = 18933, Rhat = 1.0324021959368463
11:48 ninjax INFO    : Key: d_L: ESS = 21511, Rhat = 1.0289928636314523
11:48 ninjax INFO    : Key: t_c: ESS = 20421, Rhat = 1.0297093781466773
11:48 ninjax INFO    : Key: phase_c: ESS = 35819, Rhat = 1.0187627197761986
11:48 ninjax INFO    : Key: psi: ESS = 26681, Rhat = 1.0240451611120633
11:48 ninjax INFO    : Key: ra: ESS = 26301, Rhat = 1.024049234058439
11:48 ninjax INFO    : Key: sin_dec: ESS = 26312, Rhat = 1.0237236009497177
11:48 ninjax INFO    : Key: eta: ESS = 21407, Rhat = 1.0290080386866622
11:48 ninjax INFO    : Key: iota: ESS = 18933, Rhat = 1.0324021959368463
11:48 ninjax INFO    : Key: dec: ESS = 26312, Rhat = 1.0237236009497177
11:48 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.115 +/- 0.239
q: 0.786 +/- 0.186
s1_z: 0.009 +/- 0.025
s2_z: 0.013 +/- 0.025
lambda_1: 2334.680 +/- 1320.529
lambda_2: 2276.982 +/- 1359.030
cos_iota: 0.363 +/- 0.540
d_L: 441.801 +/- 292.940
t_c: -0.074 +/- 0.037
phase_c: 3.425 +/- 1.719
psi: 1.575 +/- 0.940
ra: 2.485 +/- 1.262
sin_dec: 0.176 +/- 0.306
Log probability: 132.736 +/- 113.968
Local acceptance: 0.348 +/- 0.476
Global acceptance: 0.011 +/- 0.106
Max loss: 56.259, Min loss: 4.126
Production summary
==========
M_c: 1.047 +/- 0.000
q: 0.867 +/- 0.088
s1_z: 0.022 +/- 0.018
s2_z: 0.018 +/- 0.020
lambda_1: 1684.894 +/- 1012.696
lambda_2: 2284.753 +/- 1356.070
cos_iota: 0.766 +/- 0.183
d_L: 184.338 +/- 33.068
t_c: -0.097 +/- 0.001
phase_c: 3.185 +/- 1.833
psi: 1.541 +/- 0.873
ra: 3.325 +/- 0.023
sin_dec: 0.058 +/- 0.046
Log probability: 259.909 +/- 2.139
Local acceptance: 0.041 +/- 0.198
Global acceptance: 0.103 +/- 0.304
DONE

JOB STATISTICS
==============
Job ID: 10923045
Cluster: snellius
User/Group: twouters2/twouters2
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 00:13:28
CPU Efficiency: 5.39% of 04:09:52 core-walltime
Job Wall-clock time: 00:15:37
Memory Utilized: 4.77 GB
Memory Efficiency: 47.67% of 10.00 GB (10.00 GB/node)
