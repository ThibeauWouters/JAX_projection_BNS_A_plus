Wed Apr  2 07:33:40 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
07:33 ninjax INFO    : Checking and setting outdir
07:33 ninjax INFO    : Found generation prior file ./Aplus/injection_6/generation_prior.prior
07:33 ninjax INFO    : The outdir is set to ./Aplus/injection_6
07:33 ninjax INFO    : Loading the given config
07:33 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
07:33 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
07:33 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/jester_soft/Aplus/injection_6/complete_config.json
07:33 ninjax INFO    : No seed specified. Generating a random seed: 244734
07:33 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 933222
07:33 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 467580
07:33 ninjax INFO    : Loading the priors
07:33 ninjax INFO    : Setting up the prior
07:33 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
07:33 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
07:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
07:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
07:33 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
07:33 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
07:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
07:33 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
07:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
07:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
07:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
07:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
07:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
07:33 ninjax INFO    : Setting up the generation prior
07:33 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 1.99, naming=["mass_1_source"])
07:33 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 1.99, naming=["mass_2_source"])
07:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
07:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
07:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
07:33 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
07:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
07:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
07:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
07:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
07:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
07:33 ninjax INFO    : Finished prior setup
07:33 ninjax INFO    : Setting the transforms
07:33 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
07:33 ninjax INFO    : transforms_str_list has 3 elements
07:33 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
07:33 ninjax INFO    : Setting the likelihood
07:33 ninjax INFO    : GW likelihood provided, setting up the GW pipe
07:33 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz
07:33 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz for BNS injections
07:33 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
07:33 ninjax INFO    : self.is_BNS_run is True
07:33 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
07:33 ninjax INFO    : GW run is an injection
07:33 ninjax INFO    : Setting up GW injection . . . 
07:33 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
07:33 ninjax INFO    : Generating new injection
07:33 ninjax INFO    : Sanity check: generated parameters:
07:33 ninjax INFO    : {'mass_1_source': 1.4351935334462143, 'mass_2_source': 1.1621611545350317, 's1_z': -0.021959210243060603, 's2_z': -0.038422548223183944, 'cos_iota': -0.21937281241677953, 'd_L': 355.8835311006951, 't_c': -0.06018616709112084, 'phase_c': 2.2674584935699573, 'psi': 0.01770303046629577, 'ra': 3.083408742125308, 'sin_dec': 0.09384841535408661}
07:33 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz . . . 
07:33 ninjax INFO    : Injected lambda_1: 155.41009286517485
07:33 ninjax INFO    : Injected lambda_2: 663.9316280958377
07:33 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.2133611872382488 is 256.0
07:33 ninjax INFO    : After transforms, the injection parameters are:
07:33 ninjax INFO    : {'mass_1_source': 1.4351935334462143, 'mass_2_source': 1.1621611545350317, 's1_z': -0.021959210243060603, 's2_z': -0.038422548223183944, 'cos_iota': -0.21937281241677953, 'd_L': 355.8835311006951, 't_c': -0.06018616709112084, 'phase_c': 2.2674584935699573, 'psi': 0.01770303046629577, 'ra': 3.083408742125308, 'sin_dec': 0.09384841535408661, 'q': 0.8097591909743546, 'M_c': 1.2133611872382488, 'eta': 0.2472374776824881, 'iota': Array(1.7919679, dtype=float64, weak_type=True), 'dec': Array(0.09398673, dtype=float64, weak_type=True), 'lambda_1': 155.41009286517485, 'lambda_2': 663.9316280958377}
07:33 ninjax INFO    : The trial injection parameters are {'M_c': 1.2133611872382488, 'eta': 0.2472374776824881, 's1_z': -0.021959210243060603, 's2_z': -0.038422548223183944, 'lambda_1': 155.41009286517485, 'lambda_2': 663.9316280958377, 'd_L': 355.8835311006951, 'phase_c': 2.2674584935699573, 'iota': 1.791967904165571, 't_c': -0.06018616709112084, 'psi': 0.01770303046629577, 'ra': 3.083408742125308, 'dec': 0.09398672628310525}
07:33 ninjax INFO    : Injecting signals . . .
07:33 ninjax INFO    : self.ifos
07:33 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
07:33 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
07:33 ninjax INFO    : [-1.93460702e-23+4.47255741e-23j -1.09010306e-24-4.25345688e-23j
 -1.82601564e-23+1.77616437e-22j ...
  3.77166814e-23+1.91107235e-23j -1.88275035e-23+3.05673605e-23j
  8.89004513e-24+3.24084741e-24j]
07:33 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
07:33 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
07:33 ninjax INFO    : [ 8.34486006e-23+1.13248685e-22j -4.14781308e-23+5.36866385e-23j
 -1.00731849e-22-3.01190498e-23j ...
 -4.94033163e-24+2.60598637e-23j  6.29078957e-25+2.72735440e-23j
 -2.53981069e-23-2.64145217e-24j]
07:33 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
07:33 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
07:33 ninjax INFO    : [-7.47626658e-23+4.44492310e-23j -6.17666358e-23-6.52819610e-23j
 -1.16504621e-22+3.44966726e-23j ...
 -2.75060201e-23+9.32396915e-23j  1.85028838e-23+1.80216446e-24j
  1.28821711e-23+6.96759553e-23j]
07:33 ninjax INFO    : [1.43183556e-46 1.43058540e-46 1.42935095e-46 ... 6.39793039e-47
 6.39795354e-47 6.39797668e-47]
07:33 ninjax INFO    : SNR for ifo H1 is 2.566261809740008
07:33 ninjax INFO    : SNR for ifo L1 is 2.571223341242215
07:33 ninjax INFO    : SNR for ifo V1 is 4.147844865941097
07:33 ninjax INFO    : The network SNR is 5.513756086244
07:33 ninjax INFO    : The network SNR does not pass the threshold, trying again
07:33 ninjax INFO    : Generating new injection
07:33 ninjax INFO    : Sanity check: generated parameters:
07:33 ninjax INFO    : {'mass_1_source': 1.0903508781011495, 'mass_2_source': 1.84072715961374, 's1_z': 0.045679702444175116, 's2_z': -0.03322922686181062, 'cos_iota': 0.8127772244372378, 'd_L': 131.90718703548055, 't_c': -0.00698672724683802, 'phase_c': 0.9937758110597957, 'psi': 0.5261919346573338, 'ra': 2.0575904559393168, 'sin_dec': -0.3649536853345783}
07:33 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz . . . 
07:33 ninjax INFO    : Injected lambda_1: 22.25092240669614
07:33 ninjax INFO    : Injected lambda_2: 1017.0739400706359
07:33 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.2614877840163228 is 256.0
07:33 ninjax INFO    : After transforms, the injection parameters are:
07:33 ninjax INFO    : {'mass_1_source': 1.84072715961374, 'mass_2_source': 1.0903508781011495, 's1_z': 0.045679702444175116, 's2_z': -0.03322922686181062, 'cos_iota': 0.8127772244372378, 'd_L': 131.90718703548055, 't_c': -0.00698672724683802, 'phase_c': 0.9937758110597957, 'psi': 0.5261919346573338, 'ra': 2.0575904559393168, 'sin_dec': -0.3649536853345783, 'q': 0.5923479057754273, 'M_c': 1.2614877840163228, 'eta': 0.23361511331977575, 'iota': Array(0.62189279, dtype=float64, weak_type=True), 'dec': Array(-0.37358306, dtype=float64, weak_type=True), 'lambda_1': 22.25092240669614, 'lambda_2': 1017.0739400706359}
07:33 ninjax INFO    : The trial injection parameters are {'M_c': 1.2614877840163228, 'eta': 0.23361511331977575, 's1_z': 0.045679702444175116, 's2_z': -0.03322922686181062, 'lambda_1': 22.25092240669614, 'lambda_2': 1017.0739400706359, 'd_L': 131.90718703548055, 'phase_c': 0.9937758110597957, 'iota': 0.6218927855687347, 't_c': -0.00698672724683802, 'psi': 0.5261919346573338, 'ra': 2.0575904559393168, 'dec': -0.37358305673824843}
07:33 ninjax INFO    : Injecting signals . . .
07:33 ninjax INFO    : self.ifos
07:33 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
07:33 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
07:33 ninjax INFO    : [-2.22858230e-23+4.79068032e-23j  3.44470357e-24-4.34374184e-23j
 -2.26919003e-23+1.75503723e-22j ...
  3.77170722e-23+1.91098833e-23j -1.88270710e-23+3.05665410e-23j
  8.89051840e-24+3.24005084e-24j]
07:33 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
07:33 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
07:33 ninjax INFO    : [ 8.69034145e-23+1.09319839e-22j -4.67164973e-23+5.50838739e-23j
 -9.53887308e-23-2.82339676e-23j ...
 -4.94106792e-24+2.60592981e-23j  6.28372203e-25+2.72729419e-23j
 -2.53987823e-23-2.64208907e-24j]
07:33 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
07:33 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
07:33 ninjax INFO    : [-7.09812101e-23+5.03292771e-23j -6.11803927e-23-7.16810583e-23j
 -1.20407324e-22+3.88242355e-23j ...
 -2.75056755e-23+9.32415618e-23j  1.85031325e-23+1.80404979e-24j
  1.28823233e-23+6.96778507e-23j]
07:33 ninjax INFO    : [1.43183556e-46 1.43058540e-46 1.42935095e-46 ... 6.39793039e-47
 6.39795354e-47 6.39797668e-47]
07:33 ninjax INFO    : SNR for ifo H1 is 10.107852783529172
07:33 ninjax INFO    : SNR for ifo L1 is 13.570156242594349
07:33 ninjax INFO    : SNR for ifo V1 is 10.68909777493887
07:33 ninjax INFO    : The network SNR is 20.01436083376444
07:33 ninjax INFO    : Network SNR passes threshold
07:33 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
07:33 ninjax INFO    :    mass_1_source: 1.84072715961374
07:33 ninjax INFO    :    mass_2_source: 1.0903508781011495
07:33 ninjax INFO    :    s1_z: 0.045679702444175116
07:33 ninjax INFO    :    s2_z: -0.03322922686181062
07:33 ninjax INFO    :    cos_iota: 0.8127772244372378
07:33 ninjax INFO    :    d_L: 131.90718703548055
07:33 ninjax INFO    :    t_c: -0.00698672724683802
07:33 ninjax INFO    :    phase_c: 0.9937758110597957
07:33 ninjax INFO    :    psi: 0.5261919346573338
07:33 ninjax INFO    :    ra: 2.0575904559393168
07:33 ninjax INFO    :    sin_dec: -0.3649536853345783
07:33 ninjax INFO    :    q: 0.5923479057754273
07:33 ninjax INFO    :    M_c: 1.2614877840163228
07:33 ninjax INFO    :    eta: 0.23361511331977575
07:33 ninjax INFO    :    iota: 0.6218927855687347
07:33 ninjax INFO    :    dec: -0.37358305673824843
07:33 ninjax INFO    :    lambda_1: 22.25092240669614
07:33 ninjax INFO    :    lambda_2: 1017.0739400706359
07:33 ninjax INFO    :    H1_SNR: 10.107852783529172
07:33 ninjax INFO    :    L1_SNR: 13.570156242594349
07:33 ninjax INFO    :    V1_SNR: 10.68909777493887
07:33 ninjax INFO    :    network_SNR: 20.01436083376444
07:33 ninjax INFO    :    epoch: 254.0
07:33 ninjax INFO    :    gmst: 2.7288901910520846
07:33 ninjax INFO    :    duration: 256.0
07:33 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
07:33 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
07:33 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
07:37 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 189.2381238937378 seconds = 3.1539687315622964 minutes
07:37 ninjax INFO    : The priors are not modified after their initialization
07:37 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
07:37 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
07:37 ninjax INFO    : sample: {'M_c': Array([1.62505961, 2.58679359, 1.55603726], dtype=float64), 'q': Array([0.96366372, 0.83935307, 0.31304484], dtype=float64), 's1_z': Array([-0.04745799, -0.04029325, -0.01233619], dtype=float64), 's2_z': Array([-0.02687889, -0.02331558,  0.04691865], dtype=float64), 'lambda_1': Array([2537.3027297 , 1473.21545802, 3868.54964564], dtype=float64), 'lambda_2': Array([ 113.43310174, 3059.90287518, 1780.27267184], dtype=float64), 'cos_iota': Array([ 0.36911728,  0.61178443, -0.83436396], dtype=float64), 'd_L': Array([939.13930204, 871.88338381, 639.51745743], dtype=float64), 't_c': Array([-0.01488062,  0.09474891,  0.01993122], dtype=float64), 'phase_c': Array([2.38147762, 5.17983372, 0.57183135], dtype=float64), 'psi': Array([1.46772156, 2.16419962, 0.78234279], dtype=float64), 'ra': Array([5.97653363, 4.1620861 , 1.51412019], dtype=float64), 'sin_dec': Array([ 0.62786521, -0.21549732,  0.37152334], dtype=float64)}
07:37 ninjax INFO    : log_prob: [  2.20388754 -56.26562895 -44.56183357]
07:37 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.84072715961374, 'mass_2_source': 1.0903508781011495, 's1_z': 0.045679702444175116, 's2_z': -0.03322922686181062, 'cos_iota': 0.8127772244372378, 'd_L': 131.90718703548055, 't_c': -0.00698672724683802, 'phase_c': 0.9937758110597957, 'psi': 0.5261919346573338, 'ra': 2.0575904559393168, 'sin_dec': -0.3649536853345783, 'q': 0.5923479057754273, 'M_c': 1.2614877840163228, 'eta': 0.23361511331977575, 'iota': Array(0.62189279, dtype=float64, weak_type=True), 'dec': Array(-0.37358306, dtype=float64, weak_type=True), 'lambda_1': 22.25092240669614, 'lambda_2': 1017.0739400706359, 'H1_SNR': 10.107852783529172, 'L1_SNR': 13.570156242594349, 'V1_SNR': 10.68909777493887, 'network_SNR': 20.01436083376444, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
07:37 ninjax INFO    : log_prob at the injection parameters is: 169.07015510462634
07:37 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
07:37 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
07:37 ninjax INFO    : Ninjax setup complete.
07:37 ninjax INFO    : Saving output to ./Aplus/injection_6/
07:37 ninjax INFO    : Using polynomial learning rate scheduler
07:37 ninjax INFO    : The hyperparameters passed to flowMC and jim are
07:37 ninjax INFO    :    n_loop_training: 200
07:37 ninjax INFO    :    n_loop_production: 10
07:37 ninjax INFO    :    n_local_steps: 100
07:37 ninjax INFO    :    n_global_steps: 1000
07:37 ninjax INFO    :    n_epochs: 25
07:37 ninjax INFO    :    n_chains: 1000
07:37 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x151041b53be0>
07:37 ninjax INFO    :    max_samples: 50000
07:37 ninjax INFO    :    momentum: 0.9
07:37 ninjax INFO    :    batch_size: 30000
07:37 ninjax INFO    :    use_global: True
07:37 ninjax INFO    :    keep_quantile: 0.0
07:37 ninjax INFO    :    train_thinning: 10
07:37 ninjax INFO    :    output_thinning: 50
07:37 ninjax INFO    :    n_sample_max: 10000
07:37 ninjax INFO    :    num_layers: 10
07:37 ninjax INFO    :    hidden_size: [128, 128]
07:37 ninjax INFO    :    num_bins: 8
07:37 ninjax INFO    :    save_training_chains: False
07:37 ninjax INFO    :    eps_mass_matrix: 1e-05
07:37 ninjax INFO    :    use_scheduler: True
07:37 ninjax INFO    :    use_temperature: False
07:37 ninjax INFO    :    which_temperature_schedule: exponential
07:37 ninjax INFO    :    starting_temperature: 2.0
07:37 ninjax INFO    :    stop_tempering_iteration: 75
07:37 ninjax INFO    :    stopping_criterion_global_acc: 0.1
07:37 ninjax INFO    :    stopping_criterion_loss: -inf
07:37 ninjax INFO    :    nf_model_kwargs: {}
07:37 ninjax INFO    :    local sampler arg not shown (pretty print)
07:37 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[-1.83600027e-23 -1.21452829e-24 -1.90853328e-23  2.28018464e-23
 -3.69043707e-23  5.70621885e-23  1.26315283e-22 -8.29220744e-23
 -1.10229070e-23 -2.49065832e-23]
[ 4.53806383e-23 -4.37115629e-23  1.78464517e-22  9.59572490e-23
  9.70535280e-23 -5.23832401e-23 -7.80280904e-26  2.47884887e-23
 -1.19533285e-22  2.68740705e-23]
Checking the noise that was generated in inject_signal ifo:
[ 8.23111909e-23 -4.04938513e-23 -1.00852591e-22  6.29934728e-23
 -3.07940859e-23  4.28589799e-23  4.49178221e-23  4.99639761e-23
 -5.54133699e-23 -1.21409907e-23]
[ 1.13585080e-22  5.43480101e-23 -3.12984550e-23 -1.64290301e-23
 -1.31855535e-23 -4.52597173e-23 -3.01684662e-23  2.88282560e-23
  1.32894668e-22  1.94050904e-23]
Checking the noise that was generated in inject_signal ifo:
[-7.59813586e-23 -5.93708946e-23 -1.18342921e-22  3.91969971e-23
 -4.38861976e-24 -2.69072248e-23 -7.99394974e-24 -1.07189603e-23
  4.64897688e-23  3.49772698e-23]
[ 4.65509830e-23 -6.56823312e-23  3.29099071e-23  7.29493203e-23
 -5.49262447e-24 -1.20661806e-23 -8.84545309e-23 -1.16098548e-22
 -1.30051977e-22 -5.87433860e-23]
Checking the noise that was generated in inject_signal ifo:
[-1.83600027e-23 -1.21452829e-24 -1.90853328e-23  2.28018464e-23
 -3.69043707e-23  5.70621885e-23  1.26315283e-22 -8.29220744e-23
 -1.10229070e-23 -2.49065832e-23]
[ 4.53806383e-23 -4.37115629e-23  1.78464517e-22  9.59572490e-23
  9.70535280e-23 -5.23832401e-23 -7.80280904e-26  2.47884887e-23
 -1.19533285e-22  2.68740705e-23]
Checking the noise that was generated in inject_signal ifo:
[ 8.23111909e-23 -4.04938513e-23 -1.00852591e-22  6.29934728e-23
 -3.07940859e-23  4.28589799e-23  4.49178221e-23  4.99639761e-23
 -5.54133699e-23 -1.21409907e-23]
[ 1.13585080e-22  5.43480101e-23 -3.12984550e-23 -1.64290301e-23
 -1.31855535e-23 -4.52597173e-23 -3.01684662e-23  2.88282560e-23
  1.32894668e-22  1.94050904e-23]
Checking the noise that was generated in inject_signal ifo:
[-7.59813586e-23 -5.93708946e-23 -1.18342921e-22  3.91969971e-23
 -4.38861976e-24 -2.69072248e-23 -7.99394974e-24 -1.07189603e-23
  4.64897688e-23  3.49772698e-23]
[ 4.65509830e-23 -6.56823312e-23  3.29099071e-23  7.29493203e-23
 -5.49262447e-24 -1.20661806e-23 -8.84545309e-23 -1.16098548e-22
 -1.30051977e-22 -5.87433860e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.18081903457641602 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.84072715961374, 'mass_2_source': 1.0903508781011495, 's1_z': 0.045679702444175116, 's2_z': -0.03322922686181062, 'cos_iota': 0.8127772244372378, 'd_L': 131.90718703548055, 't_c': -0.00698672724683802, 'phase_c': 0.9937758110597957, 'psi': 0.5261919346573338, 'ra': 2.0575904559393168, 'sin_dec': -0.3649536853345783, 'q': 0.5923479057754273, 'M_c': 1.2614877840163228, 'eta': 0.23361511331977575, 'iota': Array(0.62189279, dtype=float64, weak_type=True), 'dec': Array(-0.37358306, dtype=float64, weak_type=True), 'lambda_1': 22.25092240669614, 'lambda_2': 1017.0739400706359, 'H1_SNR': 10.107852783529172, 'L1_SNR': 13.570156242594349, 'V1_SNR': 10.68909777493887, 'network_SNR': 20.01436083376444, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5280413627624512 seconds
Time for h_sky_low and h_sky_center: 5.604255676269531 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.7402753829956055
Going to compute coefficients . . .
Time for computing coefficients: 167.34391117095947 seconds
Time for computing coefficients: 7.191515684127808 seconds
Time for computing coefficients: 7.100697994232178 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:02<6:45:25, 122.24s/it]Tuning global sampler:   1%|          | 2/200 [02:06<2:55:01, 53.04s/it] Tuning global sampler:   2%|▏         | 3/200 [02:11<1:41:36, 30.95s/it]Tuning global sampler:   2%|▏         | 4/200 [02:16<1:07:08, 20.56s/it]Tuning global sampler:   2%|▎         | 5/200 [02:20<48:08, 14.81s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:25<36:41, 11.35s/it]Tuning global sampler:   4%|▎         | 7/200 [02:29<29:22,  9.13s/it]Tuning global sampler:   4%|▍         | 8/200 [02:34<24:37,  7.69s/it]Tuning global sampler:   4%|▍         | 9/200 [02:39<21:22,  6.72s/it]Tuning global sampler:   5%|▌         | 10/200 [02:43<19:03,  6.02s/it]Tuning global sampler:   6%|▌         | 11/200 [02:48<17:36,  5.59s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:34,  5.29s/it]Tuning global sampler:   6%|▋         | 13/200 [02:57<15:49,  5.08s/it]Tuning global sampler:   7%|▋         | 14/200 [03:02<15:21,  4.95s/it]Tuning global sampler:   8%|▊         | 15/200 [03:06<15:01,  4.87s/it]Tuning global sampler:   8%|▊         | 16/200 [03:11<14:44,  4.81s/it]Tuning global sampler:   8%|▊         | 17/200 [03:17<15:25,  5.06s/it]Tuning global sampler:   9%|▉         | 18/200 [03:21<14:59,  4.94s/it]Tuning global sampler:  10%|▉         | 19/200 [03:26<14:38,  4.85s/it]Tuning global sampler:  10%|█         | 20/200 [03:31<14:22,  4.79s/it]Tuning global sampler:  10%|█         | 21/200 [03:35<14:10,  4.75s/it]Tuning global sampler:  11%|█         | 22/200 [03:40<13:59,  4.71s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:44<13:50,  4.69s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:49<13:33,  4.62s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:53<13:18,  4.56s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:58<13:06,  4.52s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:02<12:55,  4.49s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:07<12:48,  4.47s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:11<12:40,  4.45s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:15<12:35,  4.44s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:20<12:30,  4.44s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:24<12:24,  4.43s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:29<12:16,  4.41s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:33<12:11,  4.41s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:37<12:08,  4.41s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:42<12:04,  4.41s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:46<12:00,  4.42s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:52<12:43,  4.71s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:56<12:24,  4.63s/it]Tuning global sampler:  20%|██        | 40/200 [05:01<12:10,  4.56s/it]Tuning global sampler:  20%|██        | 41/200 [05:05<11:58,  4.52s/it]Tuning global sampler:  21%|██        | 42/200 [05:09<11:49,  4.49s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:14<11:41,  4.47s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:18<11:33,  4.44s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:23<11:25,  4.43s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:27<11:21,  4.42s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:31<11:17,  4.43s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:36<11:11,  4.42s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:40<11:07,  4.42s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:45<11:03,  4.42s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:49<10:59,  4.42s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:53<10:54,  4.42s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:58<10:48,  4.41s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:02<10:43,  4.41s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:07<10:36,  4.39s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:11<10:31,  4.38s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:15<10:27,  4.39s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:20<10:31,  4.45s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:25<11:08,  4.74s/it]Tuning global sampler:  30%|███       | 60/200 [06:30<10:48,  4.64s/it]Tuning global sampler:  30%|███       | 61/200 [06:34<10:34,  4.56s/it]Tuning global sampler:  31%|███       | 62/200 [06:39<10:23,  4.52s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:43<10:14,  4.49s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:47<10:06,  4.46s/it]Tuning global sampler:  32%|███▎      | 65/200 [06:52<10:00,  4.45s/it]Tuning global sampler:  33%|███▎      | 66/200 [06:56<09:52,  4.42s/it]Tuning global sampler:  34%|███▎      | 67/200 [07:01<09:45,  4.40s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:05<09:41,  4.40s/it]Tuning global sampler:  34%|███▍      | 69/200 [07:09<09:36,  4.40s/it]Tuning global sampler:  35%|███▌      | 70/200 [07:14<09:32,  4.40s/it]Tuning global sampler:  36%|███▌      | 71/200 [07:18<09:28,  4.40s/it]Tuning global sampler:  36%|███▌      | 72/200 [07:23<09:23,  4.40s/it]Tuning global sampler:  36%|███▋      | 73/200 [07:27<09:19,  4.40s/it]Tuning global sampler:  37%|███▋      | 74/200 [07:31<09:14,  4.40s/it]Tuning global sampler:  38%|███▊      | 75/200 [07:36<09:10,  4.41s/it]Tuning global sampler:  38%|███▊      | 76/200 [07:40<09:06,  4.41s/it]Tuning global sampler:  38%|███▊      | 77/200 [07:45<09:00,  4.39s/it]Tuning global sampler:  39%|███▉      | 78/200 [07:49<08:55,  4.39s/it]Tuning global sampler:  40%|███▉      | 79/200 [07:53<08:50,  4.39s/it]Tuning global sampler:  40%|████      | 80/200 [07:58<08:46,  4.39s/it]Tuning global sampler:  40%|████      | 81/200 [08:03<09:20,  4.71s/it]Tuning global sampler:  41%|████      | 82/200 [08:08<09:04,  4.62s/it]Tuning global sampler:  42%|████▏     | 83/200 [08:12<08:52,  4.55s/it]Tuning global sampler:  42%|████▏     | 84/200 [08:16<08:43,  4.51s/it]Tuning global sampler:  42%|████▎     | 85/200 [08:21<08:34,  4.48s/it]Tuning global sampler:  43%|████▎     | 86/200 [08:25<08:28,  4.46s/it]Tuning global sampler:  44%|████▎     | 87/200 [08:30<08:22,  4.44s/it]Tuning global sampler:  44%|████▍     | 88/200 [08:34<08:15,  4.42s/it]Tuning global sampler:  44%|████▍     | 88/200 [08:38<11:00,  5.90s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.22s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.22s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.22s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.21s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.21s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.21s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.21s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.21s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]
07:46 ninjax INFO    : Saving samples to ./Aplus/injection_6/results_training.npz
07:46 ninjax INFO    : Saving the NF
07:46 ninjax INFO    : Time taken: 557.6047978401184 seconds (9.293413297335308 minutes)
07:46 ninjax INFO    : Creating the final corner plot
07:46 ninjax INFO    : Dumping the final production chains
07:46 ninjax INFO    : Chains shape is: (13, 220000)
07:46 ninjax INFO    : Key: M_c: ESS = 21622, Rhat = 1.0292326813852246
07:46 ninjax INFO    : Key: q: ESS = 13194, Rhat = 1.0465690612341527
07:46 ninjax INFO    : Key: s1_z: ESS = 25726, Rhat = 1.0250114823152552
07:46 ninjax INFO    : Key: s2_z: ESS = 24226, Rhat = 1.026486362463252
07:46 ninjax INFO    : Key: lambda_1: ESS = 16656, Rhat = 1.0377141529311473
07:46 ninjax INFO    : Key: lambda_2: ESS = 28474, Rhat = 1.0225430634613724
07:46 ninjax INFO    : Key: cos_iota: ESS = 18489, Rhat = 1.033921431773966
07:46 ninjax INFO    : Key: d_L: ESS = 21170, Rhat = 1.0298556911388843
07:46 ninjax INFO    : Key: t_c: ESS = 17976, Rhat = 1.0340110874397763
07:46 ninjax INFO    : Key: phase_c: ESS = 26928, Rhat = 1.0231838020241466
07:46 ninjax INFO    : Key: psi: ESS = 38015, Rhat = 1.018795344928797
07:46 ninjax INFO    : Key: ra: ESS = 25283, Rhat = 1.0244390847576366
07:46 ninjax INFO    : Key: sin_dec: ESS = 18635, Rhat = 1.0334269323089187
07:46 ninjax INFO    : Key: eta: ESS = 13194, Rhat = 1.0465690612341527
07:46 ninjax INFO    : Key: iota: ESS = 18489, Rhat = 1.033921431773966
07:46 ninjax INFO    : Key: dec: ESS = 18635, Rhat = 1.0334269323089187
07:46 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.296 +/- 0.174
q: 0.707 +/- 0.196
s1_z: -0.001 +/- 0.027
s2_z: -0.006 +/- 0.027
lambda_1: 1945.451 +/- 1413.533
lambda_2: 2432.177 +/- 1466.717
cos_iota: 0.507 +/- 0.499
d_L: 479.953 +/- 293.626
t_c: -0.008 +/- 0.023
phase_c: 3.234 +/- 1.655
psi: 1.603 +/- 0.878
ra: 2.271 +/- 0.919
sin_dec: -0.390 +/- 0.454
Log probability: 73.954 +/- 70.804
Local acceptance: 0.686 +/- 0.464
Global acceptance: 0.011 +/- 0.105
Max loss: 22.890, Min loss: 4.844
Production summary
==========
M_c: 1.261 +/- 0.000
q: 0.772 +/- 0.124
s1_z: -0.007 +/- 0.026
s2_z: -0.007 +/- 0.027
lambda_1: 659.030 +/- 802.729
lambda_2: 1182.316 +/- 1007.653
cos_iota: 0.786 +/- 0.160
d_L: 134.444 +/- 24.604
t_c: -0.006 +/- 0.001
phase_c: 3.214 +/- 1.808
psi: 1.464 +/- 0.911
ra: 2.058 +/- 0.012
sin_dec: -0.376 +/- 0.026
Log probability: 165.189 +/- 2.666
Local acceptance: 0.323 +/- 0.467
Global acceptance: 0.114 +/- 0.318
DONE

JOB STATISTICS
==============
Job ID: 10918544
Cluster: snellius
User/Group: twouters2/twouters2
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 00:11:57
CPU Efficiency: 5.57% of 03:34:24 core-walltime
Job Wall-clock time: 00:13:24
Memory Utilized: 4.81 GB
Memory Efficiency: 48.15% of 10.00 GB (10.00 GB/node)
