Wed Apr  2 07:33:40 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
07:33 ninjax INFO    : Checking and setting outdir
07:33 ninjax INFO    : Found generation prior file ./Aplus/injection_14/generation_prior.prior
07:33 ninjax INFO    : The outdir is set to ./Aplus/injection_14
07:33 ninjax INFO    : Loading the given config
07:33 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
07:33 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
07:33 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/jester_soft/Aplus/injection_14/complete_config.json
07:33 ninjax INFO    : No seed specified. Generating a random seed: 351877
07:33 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 869285
07:33 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 129380
07:33 ninjax INFO    : Loading the priors
07:33 ninjax INFO    : Setting up the prior
07:33 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
07:33 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
07:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
07:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
07:33 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
07:33 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
07:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
07:33 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
07:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
07:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
07:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
07:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
07:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
07:33 ninjax INFO    : Setting up the generation prior
07:33 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 1.99, naming=["mass_1_source"])
07:33 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 1.99, naming=["mass_2_source"])
07:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
07:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
07:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
07:33 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
07:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
07:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
07:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
07:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
07:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
07:33 ninjax INFO    : Finished prior setup
07:33 ninjax INFO    : Setting the transforms
07:33 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
07:33 ninjax INFO    : transforms_str_list has 3 elements
07:33 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
07:33 ninjax INFO    : Setting the likelihood
07:33 ninjax INFO    : GW likelihood provided, setting up the GW pipe
07:33 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz
07:33 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz for BNS injections
07:33 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
07:33 ninjax INFO    : self.is_BNS_run is True
07:33 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
07:33 ninjax INFO    : GW run is an injection
07:33 ninjax INFO    : Setting up GW injection . . . 
07:33 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
07:33 ninjax INFO    : Generating new injection
07:33 ninjax INFO    : Sanity check: generated parameters:
07:33 ninjax INFO    : {'mass_1_source': 1.5717545078007382, 'mass_2_source': 1.3509839949028764, 's1_z': 0.005543947774365579, 's2_z': -0.023144546961364167, 'cos_iota': -0.42571988956451623, 'd_L': 248.9547065457212, 't_c': -0.07615581011935216, 'phase_c': 5.398843575633424, 'psi': 0.7861500130918969, 'ra': 4.673809100748274, 'sin_dec': -0.8801443305288665}
07:33 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz . . . 
07:33 ninjax INFO    : Injected lambda_1: 80.1111889422041
07:33 ninjax INFO    : Injected lambda_2: 237.23518625370642
07:33 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.3391550664730405 is 256.0
07:33 ninjax INFO    : After transforms, the injection parameters are:
07:33 ninjax INFO    : {'mass_1_source': 1.5717545078007382, 'mass_2_source': 1.3509839949028764, 's1_z': 0.005543947774365579, 's2_z': -0.023144546961364167, 'cos_iota': -0.42571988956451623, 'd_L': 248.9547065457212, 't_c': -0.07615581011935216, 'phase_c': 5.398843575633424, 'psi': 0.7861500130918969, 'ra': 4.673809100748274, 'sin_dec': -0.8801443305288665, 'q': 0.859538807236015, 'M_c': 1.3391550664730405, 'eta': 0.2485735970763886, 'iota': Array(2.01055365, dtype=float64, weak_type=True), 'dec': Array(-1.07616616, dtype=float64, weak_type=True), 'lambda_1': 80.1111889422041, 'lambda_2': 237.23518625370642}
07:33 ninjax INFO    : The trial injection parameters are {'M_c': 1.3391550664730405, 'eta': 0.2485735970763886, 's1_z': 0.005543947774365579, 's2_z': -0.023144546961364167, 'lambda_1': 80.1111889422041, 'lambda_2': 237.23518625370642, 'd_L': 248.9547065457212, 'phase_c': 5.398843575633424, 'iota': 2.01055364919588, 't_c': -0.07615581011935216, 'psi': 0.7861500130918969, 'ra': 4.673809100748274, 'dec': -1.0761661566255238}
07:33 ninjax INFO    : Injecting signals . . .
07:33 ninjax INFO    : self.ifos
07:33 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
07:33 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
07:33 ninjax INFO    : [-8.78660103e-23+1.74415288e-23j  5.07010551e-23+5.91001445e-24j
 -3.13893646e-23+4.00525728e-23j ...
  3.42281985e-24-3.85307167e-23j  1.77548180e-23+1.91212977e-23j
  2.89629451e-23+3.09850746e-23j]
07:33 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
07:33 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
07:33 ninjax INFO    : [-1.76403944e-23+2.82643599e-23j  5.31833736e-23-7.33908254e-23j
  6.17603089e-23-9.66679355e-24j ...
  6.72109675e-24+5.12812315e-23j -4.48109157e-24-2.62872855e-23j
  2.09555169e-23+2.58369192e-23j]
07:33 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
07:33 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
07:33 ninjax INFO    : [-9.38764778e-23+6.45527069e-23j -8.89994136e-23+4.18962779e-24j
  5.93432010e-23+2.93766517e-23j ...
 -5.84610315e-23-2.29223470e-24j  2.83231183e-24+1.35586653e-23j
  5.23574002e-23-1.43585448e-23j]
07:33 ninjax INFO    : [1.43183556e-46 1.43058540e-46 1.42935095e-46 ... 6.39793039e-47
 6.39795354e-47 6.39797668e-47]
07:33 ninjax INFO    : SNR for ifo H1 is 9.702608986584705
07:33 ninjax INFO    : SNR for ifo L1 is 9.18832694034679
07:33 ninjax INFO    : SNR for ifo V1 is 8.287869695354921
07:33 ninjax INFO    : The network SNR is 15.724336462834906
07:33 ninjax INFO    : Network SNR passes threshold
07:33 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
07:33 ninjax INFO    :    mass_1_source: 1.5717545078007382
07:33 ninjax INFO    :    mass_2_source: 1.3509839949028764
07:33 ninjax INFO    :    s1_z: 0.005543947774365579
07:33 ninjax INFO    :    s2_z: -0.023144546961364167
07:33 ninjax INFO    :    cos_iota: -0.42571988956451623
07:33 ninjax INFO    :    d_L: 248.9547065457212
07:33 ninjax INFO    :    t_c: -0.07615581011935216
07:33 ninjax INFO    :    phase_c: 5.398843575633424
07:33 ninjax INFO    :    psi: 0.7861500130918969
07:33 ninjax INFO    :    ra: 4.673809100748274
07:33 ninjax INFO    :    sin_dec: -0.8801443305288665
07:33 ninjax INFO    :    q: 0.859538807236015
07:33 ninjax INFO    :    M_c: 1.3391550664730405
07:33 ninjax INFO    :    eta: 0.2485735970763886
07:33 ninjax INFO    :    iota: 2.01055364919588
07:33 ninjax INFO    :    dec: -1.0761661566255238
07:33 ninjax INFO    :    lambda_1: 80.1111889422041
07:33 ninjax INFO    :    lambda_2: 237.23518625370642
07:33 ninjax INFO    :    H1_SNR: 9.702608986584705
07:33 ninjax INFO    :    L1_SNR: 9.18832694034679
07:33 ninjax INFO    :    V1_SNR: 8.287869695354921
07:33 ninjax INFO    :    network_SNR: 15.724336462834906
07:33 ninjax INFO    :    epoch: 254.0
07:33 ninjax INFO    :    gmst: 2.7288901910520846
07:33 ninjax INFO    :    duration: 256.0
07:33 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
07:33 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
07:33 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
07:37 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 187.5596284866333 seconds = 3.125993808110555 minutes
07:37 ninjax INFO    : The priors are not modified after their initialization
07:37 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
07:37 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
07:37 ninjax INFO    : sample: {'M_c': Array([2.34816183, 1.054201  , 0.98593181], dtype=float64), 'q': Array([0.84321862, 0.39438651, 0.76774668], dtype=float64), 's1_z': Array([ 0.03058138, -0.01985105,  0.02513672], dtype=float64), 's2_z': Array([ 0.04576834, -0.02391046, -0.03249529], dtype=float64), 'lambda_1': Array([4480.92605128,  156.97357879, 1481.54650537], dtype=float64), 'lambda_2': Array([2065.10132364, 1498.73265217, 1675.47848772], dtype=float64), 'cos_iota': Array([-0.34025147,  0.18578686,  0.2483866 ], dtype=float64), 'd_L': Array([901.47450808, 811.00291212, 525.22302043], dtype=float64), 't_c': Array([ 0.08258506,  0.07371328, -0.08292794], dtype=float64), 'phase_c': Array([2.39750598, 3.63964574, 0.20800865], dtype=float64), 'psi': Array([2.67197793, 2.83736937, 2.8491224 ], dtype=float64), 'ra': Array([5.53826306, 3.53079023, 2.71161687], dtype=float64), 'sin_dec': Array([-0.99491978, -0.63570196, -0.46287014], dtype=float64)}
07:37 ninjax INFO    : log_prob: [-13.1616552   -1.80532806  -0.50103808]
07:37 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.5717545078007382, 'mass_2_source': 1.3509839949028764, 's1_z': 0.005543947774365579, 's2_z': -0.023144546961364167, 'cos_iota': -0.42571988956451623, 'd_L': 248.9547065457212, 't_c': -0.07615581011935216, 'phase_c': 5.398843575633424, 'psi': 0.7861500130918969, 'ra': 4.673809100748274, 'sin_dec': -0.8801443305288665, 'q': 0.859538807236015, 'M_c': 1.3391550664730405, 'eta': 0.2485735970763886, 'iota': Array(2.01055365, dtype=float64, weak_type=True), 'dec': Array(-1.07616616, dtype=float64, weak_type=True), 'lambda_1': 80.1111889422041, 'lambda_2': 237.23518625370642, 'H1_SNR': 9.702608986584705, 'L1_SNR': 9.18832694034679, 'V1_SNR': 8.287869695354921, 'network_SNR': 15.724336462834906, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
07:37 ninjax INFO    : log_prob at the injection parameters is: 103.53721228889287
07:37 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
07:37 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
07:37 ninjax INFO    : Ninjax setup complete.
07:37 ninjax INFO    : Saving output to ./Aplus/injection_14/
07:37 ninjax INFO    : Using polynomial learning rate scheduler
07:37 ninjax INFO    : The hyperparameters passed to flowMC and jim are
07:37 ninjax INFO    :    n_loop_training: 200
07:37 ninjax INFO    :    n_loop_production: 10
07:37 ninjax INFO    :    n_local_steps: 100
07:37 ninjax INFO    :    n_global_steps: 1000
07:37 ninjax INFO    :    n_epochs: 25
07:37 ninjax INFO    :    n_chains: 1000
07:37 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x1528101664d0>
07:37 ninjax INFO    :    max_samples: 50000
07:37 ninjax INFO    :    momentum: 0.9
07:37 ninjax INFO    :    batch_size: 30000
07:37 ninjax INFO    :    use_global: True
07:37 ninjax INFO    :    keep_quantile: 0.0
07:37 ninjax INFO    :    train_thinning: 10
07:37 ninjax INFO    :    output_thinning: 50
07:37 ninjax INFO    :    n_sample_max: 10000
07:37 ninjax INFO    :    num_layers: 10
07:37 ninjax INFO    :    hidden_size: [128, 128]
07:37 ninjax INFO    :    num_bins: 8
07:37 ninjax INFO    :    save_training_chains: False
07:37 ninjax INFO    :    eps_mass_matrix: 1e-05
07:37 ninjax INFO    :    use_scheduler: True
07:37 ninjax INFO    :    use_temperature: False
07:37 ninjax INFO    :    which_temperature_schedule: exponential
07:37 ninjax INFO    :    starting_temperature: 2.0
07:37 ninjax INFO    :    stop_tempering_iteration: 75
07:37 ninjax INFO    :    stopping_criterion_global_acc: 0.1
07:37 ninjax INFO    :    stopping_criterion_loss: -inf
07:37 ninjax INFO    :    nf_model_kwargs: {}
07:37 ninjax INFO    :    local sampler arg not shown (pretty print)
07:37 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[-9.16700824e-23  5.37015433e-23 -3.33597283e-23 -7.99999937e-24
 -6.65231593e-23  3.32213821e-23 -6.34100256e-23  1.92987703e-23
 -6.24598715e-23  1.16905815e-22]
[ 1.50745028e-23  9.23592150e-24  3.60309972e-23  1.06198573e-23
  9.84533170e-23 -7.43884847e-23  3.26336399e-23  1.21066994e-23
  7.15183401e-23  7.19672985e-23]
Checking the noise that was generated in inject_signal ifo:
[-1.51635409e-23  5.17560935e-23  6.20346129e-23 -2.35954422e-23
  5.52311374e-23 -2.87586877e-23 -2.43580754e-23  4.13610696e-23
 -3.25752292e-23  7.09894167e-23]
[ 3.17092646e-23 -7.73854220e-23 -5.43471932e-24  1.12898481e-22
  3.24123069e-23  3.71405759e-23 -1.02784092e-23  3.53206171e-23
 -1.55020562e-22  1.30338061e-23]
Checking the noise that was generated in inject_signal ifo:
[-8.91196648e-23 -9.38433138e-23  6.38991701e-23 -9.29281023e-23
  8.77323226e-23  9.01457882e-23  4.95361328e-23 -5.35440816e-23
  6.89407331e-23  3.82876976e-23]
[ 6.35628682e-23  3.82510782e-24  3.10584929e-23  1.53164029e-24
  9.41739234e-23 -9.34827953e-24  1.91254124e-23 -7.92365066e-23
  5.34974221e-23  7.58357098e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.18140435218811035 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.5717545078007382, 'mass_2_source': 1.3509839949028764, 's1_z': 0.005543947774365579, 's2_z': -0.023144546961364167, 'cos_iota': -0.42571988956451623, 'd_L': 248.9547065457212, 't_c': -0.07615581011935216, 'phase_c': 5.398843575633424, 'psi': 0.7861500130918969, 'ra': 4.673809100748274, 'sin_dec': -0.8801443305288665, 'q': 0.859538807236015, 'M_c': 1.3391550664730405, 'eta': 0.2485735970763886, 'iota': Array(2.01055365, dtype=float64, weak_type=True), 'dec': Array(-1.07616616, dtype=float64, weak_type=True), 'lambda_1': 80.1111889422041, 'lambda_2': 237.23518625370642, 'H1_SNR': 9.702608986584705, 'L1_SNR': 9.18832694034679, 'V1_SNR': 8.287869695354921, 'network_SNR': 15.724336462834906, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5134024620056152 seconds
Time for h_sky_low and h_sky_center: 5.519144773483276 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.7020986080169678
Going to compute coefficients . . .
Time for computing coefficients: 165.67128896713257 seconds
Time for computing coefficients: 7.32471489906311 seconds
Time for computing coefficients: 7.115638971328735 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:01<6:44:11, 121.87s/it]Tuning global sampler:   1%|          | 2/200 [02:06<2:54:30, 52.88s/it] Tuning global sampler:   2%|▏         | 3/200 [02:11<1:41:18, 30.86s/it]Tuning global sampler:   2%|▏         | 4/200 [02:15<1:06:58, 20.50s/it]Tuning global sampler:   2%|▎         | 5/200 [02:20<48:00, 14.77s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:24<36:36, 11.32s/it]Tuning global sampler:   4%|▎         | 7/200 [02:29<29:17,  9.11s/it]Tuning global sampler:   4%|▍         | 8/200 [02:34<24:33,  7.68s/it]Tuning global sampler:   4%|▍         | 9/200 [02:38<21:19,  6.70s/it]Tuning global sampler:   5%|▌         | 10/200 [02:43<18:59,  6.00s/it]Tuning global sampler:   6%|▌         | 11/200 [02:47<17:32,  5.57s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:31,  5.28s/it]Tuning global sampler:   6%|▋         | 13/200 [02:56<15:45,  5.06s/it]Tuning global sampler:   7%|▋         | 14/200 [03:01<15:17,  4.93s/it]Tuning global sampler:   8%|▊         | 15/200 [03:06<14:56,  4.85s/it]Tuning global sampler:   8%|▊         | 16/200 [03:10<14:40,  4.78s/it]Tuning global sampler:   8%|▊         | 17/200 [03:15<14:27,  4.74s/it]Tuning global sampler:   9%|▉         | 18/200 [03:21<15:10,  5.00s/it]Tuning global sampler:  10%|▉         | 19/200 [03:25<14:46,  4.90s/it]Tuning global sampler:  10%|█         | 20/200 [03:30<14:27,  4.82s/it]Tuning global sampler:  10%|█         | 21/200 [03:34<14:13,  4.77s/it]Tuning global sampler:  11%|█         | 22/200 [03:39<14:00,  4.72s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:44<13:50,  4.69s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:48<13:31,  4.61s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:53<13:15,  4.55s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:57<13:02,  4.50s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:01<12:52,  4.47s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:06<12:43,  4.44s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:10<12:36,  4.42s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:14<12:30,  4.41s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:19<12:24,  4.40s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:23<12:18,  4.40s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:28<12:11,  4.38s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:32<12:06,  4.37s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:36<12:02,  4.38s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:41<11:58,  4.38s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:46<12:42,  4.68s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:50<12:23,  4.59s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:55<12:09,  4.53s/it]Tuning global sampler:  20%|██        | 40/200 [04:59<11:58,  4.49s/it]Tuning global sampler:  20%|██        | 41/200 [05:04<11:48,  4.46s/it]Tuning global sampler:  21%|██        | 42/200 [05:08<11:40,  4.43s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:12<11:34,  4.42s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:17<11:26,  4.40s/it]