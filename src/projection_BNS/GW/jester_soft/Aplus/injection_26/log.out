Wed Apr  2 07:33:42 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
07:33 ninjax INFO    : Checking and setting outdir
07:33 ninjax INFO    : Found generation prior file ./Aplus/injection_26/generation_prior.prior
07:33 ninjax INFO    : The outdir is set to ./Aplus/injection_26
07:33 ninjax INFO    : Loading the given config
07:33 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
07:33 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
07:33 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/jester_soft/Aplus/injection_26/complete_config.json
07:33 ninjax INFO    : No seed specified. Generating a random seed: 114487
07:33 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 290768
07:33 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 780395
07:33 ninjax INFO    : Loading the priors
07:33 ninjax INFO    : Setting up the prior
07:33 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
07:33 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
07:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
07:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
07:33 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
07:33 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
07:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
07:33 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
07:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
07:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
07:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
07:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
07:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
07:33 ninjax INFO    : Setting up the generation prior
07:33 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 1.99, naming=["mass_1_source"])
07:33 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 1.99, naming=["mass_2_source"])
07:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
07:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
07:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
07:33 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
07:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
07:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
07:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
07:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
07:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
07:33 ninjax INFO    : Finished prior setup
07:33 ninjax INFO    : Setting the transforms
07:33 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
07:33 ninjax INFO    : transforms_str_list has 3 elements
07:33 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
07:33 ninjax INFO    : Setting the likelihood
07:33 ninjax INFO    : GW likelihood provided, setting up the GW pipe
07:33 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz
07:33 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz for BNS injections
07:33 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
07:33 ninjax INFO    : self.is_BNS_run is True
07:33 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
07:33 ninjax INFO    : GW run is an injection
07:33 ninjax INFO    : Setting up GW injection . . . 
07:33 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
07:33 ninjax INFO    : Generating new injection
07:33 ninjax INFO    : Sanity check: generated parameters:
07:33 ninjax INFO    : {'mass_1_source': 1.6000345244760903, 'mass_2_source': 1.8532470667782837, 's1_z': 0.044044336918075744, 's2_z': -0.013944900262866322, 'cos_iota': 0.5989028345361298, 'd_L': 258.46491002590295, 't_c': 0.00843684044482744, 'phase_c': 0.6111466149217435, 'psi': 0.35300738452874714, 'ra': 3.3077172496346696, 'sin_dec': 0.5910751618584578}
07:33 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz . . . 
07:33 ninjax INFO    : Injected lambda_1: 20.80607832536502
07:33 ninjax INFO    : Injected lambda_2: 70.25350166205634
07:33 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.5857757333347102 is 128.0
07:33 ninjax INFO    : After transforms, the injection parameters are:
07:33 ninjax INFO    : {'mass_1_source': 1.8532470667782837, 'mass_2_source': 1.6000345244760903, 's1_z': 0.044044336918075744, 's2_z': -0.013944900262866322, 'cos_iota': 0.5989028345361298, 'd_L': 258.46491002590295, 't_c': 0.00843684044482744, 'phase_c': 0.6111466149217435, 'psi': 0.35300738452874714, 'ra': 3.3077172496346696, 'sin_dec': 0.5910751618584578, 'q': 0.8633681677735595, 'M_c': 1.5857757333347102, 'eta': 0.24865585398454038, 'iota': Array(0.92866597, dtype=float64, weak_type=True), 'dec': Array(0.63239112, dtype=float64, weak_type=True), 'lambda_1': 20.80607832536502, 'lambda_2': 70.25350166205634}
07:33 ninjax INFO    : The trial injection parameters are {'M_c': 1.5857757333347102, 'eta': 0.24865585398454038, 's1_z': 0.044044336918075744, 's2_z': -0.013944900262866322, 'lambda_1': 20.80607832536502, 'lambda_2': 70.25350166205634, 'd_L': 258.46491002590295, 'phase_c': 0.6111466149217435, 'iota': 0.9286659706497674, 't_c': 0.00843684044482744, 'psi': 0.35300738452874714, 'ra': 3.3077172496346696, 'dec': 0.6323911190393141}
07:33 ninjax INFO    : Injecting signals . . .
07:33 ninjax INFO    : self.ifos
07:33 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
07:33 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
07:33 ninjax INFO    : [-9.40468121e-25+5.79744915e-23j  3.48889064e-23+2.23216492e-23j
 -2.31395788e-23-3.30529458e-23j ...
 -1.61626542e-23-2.58503326e-23j -2.15920402e-23-2.41038407e-23j
  2.25958579e-24+1.74575635e-23j]
07:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
07:33 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
07:33 ninjax INFO    : [-3.41215123e-23+3.71159623e-23j -8.25801465e-23-1.12939780e-23j
 -1.54945061e-23+3.35167736e-23j ...
  1.77570903e-23+4.13137488e-24j  1.03246733e-23-1.64839020e-23j
  2.74942998e-23-9.01034307e-24j]
07:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
07:33 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
07:33 ninjax INFO    : [-4.76264934e-23+2.74542461e-23j  3.06306716e-23+4.33102969e-23j
  5.11614479e-23-8.43275659e-23j ...
  2.22602132e-23-2.52326419e-23j -1.23061249e-23-1.43572464e-23j
 -7.04271994e-24+4.62864352e-23j]
07:33 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
07:33 ninjax INFO    : SNR for ifo H1 is 3.8915134580554467
07:33 ninjax INFO    : SNR for ifo L1 is 4.970486026306794
07:33 ninjax INFO    : SNR for ifo V1 is 14.265313743341153
07:33 ninjax INFO    : The network SNR is 15.599640525598522
07:33 ninjax INFO    : Network SNR passes threshold
07:33 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
07:33 ninjax INFO    :    mass_1_source: 1.8532470667782837
07:33 ninjax INFO    :    mass_2_source: 1.6000345244760903
07:33 ninjax INFO    :    s1_z: 0.044044336918075744
07:33 ninjax INFO    :    s2_z: -0.013944900262866322
07:33 ninjax INFO    :    cos_iota: 0.5989028345361298
07:33 ninjax INFO    :    d_L: 258.46491002590295
07:33 ninjax INFO    :    t_c: 0.00843684044482744
07:33 ninjax INFO    :    phase_c: 0.6111466149217435
07:33 ninjax INFO    :    psi: 0.35300738452874714
07:33 ninjax INFO    :    ra: 3.3077172496346696
07:33 ninjax INFO    :    sin_dec: 0.5910751618584578
07:33 ninjax INFO    :    q: 0.8633681677735595
07:33 ninjax INFO    :    M_c: 1.5857757333347102
07:33 ninjax INFO    :    eta: 0.24865585398454038
07:33 ninjax INFO    :    iota: 0.9286659706497674
07:33 ninjax INFO    :    dec: 0.6323911190393141
07:33 ninjax INFO    :    lambda_1: 20.80607832536502
07:33 ninjax INFO    :    lambda_2: 70.25350166205634
07:33 ninjax INFO    :    H1_SNR: 3.8915134580554467
07:33 ninjax INFO    :    L1_SNR: 4.970486026306794
07:33 ninjax INFO    :    V1_SNR: 14.265313743341153
07:33 ninjax INFO    :    network_SNR: 15.599640525598522
07:33 ninjax INFO    :    epoch: 126.0
07:33 ninjax INFO    :    gmst: 2.7288901910520846
07:33 ninjax INFO    :    duration: 128.0
07:33 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
07:33 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
07:33 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
07:36 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 145.37911295890808 seconds = 2.4229852159818015 minutes
07:36 ninjax INFO    : The priors are not modified after their initialization
07:36 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
07:36 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
07:36 ninjax INFO    : sample: {'M_c': Array([1.93381817, 2.40708653, 2.16880142], dtype=float64), 'q': Array([0.71881403, 0.27425344, 0.80492646], dtype=float64), 's1_z': Array([-0.00170859, -0.03065088, -0.03998139], dtype=float64), 's2_z': Array([ 0.03285477, -0.04131703,  0.04621036], dtype=float64), 'lambda_1': Array([3196.3846445 , 2278.71772282, 2792.61480398], dtype=float64), 'lambda_2': Array([4346.56492565, 3920.99900666, 3011.48513874], dtype=float64), 'cos_iota': Array([0.23220761, 0.76236448, 0.52690602], dtype=float64), 'd_L': Array([427.46078613, 660.86456756, 520.14516136], dtype=float64), 't_c': Array([ 0.07414836, -0.06417873,  0.0077264 ], dtype=float64), 'phase_c': Array([0.11009188, 2.52077087, 3.64662231], dtype=float64), 'psi': Array([2.67722365, 1.71184044, 1.54702003], dtype=float64), 'ra': Array([5.26558573, 2.87025221, 2.26776085], dtype=float64), 'sin_dec': Array([-0.59047556, -0.4056417 ,  0.04939076], dtype=float64)}
07:36 ninjax INFO    : log_prob: [-27.72425723 -62.00377666 -38.07464649]
07:36 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.8532470667782837, 'mass_2_source': 1.6000345244760903, 's1_z': 0.044044336918075744, 's2_z': -0.013944900262866322, 'cos_iota': 0.5989028345361298, 'd_L': 258.46491002590295, 't_c': 0.00843684044482744, 'phase_c': 0.6111466149217435, 'psi': 0.35300738452874714, 'ra': 3.3077172496346696, 'sin_dec': 0.5910751618584578, 'q': 0.8633681677735595, 'M_c': 1.5857757333347102, 'eta': 0.24865585398454038, 'iota': Array(0.92866597, dtype=float64, weak_type=True), 'dec': Array(0.63239112, dtype=float64, weak_type=True), 'lambda_1': 20.80607832536502, 'lambda_2': 70.25350166205634, 'H1_SNR': 3.8915134580554467, 'L1_SNR': 4.970486026306794, 'V1_SNR': 14.265313743341153, 'network_SNR': 15.599640525598522, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
07:36 ninjax INFO    : log_prob at the injection parameters is: 104.2638816064741
07:36 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
07:36 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
07:36 ninjax INFO    : Ninjax setup complete.
07:36 ninjax INFO    : Saving output to ./Aplus/injection_26/
07:36 ninjax INFO    : Using polynomial learning rate scheduler
07:36 ninjax INFO    : The hyperparameters passed to flowMC and jim are
07:36 ninjax INFO    :    n_loop_training: 200
07:36 ninjax INFO    :    n_loop_production: 10
07:36 ninjax INFO    :    n_local_steps: 100
07:36 ninjax INFO    :    n_global_steps: 1000
07:36 ninjax INFO    :    n_epochs: 25
07:36 ninjax INFO    :    n_chains: 1000
07:36 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x14595cc9bbe0>
07:36 ninjax INFO    :    max_samples: 50000
07:36 ninjax INFO    :    momentum: 0.9
07:36 ninjax INFO    :    batch_size: 30000
07:36 ninjax INFO    :    use_global: True
07:36 ninjax INFO    :    keep_quantile: 0.0
07:36 ninjax INFO    :    train_thinning: 10
07:36 ninjax INFO    :    output_thinning: 50
07:36 ninjax INFO    :    n_sample_max: 10000
07:36 ninjax INFO    :    num_layers: 10
07:36 ninjax INFO    :    hidden_size: [128, 128]
07:36 ninjax INFO    :    num_bins: 8
07:36 ninjax INFO    :    save_training_chains: False
07:36 ninjax INFO    :    eps_mass_matrix: 1e-05
07:36 ninjax INFO    :    use_scheduler: True
07:36 ninjax INFO    :    use_temperature: False
07:36 ninjax INFO    :    which_temperature_schedule: exponential
07:36 ninjax INFO    :    starting_temperature: 2.0
07:36 ninjax INFO    :    stop_tempering_iteration: 75
07:36 ninjax INFO    :    stopping_criterion_global_acc: 0.1
07:36 ninjax INFO    :    stopping_criterion_loss: -inf
07:36 ninjax INFO    :    nf_model_kwargs: {}
07:36 ninjax INFO    :    local sampler arg not shown (pretty print)
07:36 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[-8.32712323e-25  3.33417340e-23 -2.46635807e-23  1.97130082e-23
  2.50443820e-23 -2.88273822e-23  5.17735784e-23 -3.88681240e-23
 -1.30699143e-23 -3.14961198e-23]
[ 5.61759112e-23  2.13998103e-23 -3.20948338e-23 -2.45391351e-23
  7.90061063e-23  4.69431392e-23  6.73311792e-23  1.51651633e-23
  1.07279579e-22 -6.19459199e-23]
Checking the noise that was generated in inject_signal ifo:
[-3.61020064e-23 -8.24492530e-23 -1.33906429e-23  8.56470112e-23
  2.02126093e-23  1.72647419e-23  5.80932246e-23  8.31922202e-23
 -2.01099276e-23  5.10942832e-23]
[ 3.82881354e-23 -8.99737983e-24  3.44443576e-23  1.12288134e-23
  2.47526492e-23  2.25479589e-23 -4.83922450e-23 -4.04610045e-23
 -2.07679673e-23 -1.72867572e-23]
Checking the noise that was generated in inject_signal ifo:
[-5.31245258e-23  3.37127802e-23  5.94961601e-23  4.47845373e-23
  2.57280223e-24 -3.93173852e-23 -2.33995780e-23  6.40756922e-23
 -6.33091218e-23  8.28678443e-24]
[ 3.37802899e-23  5.11002562e-23 -8.35206050e-23  4.35609357e-24
 -2.79288910e-23  6.13570845e-23  5.86683233e-23  5.64651511e-23
 -1.50922520e-22  3.13098804e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.11081957817077637 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.8532470667782837, 'mass_2_source': 1.6000345244760903, 's1_z': 0.044044336918075744, 's2_z': -0.013944900262866322, 'cos_iota': 0.5989028345361298, 'd_L': 258.46491002590295, 't_c': 0.00843684044482744, 'phase_c': 0.6111466149217435, 'psi': 0.35300738452874714, 'ra': 3.3077172496346696, 'sin_dec': 0.5910751618584578, 'q': 0.8633681677735595, 'M_c': 1.5857757333347102, 'eta': 0.24865585398454038, 'iota': Array(0.92866597, dtype=float64, weak_type=True), 'dec': Array(0.63239112, dtype=float64, weak_type=True), 'lambda_1': 20.80607832536502, 'lambda_2': 70.25350166205634, 'H1_SNR': 3.8915134580554467, 'L1_SNR': 4.970486026306794, 'V1_SNR': 14.265313743341153, 'network_SNR': 15.599640525598522, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5101394653320312 seconds
Time for h_sky_low and h_sky_center: 5.315843820571899 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.6975409984588623
Going to compute coefficients . . .
Time for computing coefficients: 124.26196718215942 seconds
Time for computing coefficients: 6.879894495010376 seconds
Time for computing coefficients: 7.057796001434326 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:00<6:40:57, 120.89s/it]Tuning global sampler:   1%|          | 2/200 [02:05<2:53:09, 52.47s/it] Tuning global sampler:   2%|▏         | 3/200 [02:10<1:40:31, 30.61s/it]Tuning global sampler:   2%|▏         | 4/200 [02:14<1:06:28, 20.35s/it]Tuning global sampler:   2%|▎         | 5/200 [02:20<48:42, 14.99s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:24<37:03, 11.46s/it]Tuning global sampler:   4%|▎         | 7/200 [02:29<29:36,  9.20s/it]Tuning global sampler:   4%|▍         | 8/200 [02:33<24:46,  7.74s/it]Tuning global sampler:   4%|▍         | 9/200 [02:38<21:27,  6.74s/it]Tuning global sampler:   5%|▌         | 10/200 [02:42<19:05,  6.03s/it]Tuning global sampler:   6%|▌         | 11/200 [02:47<17:37,  5.59s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:34,  5.29s/it]Tuning global sampler:   6%|▋         | 13/200 [02:56<15:48,  5.07s/it]Tuning global sampler:   7%|▋         | 14/200 [03:01<15:19,  4.94s/it]Tuning global sampler:   8%|▊         | 15/200 [03:05<14:58,  4.86s/it]Tuning global sampler:   8%|▊         | 16/200 [03:10<14:42,  4.79s/it]Tuning global sampler:   8%|▊         | 17/200 [03:15<14:28,  4.75s/it]Tuning global sampler:   9%|▉         | 18/200 [03:19<14:18,  4.72s/it]Tuning global sampler:  10%|▉         | 19/200 [03:24<14:09,  4.70s/it]Tuning global sampler:  10%|█         | 20/200 [03:29<14:02,  4.68s/it]Tuning global sampler:  10%|█         | 21/200 [03:33<13:56,  4.67s/it]Tuning global sampler:  11%|█         | 22/200 [03:38<13:48,  4.65s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:43<13:42,  4.64s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:47<13:25,  4.58s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:52<14:00,  4.80s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:57<13:34,  4.68s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:01<13:16,  4.60s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:06<13:00,  4.54s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:10<12:49,  4.50s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:14<12:40,  4.47s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:19<12:32,  4.46s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:23<12:24,  4.43s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:28<12:16,  4.41s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:32<12:09,  4.40s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:36<12:06,  4.40s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:41<12:01,  4.40s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:45<11:56,  4.40s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:50<11:52,  4.40s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:54<11:48,  4.40s/it]Tuning global sampler:  20%|██        | 40/200 [04:58<11:44,  4.40s/it]Tuning global sampler:  20%|██        | 41/200 [05:03<11:40,  4.41s/it]Tuning global sampler:  21%|██        | 42/200 [05:07<11:36,  4.41s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:12<11:32,  4.41s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:17<12:11,  4.69s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:21<11:51,  4.59s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:26<11:39,  4.54s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:30<11:28,  4.50s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:35<11:19,  4.47s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:39<11:13,  4.46s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:43<11:06,  4.44s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:48<11:00,  4.43s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:52<10:54,  4.42s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:57<10:49,  4.42s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:01<10:45,  4.42s/it]