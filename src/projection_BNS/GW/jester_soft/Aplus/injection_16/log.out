Wed Apr  2 07:33:40 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
07:33 ninjax INFO    : Checking and setting outdir
07:33 ninjax INFO    : Found generation prior file ./Aplus/injection_16/generation_prior.prior
07:33 ninjax INFO    : The outdir is set to ./Aplus/injection_16
07:33 ninjax INFO    : Loading the given config
07:33 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
07:33 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
07:33 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/jester_soft/Aplus/injection_16/complete_config.json
07:33 ninjax INFO    : No seed specified. Generating a random seed: 564863
07:33 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 439983
07:33 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 241674
07:33 ninjax INFO    : Loading the priors
07:33 ninjax INFO    : Setting up the prior
07:33 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
07:33 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
07:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
07:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
07:33 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
07:33 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
07:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
07:33 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
07:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
07:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
07:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
07:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
07:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
07:33 ninjax INFO    : Setting up the generation prior
07:33 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 1.99, naming=["mass_1_source"])
07:33 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 1.99, naming=["mass_2_source"])
07:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
07:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
07:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
07:33 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
07:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
07:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
07:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
07:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
07:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
07:33 ninjax INFO    : Finished prior setup
07:33 ninjax INFO    : Setting the transforms
07:33 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
07:33 ninjax INFO    : transforms_str_list has 3 elements
07:33 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
07:33 ninjax INFO    : Setting the likelihood
07:33 ninjax INFO    : GW likelihood provided, setting up the GW pipe
07:33 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz
07:33 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz for BNS injections
07:33 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
07:33 ninjax INFO    : self.is_BNS_run is True
07:33 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
07:33 ninjax INFO    : GW run is an injection
07:33 ninjax INFO    : Setting up GW injection . . . 
07:33 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
07:33 ninjax INFO    : Generating new injection
07:33 ninjax INFO    : Sanity check: generated parameters:
07:33 ninjax INFO    : {'mass_1_source': 1.1906572150042278, 'mass_2_source': 1.6735562822408794, 's1_z': 0.029891169103198736, 's2_z': -0.013968706988174429, 'cos_iota': 0.9664592271458545, 'd_L': 141.5674161556853, 't_c': -0.07330025523926378, 'phase_c': 3.232030217372708, 'psi': 1.773907637209584, 'ra': 5.803111542795207, 'sin_dec': -0.23944938440699826}
07:33 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz . . . 
07:33 ninjax INFO    : Injected lambda_1: 49.8604707936182
07:33 ninjax INFO    : Injected lambda_2: 564.7975093871374
07:33 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.2645320294524247 is 256.0
07:33 ninjax INFO    : After transforms, the injection parameters are:
07:33 ninjax INFO    : {'mass_1_source': 1.6735562822408794, 'mass_2_source': 1.1906572150042278, 's1_z': 0.029891169103198736, 's2_z': -0.013968706988174429, 'cos_iota': 0.9664592271458545, 'd_L': 141.5674161556853, 't_c': -0.07330025523926378, 'phase_c': 3.232030217372708, 'psi': 1.773907637209584, 'ra': 5.803111542795207, 'sin_dec': -0.23944938440699826, 'q': 0.7114533449750173, 'M_c': 1.2645320294524247, 'eta': 0.24289372568899736, 'iota': Array(0.2597305, dtype=float64, weak_type=True), 'dec': Array(-0.2417987, dtype=float64, weak_type=True), 'lambda_1': 49.8604707936182, 'lambda_2': 564.7975093871374}
07:33 ninjax INFO    : The trial injection parameters are {'M_c': 1.2645320294524247, 'eta': 0.24289372568899736, 's1_z': 0.029891169103198736, 's2_z': -0.013968706988174429, 'lambda_1': 49.8604707936182, 'lambda_2': 564.7975093871374, 'd_L': 141.5674161556853, 'phase_c': 3.232030217372708, 'iota': 0.25973049650332003, 't_c': -0.07330025523926378, 'psi': 1.773907637209584, 'ra': 5.803111542795207, 'dec': -0.24179869776366378}
07:33 ninjax INFO    : Injecting signals . . .
07:33 ninjax INFO    : self.ifos
07:33 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
07:33 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
07:33 ninjax INFO    : [ 1.45387606e-23-5.43252637e-24j -3.12571755e-23-3.75128639e-23j
  2.02810845e-23-2.79033449e-23j ...
 -5.96483518e-24-2.88375582e-23j -1.31488729e-23-4.10366184e-24j
 -2.76665483e-23-1.30916158e-23j]
07:33 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
07:33 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
07:33 ninjax INFO    : [-1.68334875e-23+5.19634601e-23j  2.47324704e-23-6.39543320e-23j
 -8.73305909e-23+1.01152909e-22j ...
 -1.90317125e-23-4.57852744e-23j  1.97220248e-23+2.36853282e-24j
 -1.78469694e-24-2.01180183e-23j]
07:33 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
07:33 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
07:33 ninjax INFO    : [-1.44777691e-22+3.33938659e-24j -1.73653756e-23-6.19970726e-23j
 -7.43502545e-23+4.68779490e-23j ...
  1.32423810e-23-8.05415183e-23j -3.39845761e-23-9.10495520e-23j
 -1.69024042e-23-5.11360001e-23j]
07:33 ninjax INFO    : [1.43183556e-46 1.43058540e-46 1.42935095e-46 ... 6.39793039e-47
 6.39795354e-47 6.39797668e-47]
07:33 ninjax INFO    : SNR for ifo H1 is 20.67096463372898
07:33 ninjax INFO    : SNR for ifo L1 is 21.120787049347676
07:33 ninjax INFO    : SNR for ifo V1 is 28.55416445996212
07:33 ninjax INFO    : The network SNR is 41.09399874044056
07:33 ninjax INFO    : Network SNR passes threshold
07:33 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
07:33 ninjax INFO    :    mass_1_source: 1.6735562822408794
07:33 ninjax INFO    :    mass_2_source: 1.1906572150042278
07:33 ninjax INFO    :    s1_z: 0.029891169103198736
07:33 ninjax INFO    :    s2_z: -0.013968706988174429
07:33 ninjax INFO    :    cos_iota: 0.9664592271458545
07:33 ninjax INFO    :    d_L: 141.5674161556853
07:33 ninjax INFO    :    t_c: -0.07330025523926378
07:33 ninjax INFO    :    phase_c: 3.232030217372708
07:33 ninjax INFO    :    psi: 1.773907637209584
07:33 ninjax INFO    :    ra: 5.803111542795207
07:33 ninjax INFO    :    sin_dec: -0.23944938440699826
07:33 ninjax INFO    :    q: 0.7114533449750173
07:33 ninjax INFO    :    M_c: 1.2645320294524247
07:33 ninjax INFO    :    eta: 0.24289372568899736
07:33 ninjax INFO    :    iota: 0.25973049650332003
07:33 ninjax INFO    :    dec: -0.24179869776366378
07:33 ninjax INFO    :    lambda_1: 49.8604707936182
07:33 ninjax INFO    :    lambda_2: 564.7975093871374
07:33 ninjax INFO    :    H1_SNR: 20.67096463372898
07:33 ninjax INFO    :    L1_SNR: 21.120787049347676
07:33 ninjax INFO    :    V1_SNR: 28.55416445996212
07:33 ninjax INFO    :    network_SNR: 41.09399874044056
07:33 ninjax INFO    :    epoch: 254.0
07:33 ninjax INFO    :    gmst: 2.7288901910520846
07:33 ninjax INFO    :    duration: 256.0
07:33 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
07:33 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
07:33 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
07:37 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 189.32476592063904 seconds = 3.155412765343984 minutes
07:37 ninjax INFO    : The priors are not modified after their initialization
07:37 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
07:37 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
07:37 ninjax INFO    : sample: {'M_c': Array([1.3139123 , 1.59282387, 1.66458417], dtype=float64), 'q': Array([0.90311757, 0.4477888 , 0.93686423], dtype=float64), 's1_z': Array([0.00930837, 0.01326563, 0.00195685], dtype=float64), 's2_z': Array([-0.01977345,  0.03878795,  0.02705517], dtype=float64), 'lambda_1': Array([3818.88075462,  559.86925073, 3625.71134328], dtype=float64), 'lambda_2': Array([2063.91070539,  854.68388067, 3375.45682947], dtype=float64), 'cos_iota': Array([0.13505315, 0.62699189, 0.01190152], dtype=float64), 'd_L': Array([588.92819359, 440.61600871, 353.38399336], dtype=float64), 't_c': Array([-0.09873859, -0.07319693,  0.02515278], dtype=float64), 'phase_c': Array([2.69484015, 5.49486844, 2.98748397], dtype=float64), 'psi': Array([2.52967   , 2.24117261, 0.69943635], dtype=float64), 'ra': Array([5.80800978, 5.69835875, 0.10608963], dtype=float64), 'sin_dec': Array([ 0.45956235, -0.78242342, -0.50514225], dtype=float64)}
07:37 ninjax INFO    : log_prob: [ -6.3607981  -65.98289679 -23.10735201]
07:37 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.6735562822408794, 'mass_2_source': 1.1906572150042278, 's1_z': 0.029891169103198736, 's2_z': -0.013968706988174429, 'cos_iota': 0.9664592271458545, 'd_L': 141.5674161556853, 't_c': -0.07330025523926378, 'phase_c': 3.232030217372708, 'psi': 1.773907637209584, 'ra': 5.803111542795207, 'sin_dec': -0.23944938440699826, 'q': 0.7114533449750173, 'M_c': 1.2645320294524247, 'eta': 0.24289372568899736, 'iota': Array(0.2597305, dtype=float64, weak_type=True), 'dec': Array(-0.2417987, dtype=float64, weak_type=True), 'lambda_1': 49.8604707936182, 'lambda_2': 564.7975093871374, 'H1_SNR': 20.67096463372898, 'L1_SNR': 21.120787049347676, 'V1_SNR': 28.55416445996212, 'network_SNR': 41.09399874044056, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
07:37 ninjax INFO    : log_prob at the injection parameters is: 850.9561410799724
07:37 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
07:37 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
07:37 ninjax INFO    : Ninjax setup complete.
07:37 ninjax INFO    : Saving output to ./Aplus/injection_16/
07:37 ninjax INFO    : Using polynomial learning rate scheduler
07:37 ninjax INFO    : The hyperparameters passed to flowMC and jim are
07:37 ninjax INFO    :    n_loop_training: 200
07:37 ninjax INFO    :    n_loop_production: 10
07:37 ninjax INFO    :    n_local_steps: 100
07:37 ninjax INFO    :    n_global_steps: 1000
07:37 ninjax INFO    :    n_epochs: 25
07:37 ninjax INFO    :    n_chains: 1000
07:37 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x1526901f64d0>
07:37 ninjax INFO    :    max_samples: 50000
07:37 ninjax INFO    :    momentum: 0.9
07:37 ninjax INFO    :    batch_size: 30000
07:37 ninjax INFO    :    use_global: True
07:37 ninjax INFO    :    keep_quantile: 0.0
07:37 ninjax INFO    :    train_thinning: 10
07:37 ninjax INFO    :    output_thinning: 50
07:37 ninjax INFO    :    n_sample_max: 10000
07:37 ninjax INFO    :    num_layers: 10
07:37 ninjax INFO    :    hidden_size: [128, 128]
07:37 ninjax INFO    :    num_bins: 8
07:37 ninjax INFO    :    save_training_chains: False
07:37 ninjax INFO    :    eps_mass_matrix: 1e-05
07:37 ninjax INFO    :    use_scheduler: True
07:37 ninjax INFO    :    use_temperature: False
07:37 ninjax INFO    :    which_temperature_schedule: exponential
07:37 ninjax INFO    :    starting_temperature: 2.0
07:37 ninjax INFO    :    stop_tempering_iteration: 75
07:37 ninjax INFO    :    stopping_criterion_global_acc: 0.1
07:37 ninjax INFO    :    stopping_criterion_loss: -inf
07:37 ninjax INFO    :    nf_model_kwargs: {}
07:37 ninjax INFO    :    local sampler arg not shown (pretty print)
07:37 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[ 6.49139863e-24 -2.17338510e-23  1.27923795e-23 -9.98039278e-24
  1.40200028e-22 -1.08893298e-22  7.54095240e-23  5.74937937e-23
 -5.34349968e-23  5.66194323e-23]
[-3.12532346e-25 -3.70239656e-23 -3.38033801e-23  5.74009517e-23
  6.79590919e-23 -3.18222422e-23 -8.70459221e-23 -8.51668860e-23
 -1.04849766e-23  8.93701787e-23]
Checking the noise that was generated in inject_signal ifo:
[-2.28558378e-23  2.52034671e-23 -8.20945175e-23 -4.80851653e-23
 -2.85099302e-23 -1.62009294e-23  3.42008766e-23 -8.25721779e-24
  4.38541873e-23  3.36775306e-23]
[ 4.43013356e-23 -5.42223464e-23  9.29386851e-23 -1.02523933e-22
  3.80757002e-23  4.74255929e-24 -2.03731312e-23 -5.22895377e-23
 -5.23348324e-23 -4.49573095e-23]
Checking the noise that was generated in inject_signal ifo:
[-1.42300369e-22 -2.89611731e-23 -5.79270282e-23 -4.41916713e-24
  1.53269907e-23 -8.51933122e-23  4.63293551e-23 -1.81014293e-24
 -5.10162902e-23 -9.74667559e-23]
[-1.32055947e-23 -4.99437367e-23  4.37323106e-23  7.35073439e-23
  6.92211574e-23  7.06474201e-23  1.39782352e-22 -5.95396605e-23
 -1.62617997e-23  7.97087584e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.18504834175109863 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.6735562822408794, 'mass_2_source': 1.1906572150042278, 's1_z': 0.029891169103198736, 's2_z': -0.013968706988174429, 'cos_iota': 0.9664592271458545, 'd_L': 141.5674161556853, 't_c': -0.07330025523926378, 'phase_c': 3.232030217372708, 'psi': 1.773907637209584, 'ra': 5.803111542795207, 'sin_dec': -0.23944938440699826, 'q': 0.7114533449750173, 'M_c': 1.2645320294524247, 'eta': 0.24289372568899736, 'iota': Array(0.2597305, dtype=float64, weak_type=True), 'dec': Array(-0.2417987, dtype=float64, weak_type=True), 'lambda_1': 49.8604707936182, 'lambda_2': 564.7975093871374, 'H1_SNR': 20.67096463372898, 'L1_SNR': 21.120787049347676, 'V1_SNR': 28.55416445996212, 'network_SNR': 41.09399874044056, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5132339000701904 seconds
Time for h_sky_low and h_sky_center: 5.513533353805542 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.6994030475616455
Going to compute coefficients . . .
Time for computing coefficients: 167.66154861450195 seconds
Time for computing coefficients: 7.129398345947266 seconds
Time for computing coefficients: 7.09220552444458 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:01<6:41:35, 121.08s/it]Tuning global sampler:   1%|          | 2/200 [02:06<2:55:08, 53.07s/it] Tuning global sampler:   2%|▏         | 3/200 [02:11<1:41:39, 30.96s/it]Tuning global sampler:   2%|▏         | 4/200 [02:15<1:07:09, 20.56s/it]Tuning global sampler:   2%|▎         | 5/200 [02:20<48:06, 14.80s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:25<36:39, 11.34s/it]Tuning global sampler:   4%|▎         | 7/200 [02:29<29:18,  9.11s/it]Tuning global sampler:   4%|▍         | 8/200 [02:34<24:33,  7.67s/it]Tuning global sampler:   4%|▍         | 9/200 [02:38<21:17,  6.69s/it]Tuning global sampler:   5%|▌         | 10/200 [02:43<18:58,  5.99s/it]Tuning global sampler:   6%|▌         | 11/200 [02:47<17:30,  5.56s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:28,  5.26s/it]Tuning global sampler:   6%|▋         | 13/200 [02:56<15:42,  5.04s/it]Tuning global sampler:   7%|▋         | 14/200 [03:01<15:14,  4.92s/it]Tuning global sampler:   8%|▊         | 15/200 [03:06<14:53,  4.83s/it]Tuning global sampler:   8%|▊         | 16/200 [03:10<14:38,  4.77s/it]Tuning global sampler:   8%|▊         | 17/200 [03:15<14:25,  4.73s/it]Tuning global sampler:   9%|▉         | 18/200 [03:19<14:15,  4.70s/it]Tuning global sampler:  10%|▉         | 19/200 [03:24<14:07,  4.68s/it]Tuning global sampler:  10%|█         | 20/200 [03:29<13:59,  4.67s/it]Tuning global sampler:  10%|█         | 21/200 [03:34<14:47,  4.96s/it]Tuning global sampler:  11%|█         | 22/200 [03:39<14:22,  4.85s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:44<14:04,  4.77s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:48<13:40,  4.66s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:52<13:21,  4.58s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:57<13:06,  4.52s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:01<12:54,  4.48s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:05<12:45,  4.45s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:10<12:37,  4.43s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:14<12:30,  4.41s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:19<12:24,  4.40s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:23<12:19,  4.40s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:27<12:11,  4.38s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:32<12:05,  4.37s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:36<12:01,  4.37s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:40<11:57,  4.37s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:45<11:53,  4.37s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:49<11:48,  4.37s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:54<11:44,  4.38s/it]Tuning global sampler:  20%|██        | 40/200 [04:59<12:28,  4.68s/it]Tuning global sampler:  20%|██        | 41/200 [05:03<12:09,  4.59s/it]Tuning global sampler:  21%|██        | 42/200 [05:08<11:54,  4.52s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:12<11:43,  4.48s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:16<11:32,  4.44s/it]