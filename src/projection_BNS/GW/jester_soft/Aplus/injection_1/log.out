Wed Apr  2 07:32:22 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
07:32 ninjax INFO    : Checking and setting outdir
07:32 ninjax INFO    : Found generation prior file ./Aplus/injection_1/generation_prior.prior
07:32 ninjax INFO    : The outdir is set to ./Aplus/injection_1
07:32 ninjax INFO    : Loading the given config
07:32 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
07:32 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
07:32 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/jester_soft/Aplus/injection_1/complete_config.json
07:32 ninjax INFO    : No seed specified. Generating a random seed: 200887
07:32 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 980695
07:32 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 443992
07:32 ninjax INFO    : Loading the priors
07:32 ninjax INFO    : Setting up the prior
07:32 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
07:32 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
07:32 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
07:32 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
07:32 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
07:32 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
07:32 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
07:32 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
07:32 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
07:32 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
07:32 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
07:32 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
07:32 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
07:32 ninjax INFO    : Setting up the generation prior
07:32 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 1.99, naming=["mass_1_source"])
07:32 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 1.99, naming=["mass_2_source"])
07:32 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
07:32 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
07:32 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
07:32 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
07:32 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
07:32 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
07:32 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
07:32 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
07:32 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
07:32 ninjax INFO    : Finished prior setup
07:32 ninjax INFO    : Setting the transforms
07:32 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
07:32 ninjax INFO    : transforms_str_list has 3 elements
07:32 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
07:32 ninjax INFO    : Setting the likelihood
07:32 ninjax INFO    : GW likelihood provided, setting up the GW pipe
07:32 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz
07:32 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz for BNS injections
07:32 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
07:32 ninjax INFO    : self.is_BNS_run is True
07:32 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
07:32 ninjax INFO    : GW run is an injection
07:32 ninjax INFO    : Setting up GW injection . . . 
07:32 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
07:32 ninjax INFO    : Generating new injection
07:32 ninjax INFO    : Sanity check: generated parameters:
07:32 ninjax INFO    : {'mass_1_source': 1.4148445555683986, 'mass_2_source': 1.5105937040228048, 's1_z': -0.038045780292095266, 's2_z': 0.004887910908618974, 'cos_iota': 0.7395969449042763, 'd_L': 263.246575524876, 't_c': -0.058780360895398114, 'phase_c': 3.027817093082784, 'psi': 1.6595408571186092, 'ra': 2.9210300406093763, 'sin_dec': -0.534551651358536}
07:32 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz . . . 
07:32 ninjax INFO    : Injected lambda_1: 107.72430891094942
07:32 ninjax INFO    : Injected lambda_2: 171.52456195388734
07:32 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.348246579859682 is 256.0
07:32 ninjax INFO    : After transforms, the injection parameters are:
07:32 ninjax INFO    : {'mass_1_source': 1.5105937040228048, 'mass_2_source': 1.4148445555683986, 's1_z': -0.038045780292095266, 's2_z': 0.004887910908618974, 'cos_iota': 0.7395969449042763, 'd_L': 263.246575524876, 't_c': -0.058780360895398114, 'phase_c': 3.027817093082784, 'psi': 1.6595408571186092, 'ra': 2.9210300406093763, 'sin_dec': -0.534551651358536, 'q': 0.9366148897619391, 'M_c': 1.348246579859682, 'eta': 0.24973218926871377, 'iota': Array(0.73832501, dtype=float64, weak_type=True), 'dec': Array(-0.56397715, dtype=float64, weak_type=True), 'lambda_1': 107.72430891094942, 'lambda_2': 171.52456195388734}
07:32 ninjax INFO    : The trial injection parameters are {'M_c': 1.348246579859682, 'eta': 0.24973218926871377, 's1_z': -0.038045780292095266, 's2_z': 0.004887910908618974, 'lambda_1': 107.72430891094942, 'lambda_2': 171.52456195388734, 'd_L': 263.246575524876, 'phase_c': 3.027817093082784, 'iota': 0.7383250142879105, 't_c': -0.058780360895398114, 'psi': 1.6595408571186092, 'ra': 2.9210300406093763, 'dec': -0.5639771532285588}
07:32 ninjax INFO    : Injecting signals . . .
07:32 ninjax INFO    : self.ifos
07:32 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
07:32 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
07:32 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
07:32 ninjax INFO    : [ 8.96126895e-23-5.57931281e-23j -6.63099080e-23-8.49378659e-23j
 -8.02023031e-23-2.86805408e-23j ...
 -1.74059917e-23+1.57381884e-23j  1.07408099e-23-3.24712761e-23j
 -2.77735882e-23+3.61544728e-24j]
07:32 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
07:32 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
07:32 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
07:32 ninjax INFO    : [-2.02451556e-23+4.78227170e-24j  2.99735192e-23+3.82243233e-23j
  1.31084195e-22+1.73145745e-23j ...
  8.47161101e-26-5.42948789e-23j -2.57806875e-23-6.48425079e-23j
 -9.75944413e-24+4.89380791e-23j]
07:32 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
07:32 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
07:32 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
07:32 ninjax INFO    : [ 3.02215159e-23+1.59726340e-23j -1.42809447e-22-1.51593614e-22j
  7.96209956e-23-2.03397606e-23j ...
  5.63506483e-24+1.01661652e-23j -9.05141367e-23-3.60938513e-23j
 -6.93340281e-23+3.10690487e-24j]
07:32 ninjax INFO    : [1.43183556e-46 1.43058540e-46 1.42935095e-46 ... 6.39793039e-47
 6.39795354e-47 6.39797668e-47]
07:32 ninjax INFO    : SNR for ifo H1 is 14.348923402914913
07:32 ninjax INFO    : SNR for ifo L1 is 7.8150812648420835
07:32 ninjax INFO    : SNR for ifo V1 is 6.574510237357508
07:32 ninjax INFO    : The network SNR is 17.612248092163693
07:32 ninjax INFO    : Network SNR passes threshold
07:32 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
07:32 ninjax INFO    :    mass_1_source: 1.5105937040228048
07:32 ninjax INFO    :    mass_2_source: 1.4148445555683986
07:32 ninjax INFO    :    s1_z: -0.038045780292095266
07:32 ninjax INFO    :    s2_z: 0.004887910908618974
07:32 ninjax INFO    :    cos_iota: 0.7395969449042763
07:32 ninjax INFO    :    d_L: 263.246575524876
07:32 ninjax INFO    :    t_c: -0.058780360895398114
07:32 ninjax INFO    :    phase_c: 3.027817093082784
07:32 ninjax INFO    :    psi: 1.6595408571186092
07:32 ninjax INFO    :    ra: 2.9210300406093763
07:32 ninjax INFO    :    sin_dec: -0.534551651358536
07:32 ninjax INFO    :    q: 0.9366148897619391
07:32 ninjax INFO    :    M_c: 1.348246579859682
07:32 ninjax INFO    :    eta: 0.24973218926871377
07:32 ninjax INFO    :    iota: 0.7383250142879105
07:32 ninjax INFO    :    dec: -0.5639771532285588
07:32 ninjax INFO    :    lambda_1: 107.72430891094942
07:32 ninjax INFO    :    lambda_2: 171.52456195388734
07:32 ninjax INFO    :    H1_SNR: 14.348923402914913
07:32 ninjax INFO    :    L1_SNR: 7.8150812648420835
07:32 ninjax INFO    :    V1_SNR: 6.574510237357508
07:32 ninjax INFO    :    network_SNR: 17.612248092163693
07:32 ninjax INFO    :    epoch: 254.0
07:32 ninjax INFO    :    gmst: 2.7288901910520846
07:32 ninjax INFO    :    duration: 256.0
07:32 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
07:32 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
07:32 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
07:35 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 185.9238202571869 seconds = 3.0987303376197817 minutes
07:35 ninjax INFO    : The priors are not modified after their initialization
07:35 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
07:35 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
07:35 ninjax INFO    : sample: {'M_c': Array([1.71999044, 2.02309741, 1.11816359], dtype=float64), 'q': Array([0.40538218, 0.7790772 , 0.75023019], dtype=float64), 's1_z': Array([ 0.04092607,  0.04706264, -0.01623417], dtype=float64), 's2_z': Array([-0.02368049,  0.03929297, -0.02445025], dtype=float64), 'lambda_1': Array([3964.14337447, 4184.16035387, 2259.81002612], dtype=float64), 'lambda_2': Array([2422.42010536, 4313.66141279, 3437.78114982], dtype=float64), 'cos_iota': Array([0.41126577, 0.11787975, 0.22403715], dtype=float64), 'd_L': Array([274.6565892 , 382.24170707, 652.81135519], dtype=float64), 't_c': Array([ 0.06365284, -0.09481516, -0.06240297], dtype=float64), 'phase_c': Array([4.49881099, 2.08537224, 5.70138088], dtype=float64), 'psi': Array([3.01038007, 2.34553312, 2.31930353], dtype=float64), 'ra': Array([4.62514459, 3.57998359, 0.83936871], dtype=float64), 'sin_dec': Array([-0.13627384, -0.25702326, -0.31998041], dtype=float64)}
07:35 ninjax INFO    : log_prob: [-121.84160614 -105.41155663   -8.37824819]
07:35 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.5105937040228048, 'mass_2_source': 1.4148445555683986, 's1_z': -0.038045780292095266, 's2_z': 0.004887910908618974, 'cos_iota': 0.7395969449042763, 'd_L': 263.246575524876, 't_c': -0.058780360895398114, 'phase_c': 3.027817093082784, 'psi': 1.6595408571186092, 'ra': 2.9210300406093763, 'sin_dec': -0.534551651358536, 'q': 0.9366148897619391, 'M_c': 1.348246579859682, 'eta': 0.24973218926871377, 'iota': Array(0.73832501, dtype=float64, weak_type=True), 'dec': Array(-0.56397715, dtype=float64, weak_type=True), 'lambda_1': 107.72430891094942, 'lambda_2': 171.52456195388734, 'H1_SNR': 14.348923402914913, 'L1_SNR': 7.8150812648420835, 'V1_SNR': 6.574510237357508, 'network_SNR': 17.612248092163693, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
07:35 ninjax INFO    : log_prob at the injection parameters is: 134.50539336971053
07:35 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
07:35 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
07:35 ninjax INFO    : Ninjax setup complete.
07:35 ninjax INFO    : Saving output to ./Aplus/injection_1/
07:35 ninjax INFO    : Using polynomial learning rate scheduler
07:35 ninjax INFO    : The hyperparameters passed to flowMC and jim are
07:35 ninjax INFO    :    n_loop_training: 200
07:35 ninjax INFO    :    n_loop_production: 10
07:35 ninjax INFO    :    n_local_steps: 100
07:35 ninjax INFO    :    n_global_steps: 1000
07:35 ninjax INFO    :    n_epochs: 25
07:35 ninjax INFO    :    n_chains: 1000
07:35 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x14cc747924d0>
07:35 ninjax INFO    :    max_samples: 50000
07:35 ninjax INFO    :    momentum: 0.9
07:35 ninjax INFO    :    batch_size: 30000
07:35 ninjax INFO    :    use_global: True
07:35 ninjax INFO    :    keep_quantile: 0.0
07:35 ninjax INFO    :    train_thinning: 10
07:35 ninjax INFO    :    output_thinning: 50
07:35 ninjax INFO    :    n_sample_max: 10000
07:35 ninjax INFO    :    num_layers: 10
07:35 ninjax INFO    :    hidden_size: [128, 128]
07:35 ninjax INFO    :    num_bins: 8
07:35 ninjax INFO    :    save_training_chains: False
07:35 ninjax INFO    :    eps_mass_matrix: 1e-05
07:35 ninjax INFO    :    use_scheduler: True
07:35 ninjax INFO    :    use_temperature: False
07:35 ninjax INFO    :    which_temperature_schedule: exponential
07:35 ninjax INFO    :    starting_temperature: 2.0
07:35 ninjax INFO    :    stop_tempering_iteration: 75
07:35 ninjax INFO    :    stopping_criterion_global_acc: 0.1
07:35 ninjax INFO    :    stopping_criterion_loss: -inf
07:35 ninjax INFO    :    nf_model_kwargs: {}
07:35 ninjax INFO    :    local sampler arg not shown (pretty print)
07:35 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[ 9.60865447e-23 -7.29332045e-23 -7.38118146e-23  4.23343510e-23
 -8.25024662e-23 -2.23438182e-23  1.26098281e-22 -9.76030636e-23
  6.31876400e-24  1.10226875e-22]
[-5.72100726e-23 -8.51121363e-23 -2.69369837e-23  8.37900194e-24
  1.24856199e-22  3.87892382e-23  2.82803681e-24  4.66053973e-23
 -2.36701023e-23  2.79211100e-23]
Checking the noise that was generated in inject_signal ifo:
[-2.24247951e-23  3.13999946e-23  1.30487463e-22 -1.73891552e-23
 -6.81189706e-23 -3.11658295e-23 -1.14219211e-22  1.82341972e-23
 -3.98559820e-23  1.33050652e-23]
[ 1.90527247e-24  4.15390113e-23  1.37564936e-23 -2.60419468e-23
  1.10281183e-22  6.99624229e-23  1.07785536e-22 -6.99789075e-23
  5.07281803e-23 -9.32253768e-23]
Checking the noise that was generated in inject_signal ifo:
[ 2.96127194e-23 -1.43131688e-22  8.08487029e-23  2.26040755e-23
 -2.48194009e-23 -9.27309163e-24  1.32809771e-23  3.64458589e-23
  1.42265038e-23 -4.60148950e-23]
[ 1.21661940e-23 -1.47753174e-22 -2.39919863e-23  2.20899106e-23
 -2.22830727e-23 -1.17291593e-22 -7.48072741e-23  2.34119612e-23
 -5.50391688e-23  7.23889830e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.18715190887451172 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.5105937040228048, 'mass_2_source': 1.4148445555683986, 's1_z': -0.038045780292095266, 's2_z': 0.004887910908618974, 'cos_iota': 0.7395969449042763, 'd_L': 263.246575524876, 't_c': -0.058780360895398114, 'phase_c': 3.027817093082784, 'psi': 1.6595408571186092, 'ra': 2.9210300406093763, 'sin_dec': -0.534551651358536, 'q': 0.9366148897619391, 'M_c': 1.348246579859682, 'eta': 0.24973218926871377, 'iota': Array(0.73832501, dtype=float64, weak_type=True), 'dec': Array(-0.56397715, dtype=float64, weak_type=True), 'lambda_1': 107.72430891094942, 'lambda_2': 171.52456195388734, 'H1_SNR': 14.348923402914913, 'L1_SNR': 7.8150812648420835, 'V1_SNR': 6.574510237357508, 'network_SNR': 17.612248092163693, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5133459568023682 seconds
Time for h_sky_low and h_sky_center: 5.472450494766235 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.7355751991271973
Going to compute coefficients . . .
Time for computing coefficients: 163.76079154014587 seconds
Time for computing coefficients: 7.265692710876465 seconds
Time for computing coefficients: 7.4583420753479 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:01<6:42:24, 121.33s/it]Tuning global sampler:   1%|          | 2/200 [02:06<2:55:29, 53.18s/it] Tuning global sampler:   2%|▏         | 3/200 [02:11<1:41:47, 31.00s/it]Tuning global sampler:   2%|▏         | 4/200 [02:16<1:07:14, 20.58s/it]Tuning global sampler:   2%|▎         | 5/200 [02:20<48:09, 14.82s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:25<36:39, 11.34s/it]Tuning global sampler:   4%|▎         | 7/200 [02:29<29:19,  9.12s/it]Tuning global sampler:   4%|▍         | 8/200 [02:34<24:33,  7.68s/it]Tuning global sampler:   4%|▍         | 9/200 [02:38<21:19,  6.70s/it]Tuning global sampler:   5%|▌         | 10/200 [02:43<18:59,  6.00s/it]Tuning global sampler:   6%|▌         | 11/200 [02:47<17:31,  5.57s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:30,  5.27s/it]Tuning global sampler:   6%|▋         | 13/200 [02:57<15:45,  5.06s/it]Tuning global sampler:   7%|▋         | 14/200 [03:01<15:17,  4.93s/it]Tuning global sampler:   8%|▊         | 15/200 [03:06<14:56,  4.85s/it]Tuning global sampler:   8%|▊         | 16/200 [03:10<14:40,  4.78s/it]Tuning global sampler:   8%|▊         | 17/200 [03:15<14:27,  4.74s/it]Tuning global sampler:   9%|▉         | 18/200 [03:20<14:17,  4.71s/it]Tuning global sampler:  10%|▉         | 19/200 [03:24<14:08,  4.69s/it]Tuning global sampler:  10%|█         | 20/200 [03:29<14:00,  4.67s/it]Tuning global sampler:  10%|█         | 21/200 [03:35<14:44,  4.94s/it]Tuning global sampler:  11%|█         | 22/200 [03:39<14:20,  4.83s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:44<14:02,  4.76s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:48<13:38,  4.65s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:53<13:19,  4.57s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:57<13:04,  4.51s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:01<12:52,  4.47s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:06<12:43,  4.44s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:10<12:35,  4.42s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:14<12:29,  4.41s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:19<12:23,  4.40s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:23<12:17,  4.39s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:28<12:10,  4.37s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:32<12:04,  4.36s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:36<12:00,  4.37s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:41<11:56,  4.37s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:45<11:52,  4.37s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:49<11:48,  4.37s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:54<11:44,  4.38s/it]Tuning global sampler:  20%|██        | 40/200 [04:58<11:41,  4.38s/it]Tuning global sampler:  20%|██        | 41/200 [05:04<12:25,  4.69s/it]Tuning global sampler:  21%|██        | 42/200 [05:08<12:07,  4.60s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:12<11:52,  4.54s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:17<11:40,  4.49s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:21<11:30,  4.45s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:25<11:22,  4.43s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:30<11:17,  4.43s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:34<11:10,  4.41s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:39<11:06,  4.41s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:43<11:01,  4.41s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:47<10:57,  4.41s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:52<10:53,  4.41s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:56<10:48,  4.41s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:01<10:43,  4.41s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:05<10:36,  4.39s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:09<10:31,  4.38s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:14<10:27,  4.39s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:18<10:24,  4.40s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:23<10:20,  4.40s/it]Tuning global sampler:  30%|███       | 60/200 [06:27<10:15,  4.40s/it]Tuning global sampler:  30%|███       | 61/200 [06:32<10:54,  4.71s/it]Tuning global sampler:  31%|███       | 62/200 [06:37<10:37,  4.62s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:41<10:25,  4.56s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:46<10:13,  4.51s/it]Tuning global sampler:  32%|███▎      | 65/200 [06:50<10:04,  4.48s/it]Tuning global sampler:  33%|███▎      | 66/200 [06:54<09:55,  4.44s/it]Tuning global sampler:  34%|███▎      | 67/200 [06:59<09:47,  4.42s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:03<09:42,  4.41s/it]Tuning global sampler:  34%|███▍      | 69/200 [07:08<09:38,  4.41s/it]Tuning global sampler:  35%|███▌      | 70/200 [07:12<09:33,  4.41s/it]Tuning global sampler:  36%|███▌      | 71/200 [07:16<09:29,  4.41s/it]Tuning global sampler:  36%|███▌      | 72/200 [07:21<09:24,  4.41s/it]Tuning global sampler:  36%|███▋      | 73/200 [07:25<09:20,  4.41s/it]Tuning global sampler:  36%|███▋      | 73/200 [07:30<13:03,  6.17s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.21s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.21s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.21s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.21s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.21s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.21s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.21s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.21s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]
07:43 ninjax INFO    : Saving samples to ./Aplus/injection_1/results_training.npz
07:44 ninjax INFO    : Saving the NF
07:44 ninjax INFO    : Time taken: 488.9426543712616 seconds (8.149044239521027 minutes)
07:44 ninjax INFO    : Creating the final corner plot
07:44 ninjax INFO    : Dumping the final production chains
07:44 ninjax INFO    : Chains shape is: (13, 220000)
07:44 ninjax INFO    : Key: M_c: ESS = 31336, Rhat = 1.0202421917461415
07:44 ninjax INFO    : Key: q: ESS = 17338, Rhat = 1.035219136746016
07:44 ninjax INFO    : Key: s1_z: ESS = 20856, Rhat = 1.0303683849812832
07:44 ninjax INFO    : Key: s2_z: ESS = 29360, Rhat = 1.0218806597951446
07:44 ninjax INFO    : Key: lambda_1: ESS = 24655, Rhat = 1.0250660391514639
07:44 ninjax INFO    : Key: lambda_2: ESS = 41993, Rhat = 1.0173247518904307
07:44 ninjax INFO    : Key: cos_iota: ESS = 17242, Rhat = 1.035734969081982
07:44 ninjax INFO    : Key: d_L: ESS = 18647, Rhat = 1.0332020620520568
07:44 ninjax INFO    : Key: t_c: ESS = 22607, Rhat = 1.0279899040562122
07:44 ninjax INFO    : Key: phase_c: ESS = 29347, Rhat = 1.0216549540805282
07:44 ninjax INFO    : Key: psi: ESS = 35021, Rhat = 1.02089315384932
07:44 ninjax INFO    : Key: ra: ESS = 30594, Rhat = 1.020524577197439
07:44 ninjax INFO    : Key: sin_dec: ESS = 25822, Rhat = 1.0240209895961425
07:44 ninjax INFO    : Key: eta: ESS = 17338, Rhat = 1.035219136746016
07:44 ninjax INFO    : Key: iota: ESS = 17242, Rhat = 1.035734969081982
07:44 ninjax INFO    : Key: dec: ESS = 25822, Rhat = 1.0240209895961425
07:44 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.378 +/- 0.181
q: 0.707 +/- 0.217
s1_z: 0.001 +/- 0.027
s2_z: 0.005 +/- 0.028
lambda_1: 1941.761 +/- 1422.450
lambda_2: 2161.032 +/- 1393.448
cos_iota: 0.389 +/- 0.528
d_L: 589.077 +/- 254.398
t_c: -0.048 +/- 0.030
phase_c: 3.035 +/- 1.757
psi: 1.700 +/- 0.880
ra: 2.887 +/- 0.977
sin_dec: -0.417 +/- 0.412
Log probability: 50.436 +/- 60.496
Local acceptance: 0.843 +/- 0.363
Global acceptance: 0.013 +/- 0.115
Max loss: 22.843, Min loss: 8.962
Production summary
==========
M_c: 1.348 +/- 0.000
q: 0.820 +/- 0.111
s1_z: 0.002 +/- 0.026
s2_z: 0.000 +/- 0.028
lambda_1: 816.919 +/- 887.176
lambda_2: 1268.292 +/- 1209.803
cos_iota: 0.810 +/- 0.147
d_L: 285.259 +/- 47.192
t_c: -0.057 +/- 0.001
phase_c: 3.130 +/- 1.816
psi: 1.581 +/- 0.911
ra: 2.899 +/- 0.026
sin_dec: -0.505 +/- 0.026
Log probability: 129.920 +/- 2.708
Local acceptance: 0.574 +/- 0.495
Global acceptance: 0.102 +/- 0.303
DONE

JOB STATISTICS
==============
Job ID: 10918538
Cluster: snellius
User/Group: twouters2/twouters2
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 00:11:03
CPU Efficiency: 5.72% of 03:13:04 core-walltime
Job Wall-clock time: 00:12:04
Memory Utilized: 4.61 GB
Memory Efficiency: 46.07% of 10.00 GB (10.00 GB/node)
