Wed Apr  2 07:33:39 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
07:33 ninjax INFO    : Checking and setting outdir
07:33 ninjax INFO    : Found generation prior file ./Aplus/injection_3/generation_prior.prior
07:33 ninjax INFO    : The outdir is set to ./Aplus/injection_3
07:33 ninjax INFO    : Loading the given config
07:33 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
07:33 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
07:33 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/jester_soft/Aplus/injection_3/complete_config.json
07:33 ninjax INFO    : No seed specified. Generating a random seed: 532667
07:33 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 252622
07:33 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 656319
07:33 ninjax INFO    : Loading the priors
07:33 ninjax INFO    : Setting up the prior
07:33 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
07:33 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
07:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
07:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
07:33 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
07:33 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
07:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
07:33 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
07:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
07:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
07:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
07:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
07:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
07:33 ninjax INFO    : Setting up the generation prior
07:33 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 1.99, naming=["mass_1_source"])
07:33 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 1.99, naming=["mass_2_source"])
07:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
07:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
07:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
07:33 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
07:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
07:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
07:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
07:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
07:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
07:33 ninjax INFO    : Finished prior setup
07:33 ninjax INFO    : Setting the transforms
07:33 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
07:33 ninjax INFO    : transforms_str_list has 3 elements
07:33 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
07:33 ninjax INFO    : Setting the likelihood
07:33 ninjax INFO    : GW likelihood provided, setting up the GW pipe
07:33 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz
07:33 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz for BNS injections
07:33 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
07:33 ninjax INFO    : self.is_BNS_run is True
07:33 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
07:33 ninjax INFO    : GW run is an injection
07:33 ninjax INFO    : Setting up GW injection . . . 
07:33 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
07:33 ninjax INFO    : Generating new injection
07:33 ninjax INFO    : Sanity check: generated parameters:
07:33 ninjax INFO    : {'mass_1_source': 1.0074386309167789, 'mass_2_source': 1.1565404517712388, 's1_z': 0.009907924765503909, 's2_z': -0.0407368370935147, 'cos_iota': -0.33375590449184633, 'd_L': 325.5030556540407, 't_c': -0.058837840091373876, 'phase_c': 4.701542354991454, 'psi': 1.5822108097049685, 'ra': 3.8108777691011815, 'sin_dec': 0.24909346251562603}
07:33 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz . . . 
07:33 ninjax INFO    : Injected lambda_1: 685.8268414360812
07:33 ninjax INFO    : Injected lambda_2: 1729.54701491798
07:33 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.0083216857155075 is 256.0
07:33 ninjax INFO    : After transforms, the injection parameters are:
07:33 ninjax INFO    : {'mass_1_source': 1.1565404517712388, 'mass_2_source': 1.0074386309167789, 's1_z': 0.009907924765503909, 's2_z': -0.0407368370935147, 'cos_iota': -0.33375590449184633, 'd_L': 325.5030556540407, 't_c': -0.058837840091373876, 'phase_c': 4.701542354991454, 'psi': 1.5822108097049685, 'ra': 3.8108777691011815, 'sin_dec': 0.24909346251562603, 'q': 0.8710794588930194, 'M_c': 1.0083216857155075, 'eta': 0.2488131392002582, 'iota': Array(1.91108148, dtype=float64, weak_type=True), 'dec': Array(0.2517441, dtype=float64, weak_type=True), 'lambda_1': 685.8268414360812, 'lambda_2': 1729.54701491798}
07:33 ninjax INFO    : The trial injection parameters are {'M_c': 1.0083216857155075, 'eta': 0.2488131392002582, 's1_z': 0.009907924765503909, 's2_z': -0.0407368370935147, 'lambda_1': 685.8268414360812, 'lambda_2': 1729.54701491798, 'd_L': 325.5030556540407, 'phase_c': 4.701542354991454, 'iota': 1.9110814761794084, 't_c': -0.058837840091373876, 'psi': 1.5822108097049685, 'ra': 3.8108777691011815, 'dec': 0.25174410025835514}
07:33 ninjax INFO    : Injecting signals . . .
07:33 ninjax INFO    : self.ifos
07:33 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
07:33 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
07:33 ninjax INFO    : [ 7.10226144e-23+2.00806309e-23j -5.34101303e-23-2.63561373e-23j
 -3.35464501e-23+8.95343244e-23j ...
  2.73502996e-23-2.61474098e-23j -2.10778082e-23-1.08610412e-23j
 -2.27548620e-23+4.55407417e-25j]
07:33 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
07:33 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
07:33 ninjax INFO    : [-2.08421140e-23+9.38928378e-23j  1.27139542e-22+5.06189125e-23j
 -7.12095874e-23+3.46724008e-23j ...
 -7.83108253e-24-2.74597759e-24j -4.20434800e-24+1.81760322e-23j
  3.92155593e-23+2.66876782e-23j]
07:33 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
07:33 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
07:33 ninjax INFO    : [-7.04936565e-23+6.37313057e-23j  4.62674495e-23-5.44637510e-23j
 -3.63125256e-23+6.19213971e-23j ...
  1.03139846e-22-6.71285201e-23j  7.37216228e-23-6.51224306e-23j
 -5.28691169e-23+4.00139822e-24j]
07:33 ninjax INFO    : [1.43183556e-46 1.43058540e-46 1.42935095e-46 ... 6.39793039e-47
 6.39795354e-47 6.39797668e-47]
07:33 ninjax INFO    : SNR for ifo H1 is 3.0681866285009978
07:33 ninjax INFO    : SNR for ifo L1 is 4.524592349180076
07:33 ninjax INFO    : SNR for ifo V1 is 2.8488609190328567
07:33 ninjax INFO    : The network SNR is 6.164552996735767
07:33 ninjax INFO    : The network SNR does not pass the threshold, trying again
07:33 ninjax INFO    : Generating new injection
07:33 ninjax INFO    : Sanity check: generated parameters:
07:33 ninjax INFO    : {'mass_1_source': 1.4673109287350987, 'mass_2_source': 1.7248660624118164, 's1_z': 0.0029689062782167555, 's2_z': 0.008198074127855781, 'cos_iota': 0.8379043456156459, 'd_L': 435.26685500390556, 't_c': 0.00565120157430124, 'phase_c': 1.288451696563743, 'psi': 0.1981490163627033, 'ra': 6.026145365432855, 'sin_dec': 0.36395222103566605}
07:33 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz . . . 
07:33 ninjax INFO    : Injected lambda_1: 39.264113171346324
07:33 ninjax INFO    : Injected lambda_2: 132.95685636644603
07:33 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.5201638194855087 is 128.0
07:33 ninjax INFO    : After transforms, the injection parameters are:
07:33 ninjax INFO    : {'mass_1_source': 1.7248660624118164, 'mass_2_source': 1.4673109287350987, 's1_z': 0.0029689062782167555, 's2_z': 0.008198074127855781, 'cos_iota': 0.8379043456156459, 'd_L': 435.26685500390556, 't_c': 0.00565120157430124, 'phase_c': 1.288451696563743, 'psi': 0.1981490163627033, 'ra': 6.026145365432855, 'sin_dec': 0.36395222103566605, 'q': 0.8506810822652584, 'M_c': 1.5201638194855087, 'eta': 0.24837255431024935, 'iota': Array(0.57736398, dtype=float64, weak_type=True), 'dec': Array(0.37250763, dtype=float64, weak_type=True), 'lambda_1': 39.264113171346324, 'lambda_2': 132.95685636644603}
07:33 ninjax INFO    : The trial injection parameters are {'M_c': 1.5201638194855087, 'eta': 0.24837255431024935, 's1_z': 0.0029689062782167555, 's2_z': 0.008198074127855781, 'lambda_1': 39.264113171346324, 'lambda_2': 132.95685636644603, 'd_L': 435.26685500390556, 'phase_c': 1.288451696563743, 'iota': 0.5773639773678098, 't_c': 0.00565120157430124, 'psi': 0.1981490163627033, 'ra': 6.026145365432855, 'dec': 0.37250762619423633}
07:33 ninjax INFO    : Injecting signals . . .
07:33 ninjax INFO    : self.ifos
07:33 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
07:33 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
07:33 ninjax INFO    : [-6.64010872e-23+5.48771668e-23j -6.62979092e-23-3.35864168e-23j
  1.82110810e-23+2.61460681e-23j ...
 -1.04348467e-23-1.56175092e-23j  7.03548430e-24-1.33759674e-23j
 -2.15633771e-23+2.03986966e-23j]
07:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
07:33 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
07:33 ninjax INFO    : [-8.90571180e-23-9.15499176e-23j -2.55855322e-23-1.05090460e-23j
  3.05859011e-23-1.89496600e-23j ...
  2.56736130e-23-2.55722155e-23j -9.24798184e-24-2.08931879e-23j
  7.89830744e-24+2.06197300e-23j]
07:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
07:33 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
07:33 ninjax INFO    : [-1.12253362e-23+3.74496478e-24j -3.39506386e-23-1.04089386e-23j
  5.12068665e-23-3.02953451e-23j ...
  2.85663528e-23-3.90361595e-23j -9.28003591e-24-1.03391734e-23j
  1.72603950e-23-2.27247796e-24j]
07:33 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
07:33 ninjax INFO    : SNR for ifo H1 is 9.678351041994546
07:33 ninjax INFO    : SNR for ifo L1 is 5.231736373885423
07:33 ninjax INFO    : SNR for ifo V1 is 5.913578528110697
07:33 ninjax INFO    : The network SNR is 12.490474586101385
07:33 ninjax INFO    : Network SNR passes threshold
07:33 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
07:33 ninjax INFO    :    mass_1_source: 1.7248660624118164
07:33 ninjax INFO    :    mass_2_source: 1.4673109287350987
07:33 ninjax INFO    :    s1_z: 0.0029689062782167555
07:33 ninjax INFO    :    s2_z: 0.008198074127855781
07:33 ninjax INFO    :    cos_iota: 0.8379043456156459
07:33 ninjax INFO    :    d_L: 435.26685500390556
07:33 ninjax INFO    :    t_c: 0.00565120157430124
07:33 ninjax INFO    :    phase_c: 1.288451696563743
07:33 ninjax INFO    :    psi: 0.1981490163627033
07:33 ninjax INFO    :    ra: 6.026145365432855
07:33 ninjax INFO    :    sin_dec: 0.36395222103566605
07:33 ninjax INFO    :    q: 0.8506810822652584
07:33 ninjax INFO    :    M_c: 1.5201638194855087
07:33 ninjax INFO    :    eta: 0.24837255431024935
07:33 ninjax INFO    :    iota: 0.5773639773678098
07:33 ninjax INFO    :    dec: 0.37250762619423633
07:33 ninjax INFO    :    lambda_1: 39.264113171346324
07:33 ninjax INFO    :    lambda_2: 132.95685636644603
07:33 ninjax INFO    :    H1_SNR: 9.678351041994546
07:33 ninjax INFO    :    L1_SNR: 5.231736373885423
07:33 ninjax INFO    :    V1_SNR: 5.913578528110697
07:33 ninjax INFO    :    network_SNR: 12.490474586101385
07:33 ninjax INFO    :    epoch: 126.0
07:33 ninjax INFO    :    gmst: 2.7288901910520846
07:33 ninjax INFO    :    duration: 128.0
07:33 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
07:33 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
07:33 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
07:36 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 141.69148445129395 seconds = 2.361524740854899 minutes
07:36 ninjax INFO    : The priors are not modified after their initialization
07:36 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
07:36 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
07:36 ninjax INFO    : sample: {'M_c': Array([2.22056101, 1.23889472, 1.00224891], dtype=float64), 'q': Array([0.13335254, 0.49238583, 0.71464665], dtype=float64), 's1_z': Array([ 0.03849716, -0.02551539,  0.04150633], dtype=float64), 's2_z': Array([ 0.03689015, -0.03957909,  0.01089973], dtype=float64), 'lambda_1': Array([ 877.05514284, 1573.16399848, 2310.02002982], dtype=float64), 'lambda_2': Array([1151.09247759, 4140.43740245, 1142.21868487], dtype=float64), 'cos_iota': Array([ 0.27123367,  0.30336234, -0.2046152 ], dtype=float64), 'd_L': Array([995.19498641, 790.13263739, 966.59473019], dtype=float64), 't_c': Array([-0.01797473,  0.0907187 , -0.08292971], dtype=float64), 'phase_c': Array([4.00475967, 1.46958198, 3.22937892], dtype=float64), 'psi': Array([2.00943361, 2.13365979, 2.00912965], dtype=float64), 'ra': Array([1.54949328, 3.56777557, 0.07676929], dtype=float64), 'sin_dec': Array([ 0.70139861,  0.28829844, -0.19651638], dtype=float64)}
07:36 ninjax INFO    : log_prob: [-12.79374715  -8.16781223  -2.09673723]
07:36 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.7248660624118164, 'mass_2_source': 1.4673109287350987, 's1_z': 0.0029689062782167555, 's2_z': 0.008198074127855781, 'cos_iota': 0.8379043456156459, 'd_L': 435.26685500390556, 't_c': 0.00565120157430124, 'phase_c': 1.288451696563743, 'psi': 0.1981490163627033, 'ra': 6.026145365432855, 'sin_dec': 0.36395222103566605, 'q': 0.8506810822652584, 'M_c': 1.5201638194855087, 'eta': 0.24837255431024935, 'iota': Array(0.57736398, dtype=float64, weak_type=True), 'dec': Array(0.37250763, dtype=float64, weak_type=True), 'lambda_1': 39.264113171346324, 'lambda_2': 132.95685636644603, 'H1_SNR': 9.678351041994546, 'L1_SNR': 5.231736373885423, 'V1_SNR': 5.913578528110697, 'network_SNR': 12.490474586101385, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
07:36 ninjax INFO    : log_prob at the injection parameters is: 45.21206635411006
07:36 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
07:36 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
07:36 ninjax INFO    : Ninjax setup complete.
07:36 ninjax INFO    : Saving output to ./Aplus/injection_3/
07:36 ninjax INFO    : Using polynomial learning rate scheduler
07:36 ninjax INFO    : The hyperparameters passed to flowMC and jim are
07:36 ninjax INFO    :    n_loop_training: 200
07:36 ninjax INFO    :    n_loop_production: 10
07:36 ninjax INFO    :    n_local_steps: 100
07:36 ninjax INFO    :    n_global_steps: 1000
07:36 ninjax INFO    :    n_epochs: 25
07:36 ninjax INFO    :    n_chains: 1000
07:36 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x14b849854310>
07:36 ninjax INFO    :    max_samples: 50000
07:36 ninjax INFO    :    momentum: 0.9
07:36 ninjax INFO    :    batch_size: 30000
07:36 ninjax INFO    :    use_global: True
07:36 ninjax INFO    :    keep_quantile: 0.0
07:36 ninjax INFO    :    train_thinning: 10
07:36 ninjax INFO    :    output_thinning: 50
07:36 ninjax INFO    :    n_sample_max: 10000
07:36 ninjax INFO    :    num_layers: 10
07:36 ninjax INFO    :    hidden_size: [128, 128]
07:36 ninjax INFO    :    num_bins: 8
07:36 ninjax INFO    :    save_training_chains: False
07:36 ninjax INFO    :    eps_mass_matrix: 1e-05
07:36 ninjax INFO    :    use_scheduler: True
07:36 ninjax INFO    :    use_temperature: False
07:36 ninjax INFO    :    which_temperature_schedule: exponential
07:36 ninjax INFO    :    starting_temperature: 2.0
07:36 ninjax INFO    :    stop_tempering_iteration: 75
07:36 ninjax INFO    :    stopping_criterion_global_acc: 0.1
07:36 ninjax INFO    :    stopping_criterion_loss: -inf
07:36 ninjax INFO    :    nf_model_kwargs: {}
07:36 ninjax INFO    :    local sampler arg not shown (pretty print)
07:36 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[ 7.19668588e-23 -5.19991782e-23 -3.25940351e-23 -1.31309454e-22
  3.14463472e-23 -4.45269814e-23  3.54051030e-23  3.50600116e-25
  4.55028068e-23 -3.45839071e-24]
[ 2.11295160e-23 -2.63483480e-23  8.84937275e-23 -4.86669163e-23
 -1.09437131e-22 -1.07859909e-23  9.46098430e-23 -1.40139764e-22
 -9.39896289e-23 -2.55717516e-23]
Checking the noise that was generated in inject_signal ifo:
[-2.29086792e-23  1.25566616e-22 -7.12551388e-23  9.60378046e-23
 -2.59380699e-23 -2.07329186e-23 -2.59471508e-23 -1.05012966e-22
  1.15243234e-22  1.11999759e-24]
[ 9.36463752e-23  5.19810274e-23  3.67521604e-23 -1.71758680e-23
  3.73401475e-24 -1.32378336e-22 -6.61729669e-23 -4.60877459e-23
 -1.32985412e-22  1.06225495e-22]
Checking the noise that was generated in inject_signal ifo:
[-7.08814445e-23  4.48100460e-23 -3.78863062e-23 -1.62527782e-22
  1.27660281e-22  6.50421645e-23  1.18412669e-22  5.05707088e-23
  8.09431885e-23 -5.91499941e-24]
[ 6.21124380e-23 -5.52673800e-23  6.24615754e-23  1.05901746e-23
  5.57937768e-23 -5.66178750e-23 -7.69561469e-23 -7.94502768e-23
 -7.37102334e-23  4.02644992e-23]
Checking the noise that was generated in inject_signal ifo:
[-6.19282207e-23 -6.27906989e-23  1.89740467e-23 -1.43272912e-23
 -1.13261858e-24  4.62429770e-23 -5.28861751e-23 -6.07445972e-23
 -2.51926752e-23 -1.47123989e-23]
[ 5.51117597e-23 -3.63689829e-23  2.17366763e-23  1.58470881e-23
  6.22496603e-23 -7.08734695e-24 -8.59313613e-23 -4.95524054e-23
  7.26653624e-23  5.35296676e-23]
Checking the noise that was generated in inject_signal ifo:
[-8.95552963e-23 -2.43910106e-23  3.28778772e-23 -1.10385935e-23
  1.64998657e-23  3.11752987e-23 -1.49748803e-24  3.73353352e-23
  1.65680577e-24  3.16600082e-24]
[-8.91805450e-23 -8.40432306e-24 -1.81762097e-23 -1.38276195e-23
  9.40163549e-25  7.36650848e-24 -5.96940089e-23 -1.03554159e-23
 -2.00464173e-23 -5.75641971e-24]
Checking the noise that was generated in inject_signal ifo:
[-1.14693192e-23 -3.18389796e-23  5.46162028e-23  1.45323478e-24
  5.41277848e-23  2.97684313e-23 -5.08562616e-23 -4.10237577e-24
 -1.15378998e-24  3.02201333e-23]
[ 7.20937577e-24 -7.65366676e-24 -2.96503469e-23  9.77393984e-23
  3.70175563e-23 -1.19657884e-23  5.32464638e-24  1.12635615e-23
  2.65054729e-23  1.63075878e-22]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.10797452926635742 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.7248660624118164, 'mass_2_source': 1.4673109287350987, 's1_z': 0.0029689062782167555, 's2_z': 0.008198074127855781, 'cos_iota': 0.8379043456156459, 'd_L': 435.26685500390556, 't_c': 0.00565120157430124, 'phase_c': 1.288451696563743, 'psi': 0.1981490163627033, 'ra': 6.026145365432855, 'sin_dec': 0.36395222103566605, 'q': 0.8506810822652584, 'M_c': 1.5201638194855087, 'eta': 0.24837255431024935, 'iota': Array(0.57736398, dtype=float64, weak_type=True), 'dec': Array(0.37250763, dtype=float64, weak_type=True), 'lambda_1': 39.264113171346324, 'lambda_2': 132.95685636644603, 'H1_SNR': 9.678351041994546, 'L1_SNR': 5.231736373885423, 'V1_SNR': 5.913578528110697, 'network_SNR': 12.490474586101385, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5047497749328613 seconds
Time for h_sky_low and h_sky_center: 5.244606256484985 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.7024497985839844
Going to compute coefficients . . .
Time for computing coefficients: 120.49717020988464 seconds
Time for computing coefficients: 6.981723308563232 seconds
Time for computing coefficients: 7.13436484336853 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:01<6:41:37, 121.09s/it]Tuning global sampler:   1%|          | 2/200 [02:05<2:53:22, 52.54s/it] Tuning global sampler:   2%|▏         | 3/200 [02:10<1:40:37, 30.65s/it]Tuning global sampler:   2%|▏         | 4/200 [02:14<1:06:29, 20.35s/it]Tuning global sampler:   2%|▎         | 5/200 [02:19<47:40, 14.67s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:24<37:19, 11.54s/it]Tuning global sampler:   4%|▎         | 7/200 [02:29<29:44,  9.24s/it]Tuning global sampler:   4%|▍         | 8/200 [02:33<24:49,  7.76s/it]Tuning global sampler:   4%|▍         | 9/200 [02:38<21:28,  6.74s/it]Tuning global sampler:   5%|▌         | 10/200 [02:42<19:04,  6.02s/it]Tuning global sampler:   6%|▌         | 11/200 [02:47<17:34,  5.58s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:30,  5.27s/it]Tuning global sampler:   6%|▋         | 13/200 [02:56<15:43,  5.05s/it]Tuning global sampler:   7%|▋         | 14/200 [03:01<15:14,  4.92s/it]Tuning global sampler:   8%|▊         | 15/200 [03:05<14:52,  4.82s/it]Tuning global sampler:   8%|▊         | 16/200 [03:10<14:36,  4.77s/it]Tuning global sampler:   8%|▊         | 17/200 [03:15<14:23,  4.72s/it]Tuning global sampler:   9%|▉         | 18/200 [03:19<14:13,  4.69s/it]Tuning global sampler:  10%|▉         | 19/200 [03:24<14:03,  4.66s/it]Tuning global sampler:  10%|█         | 20/200 [03:28<13:56,  4.65s/it]Tuning global sampler:  10%|█         | 21/200 [03:34<14:37,  4.90s/it]Tuning global sampler:  11%|█         | 22/200 [03:38<14:14,  4.80s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:43<13:57,  4.73s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:47<13:34,  4.63s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:52<13:16,  4.55s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:56<13:02,  4.50s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:00<12:51,  4.46s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:05<12:41,  4.43s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:09<12:34,  4.41s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:14<12:27,  4.40s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:18<12:21,  4.39s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:22<12:15,  4.38s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:27<12:08,  4.36s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:31<12:02,  4.35s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:35<11:58,  4.35s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:40<11:54,  4.36s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:44<11:49,  4.36s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:48<11:45,  4.36s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:53<11:41,  4.36s/it]Tuning global sampler:  20%|██        | 40/200 [04:58<12:21,  4.63s/it]Tuning global sampler:  20%|██        | 41/200 [05:02<12:03,  4.55s/it]Tuning global sampler:  21%|██        | 42/200 [05:07<11:49,  4.49s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:11<11:39,  4.46s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:15<11:29,  4.42s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:20<11:20,  4.39s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:24<11:14,  4.38s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:28<11:08,  4.37s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:33<11:03,  4.36s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:37<10:59,  4.37s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:42<10:54,  4.36s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:46<10:49,  4.36s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:50<10:45,  4.36s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:55<10:41,  4.36s/it]Tuning global sampler:  27%|██▋       | 54/200 [05:59<10:37,  4.36s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:03<10:30,  4.35s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:08<10:25,  4.34s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:12<10:21,  4.35s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:16<10:18,  4.36s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:21<10:13,  4.35s/it]Tuning global sampler:  30%|███       | 60/200 [06:25<10:10,  4.36s/it]Tuning global sampler:  30%|███       | 61/200 [06:30<10:46,  4.65s/it]Tuning global sampler:  31%|███       | 62/200 [06:35<10:30,  4.57s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:39<10:17,  4.51s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:44<10:06,  4.46s/it]Tuning global sampler:  32%|███▎      | 65/200 [06:48<09:57,  4.43s/it]Tuning global sampler:  33%|███▎      | 66/200 [06:52<09:48,  4.39s/it]Tuning global sampler:  34%|███▎      | 67/200 [06:56<09:41,  4.37s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:01<09:36,  4.37s/it]Tuning global sampler:  34%|███▍      | 69/200 [07:05<09:31,  4.36s/it]Tuning global sampler:  35%|███▌      | 70/200 [07:10<09:27,  4.36s/it]Tuning global sampler:  36%|███▌      | 71/200 [07:14<09:22,  4.36s/it]Tuning global sampler:  36%|███▌      | 72/200 [07:18<09:18,  4.36s/it]Tuning global sampler:  36%|███▋      | 73/200 [07:23<09:13,  4.36s/it]Tuning global sampler:  37%|███▋      | 74/200 [07:27<09:09,  4.36s/it]Tuning global sampler:  38%|███▊      | 75/200 [07:31<09:05,  4.36s/it]Tuning global sampler:  38%|███▊      | 76/200 [07:36<09:00,  4.36s/it]Tuning global sampler:  38%|███▊      | 77/200 [07:40<08:55,  4.35s/it]Tuning global sampler:  39%|███▉      | 78/200 [07:44<08:49,  4.34s/it]Tuning global sampler:  40%|███▉      | 79/200 [07:49<08:45,  4.35s/it]Tuning global sampler:  40%|████      | 80/200 [07:53<08:42,  4.35s/it]Tuning global sampler:  40%|████      | 81/200 [07:58<09:12,  4.65s/it]Tuning global sampler:  41%|████      | 82/200 [08:03<08:58,  4.56s/it]Tuning global sampler:  42%|████▏     | 83/200 [08:07<08:46,  4.50s/it]Tuning global sampler:  42%|████▏     | 84/200 [08:12<08:37,  4.46s/it]Tuning global sampler:  42%|████▎     | 85/200 [08:16<08:29,  4.43s/it]Tuning global sampler:  43%|████▎     | 86/200 [08:20<08:22,  4.41s/it]Tuning global sampler:  44%|████▎     | 87/200 [08:25<08:16,  4.40s/it]Tuning global sampler:  44%|████▍     | 88/200 [08:29<08:10,  4.38s/it]Tuning global sampler:  44%|████▍     | 89/200 [08:33<08:04,  4.37s/it]Tuning global sampler:  45%|████▌     | 90/200 [08:38<08:00,  4.37s/it]Tuning global sampler:  46%|████▌     | 91/200 [08:42<07:55,  4.36s/it]Tuning global sampler:  46%|████▌     | 92/200 [08:46<07:51,  4.37s/it]Tuning global sampler:  46%|████▋     | 93/200 [08:51<07:48,  4.38s/it]Tuning global sampler:  47%|████▋     | 94/200 [08:55<07:44,  4.38s/it]Tuning global sampler:  48%|████▊     | 95/200 [09:00<07:39,  4.38s/it]Tuning global sampler:  48%|████▊     | 96/200 [09:04<07:36,  4.39s/it]Tuning global sampler:  48%|████▊     | 97/200 [09:08<07:32,  4.39s/it]Tuning global sampler:  49%|████▉     | 98/200 [09:13<07:27,  4.39s/it]Tuning global sampler:  50%|████▉     | 99/200 [09:17<07:21,  4.37s/it]Tuning global sampler:  50%|█████     | 100/200 [09:21<07:15,  4.36s/it]Tuning global sampler:  50%|█████     | 101/200 [09:27<07:43,  4.68s/it]Tuning global sampler:  51%|█████     | 102/200 [09:31<07:29,  4.59s/it]Tuning global sampler:  52%|█████▏    | 103/200 [09:36<07:18,  4.52s/it]Tuning global sampler:  52%|█████▏    | 104/200 [09:40<07:09,  4.47s/it]Tuning global sampler:  52%|█████▎    | 105/200 [09:44<07:02,  4.45s/it]Tuning global sampler:  53%|█████▎    | 106/200 [09:49<06:56,  4.43s/it]Tuning global sampler:  54%|█████▎    | 107/200 [09:53<06:49,  4.41s/it]Tuning global sampler:  54%|█████▍    | 108/200 [09:57<06:44,  4.39s/it]Tuning global sampler:  55%|█████▍    | 109/200 [10:02<06:38,  4.38s/it]Tuning global sampler:  55%|█████▌    | 110/200 [10:06<06:32,  4.37s/it]Tuning global sampler:  56%|█████▌    | 111/200 [10:10<06:27,  4.35s/it]Tuning global sampler:  56%|█████▌    | 111/200 [10:15<08:13,  5.54s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.20s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.20s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.20s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.20s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.20s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.20s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.20s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.20s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.20s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.20s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.20s/it]
07:47 ninjax INFO    : Saving samples to ./Aplus/injection_3/results_training.npz
07:47 ninjax INFO    : Saving the NF
07:47 ninjax INFO    : Time taken: 654.0647084712982 seconds (10.901078474521636 minutes)
07:47 ninjax INFO    : Creating the final corner plot
07:47 ninjax INFO    : Dumping the final production chains
07:47 ninjax INFO    : Chains shape is: (13, 220000)
07:47 ninjax INFO    : Key: M_c: ESS = 48743, Rhat = 1.014385113946132
07:47 ninjax INFO    : Key: q: ESS = 33649, Rhat = 1.0203943844518284
07:47 ninjax INFO    : Key: s1_z: ESS = 32804, Rhat = 1.019338130589411
07:47 ninjax INFO    : Key: s2_z: ESS = 30637, Rhat = 1.0219296593390073
07:47 ninjax INFO    : Key: lambda_1: ESS = 47681, Rhat = 1.0146909198396223
07:47 ninjax INFO    : Key: lambda_2: ESS = 43938, Rhat = 1.0156346691586309
07:47 ninjax INFO    : Key: cos_iota: ESS = 24030, Rhat = 1.0262852079537812
07:47 ninjax INFO    : Key: d_L: ESS = 26638, Rhat = 1.0236748170837413
07:47 ninjax INFO    : Key: t_c: ESS = 41160, Rhat = 1.017241520896905
07:47 ninjax INFO    : Key: phase_c: ESS = 41668, Rhat = 1.0162805196453468
07:47 ninjax INFO    : Key: psi: ESS = 52854, Rhat = 1.0134359069443575
07:47 ninjax INFO    : Key: ra: ESS = 41348, Rhat = 1.016240772056559
07:47 ninjax INFO    : Key: sin_dec: ESS = 40496, Rhat = 1.017141990830649
07:47 ninjax INFO    : Key: eta: ESS = 33649, Rhat = 1.0203943844518284
07:47 ninjax INFO    : Key: iota: ESS = 24030, Rhat = 1.0262852079537812
07:47 ninjax INFO    : Key: dec: ESS = 40496, Rhat = 1.017141990830649
07:47 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.592 +/- 0.365
q: 0.661 +/- 0.254
s1_z: 0.004 +/- 0.029
s2_z: 0.004 +/- 0.028
lambda_1: 2263.753 +/- 1437.034
lambda_2: 2289.498 +/- 1434.720
cos_iota: 0.227 +/- 0.464
d_L: 728.727 +/- 198.826
t_c: 0.004 +/- 0.041
phase_c: 3.223 +/- 1.784
psi: 1.484 +/- 0.912
ra: 4.579 +/- 1.863
sin_dec: 0.209 +/- 0.467
Log probability: -0.727 +/- 24.137
Local acceptance: 0.986 +/- 0.119
Global acceptance: 0.027 +/- 0.163
Max loss: 22.864, Min loss: 8.819
Production summary
==========
M_c: 1.520 +/- 0.000
q: 0.854 +/- 0.095
s1_z: 0.019 +/- 0.022
s2_z: 0.015 +/- 0.024
lambda_1: 898.843 +/- 956.536
lambda_2: 1274.775 +/- 1159.355
cos_iota: 0.780 +/- 0.176
d_L: 460.122 +/- 96.510
t_c: 0.007 +/- 0.002
phase_c: 3.185 +/- 1.815
psi: 1.506 +/- 0.914
ra: 6.004 +/- 0.038
sin_dec: 0.356 +/- 0.070
Log probability: 41.065 +/- 2.835
Local acceptance: 0.948 +/- 0.221
Global acceptance: 0.114 +/- 0.318
DONE

JOB STATISTICS
==============
Job ID: 10918541
Cluster: snellius
User/Group: twouters2/twouters2
State: RUNNING
Nodes: 1
Cores per node: 16
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 03:47:12 core-walltime
Job Wall-clock time: 00:14:12
Memory Utilized: 0.00 MB
Memory Efficiency: 0.00% of 10.00 GB (10.00 GB/node)
WARNING: Efficiency statistics can only be obtained after the job has ended as seff tool is based on the accounting database data.
