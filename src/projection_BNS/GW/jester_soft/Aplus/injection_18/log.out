Wed Apr  2 07:33:40 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
07:33 ninjax INFO    : Checking and setting outdir
07:33 ninjax INFO    : Found generation prior file ./Aplus/injection_18/generation_prior.prior
07:33 ninjax INFO    : The outdir is set to ./Aplus/injection_18
07:33 ninjax INFO    : Loading the given config
07:33 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
07:33 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
07:33 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/jester_soft/Aplus/injection_18/complete_config.json
07:33 ninjax INFO    : No seed specified. Generating a random seed: 989064
07:33 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 262165
07:33 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 911396
07:33 ninjax INFO    : Loading the priors
07:33 ninjax INFO    : Setting up the prior
07:33 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
07:33 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
07:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
07:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
07:33 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
07:33 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
07:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
07:33 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
07:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
07:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
07:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
07:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
07:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
07:33 ninjax INFO    : Setting up the generation prior
07:33 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 1.99, naming=["mass_1_source"])
07:33 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 1.99, naming=["mass_2_source"])
07:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
07:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
07:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
07:33 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
07:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
07:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
07:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
07:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
07:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
07:33 ninjax INFO    : Finished prior setup
07:33 ninjax INFO    : Setting the transforms
07:33 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
07:33 ninjax INFO    : transforms_str_list has 3 elements
07:33 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
07:33 ninjax INFO    : Setting the likelihood
07:33 ninjax INFO    : GW likelihood provided, setting up the GW pipe
07:33 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz
07:33 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz for BNS injections
07:33 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
07:33 ninjax INFO    : self.is_BNS_run is True
07:33 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
07:33 ninjax INFO    : GW run is an injection
07:33 ninjax INFO    : Setting up GW injection . . . 
07:33 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
07:33 ninjax INFO    : Generating new injection
07:33 ninjax INFO    : Sanity check: generated parameters:
07:33 ninjax INFO    : {'mass_1_source': 1.4138951282693721, 'mass_2_source': 1.140465957336729, 's1_z': 0.012320502539628665, 's2_z': -0.0028106223329217514, 'cos_iota': 0.886859900608528, 'd_L': 371.6836314376592, 't_c': -0.007216481409270378, 'phase_c': 0.1463719890076094, 'psi': 0.3965573253495629, 'ra': 0.9436775930573488, 'sin_dec': -0.43530685796056456}
07:33 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz . . . 
07:33 ninjax INFO    : Injected lambda_1: 172.2775361681326
07:33 ninjax INFO    : Injected lambda_2: 754.1095694121205
07:33 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.196923061417741 is 256.0
07:33 ninjax INFO    : After transforms, the injection parameters are:
07:33 ninjax INFO    : {'mass_1_source': 1.4138951282693721, 'mass_2_source': 1.140465957336729, 's1_z': 0.012320502539628665, 's2_z': -0.0028106223329217514, 'cos_iota': 0.886859900608528, 'd_L': 371.6836314376592, 't_c': -0.007216481409270378, 'phase_c': 0.1463719890076094, 'psi': 0.3965573253495629, 'ra': 0.9436775930573488, 'sin_dec': -0.43530685796056456, 'q': 0.8066128346680674, 'M_c': 1.196923061417741, 'eta': 0.2471353925221029, 'iota': Array(0.48029231, dtype=float64, weak_type=True), 'dec': Array(-0.4503791, dtype=float64, weak_type=True), 'lambda_1': 172.2775361681326, 'lambda_2': 754.1095694121205}
07:33 ninjax INFO    : The trial injection parameters are {'M_c': 1.196923061417741, 'eta': 0.2471353925221029, 's1_z': 0.012320502539628665, 's2_z': -0.0028106223329217514, 'lambda_1': 172.2775361681326, 'lambda_2': 754.1095694121205, 'd_L': 371.6836314376592, 'phase_c': 0.1463719890076094, 'iota': 0.48029231347844487, 't_c': -0.007216481409270378, 'psi': 0.3965573253495629, 'ra': 0.9436775930573488, 'dec': -0.4503790951314575}
07:33 ninjax INFO    : Injecting signals . . .
07:33 ninjax INFO    : self.ifos
07:33 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
07:33 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
07:33 ninjax INFO    : [ 3.70288919e-23-5.00614341e-23j  1.47935491e-23+1.70404767e-23j
  1.09649081e-23+1.45280878e-23j ...
  1.17433024e-23-5.92465300e-24j -1.71175021e-23+4.13322410e-23j
 -1.72208875e-23+3.58337860e-23j]
07:33 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
07:33 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
07:33 ninjax INFO    : [-6.50079341e-23+5.68073378e-23j  3.69419764e-23+1.64293687e-23j
  3.76876977e-23+7.60574262e-23j ...
  2.47618138e-23+7.24404255e-24j  2.01337782e-23-4.85483533e-23j
  4.44224884e-23-7.03397506e-24j]
07:33 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
07:33 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
07:33 ninjax INFO    : [ 2.19111546e-23+1.38031035e-23j  1.16753011e-22+1.49121926e-24j
  3.62286393e-24+4.67764677e-23j ...
  6.74262348e-23+2.02224735e-23j -4.67104081e-23-2.69667992e-23j
 -4.09037914e-23+1.76263924e-23j]
07:33 ninjax INFO    : [1.43183556e-46 1.43058540e-46 1.42935095e-46 ... 6.39793039e-47
 6.39795354e-47 6.39797668e-47]
07:33 ninjax INFO    : SNR for ifo H1 is 6.351705050141115
07:33 ninjax INFO    : SNR for ifo L1 is 8.016213839764028
07:33 ninjax INFO    : SNR for ifo V1 is 6.698914134971107
07:33 ninjax INFO    : The network SNR is 12.226172416440404
07:33 ninjax INFO    : Network SNR passes threshold
07:33 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
07:33 ninjax INFO    :    mass_1_source: 1.4138951282693721
07:33 ninjax INFO    :    mass_2_source: 1.140465957336729
07:33 ninjax INFO    :    s1_z: 0.012320502539628665
07:33 ninjax INFO    :    s2_z: -0.0028106223329217514
07:33 ninjax INFO    :    cos_iota: 0.886859900608528
07:33 ninjax INFO    :    d_L: 371.6836314376592
07:33 ninjax INFO    :    t_c: -0.007216481409270378
07:33 ninjax INFO    :    phase_c: 0.1463719890076094
07:33 ninjax INFO    :    psi: 0.3965573253495629
07:33 ninjax INFO    :    ra: 0.9436775930573488
07:33 ninjax INFO    :    sin_dec: -0.43530685796056456
07:33 ninjax INFO    :    q: 0.8066128346680674
07:33 ninjax INFO    :    M_c: 1.196923061417741
07:33 ninjax INFO    :    eta: 0.2471353925221029
07:33 ninjax INFO    :    iota: 0.48029231347844487
07:33 ninjax INFO    :    dec: -0.4503790951314575
07:33 ninjax INFO    :    lambda_1: 172.2775361681326
07:33 ninjax INFO    :    lambda_2: 754.1095694121205
07:33 ninjax INFO    :    H1_SNR: 6.351705050141115
07:33 ninjax INFO    :    L1_SNR: 8.016213839764028
07:33 ninjax INFO    :    V1_SNR: 6.698914134971107
07:33 ninjax INFO    :    network_SNR: 12.226172416440404
07:33 ninjax INFO    :    epoch: 254.0
07:33 ninjax INFO    :    gmst: 2.7288901910520846
07:33 ninjax INFO    :    duration: 256.0
07:33 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
07:33 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
07:33 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
07:37 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 189.90985202789307 seconds = 3.1651642004648846 minutes
07:37 ninjax INFO    : The priors are not modified after their initialization
07:37 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
07:37 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
07:37 ninjax INFO    : sample: {'M_c': Array([1.36610922, 2.21319855, 2.44097673], dtype=float64), 'q': Array([0.75137255, 0.56020655, 0.6752666 ], dtype=float64), 's1_z': Array([ 0.01717605,  0.01556433, -0.00620352], dtype=float64), 's2_z': Array([0.04240612, 0.01574785, 0.01188273], dtype=float64), 'lambda_1': Array([1289.43587847, 1007.10557043, 1119.53602663], dtype=float64), 'lambda_2': Array([4717.94518677,  800.92809147, 2348.21980514], dtype=float64), 'cos_iota': Array([0.42922165, 0.99021807, 0.2826669 ], dtype=float64), 'd_L': Array([885.11139837, 793.18250207, 549.36678776], dtype=float64), 't_c': Array([-0.08937907,  0.04099835, -0.02928435], dtype=float64), 'phase_c': Array([4.97273442, 2.87910317, 4.03869783], dtype=float64), 'psi': Array([0.54201728, 2.60507634, 2.92698428], dtype=float64), 'ra': Array([5.9815307 , 2.82101111, 2.0302516 ], dtype=float64), 'sin_dec': Array([ 0.88928483, -0.85656695, -0.24755198], dtype=float64)}
07:37 ninjax INFO    : log_prob: [-11.24203915 -72.10118211  -6.6518772 ]
07:37 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.4138951282693721, 'mass_2_source': 1.140465957336729, 's1_z': 0.012320502539628665, 's2_z': -0.0028106223329217514, 'cos_iota': 0.886859900608528, 'd_L': 371.6836314376592, 't_c': -0.007216481409270378, 'phase_c': 0.1463719890076094, 'psi': 0.3965573253495629, 'ra': 0.9436775930573488, 'sin_dec': -0.43530685796056456, 'q': 0.8066128346680674, 'M_c': 1.196923061417741, 'eta': 0.2471353925221029, 'iota': Array(0.48029231, dtype=float64, weak_type=True), 'dec': Array(-0.4503791, dtype=float64, weak_type=True), 'lambda_1': 172.2775361681326, 'lambda_2': 754.1095694121205, 'H1_SNR': 6.351705050141115, 'L1_SNR': 8.016213839764028, 'V1_SNR': 6.698914134971107, 'network_SNR': 12.226172416440404, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
07:37 ninjax INFO    : log_prob at the injection parameters is: 64.17015648383926
07:37 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
07:37 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
07:37 ninjax INFO    : Ninjax setup complete.
07:37 ninjax INFO    : Saving output to ./Aplus/injection_18/
07:37 ninjax INFO    : Using polynomial learning rate scheduler
07:37 ninjax INFO    : The hyperparameters passed to flowMC and jim are
07:37 ninjax INFO    :    n_loop_training: 200
07:37 ninjax INFO    :    n_loop_production: 10
07:37 ninjax INFO    :    n_local_steps: 100
07:37 ninjax INFO    :    n_global_steps: 1000
07:37 ninjax INFO    :    n_epochs: 25
07:37 ninjax INFO    :    n_chains: 1000
07:37 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x14b32d4964d0>
07:37 ninjax INFO    :    max_samples: 50000
07:37 ninjax INFO    :    momentum: 0.9
07:37 ninjax INFO    :    batch_size: 30000
07:37 ninjax INFO    :    use_global: True
07:37 ninjax INFO    :    keep_quantile: 0.0
07:37 ninjax INFO    :    train_thinning: 10
07:37 ninjax INFO    :    output_thinning: 50
07:37 ninjax INFO    :    n_sample_max: 10000
07:37 ninjax INFO    :    num_layers: 10
07:37 ninjax INFO    :    hidden_size: [128, 128]
07:37 ninjax INFO    :    num_bins: 8
07:37 ninjax INFO    :    save_training_chains: False
07:37 ninjax INFO    :    eps_mass_matrix: 1e-05
07:37 ninjax INFO    :    use_scheduler: True
07:37 ninjax INFO    :    use_temperature: False
07:37 ninjax INFO    :    which_temperature_schedule: exponential
07:37 ninjax INFO    :    starting_temperature: 2.0
07:37 ninjax INFO    :    stop_tempering_iteration: 75
07:37 ninjax INFO    :    stopping_criterion_global_acc: 0.1
07:37 ninjax INFO    :    stopping_criterion_loss: -inf
07:37 ninjax INFO    :    nf_model_kwargs: {}
07:37 ninjax INFO    :    local sampler arg not shown (pretty print)
07:37 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[ 3.43857599e-23  1.52463639e-23  1.30913573e-23  5.11219180e-23
  5.70839691e-23 -5.65659840e-24 -9.76891354e-23  9.60963687e-24
  8.25040477e-23 -1.34051630e-23]
[-5.13209048e-23  1.99324395e-23  1.25174202e-23 -3.48373642e-23
 -3.59585060e-23  9.56192129e-23  2.21195699e-23 -2.87395672e-23
 -1.30922639e-22 -3.79295853e-23]
Checking the noise that was generated in inject_signal ifo:
[-6.26036416e-23  3.79005605e-23  3.42050525e-23 -2.30384451e-23
 -8.28565361e-23  5.91461924e-23  6.76282832e-23 -2.10389782e-23
 -2.53382891e-23 -7.03348282e-23]
[ 5.96132981e-23  1.28616098e-23  7.72873556e-23  2.41270656e-23
 -2.16458779e-23  7.82437017e-23  1.81540741e-23  1.72021156e-23
  1.53353252e-22 -2.37936267e-23]
Checking the noise that was generated in inject_signal ifo:
[ 1.85688259e-23  1.20332792e-22  2.91133476e-24  2.03409848e-23
  1.30268219e-22 -9.04401685e-23 -1.57376394e-23  9.87008331e-23
  2.98560915e-23  4.82220572e-23]
[ 1.58540231e-23  3.08983053e-24  4.29219782e-23 -1.64248842e-22
 -6.80850243e-23  1.09877130e-23  4.16067770e-23  8.30087200e-23
  3.12645506e-23  5.11022005e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.18542218208312988 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.4138951282693721, 'mass_2_source': 1.140465957336729, 's1_z': 0.012320502539628665, 's2_z': -0.0028106223329217514, 'cos_iota': 0.886859900608528, 'd_L': 371.6836314376592, 't_c': -0.007216481409270378, 'phase_c': 0.1463719890076094, 'psi': 0.3965573253495629, 'ra': 0.9436775930573488, 'sin_dec': -0.43530685796056456, 'q': 0.8066128346680674, 'M_c': 1.196923061417741, 'eta': 0.2471353925221029, 'iota': Array(0.48029231, dtype=float64, weak_type=True), 'dec': Array(-0.4503791, dtype=float64, weak_type=True), 'lambda_1': 172.2775361681326, 'lambda_2': 754.1095694121205, 'H1_SNR': 6.351705050141115, 'L1_SNR': 8.016213839764028, 'V1_SNR': 6.698914134971107, 'network_SNR': 12.226172416440404, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.507448673248291 seconds
Time for h_sky_low and h_sky_center: 5.606143474578857 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.7539107799530029
Going to compute coefficients . . .
Time for computing coefficients: 167.3503782749176 seconds
Time for computing coefficients: 7.510500907897949 seconds
Time for computing coefficients: 7.443700313568115 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:00<6:40:25, 120.73s/it]Tuning global sampler:   1%|          | 2/200 [02:06<2:54:47, 52.97s/it] Tuning global sampler:   2%|▏         | 3/200 [02:10<1:41:27, 30.90s/it]Tuning global sampler:   2%|▏         | 4/200 [02:15<1:07:06, 20.54s/it]Tuning global sampler:   2%|▎         | 5/200 [02:20<48:06, 14.80s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:24<36:40, 11.34s/it]Tuning global sampler:   4%|▎         | 7/200 [02:29<29:19,  9.12s/it]Tuning global sampler:   4%|▍         | 8/200 [02:33<24:35,  7.69s/it]Tuning global sampler:   4%|▍         | 9/200 [02:38<21:20,  6.71s/it]Tuning global sampler:   5%|▌         | 10/200 [02:42<19:00,  6.00s/it]Tuning global sampler:   6%|▌         | 11/200 [02:47<17:33,  5.57s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:32,  5.28s/it]Tuning global sampler:   6%|▋         | 13/200 [02:56<15:46,  5.06s/it]Tuning global sampler:   7%|▋         | 14/200 [03:01<15:18,  4.94s/it]Tuning global sampler:   8%|▊         | 15/200 [03:06<14:57,  4.85s/it]Tuning global sampler:   8%|▊         | 16/200 [03:10<14:41,  4.79s/it]Tuning global sampler:   8%|▊         | 17/200 [03:15<14:28,  4.75s/it]Tuning global sampler:   9%|▉         | 18/200 [03:19<14:20,  4.73s/it]Tuning global sampler:  10%|▉         | 19/200 [03:24<14:11,  4.70s/it]Tuning global sampler:  10%|█         | 20/200 [03:29<14:03,  4.68s/it]Tuning global sampler:  10%|█         | 21/200 [03:34<14:50,  4.97s/it]Tuning global sampler:  11%|█         | 22/200 [03:39<14:26,  4.87s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:44<14:08,  4.79s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:48<13:44,  4.68s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:53<13:25,  4.60s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:57<13:11,  4.55s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:01<13:00,  4.51s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:06<12:51,  4.49s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:10<12:44,  4.47s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:15<12:37,  4.46s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:19<12:31,  4.45s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:23<12:25,  4.44s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:28<12:18,  4.42s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:32<12:12,  4.41s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:37<12:09,  4.42s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:41<12:05,  4.42s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:46<12:00,  4.42s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:50<11:54,  4.41s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:54<11:49,  4.41s/it]Tuning global sampler:  20%|██        | 40/200 [04:59<11:44,  4.41s/it]Tuning global sampler:  20%|██        | 41/200 [05:04<12:27,  4.70s/it]Tuning global sampler:  21%|██        | 42/200 [05:09<12:08,  4.61s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:13<11:54,  4.55s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:17<11:41,  4.50s/it]