Wed Apr  2 07:33:39 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
07:33 ninjax INFO    : Checking and setting outdir
07:33 ninjax INFO    : Found generation prior file ./Aplus/injection_5/generation_prior.prior
07:33 ninjax INFO    : The outdir is set to ./Aplus/injection_5
07:33 ninjax INFO    : Loading the given config
07:33 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
07:33 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
07:33 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/jester_soft/Aplus/injection_5/complete_config.json
07:33 ninjax INFO    : No seed specified. Generating a random seed: 658842
07:33 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 724046
07:33 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 860950
07:33 ninjax INFO    : Loading the priors
07:33 ninjax INFO    : Setting up the prior
07:33 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
07:33 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
07:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
07:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
07:33 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
07:33 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
07:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
07:33 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
07:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
07:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
07:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
07:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
07:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
07:33 ninjax INFO    : Setting up the generation prior
07:33 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 1.99, naming=["mass_1_source"])
07:33 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 1.99, naming=["mass_2_source"])
07:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
07:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
07:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
07:33 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
07:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
07:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
07:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
07:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
07:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
07:33 ninjax INFO    : Finished prior setup
07:33 ninjax INFO    : Setting the transforms
07:33 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
07:33 ninjax INFO    : transforms_str_list has 3 elements
07:33 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
07:33 ninjax INFO    : Setting the likelihood
07:33 ninjax INFO    : GW likelihood provided, setting up the GW pipe
07:33 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz
07:33 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz for BNS injections
07:33 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
07:33 ninjax INFO    : self.is_BNS_run is True
07:33 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
07:33 ninjax INFO    : GW run is an injection
07:33 ninjax INFO    : Setting up GW injection . . . 
07:33 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
07:33 ninjax INFO    : Generating new injection
07:33 ninjax INFO    : Sanity check: generated parameters:
07:33 ninjax INFO    : {'mass_1_source': 1.178672520304986, 'mass_2_source': 1.300929654713608, 's1_z': 0.023133927932779755, 's2_z': 0.027078449829135362, 'cos_iota': 0.6434209652068978, 'd_L': 159.63169558050993, 't_c': -0.0050162441579035405, 'phase_c': 4.9815682250427304, 'psi': 2.795285656761111, 'ra': 2.130384698083903, 'sin_dec': 0.3077536966410972}
07:33 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz . . . 
07:33 ninjax INFO    : Injected lambda_1: 308.17424966611156
07:33 ninjax INFO    : Injected lambda_2: 604.1051808642401
07:33 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.1166081468612497 is 256.0
07:33 ninjax INFO    : After transforms, the injection parameters are:
07:33 ninjax INFO    : {'mass_1_source': 1.300929654713608, 'mass_2_source': 1.178672520304986, 's1_z': 0.023133927932779755, 's2_z': 0.027078449829135362, 'cos_iota': 0.6434209652068978, 'd_L': 159.63169558050993, 't_c': -0.0050162441579035405, 'phase_c': 4.9815682250427304, 'psi': 2.795285656761111, 'ra': 2.130384698083903, 'sin_dec': 0.3077536966410972, 'q': 0.906023255011789, 'M_c': 1.1166081468612497, 'eta': 0.249392250772262, 'iota': Array(0.87183755, dtype=float64, weak_type=True), 'dec': Array(0.31283124, dtype=float64, weak_type=True), 'lambda_1': 308.17424966611156, 'lambda_2': 604.1051808642401}
07:33 ninjax INFO    : The trial injection parameters are {'M_c': 1.1166081468612497, 'eta': 0.249392250772262, 's1_z': 0.023133927932779755, 's2_z': 0.027078449829135362, 'lambda_1': 308.17424966611156, 'lambda_2': 604.1051808642401, 'd_L': 159.63169558050993, 'phase_c': 4.9815682250427304, 'iota': 0.8718375519962328, 't_c': -0.0050162441579035405, 'psi': 2.795285656761111, 'ra': 2.130384698083903, 'dec': 0.3128312416452883}
07:33 ninjax INFO    : Injecting signals . . .
07:33 ninjax INFO    : self.ifos
07:33 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
07:33 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
07:33 ninjax INFO    : [ 1.64102942e-22+4.31063982e-24j  3.32976034e-23+4.38681067e-23j
  9.77723041e-23-2.40393894e-23j ...
 -1.17516591e-23-1.92442895e-23j -3.23243751e-23+4.80345667e-23j
 -3.10547298e-23+1.39541426e-23j]
07:33 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
07:33 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
07:33 ninjax INFO    : [-6.25216864e-24-4.46917167e-23j  1.44870407e-22+2.14232188e-23j
  4.14162622e-24-1.46331588e-23j ...
 -1.52503058e-23+2.91720298e-23j -1.52223822e-23-7.73141202e-24j
  3.64159883e-23-7.86367526e-24j]
07:33 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
07:33 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
07:33 ninjax INFO    : [ 6.02311904e-23+3.10271057e-24j -6.61759794e-23+1.19702674e-22j
 -2.06429461e-23-3.84744000e-23j ...
  2.26185713e-24+7.66600359e-23j  7.55940354e-23+2.58077993e-23j
  1.42250448e-23+1.09377763e-23j]
07:33 ninjax INFO    : [1.43183556e-46 1.43058540e-46 1.42935095e-46 ... 6.39793039e-47
 6.39795354e-47 6.39797668e-47]
07:33 ninjax INFO    : SNR for ifo H1 is 8.821715000097072
07:33 ninjax INFO    : SNR for ifo L1 is 15.358027650873451
07:33 ninjax INFO    : SNR for ifo V1 is 13.452745960898074
07:33 ninjax INFO    : The network SNR is 22.24113402586277
07:33 ninjax INFO    : Network SNR passes threshold
07:33 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
07:33 ninjax INFO    :    mass_1_source: 1.300929654713608
07:33 ninjax INFO    :    mass_2_source: 1.178672520304986
07:33 ninjax INFO    :    s1_z: 0.023133927932779755
07:33 ninjax INFO    :    s2_z: 0.027078449829135362
07:33 ninjax INFO    :    cos_iota: 0.6434209652068978
07:33 ninjax INFO    :    d_L: 159.63169558050993
07:33 ninjax INFO    :    t_c: -0.0050162441579035405
07:33 ninjax INFO    :    phase_c: 4.9815682250427304
07:33 ninjax INFO    :    psi: 2.795285656761111
07:33 ninjax INFO    :    ra: 2.130384698083903
07:33 ninjax INFO    :    sin_dec: 0.3077536966410972
07:33 ninjax INFO    :    q: 0.906023255011789
07:33 ninjax INFO    :    M_c: 1.1166081468612497
07:33 ninjax INFO    :    eta: 0.249392250772262
07:33 ninjax INFO    :    iota: 0.8718375519962328
07:33 ninjax INFO    :    dec: 0.3128312416452883
07:33 ninjax INFO    :    lambda_1: 308.17424966611156
07:33 ninjax INFO    :    lambda_2: 604.1051808642401
07:33 ninjax INFO    :    H1_SNR: 8.821715000097072
07:33 ninjax INFO    :    L1_SNR: 15.358027650873451
07:33 ninjax INFO    :    V1_SNR: 13.452745960898074
07:33 ninjax INFO    :    network_SNR: 22.24113402586277
07:33 ninjax INFO    :    epoch: 254.0
07:33 ninjax INFO    :    gmst: 2.7288901910520846
07:33 ninjax INFO    :    duration: 256.0
07:33 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
07:33 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
07:33 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
07:36 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 183.65128326416016 seconds = 3.0608547210693358 minutes
07:36 ninjax INFO    : The priors are not modified after their initialization
07:36 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
07:36 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
07:36 ninjax INFO    : sample: {'M_c': Array([1.81170853, 1.96273266, 1.46222346], dtype=float64), 'q': Array([0.21251414, 0.21843968, 0.28336458], dtype=float64), 's1_z': Array([-0.04393548,  0.04199814, -0.04910063], dtype=float64), 's2_z': Array([-0.01839335, -0.04159422,  0.02080778], dtype=float64), 'lambda_1': Array([ 507.544359  , 4473.51630145,   61.80139764], dtype=float64), 'lambda_2': Array([1357.77737118, 1854.5011082 , 2064.5568787 ], dtype=float64), 'cos_iota': Array([ 0.19558184, -0.049876  , -0.86989865], dtype=float64), 'd_L': Array([826.20870264, 951.00409794, 460.19647367], dtype=float64), 't_c': Array([ 0.05944459, -0.03857575, -0.07896997], dtype=float64), 'phase_c': Array([1.01224146, 2.59541038, 3.8674359 ], dtype=float64), 'psi': Array([2.72099692, 1.38721134, 2.4572667 ], dtype=float64), 'ra': Array([2.85250127, 4.35060827, 4.06745242], dtype=float64), 'sin_dec': Array([-0.95473405,  0.14466604,  0.99263604], dtype=float64)}
07:37 ninjax INFO    : log_prob: [ -1.48410997  -1.90899885 -97.10520606]
07:37 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.300929654713608, 'mass_2_source': 1.178672520304986, 's1_z': 0.023133927932779755, 's2_z': 0.027078449829135362, 'cos_iota': 0.6434209652068978, 'd_L': 159.63169558050993, 't_c': -0.0050162441579035405, 'phase_c': 4.9815682250427304, 'psi': 2.795285656761111, 'ra': 2.130384698083903, 'sin_dec': 0.3077536966410972, 'q': 0.906023255011789, 'M_c': 1.1166081468612497, 'eta': 0.249392250772262, 'iota': Array(0.87183755, dtype=float64, weak_type=True), 'dec': Array(0.31283124, dtype=float64, weak_type=True), 'lambda_1': 308.17424966611156, 'lambda_2': 604.1051808642401, 'H1_SNR': 8.821715000097072, 'L1_SNR': 15.358027650873451, 'V1_SNR': 13.452745960898074, 'network_SNR': 22.24113402586277, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
07:37 ninjax INFO    : log_prob at the injection parameters is: 220.57876917242402
07:37 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
07:37 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
07:37 ninjax INFO    : Ninjax setup complete.
07:37 ninjax INFO    : Saving output to ./Aplus/injection_5/
07:37 ninjax INFO    : Using polynomial learning rate scheduler
07:37 ninjax INFO    : The hyperparameters passed to flowMC and jim are
07:37 ninjax INFO    :    n_loop_training: 200
07:37 ninjax INFO    :    n_loop_production: 10
07:37 ninjax INFO    :    n_local_steps: 100
07:37 ninjax INFO    :    n_global_steps: 1000
07:37 ninjax INFO    :    n_epochs: 25
07:37 ninjax INFO    :    n_chains: 1000
07:37 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x150528dea4d0>
07:37 ninjax INFO    :    max_samples: 50000
07:37 ninjax INFO    :    momentum: 0.9
07:37 ninjax INFO    :    batch_size: 30000
07:37 ninjax INFO    :    use_global: True
07:37 ninjax INFO    :    keep_quantile: 0.0
07:37 ninjax INFO    :    train_thinning: 10
07:37 ninjax INFO    :    output_thinning: 50
07:37 ninjax INFO    :    n_sample_max: 10000
07:37 ninjax INFO    :    num_layers: 10
07:37 ninjax INFO    :    hidden_size: [128, 128]
07:37 ninjax INFO    :    num_bins: 8
07:37 ninjax INFO    :    save_training_chains: False
07:37 ninjax INFO    :    eps_mass_matrix: 1e-05
07:37 ninjax INFO    :    use_scheduler: True
07:37 ninjax INFO    :    use_temperature: False
07:37 ninjax INFO    :    which_temperature_schedule: exponential
07:37 ninjax INFO    :    starting_temperature: 2.0
07:37 ninjax INFO    :    stop_tempering_iteration: 75
07:37 ninjax INFO    :    stopping_criterion_global_acc: 0.1
07:37 ninjax INFO    :    stopping_criterion_loss: -inf
07:37 ninjax INFO    :    nf_model_kwargs: {}
07:37 ninjax INFO    :    local sampler arg not shown (pretty print)
07:37 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[ 1.60286180e-22  3.23114828e-23  1.01789785e-22  4.10018225e-23
 -1.12067087e-22 -2.19344685e-23  1.28548749e-22 -4.83841733e-23
  3.50659362e-23 -4.25690980e-24]
[ 2.92781051e-24  4.78051002e-23 -2.34695932e-23  1.55227291e-23
  3.69429554e-23 -5.71086798e-23  1.02930422e-22  9.56508159e-24
  5.18286177e-23  8.58066745e-23]
Checking the noise that was generated in inject_signal ifo:
[-8.59232119e-24  1.51741167e-22  5.06530008e-24 -4.92333183e-23
  5.95890419e-23  2.68480785e-23  6.14631781e-23  7.42351276e-23
  6.58457212e-24  1.76526508e-23]
[-3.80229980e-23  2.30718333e-23 -2.16366768e-23 -9.38912054e-23
 -2.25897155e-23  1.95883209e-23  1.70825565e-22 -6.33106998e-23
 -6.97041618e-23  3.84269824e-23]
Checking the noise that was generated in inject_signal ifo:
[ 6.71516960e-23 -7.05955189e-23 -2.66489378e-23  9.03924886e-23
 -5.52048681e-23 -3.05317072e-24 -8.88508228e-24  7.52372100e-23
  1.17464507e-23 -5.72592361e-23]
[-6.32932511e-25  1.13199767e-22 -3.34029188e-23 -1.14435073e-22
  3.27575931e-23 -3.14221875e-23  2.91049628e-23 -1.08477911e-22
 -2.01754236e-23  3.32334233e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.18479132652282715 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.300929654713608, 'mass_2_source': 1.178672520304986, 's1_z': 0.023133927932779755, 's2_z': 0.027078449829135362, 'cos_iota': 0.6434209652068978, 'd_L': 159.63169558050993, 't_c': -0.0050162441579035405, 'phase_c': 4.9815682250427304, 'psi': 2.795285656761111, 'ra': 2.130384698083903, 'sin_dec': 0.3077536966410972, 'q': 0.906023255011789, 'M_c': 1.1166081468612497, 'eta': 0.249392250772262, 'iota': Array(0.87183755, dtype=float64, weak_type=True), 'dec': Array(0.31283124, dtype=float64, weak_type=True), 'lambda_1': 308.17424966611156, 'lambda_2': 604.1051808642401, 'H1_SNR': 8.821715000097072, 'L1_SNR': 15.358027650873451, 'V1_SNR': 13.452745960898074, 'network_SNR': 22.24113402586277, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5117893218994141 seconds
Time for h_sky_low and h_sky_center: 5.484093904495239 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.7556819915771484
Going to compute coefficients . . .
Time for computing coefficients: 162.11536383628845 seconds
Time for computing coefficients: 7.162765741348267 seconds
Time for computing coefficients: 6.911247968673706 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:01<6:44:19, 121.91s/it]Tuning global sampler:   1%|          | 2/200 [02:06<2:54:32, 52.89s/it] Tuning global sampler:   2%|▏         | 3/200 [02:11<1:41:17, 30.85s/it]Tuning global sampler:   2%|▏         | 4/200 [02:15<1:06:54, 20.48s/it]Tuning global sampler:   2%|▎         | 5/200 [02:20<47:56, 14.75s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:24<36:32, 11.30s/it]Tuning global sampler:   4%|▎         | 7/200 [02:29<29:12,  9.08s/it]Tuning global sampler:   4%|▍         | 8/200 [02:33<24:28,  7.65s/it]Tuning global sampler:   4%|▍         | 9/200 [02:38<21:13,  6.67s/it]Tuning global sampler:   5%|▌         | 10/200 [02:42<18:54,  5.97s/it]Tuning global sampler:   6%|▌         | 11/200 [02:47<17:27,  5.54s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:25,  5.24s/it]Tuning global sampler:   6%|▋         | 13/200 [02:56<15:41,  5.03s/it]Tuning global sampler:   7%|▋         | 14/200 [03:01<15:12,  4.91s/it]Tuning global sampler:   8%|▊         | 15/200 [03:05<14:51,  4.82s/it]Tuning global sampler:   8%|▊         | 16/200 [03:10<14:35,  4.76s/it]Tuning global sampler:   8%|▊         | 17/200 [03:15<14:22,  4.72s/it]Tuning global sampler:   9%|▉         | 18/200 [03:20<15:05,  4.97s/it]Tuning global sampler:  10%|▉         | 19/200 [03:25<14:40,  4.86s/it]Tuning global sampler:  10%|█         | 20/200 [03:29<14:21,  4.79s/it]Tuning global sampler:  10%|█         | 21/200 [03:34<14:07,  4.73s/it]Tuning global sampler:  11%|█         | 22/200 [03:39<13:54,  4.69s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:43<13:43,  4.65s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:48<13:25,  4.58s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:52<13:10,  4.52s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:56<12:58,  4.47s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:01<12:49,  4.45s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:05<12:41,  4.43s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:09<12:34,  4.41s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:14<12:28,  4.40s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:18<12:22,  4.39s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:23<12:16,  4.39s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:27<12:09,  4.37s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:31<12:04,  4.36s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:36<12:00,  4.37s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:40<11:56,  4.37s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:45<12:40,  4.67s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:50<12:21,  4.58s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:54<12:07,  4.52s/it]Tuning global sampler:  20%|██        | 40/200 [04:58<11:55,  4.47s/it]Tuning global sampler:  20%|██        | 41/200 [05:03<11:46,  4.44s/it]Tuning global sampler:  21%|██        | 42/200 [05:07<11:38,  4.42s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:12<11:31,  4.41s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:16<11:25,  4.39s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:20<11:19,  4.38s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:25<11:14,  4.38s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:29<11:10,  4.38s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:33<11:06,  4.38s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:38<11:03,  4.39s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:42<10:58,  4.39s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:47<10:54,  4.39s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:51<10:49,  4.39s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:55<10:45,  4.39s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:00<10:41,  4.39s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:04<10:34,  4.38s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:08<10:28,  4.37s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:14<11:09,  4.68s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:18<10:52,  4.60s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:23<10:39,  4.54s/it]Tuning global sampler:  30%|███       | 60/200 [06:27<10:28,  4.49s/it]Tuning global sampler:  30%|███       | 61/200 [06:31<10:19,  4.45s/it]Tuning global sampler:  31%|███       | 62/200 [06:36<10:11,  4.43s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:40<10:06,  4.42s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:45<09:59,  4.41s/it]Tuning global sampler:  32%|███▎      | 65/200 [06:49<09:53,  4.40s/it]Tuning global sampler:  33%|███▎      | 66/200 [06:53<09:47,  4.38s/it]Tuning global sampler:  34%|███▎      | 67/200 [06:58<09:40,  4.37s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:02<09:36,  4.37s/it]Tuning global sampler:  34%|███▍      | 69/200 [07:06<09:33,  4.38s/it]Tuning global sampler:  35%|███▌      | 70/200 [07:11<09:29,  4.38s/it]Tuning global sampler:  36%|███▌      | 71/200 [07:15<09:25,  4.38s/it]Tuning global sampler:  36%|███▌      | 72/200 [07:20<09:20,  4.38s/it]Tuning global sampler:  36%|███▋      | 73/200 [07:24<09:16,  4.38s/it]Tuning global sampler:  37%|███▋      | 74/200 [07:28<09:11,  4.38s/it]Tuning global sampler:  38%|███▊      | 75/200 [07:33<09:07,  4.38s/it]Tuning global sampler:  38%|███▊      | 76/200 [07:37<09:03,  4.39s/it]Tuning global sampler:  38%|███▊      | 77/200 [07:41<08:57,  4.37s/it]Tuning global sampler:  39%|███▉      | 78/200 [07:47<09:30,  4.67s/it]Tuning global sampler:  40%|███▉      | 79/200 [07:51<09:14,  4.58s/it]Tuning global sampler:  40%|████      | 80/200 [07:56<09:02,  4.52s/it]Tuning global sampler:  40%|████      | 81/200 [08:00<08:54,  4.49s/it]Tuning global sampler:  41%|████      | 82/200 [08:04<08:45,  4.46s/it]Tuning global sampler:  42%|████▏     | 83/200 [08:09<08:38,  4.43s/it]Tuning global sampler:  42%|████▏     | 84/200 [08:13<08:32,  4.42s/it]Tuning global sampler:  42%|████▎     | 85/200 [08:17<08:26,  4.41s/it]Tuning global sampler:  43%|████▎     | 86/200 [08:22<08:21,  4.40s/it]Tuning global sampler:  43%|████▎     | 86/200 [08:26<11:11,  5.89s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.21s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.21s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.21s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.21s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.21s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.21s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.21s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.21s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]
07:46 ninjax INFO    : Saving samples to ./Aplus/injection_5/results_training.npz
07:46 ninjax INFO    : Saving the NF
07:46 ninjax INFO    : Time taken: 545.1592669487 seconds (9.085987782478332 minutes)
07:46 ninjax INFO    : Creating the final corner plot
07:46 ninjax INFO    : Dumping the final production chains
07:46 ninjax INFO    : Chains shape is: (13, 220000)
07:46 ninjax INFO    : Key: M_c: ESS = 31164, Rhat = 1.0208657079377326
07:46 ninjax INFO    : Key: q: ESS = 18414, Rhat = 1.0344357674841889
07:46 ninjax INFO    : Key: s1_z: ESS = 27625, Rhat = 1.022920403070514
07:46 ninjax INFO    : Key: s2_z: ESS = 24406, Rhat = 1.0259354518036898
07:46 ninjax INFO    : Key: lambda_1: ESS = 31580, Rhat = 1.0204765519678032
07:46 ninjax INFO    : Key: lambda_2: ESS = 25739, Rhat = 1.025880442540908
07:46 ninjax INFO    : Key: cos_iota: ESS = 19064, Rhat = 1.032940823879955
07:46 ninjax INFO    : Key: d_L: ESS = 21711, Rhat = 1.0293376420323355
07:46 ninjax INFO    : Key: t_c: ESS = 28487, Rhat = 1.0228506773188422
07:46 ninjax INFO    : Key: phase_c: ESS = 17414, Rhat = 1.0364462921453081
07:46 ninjax INFO    : Key: psi: ESS = 53918, Rhat = 1.020572965610506
07:46 ninjax INFO    : Key: ra: ESS = 39838, Rhat = 1.0176595447069345
07:46 ninjax INFO    : Key: sin_dec: ESS = 28783, Rhat = 1.022221076405177
07:46 ninjax INFO    : Key: eta: ESS = 18414, Rhat = 1.0344357674841889
07:46 ninjax INFO    : Key: iota: ESS = 19064, Rhat = 1.032940823879955
07:46 ninjax INFO    : Key: dec: ESS = 28783, Rhat = 1.022221076405177
07:46 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.173 +/- 0.221
q: 0.736 +/- 0.224
s1_z: 0.006 +/- 0.028
s2_z: 0.011 +/- 0.028
lambda_1: 1985.192 +/- 1487.223
lambda_2: 1929.252 +/- 1457.103
cos_iota: 0.328 +/- 0.607
d_L: 485.294 +/- 271.749
t_c: -0.014 +/- 0.026
phase_c: 3.263 +/- 1.669
psi: 1.820 +/- 0.889
ra: 2.402 +/- 1.126
sin_dec: 0.035 +/- 0.466
Log probability: 87.305 +/- 96.321
Local acceptance: 0.536 +/- 0.499
Global acceptance: 0.012 +/- 0.108
Max loss: 22.825, Min loss: 5.708
Production summary
==========
M_c: 1.117 +/- 0.000
q: 0.879 +/- 0.079
s1_z: 0.030 +/- 0.013
s2_z: 0.027 +/- 0.015
lambda_1: 413.887 +/- 356.602
lambda_2: 625.439 +/- 521.395
cos_iota: 0.812 +/- 0.142
d_L: 199.002 +/- 31.513
t_c: -0.005 +/- 0.000
phase_c: 3.096 +/- 1.817
psi: 1.642 +/- 0.912
ra: 2.125 +/- 0.004
sin_dec: 0.305 +/- 0.017
Log probability: 218.588 +/- 2.224
Local acceptance: 0.090 +/- 0.286
Global acceptance: 0.111 +/- 0.314
DONE

JOB STATISTICS
==============
Job ID: 10918543
Cluster: snellius
User/Group: twouters2/twouters2
State: RUNNING
Nodes: 1
Cores per node: 16
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 03:28:48 core-walltime
Job Wall-clock time: 00:13:03
Memory Utilized: 0.00 MB
Memory Efficiency: 0.00% of 10.00 GB (10.00 GB/node)
WARNING: Efficiency statistics can only be obtained after the job has ended as seff tool is based on the accounting database data.
