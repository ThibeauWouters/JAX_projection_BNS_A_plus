Wed Apr  2 07:33:39 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
07:33 ninjax INFO    : Checking and setting outdir
07:33 ninjax INFO    : Found generation prior file ./Aplus/injection_9/generation_prior.prior
07:33 ninjax INFO    : The outdir is set to ./Aplus/injection_9
07:33 ninjax INFO    : Loading the given config
07:33 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
07:33 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
07:33 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/jester_soft/Aplus/injection_9/complete_config.json
07:33 ninjax INFO    : No seed specified. Generating a random seed: 381791
07:33 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 711468
07:33 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 251291
07:33 ninjax INFO    : Loading the priors
07:33 ninjax INFO    : Setting up the prior
07:33 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
07:33 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
07:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
07:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
07:33 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
07:33 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
07:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
07:33 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
07:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
07:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
07:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
07:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
07:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
07:33 ninjax INFO    : Setting up the generation prior
07:33 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 1.99, naming=["mass_1_source"])
07:33 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 1.99, naming=["mass_2_source"])
07:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
07:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
07:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
07:33 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
07:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
07:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
07:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
07:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
07:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
07:33 ninjax INFO    : Finished prior setup
07:33 ninjax INFO    : Setting the transforms
07:33 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
07:33 ninjax INFO    : transforms_str_list has 3 elements
07:33 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
07:33 ninjax INFO    : Setting the likelihood
07:33 ninjax INFO    : GW likelihood provided, setting up the GW pipe
07:33 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz
07:33 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz for BNS injections
07:33 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
07:33 ninjax INFO    : self.is_BNS_run is True
07:33 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
07:33 ninjax INFO    : GW run is an injection
07:33 ninjax INFO    : Setting up GW injection . . . 
07:33 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
07:33 ninjax INFO    : Generating new injection
07:33 ninjax INFO    : Sanity check: generated parameters:
07:33 ninjax INFO    : {'mass_1_source': 1.957310189635363, 'mass_2_source': 1.506359522531516, 's1_z': 0.02755030638970142, 's2_z': 0.03064730356009869, 'cos_iota': 0.42135936747469316, 'd_L': 227.55985856475615, 't_c': 0.06211360217070094, 'phase_c': 2.1700018826735197, 'psi': 1.565069254577316, 'ra': 4.946971511672853, 'sin_dec': -0.5996297365390322}
07:33 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz . . . 
07:33 ninjax INFO    : Injected lambda_1: 10.696277381314822
07:33 ninjax INFO    : Injected lambda_2: 109.97775754217548
07:33 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.5689941802284995 is 128.0
07:33 ninjax INFO    : After transforms, the injection parameters are:
07:33 ninjax INFO    : {'mass_1_source': 1.957310189635363, 'mass_2_source': 1.506359522531516, 's1_z': 0.02755030638970142, 's2_z': 0.03064730356009869, 'cos_iota': 0.42135936747469316, 'd_L': 227.55985856475615, 't_c': 0.06211360217070094, 'phase_c': 2.1700018826735197, 'psi': 1.565069254577316, 'ra': 4.946971511672853, 'sin_dec': -0.5996297365390322, 'q': 0.7696069486115245, 'M_c': 1.5689941802284995, 'eta': 0.2457623495316388, 'iota': Array(1.1358526, dtype=float64, weak_type=True), 'dec': Array(-0.64303836, dtype=float64, weak_type=True), 'lambda_1': 10.696277381314822, 'lambda_2': 109.97775754217548}
07:33 ninjax INFO    : The trial injection parameters are {'M_c': 1.5689941802284995, 'eta': 0.2457623495316388, 's1_z': 0.02755030638970142, 's2_z': 0.03064730356009869, 'lambda_1': 10.696277381314822, 'lambda_2': 109.97775754217548, 'd_L': 227.55985856475615, 'phase_c': 2.1700018826735197, 'iota': 1.1358526008169147, 't_c': 0.06211360217070094, 'psi': 1.565069254577316, 'ra': 4.946971511672853, 'dec': -0.6430383597518111}
07:33 ninjax INFO    : Injecting signals . . .
07:33 ninjax INFO    : self.ifos
07:33 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
07:33 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
07:33 ninjax INFO    : [ 2.51653268e-23-2.32751233e-24j -1.88992524e-23-5.73995869e-24j
 -5.72441445e-24-3.20468902e-23j ...
  1.18503593e-23-1.24834508e-23j  4.95758956e-25+2.14273358e-23j
  1.46949405e-23-5.42231142e-25j]
07:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
07:33 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
07:33 ninjax INFO    : [ 4.06758297e-23+3.71357711e-23j -2.19836064e-23-3.26877044e-23j
  6.95744147e-23+5.43810380e-23j ...
  1.12700532e-23-7.04946487e-24j  6.17091786e-24-2.48934045e-23j
 -1.37598991e-23-2.85910955e-23j]
07:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
07:33 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
07:33 ninjax INFO    : [-3.74649879e-23+3.52471618e-23j  1.09776588e-23-2.08589785e-23j
 -1.65622876e-23-9.34914527e-23j ...
 -5.97460861e-24+4.31172251e-23j  3.80594292e-23+2.15577134e-23j
  8.22725590e-23+6.68599900e-23j]
07:33 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
07:33 ninjax INFO    : SNR for ifo H1 is 12.54252201879377
07:33 ninjax INFO    : SNR for ifo L1 is 16.369796341369558
07:33 ninjax INFO    : SNR for ifo V1 is 9.23808509930874
07:33 ninjax INFO    : The network SNR is 22.597064126826584
07:33 ninjax INFO    : Network SNR passes threshold
07:33 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
07:33 ninjax INFO    :    mass_1_source: 1.957310189635363
07:33 ninjax INFO    :    mass_2_source: 1.506359522531516
07:33 ninjax INFO    :    s1_z: 0.02755030638970142
07:33 ninjax INFO    :    s2_z: 0.03064730356009869
07:33 ninjax INFO    :    cos_iota: 0.42135936747469316
07:33 ninjax INFO    :    d_L: 227.55985856475615
07:33 ninjax INFO    :    t_c: 0.06211360217070094
07:33 ninjax INFO    :    phase_c: 2.1700018826735197
07:33 ninjax INFO    :    psi: 1.565069254577316
07:33 ninjax INFO    :    ra: 4.946971511672853
07:33 ninjax INFO    :    sin_dec: -0.5996297365390322
07:33 ninjax INFO    :    q: 0.7696069486115245
07:33 ninjax INFO    :    M_c: 1.5689941802284995
07:33 ninjax INFO    :    eta: 0.2457623495316388
07:33 ninjax INFO    :    iota: 1.1358526008169147
07:33 ninjax INFO    :    dec: -0.6430383597518111
07:33 ninjax INFO    :    lambda_1: 10.696277381314822
07:33 ninjax INFO    :    lambda_2: 109.97775754217548
07:33 ninjax INFO    :    H1_SNR: 12.54252201879377
07:33 ninjax INFO    :    L1_SNR: 16.369796341369558
07:33 ninjax INFO    :    V1_SNR: 9.23808509930874
07:33 ninjax INFO    :    network_SNR: 22.597064126826584
07:33 ninjax INFO    :    epoch: 126.0
07:33 ninjax INFO    :    gmst: 2.7288901910520846
07:33 ninjax INFO    :    duration: 128.0
07:33 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
07:33 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
07:33 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
07:36 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 144.60787343978882 seconds = 2.4101312239964803 minutes
07:36 ninjax INFO    : The priors are not modified after their initialization
07:36 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
07:36 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
07:36 ninjax INFO    : sample: {'M_c': Array([1.94563073, 2.17091287, 1.32224942], dtype=float64), 'q': Array([0.36503065, 0.64092701, 0.51425586], dtype=float64), 's1_z': Array([-0.04046491,  0.04628343,  0.01571072], dtype=float64), 's2_z': Array([ 0.01395605, -0.01420057, -0.0332195 ], dtype=float64), 'lambda_1': Array([4016.77617197, 4448.36653137,  937.63287869], dtype=float64), 'lambda_2': Array([4280.54339668,  570.25210623,  708.93999315], dtype=float64), 'cos_iota': Array([ 0.83730509, -0.06342138, -0.95257458], dtype=float64), 'd_L': Array([721.3623678 , 836.90281305, 636.02698015], dtype=float64), 't_c': Array([ 0.08816583,  0.01006268, -0.07391908], dtype=float64), 'phase_c': Array([1.94169025, 5.25117186, 2.80417718], dtype=float64), 'psi': Array([0.0112917 , 2.24095076, 0.92657511], dtype=float64), 'ra': Array([1.88571107, 4.47649471, 1.53840852], dtype=float64), 'sin_dec': Array([-0.79924853, -0.39528567, -0.2119973 ], dtype=float64)}
07:36 ninjax INFO    : log_prob: [-42.06093793 -11.09892367 -36.77750183]
07:36 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.957310189635363, 'mass_2_source': 1.506359522531516, 's1_z': 0.02755030638970142, 's2_z': 0.03064730356009869, 'cos_iota': 0.42135936747469316, 'd_L': 227.55985856475615, 't_c': 0.06211360217070094, 'phase_c': 2.1700018826735197, 'psi': 1.565069254577316, 'ra': 4.946971511672853, 'sin_dec': -0.5996297365390322, 'q': 0.7696069486115245, 'M_c': 1.5689941802284995, 'eta': 0.2457623495316388, 'iota': Array(1.1358526, dtype=float64, weak_type=True), 'dec': Array(-0.64303836, dtype=float64, weak_type=True), 'lambda_1': 10.696277381314822, 'lambda_2': 109.97775754217548, 'H1_SNR': 12.54252201879377, 'L1_SNR': 16.369796341369558, 'V1_SNR': 9.23808509930874, 'network_SNR': 22.597064126826584, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
07:36 ninjax INFO    : log_prob at the injection parameters is: 225.1486225784567
07:36 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
07:36 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
07:36 ninjax INFO    : Ninjax setup complete.
07:36 ninjax INFO    : Saving output to ./Aplus/injection_9/
07:36 ninjax INFO    : Using polynomial learning rate scheduler
07:36 ninjax INFO    : The hyperparameters passed to flowMC and jim are
07:36 ninjax INFO    :    n_loop_training: 200
07:36 ninjax INFO    :    n_loop_production: 10
07:36 ninjax INFO    :    n_local_steps: 100
07:36 ninjax INFO    :    n_global_steps: 1000
07:36 ninjax INFO    :    n_epochs: 25
07:36 ninjax INFO    :    n_chains: 1000
07:36 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x14ed38937be0>
07:36 ninjax INFO    :    max_samples: 50000
07:36 ninjax INFO    :    momentum: 0.9
07:36 ninjax INFO    :    batch_size: 30000
07:36 ninjax INFO    :    use_global: True
07:36 ninjax INFO    :    keep_quantile: 0.0
07:36 ninjax INFO    :    train_thinning: 10
07:36 ninjax INFO    :    output_thinning: 50
07:36 ninjax INFO    :    n_sample_max: 10000
07:36 ninjax INFO    :    num_layers: 10
07:36 ninjax INFO    :    hidden_size: [128, 128]
07:36 ninjax INFO    :    num_bins: 8
07:36 ninjax INFO    :    save_training_chains: False
07:36 ninjax INFO    :    eps_mass_matrix: 1e-05
07:36 ninjax INFO    :    use_scheduler: True
07:36 ninjax INFO    :    use_temperature: False
07:36 ninjax INFO    :    which_temperature_schedule: exponential
07:36 ninjax INFO    :    starting_temperature: 2.0
07:36 ninjax INFO    :    stop_tempering_iteration: 75
07:36 ninjax INFO    :    stopping_criterion_global_acc: 0.1
07:36 ninjax INFO    :    stopping_criterion_loss: -inf
07:36 ninjax INFO    :    nf_model_kwargs: {}
07:36 ninjax INFO    :    local sampler arg not shown (pretty print)
07:36 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[ 2.42570295e-23 -2.42257510e-23 -1.05051710e-23 -7.23073195e-23
 -1.80281185e-23  1.53388137e-23 -1.64698453e-22 -1.81860724e-23
 -3.07943692e-23  2.42572844e-24]
[-8.06263633e-24 -8.04521083e-24 -2.87606608e-23 -5.59860289e-23
 -1.46571428e-23 -5.98130084e-23 -2.09970789e-23  9.36679378e-23
  1.03729048e-22  2.46834881e-23]
Checking the noise that was generated in inject_signal ifo:
[ 4.66296384e-23 -1.48381888e-23  7.12381658e-23  2.91198047e-23
  3.60165251e-23  7.79712915e-23 -1.94284960e-24  9.46879316e-23
 -4.77797807e-23 -5.09766312e-23]
[ 4.18246013e-23 -3.52023369e-23  4.69945791e-23 -1.18252383e-23
  9.51231761e-24  1.83975726e-23 -2.39621118e-23  2.68797785e-23
 -7.06475861e-23  1.26236974e-23]
Checking the noise that was generated in inject_signal ifo:
[-4.25606928e-23  6.67227401e-24 -1.60540465e-23 -8.29453824e-24
  3.91542459e-23 -7.23253335e-24  1.73131209e-23 -5.97830420e-23
  3.25323424e-23  2.04272124e-24]
[ 3.33795262e-23 -1.75588331e-23 -8.80931150e-23  1.18982345e-23
  2.69280307e-23  3.46892260e-23  6.86118784e-23 -6.06505808e-23
  6.35829726e-23 -5.38766415e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.1117405891418457 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.957310189635363, 'mass_2_source': 1.506359522531516, 's1_z': 0.02755030638970142, 's2_z': 0.03064730356009869, 'cos_iota': 0.42135936747469316, 'd_L': 227.55985856475615, 't_c': 0.06211360217070094, 'phase_c': 2.1700018826735197, 'psi': 1.565069254577316, 'ra': 4.946971511672853, 'sin_dec': -0.5996297365390322, 'q': 0.7696069486115245, 'M_c': 1.5689941802284995, 'eta': 0.2457623495316388, 'iota': Array(1.1358526, dtype=float64, weak_type=True), 'dec': Array(-0.64303836, dtype=float64, weak_type=True), 'lambda_1': 10.696277381314822, 'lambda_2': 109.97775754217548, 'H1_SNR': 12.54252201879377, 'L1_SNR': 16.369796341369558, 'V1_SNR': 9.23808509930874, 'network_SNR': 22.597064126826584, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5079760551452637 seconds
Time for h_sky_low and h_sky_center: 5.399551153182983 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.648064374923706
Going to compute coefficients . . .
Time for computing coefficients: 124.14419841766357 seconds
Time for computing coefficients: 6.643933057785034 seconds
Time for computing coefficients: 6.621180534362793 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:01<6:43:31, 121.66s/it]Tuning global sampler:   1%|          | 2/200 [02:06<2:54:26, 52.86s/it] Tuning global sampler:   2%|▏         | 3/200 [02:11<1:41:18, 30.86s/it]Tuning global sampler:   2%|▏         | 4/200 [02:15<1:07:01, 20.52s/it]Tuning global sampler:   2%|▎         | 5/200 [02:21<49:06, 15.11s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:25<37:22, 11.56s/it]Tuning global sampler:   4%|▎         | 7/200 [02:30<29:51,  9.28s/it]Tuning global sampler:   4%|▍         | 8/200 [02:35<25:00,  7.82s/it]Tuning global sampler:   4%|▍         | 9/200 [02:39<21:40,  6.81s/it]Tuning global sampler:   5%|▌         | 10/200 [02:44<19:16,  6.09s/it]Tuning global sampler:   6%|▌         | 11/200 [02:48<17:47,  5.65s/it]Tuning global sampler:   6%|▌         | 12/200 [02:53<16:44,  5.34s/it]Tuning global sampler:   6%|▋         | 13/200 [02:58<15:55,  5.11s/it]Tuning global sampler:   7%|▋         | 14/200 [03:02<15:26,  4.98s/it]Tuning global sampler:   8%|▊         | 15/200 [03:07<15:03,  4.89s/it]Tuning global sampler:   8%|▊         | 16/200 [03:12<14:46,  4.82s/it]Tuning global sampler:   8%|▊         | 17/200 [03:16<14:33,  4.77s/it]Tuning global sampler:   9%|▉         | 18/200 [03:21<14:22,  4.74s/it]Tuning global sampler:  10%|▉         | 19/200 [03:26<14:14,  4.72s/it]Tuning global sampler:  10%|█         | 20/200 [03:30<14:06,  4.70s/it]Tuning global sampler:  10%|█         | 21/200 [03:35<13:59,  4.69s/it]Tuning global sampler:  11%|█         | 22/200 [03:40<13:51,  4.67s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:44<13:44,  4.66s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:49<13:28,  4.59s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:54<14:01,  4.81s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:58<13:36,  4.69s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:03<13:17,  4.61s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:07<13:02,  4.55s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:12<12:52,  4.52s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:16<12:45,  4.50s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:21<12:37,  4.48s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:25<12:30,  4.47s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:29<12:23,  4.45s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:34<12:16,  4.44s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:38<12:12,  4.44s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:43<12:08,  4.44s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:47<12:03,  4.44s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:52<11:59,  4.44s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:56<11:53,  4.43s/it]Tuning global sampler:  20%|██        | 40/200 [05:00<11:48,  4.43s/it]Tuning global sampler:  20%|██        | 41/200 [05:05<11:43,  4.42s/it]Tuning global sampler:  21%|██        | 42/200 [05:09<11:38,  4.42s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:14<11:34,  4.43s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:19<12:12,  4.70s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:23<11:53,  4.60s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:28<11:41,  4.55s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:32<11:29,  4.51s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:37<11:20,  4.48s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:41<11:13,  4.46s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:45<11:07,  4.45s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:50<11:02,  4.44s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:54<10:56,  4.43s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:59<10:50,  4.43s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:03<10:47,  4.43s/it]