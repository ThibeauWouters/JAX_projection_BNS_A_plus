Wed Apr  2 07:33:40 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
07:33 ninjax INFO    : Checking and setting outdir
07:33 ninjax INFO    : Found generation prior file ./Aplus/injection_12/generation_prior.prior
07:33 ninjax INFO    : The outdir is set to ./Aplus/injection_12
07:33 ninjax INFO    : Loading the given config
07:33 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
07:33 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
07:33 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/jester_soft/Aplus/injection_12/complete_config.json
07:33 ninjax INFO    : No seed specified. Generating a random seed: 548567
07:33 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 717374
07:33 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 460891
07:33 ninjax INFO    : Loading the priors
07:33 ninjax INFO    : Setting up the prior
07:33 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
07:33 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
07:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
07:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
07:33 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
07:33 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
07:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
07:33 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
07:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
07:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
07:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
07:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
07:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
07:33 ninjax INFO    : Setting up the generation prior
07:33 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 1.99, naming=["mass_1_source"])
07:33 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 1.99, naming=["mass_2_source"])
07:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
07:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
07:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
07:33 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
07:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
07:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
07:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
07:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
07:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
07:33 ninjax INFO    : Finished prior setup
07:33 ninjax INFO    : Setting the transforms
07:33 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
07:33 ninjax INFO    : transforms_str_list has 3 elements
07:33 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
07:33 ninjax INFO    : Setting the likelihood
07:33 ninjax INFO    : GW likelihood provided, setting up the GW pipe
07:33 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz
07:33 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz for BNS injections
07:33 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
07:33 ninjax INFO    : self.is_BNS_run is True
07:33 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
07:33 ninjax INFO    : GW run is an injection
07:33 ninjax INFO    : Setting up GW injection . . . 
07:33 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
07:33 ninjax INFO    : Generating new injection
07:33 ninjax INFO    : Sanity check: generated parameters:
07:33 ninjax INFO    : {'mass_1_source': 1.640714707414344, 'mass_2_source': 1.5375689760536895, 's1_z': 0.023004178966965022, 's2_z': -0.03150155217213846, 'cos_iota': 0.5494561281456734, 'd_L': 363.811293052149, 't_c': 0.023521205819730634, 'phase_c': 2.2141856471088417, 'psi': 0.443702010073832, 'ra': 2.565179997961866, 'sin_dec': -0.2643986059062695}
07:33 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz . . . 
07:33 ninjax INFO    : Injected lambda_1: 57.95423885775021
07:33 ninjax INFO    : Injected lambda_2: 94.51880917381538
07:33 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.4962073931245872 is 128.0
07:33 ninjax INFO    : After transforms, the injection parameters are:
07:33 ninjax INFO    : {'mass_1_source': 1.640714707414344, 'mass_2_source': 1.5375689760536895, 's1_z': 0.023004178966965022, 's2_z': -0.03150155217213846, 'cos_iota': 0.5494561281456734, 'd_L': 363.811293052149, 't_c': 0.023521205819730634, 'phase_c': 2.2141856471088417, 'psi': 0.443702010073832, 'ra': 2.565179997961866, 'sin_dec': -0.2643986059062695, 'q': 0.9371336583413669, 'M_c': 1.4962073931245872, 'eta': 0.24973669614889024, 'iota': Array(0.98908316, dtype=float64, weak_type=True), 'dec': Array(-0.26758028, dtype=float64, weak_type=True), 'lambda_1': 57.95423885775021, 'lambda_2': 94.51880917381538}
07:33 ninjax INFO    : The trial injection parameters are {'M_c': 1.4962073931245872, 'eta': 0.24973669614889024, 's1_z': 0.023004178966965022, 's2_z': -0.03150155217213846, 'lambda_1': 57.95423885775021, 'lambda_2': 94.51880917381538, 'd_L': 363.811293052149, 'phase_c': 2.2141856471088417, 'iota': 0.989083164516487, 't_c': 0.023521205819730634, 'psi': 0.443702010073832, 'ra': 2.565179997961866, 'dec': -0.2675802836467382}
07:33 ninjax INFO    : Injecting signals . . .
07:33 ninjax INFO    : self.ifos
07:33 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
07:33 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
07:33 ninjax INFO    : [ 7.53824768e-23-4.31365193e-23j  1.61424563e-23+6.67074804e-23j
  1.45559299e-23-6.19945041e-23j ...
 -1.41396013e-23+3.88645741e-23j  7.35198624e-24-6.09265571e-25j
  7.83763586e-25-1.04505899e-23j]
07:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
07:33 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
07:33 ninjax INFO    : [-5.73054341e-23-4.06916728e-23j  5.80930012e-23+7.21444693e-23j
 -1.27176898e-24+1.04666641e-22j ...
 -1.00127444e-23+4.56504502e-23j -1.34119539e-23-9.86611921e-24j
 -1.57423438e-23+1.08882528e-23j]
07:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
07:33 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
07:33 ninjax INFO    : [-3.98594902e-23+2.06610631e-23j -6.88031964e-23-7.24590383e-24j
  1.26412435e-23-1.52678721e-23j ...
 -4.09566870e-23-6.39298927e-24j  1.12554393e-23-2.49977983e-24j
 -6.61692702e-23-1.18155882e-23j]
07:33 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
07:33 ninjax INFO    : SNR for ifo H1 is 4.886246442749388
07:33 ninjax INFO    : SNR for ifo L1 is 2.104967119220363
07:33 ninjax INFO    : SNR for ifo V1 is 5.9967118793647165
07:33 ninjax INFO    : The network SNR is 8.016660416681864
07:33 ninjax INFO    : The network SNR does not pass the threshold, trying again
07:33 ninjax INFO    : Generating new injection
07:33 ninjax INFO    : Sanity check: generated parameters:
07:33 ninjax INFO    : {'mass_1_source': 1.212812339456303, 'mass_2_source': 1.887999090913206, 's1_z': -0.016600290051245796, 's2_z': 0.008135707816173829, 'cos_iota': 0.8080053728270631, 'd_L': 368.8396821199638, 't_c': -0.022312171457558844, 'phase_c': 2.2959154030631885, 'psi': 0.012853209752933335, 'ra': 1.5931487381679093, 'sin_dec': 0.10711179404586701}
07:33 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz . . . 
07:33 ninjax INFO    : Injected lambda_1: 17.047097689120466
07:33 ninjax INFO    : Injected lambda_2: 497.5292482843603
07:33 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.4201937737067793 is 128.0
07:33 ninjax INFO    : After transforms, the injection parameters are:
07:33 ninjax INFO    : {'mass_1_source': 1.887999090913206, 'mass_2_source': 1.212812339456303, 's1_z': -0.016600290051245796, 's2_z': 0.008135707816173829, 'cos_iota': 0.8080053728270631, 'd_L': 368.8396821199638, 't_c': -0.022312171457558844, 'phase_c': 2.2959154030631885, 'psi': 0.012853209752933335, 'ra': 1.5931487381679093, 'sin_dec': 0.10711179404586701, 'q': 0.6423797263957781, 'M_c': 1.4201937737067793, 'eta': 0.23814675885158262, 'iota': Array(0.63003757, dtype=float64, weak_type=True), 'dec': Array(0.10731767, dtype=float64, weak_type=True), 'lambda_1': 17.047097689120466, 'lambda_2': 497.5292482843603}
07:33 ninjax INFO    : The trial injection parameters are {'M_c': 1.4201937737067793, 'eta': 0.23814675885158262, 's1_z': -0.016600290051245796, 's2_z': 0.008135707816173829, 'lambda_1': 17.047097689120466, 'lambda_2': 497.5292482843603, 'd_L': 368.8396821199638, 'phase_c': 2.2959154030631885, 'iota': 0.6300375712666365, 't_c': -0.022312171457558844, 'psi': 0.012853209752933335, 'ra': 1.5931487381679093, 'dec': 0.1073176732117243}
07:33 ninjax INFO    : Injecting signals . . .
07:33 ninjax INFO    : self.ifos
07:33 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
07:33 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
07:33 ninjax INFO    : [ 7.94468859e-23-4.63904567e-23j  1.88277725e-23+6.32139604e-23j
  1.60383876e-23-6.50241340e-23j ...
 -1.41458106e-23+3.88612110e-23j  7.34613047e-24-6.13212016e-25j
  7.78315970e-25-1.04550829e-23j]
07:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
07:33 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
07:33 ninjax INFO    : [-6.26091554e-23-4.46104242e-23j  5.21366387e-23+6.89068079e-23j
 -7.62051507e-24+1.02359841e-22j ...
 -1.00108640e-23+4.56528415e-23j -1.34103141e-23-9.86355689e-24j
 -1.57409601e-23+1.08909620e-23j]
07:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
07:33 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
07:33 ninjax INFO    : [-4.07908199e-23+1.99023673e-23j -6.91731775e-23-6.27983843e-24j
  1.37704171e-23-1.32351741e-23j ...
 -4.09488211e-23-6.40067659e-24j  1.12640167e-23-2.50666423e-24j
 -6.61600631e-23-1.18216042e-23j]
07:33 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
07:33 ninjax INFO    : SNR for ifo H1 is 7.747536302399374
07:33 ninjax INFO    : SNR for ifo L1 is 12.586025258136868
07:33 ninjax INFO    : SNR for ifo V1 is 4.644184963404576
07:33 ninjax INFO    : The network SNR is 15.491959350894533
07:33 ninjax INFO    : Network SNR passes threshold
07:33 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
07:33 ninjax INFO    :    mass_1_source: 1.887999090913206
07:33 ninjax INFO    :    mass_2_source: 1.212812339456303
07:33 ninjax INFO    :    s1_z: -0.016600290051245796
07:33 ninjax INFO    :    s2_z: 0.008135707816173829
07:33 ninjax INFO    :    cos_iota: 0.8080053728270631
07:33 ninjax INFO    :    d_L: 368.8396821199638
07:33 ninjax INFO    :    t_c: -0.022312171457558844
07:33 ninjax INFO    :    phase_c: 2.2959154030631885
07:33 ninjax INFO    :    psi: 0.012853209752933335
07:33 ninjax INFO    :    ra: 1.5931487381679093
07:33 ninjax INFO    :    sin_dec: 0.10711179404586701
07:33 ninjax INFO    :    q: 0.6423797263957781
07:33 ninjax INFO    :    M_c: 1.4201937737067793
07:33 ninjax INFO    :    eta: 0.23814675885158262
07:33 ninjax INFO    :    iota: 0.6300375712666365
07:33 ninjax INFO    :    dec: 0.1073176732117243
07:33 ninjax INFO    :    lambda_1: 17.047097689120466
07:33 ninjax INFO    :    lambda_2: 497.5292482843603
07:33 ninjax INFO    :    H1_SNR: 7.747536302399374
07:33 ninjax INFO    :    L1_SNR: 12.586025258136868
07:33 ninjax INFO    :    V1_SNR: 4.644184963404576
07:33 ninjax INFO    :    network_SNR: 15.491959350894533
07:33 ninjax INFO    :    epoch: 126.0
07:33 ninjax INFO    :    gmst: 2.7288901910520846
07:33 ninjax INFO    :    duration: 128.0
07:33 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
07:33 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
07:33 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
07:36 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 149.8195309638977 seconds = 2.4969921827316286 minutes
07:36 ninjax INFO    : The priors are not modified after their initialization
07:36 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
07:36 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
07:36 ninjax INFO    : sample: {'M_c': Array([1.96058633, 2.38994206, 1.8810046 ], dtype=float64), 'q': Array([0.53009305, 0.8042511 , 0.40955629], dtype=float64), 's1_z': Array([ 0.01243636, -0.01529353, -0.04079143], dtype=float64), 's2_z': Array([-0.01315541,  0.01287768, -0.02564593], dtype=float64), 'lambda_1': Array([2896.69636757, 4858.57266258, 2571.55334342], dtype=float64), 'lambda_2': Array([3842.20506183,  671.60056861, 2195.20693846], dtype=float64), 'cos_iota': Array([-0.59735068,  0.67107128, -0.05718974], dtype=float64), 'd_L': Array([861.84273036, 770.23449531, 776.28453521], dtype=float64), 't_c': Array([ 0.0218167 ,  0.08036125, -0.06615724], dtype=float64), 'phase_c': Array([4.85590103, 4.15658651, 0.33230772], dtype=float64), 'psi': Array([2.83763929, 1.2353554 , 0.60458546], dtype=float64), 'ra': Array([1.23917193, 3.97001388, 2.61015087], dtype=float64), 'sin_dec': Array([-0.66837697,  0.01211558, -0.59606614], dtype=float64)}
07:36 ninjax INFO    : log_prob: [ -7.0849917  -44.5606973   -2.16116016]
07:36 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.887999090913206, 'mass_2_source': 1.212812339456303, 's1_z': -0.016600290051245796, 's2_z': 0.008135707816173829, 'cos_iota': 0.8080053728270631, 'd_L': 368.8396821199638, 't_c': -0.022312171457558844, 'phase_c': 2.2959154030631885, 'psi': 0.012853209752933335, 'ra': 1.5931487381679093, 'sin_dec': 0.10711179404586701, 'q': 0.6423797263957781, 'M_c': 1.4201937737067793, 'eta': 0.23814675885158262, 'iota': Array(0.63003757, dtype=float64, weak_type=True), 'dec': Array(0.10731767, dtype=float64, weak_type=True), 'lambda_1': 17.047097689120466, 'lambda_2': 497.5292482843603, 'H1_SNR': 7.747536302399374, 'L1_SNR': 12.586025258136868, 'V1_SNR': 4.644184963404576, 'network_SNR': 15.491959350894533, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
07:36 ninjax INFO    : log_prob at the injection parameters is: 94.99840690797848
07:36 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
07:36 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
07:36 ninjax INFO    : Ninjax setup complete.
07:36 ninjax INFO    : Saving output to ./Aplus/injection_12/
07:36 ninjax INFO    : Using polynomial learning rate scheduler
07:36 ninjax INFO    : The hyperparameters passed to flowMC and jim are
07:36 ninjax INFO    :    n_loop_training: 200
07:36 ninjax INFO    :    n_loop_production: 10
07:36 ninjax INFO    :    n_local_steps: 100
07:36 ninjax INFO    :    n_global_steps: 1000
07:36 ninjax INFO    :    n_epochs: 25
07:36 ninjax INFO    :    n_chains: 1000
07:36 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x1483de515000>
07:36 ninjax INFO    :    max_samples: 50000
07:36 ninjax INFO    :    momentum: 0.9
07:36 ninjax INFO    :    batch_size: 30000
07:36 ninjax INFO    :    use_global: True
07:36 ninjax INFO    :    keep_quantile: 0.0
07:36 ninjax INFO    :    train_thinning: 10
07:36 ninjax INFO    :    output_thinning: 50
07:36 ninjax INFO    :    n_sample_max: 10000
07:36 ninjax INFO    :    num_layers: 10
07:36 ninjax INFO    :    hidden_size: [128, 128]
07:36 ninjax INFO    :    num_bins: 8
07:36 ninjax INFO    :    save_training_chains: False
07:36 ninjax INFO    :    eps_mass_matrix: 1e-05
07:36 ninjax INFO    :    use_scheduler: True
07:36 ninjax INFO    :    use_temperature: False
07:36 ninjax INFO    :    which_temperature_schedule: exponential
07:36 ninjax INFO    :    starting_temperature: 2.0
07:36 ninjax INFO    :    stop_tempering_iteration: 75
07:36 ninjax INFO    :    stopping_criterion_global_acc: 0.1
07:36 ninjax INFO    :    stopping_criterion_loss: -inf
07:36 ninjax INFO    :    nf_model_kwargs: {}
07:36 ninjax INFO    :    local sampler arg not shown (pretty print)
07:36 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[ 7.60297451e-23  1.54982282e-23  1.28232013e-23  3.64564271e-23
  4.45957886e-23  1.39050045e-23 -3.21289426e-23 -3.60727883e-23
  1.20208467e-25 -1.44809561e-23]
[-4.53024222e-23  6.45417511e-23 -6.34430868e-23 -5.10391878e-23
  9.90383879e-23 -1.04448657e-22  1.94165669e-23  8.69360374e-23
 -2.41157296e-23  3.70697908e-23]
Checking the noise that was generated in inject_signal ifo:
[-5.76117564e-23  5.73310757e-23 -2.24104805e-24 -1.05909093e-22
 -6.64902251e-23 -4.02576545e-23  8.79300339e-23 -1.29502635e-24
 -1.12083062e-23 -5.84158433e-23]
[-4.16160734e-23  7.15387045e-23  1.04582306e-22 -1.61472204e-23
  1.07593852e-23 -7.55243007e-24  3.26489266e-23  4.17971715e-23
 -4.07433476e-23 -6.07073550e-23]
Checking the noise that was generated in inject_signal ifo:
[-4.33788640e-23 -7.16919372e-23  1.13415221e-23 -1.87800788e-23
  7.47817824e-25 -1.21831562e-22  2.22684647e-23  3.21300277e-23
  6.87379175e-23 -6.45285139e-23]
[ 2.07643363e-23 -5.23580846e-24 -1.19991268e-23  4.69354914e-23
  6.49423755e-24 -1.04878603e-22 -4.28770124e-23 -1.20337577e-22
 -1.67811897e-24  5.70698709e-23]
Checking the noise that was generated in inject_signal ifo:
[ 7.60297451e-23  1.54982282e-23  1.28232013e-23  3.64564271e-23
  4.45957886e-23  1.39050045e-23 -3.21289426e-23 -3.60727883e-23
  1.20208467e-25 -1.44809561e-23]
[-4.53024222e-23  6.45417511e-23 -6.34430868e-23 -5.10391878e-23
  9.90383879e-23 -1.04448657e-22  1.94165669e-23  8.69360374e-23
 -2.41157296e-23  3.70697908e-23]
Checking the noise that was generated in inject_signal ifo:
[-5.76117564e-23  5.73310757e-23 -2.24104805e-24 -1.05909093e-22
 -6.64902251e-23 -4.02576545e-23  8.79300339e-23 -1.29502635e-24
 -1.12083062e-23 -5.84158433e-23]
[-4.16160734e-23  7.15387045e-23  1.04582306e-22 -1.61472204e-23
  1.07593852e-23 -7.55243007e-24  3.26489266e-23  4.17971715e-23
 -4.07433476e-23 -6.07073550e-23]
Checking the noise that was generated in inject_signal ifo:
[-4.33788640e-23 -7.16919372e-23  1.13415221e-23 -1.87800788e-23
  7.47817824e-25 -1.21831562e-22  2.22684647e-23  3.21300277e-23
  6.87379175e-23 -6.45285139e-23]
[ 2.07643363e-23 -5.23580846e-24 -1.19991268e-23  4.69354914e-23
  6.49423755e-24 -1.04878603e-22 -4.28770124e-23 -1.20337577e-22
 -1.67811897e-24  5.70698709e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.10797500610351562 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.887999090913206, 'mass_2_source': 1.212812339456303, 's1_z': -0.016600290051245796, 's2_z': 0.008135707816173829, 'cos_iota': 0.8080053728270631, 'd_L': 368.8396821199638, 't_c': -0.022312171457558844, 'phase_c': 2.2959154030631885, 'psi': 0.012853209752933335, 'ra': 1.5931487381679093, 'sin_dec': 0.10711179404586701, 'q': 0.6423797263957781, 'M_c': 1.4201937737067793, 'eta': 0.23814675885158262, 'iota': Array(0.63003757, dtype=float64, weak_type=True), 'dec': Array(0.10731767, dtype=float64, weak_type=True), 'lambda_1': 17.047097689120466, 'lambda_2': 497.5292482843603, 'H1_SNR': 7.747536302399374, 'L1_SNR': 12.586025258136868, 'V1_SNR': 4.644184963404576, 'network_SNR': 15.491959350894533, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5096962451934814 seconds
Time for h_sky_low and h_sky_center: 5.345192193984985 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.6944284439086914
Going to compute coefficients . . .
Time for computing coefficients: 128.1223213672638 seconds
Time for computing coefficients: 7.259583950042725 seconds
Time for computing coefficients: 7.2282092571258545 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:01<6:42:02, 121.22s/it]Tuning global sampler:   1%|          | 2/200 [02:05<2:53:38, 52.62s/it] Tuning global sampler:   2%|▏         | 3/200 [02:10<1:40:49, 30.71s/it]Tuning global sampler:   2%|▏         | 4/200 [02:15<1:06:41, 20.42s/it]Tuning global sampler:   2%|▎         | 5/200 [02:20<48:51, 15.03s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:25<37:11, 11.50s/it]Tuning global sampler:   4%|▎         | 7/200 [02:29<29:42,  9.24s/it]Tuning global sampler:   4%|▍         | 8/200 [02:34<24:51,  7.77s/it]Tuning global sampler:   4%|▍         | 9/200 [02:38<21:32,  6.77s/it]Tuning global sampler:   5%|▌         | 10/200 [02:43<19:10,  6.06s/it]Tuning global sampler:   6%|▌         | 11/200 [02:48<17:40,  5.61s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:37,  5.30s/it]Tuning global sampler:   6%|▋         | 13/200 [02:57<15:50,  5.08s/it]Tuning global sampler:   7%|▋         | 14/200 [03:01<15:21,  4.95s/it]Tuning global sampler:   8%|▊         | 15/200 [03:06<15:00,  4.87s/it]Tuning global sampler:   8%|▊         | 16/200 [03:11<14:43,  4.80s/it]Tuning global sampler:   8%|▊         | 17/200 [03:15<14:30,  4.76s/it]Tuning global sampler:   9%|▉         | 18/200 [03:20<14:19,  4.72s/it]Tuning global sampler:  10%|▉         | 19/200 [03:25<14:10,  4.70s/it]Tuning global sampler:  10%|█         | 20/200 [03:30<14:51,  4.95s/it]Tuning global sampler:  10%|█         | 21/200 [03:35<14:30,  4.86s/it]Tuning global sampler:  11%|█         | 22/200 [03:39<14:11,  4.79s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:44<13:58,  4.74s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:49<13:37,  4.65s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:53<13:20,  4.58s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:57<13:07,  4.53s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:02<12:57,  4.49s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:06<12:48,  4.47s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:11<12:41,  4.45s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:15<12:35,  4.44s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:19<12:29,  4.43s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:24<12:24,  4.43s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:28<12:16,  4.41s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:33<12:10,  4.40s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:37<12:07,  4.41s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:41<12:02,  4.41s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:46<11:59,  4.41s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:50<11:55,  4.41s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:55<11:50,  4.41s/it]Tuning global sampler:  20%|██        | 40/200 [05:00<12:30,  4.69s/it]Tuning global sampler:  20%|██        | 41/200 [05:04<12:12,  4.60s/it]Tuning global sampler:  21%|██        | 42/200 [05:09<11:57,  4.54s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:13<11:47,  4.50s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:18<11:37,  4.47s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:22<11:28,  4.44s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:26<11:22,  4.43s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:31<11:16,  4.42s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:35<11:12,  4.42s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:40<11:07,  4.42s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:44<11:02,  4.42s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:48<10:57,  4.41s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:53<10:53,  4.41s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:57<10:48,  4.41s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:02<10:44,  4.41s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:06<10:38,  4.41s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:10<10:33,  4.40s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:15<10:29,  4.40s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:19<10:26,  4.41s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:24<10:22,  4.41s/it]Tuning global sampler:  30%|███       | 60/200 [06:29<10:58,  4.71s/it]Tuning global sampler:  30%|███       | 61/200 [06:34<10:42,  4.62s/it]Tuning global sampler:  31%|███       | 62/200 [06:38<10:29,  4.57s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:42<10:19,  4.52s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:47<10:10,  4.49s/it]Tuning global sampler:  32%|███▎      | 65/200 [06:51<10:03,  4.47s/it]Tuning global sampler:  33%|███▎      | 66/200 [06:56<09:54,  4.44s/it]Tuning global sampler:  34%|███▎      | 67/200 [07:00<09:48,  4.42s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:04<09:42,  4.42s/it]Tuning global sampler:  34%|███▍      | 69/200 [07:09<09:37,  4.41s/it]Tuning global sampler:  35%|███▌      | 70/200 [07:13<09:33,  4.41s/it]Tuning global sampler:  36%|███▌      | 71/200 [07:18<09:29,  4.41s/it]Tuning global sampler:  36%|███▌      | 72/200 [07:22<09:25,  4.42s/it]Tuning global sampler:  36%|███▋      | 73/200 [07:26<09:20,  4.42s/it]Tuning global sampler:  37%|███▋      | 74/200 [07:31<09:16,  4.42s/it]Tuning global sampler:  38%|███▊      | 75/200 [07:35<09:12,  4.42s/it]Tuning global sampler:  38%|███▊      | 76/200 [07:40<09:08,  4.42s/it]Tuning global sampler:  38%|███▊      | 77/200 [07:44<09:01,  4.41s/it]Tuning global sampler:  39%|███▉      | 78/200 [07:48<08:56,  4.40s/it]Tuning global sampler:  40%|███▉      | 79/200 [07:53<08:52,  4.40s/it]Tuning global sampler:  40%|████      | 80/200 [07:58<09:23,  4.70s/it]Tuning global sampler:  40%|████      | 81/200 [08:03<09:09,  4.62s/it]Tuning global sampler:  41%|████      | 82/200 [08:07<08:57,  4.56s/it]Tuning global sampler:  42%|████▏     | 83/200 [08:11<08:48,  4.51s/it]Tuning global sampler:  42%|████▏     | 83/200 [08:16<11:39,  5.98s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:29,  3.22s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.22s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.22s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.22s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.22s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.22s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.22s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.22s/it]Production run:  90%|█████████ | 9/10 [00:29<00:03,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]
07:45 ninjax INFO    : Saving samples to ./Aplus/injection_12/results_training.npz
07:45 ninjax INFO    : Saving the NF
07:45 ninjax INFO    : Time taken: 535.2922928333282 seconds (8.921538213888804 minutes)
07:45 ninjax INFO    : Creating the final corner plot
07:45 ninjax INFO    : Dumping the final production chains
07:45 ninjax INFO    : Chains shape is: (13, 220000)
07:45 ninjax INFO    : Key: M_c: ESS = 48141, Rhat = 1.0147790352706612
07:45 ninjax INFO    : Key: q: ESS = 23273, Rhat = 1.0271786790975812
07:45 ninjax INFO    : Key: s1_z: ESS = 25461, Rhat = 1.0245410777964066
07:45 ninjax INFO    : Key: s2_z: ESS = 24920, Rhat = 1.0257681459100894
07:45 ninjax INFO    : Key: lambda_1: ESS = 40782, Rhat = 1.016523394374517
07:45 ninjax INFO    : Key: lambda_2: ESS = 44443, Rhat = 1.0167059346487637
07:45 ninjax INFO    : Key: cos_iota: ESS = 25857, Rhat = 1.0241611600273222
07:45 ninjax INFO    : Key: d_L: ESS = 23468, Rhat = 1.0264300231272045
07:45 ninjax INFO    : Key: t_c: ESS = 43620, Rhat = 1.0154840973968688
07:45 ninjax INFO    : Key: phase_c: ESS = 35384, Rhat = 1.0189472885913995
07:45 ninjax INFO    : Key: psi: ESS = 40316, Rhat = 1.0168288652153952
07:45 ninjax INFO    : Key: ra: ESS = 44021, Rhat = 1.0156377353192927
07:45 ninjax INFO    : Key: sin_dec: ESS = 45244, Rhat = 1.0152938130113405
07:45 ninjax INFO    : Key: eta: ESS = 23273, Rhat = 1.0271786790975812
07:45 ninjax INFO    : Key: iota: ESS = 25857, Rhat = 1.0241611600273222
07:45 ninjax INFO    : Key: dec: ESS = 45244, Rhat = 1.0152938130113405
07:45 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.468 +/- 0.235
q: 0.680 +/- 0.219
s1_z: -0.007 +/- 0.028
s2_z: -0.001 +/- 0.027
lambda_1: 2057.077 +/- 1429.240
lambda_2: 2607.137 +/- 1507.629
cos_iota: 0.372 +/- 0.478
d_L: 607.833 +/- 227.782
t_c: -0.020 +/- 0.030
phase_c: 3.114 +/- 1.773
psi: 1.662 +/- 0.900
ra: 2.002 +/- 1.164
sin_dec: -0.043 +/- 0.361
Log probability: 33.002 +/- 44.495
Local acceptance: 0.921 +/- 0.269
Global acceptance: 0.017 +/- 0.128
Max loss: 22.763, Min loss: 9.072
Production summary
==========
M_c: 1.420 +/- 0.000
q: 0.761 +/- 0.126
s1_z: -0.012 +/- 0.025
s2_z: -0.010 +/- 0.027
lambda_1: 902.286 +/- 913.634
lambda_2: 1584.269 +/- 1371.051
cos_iota: 0.774 +/- 0.188
d_L: 379.336 +/- 75.233
t_c: -0.020 +/- 0.002
phase_c: 3.155 +/- 1.819
psi: 1.609 +/- 0.906
ra: 1.597 +/- 0.013
sin_dec: 0.125 +/- 0.032
Log probability: 88.445 +/- 2.825
Local acceptance: 0.794 +/- 0.405
Global acceptance: 0.101 +/- 0.302
DONE

JOB STATISTICS
==============
Job ID: 10918550
Cluster: snellius
User/Group: twouters2/twouters2
State: RUNNING
Nodes: 1
Cores per node: 16
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 03:17:36 core-walltime
Job Wall-clock time: 00:12:21
Memory Utilized: 0.00 MB
Memory Efficiency: 0.00% of 10.00 GB (10.00 GB/node)
WARNING: Efficiency statistics can only be obtained after the job has ended as seff tool is based on the accounting database data.
