Wed Apr  2 07:33:42 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
07:33 ninjax INFO    : Checking and setting outdir
07:33 ninjax INFO    : Found generation prior file ./Aplus/injection_27/generation_prior.prior
07:33 ninjax INFO    : The outdir is set to ./Aplus/injection_27
07:33 ninjax INFO    : Loading the given config
07:33 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
07:33 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
07:33 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/jester_soft/Aplus/injection_27/complete_config.json
07:33 ninjax INFO    : No seed specified. Generating a random seed: 518306
07:33 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 924101
07:33 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 382867
07:33 ninjax INFO    : Loading the priors
07:33 ninjax INFO    : Setting up the prior
07:33 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
07:33 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
07:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
07:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
07:33 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
07:33 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
07:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
07:33 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
07:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
07:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
07:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
07:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
07:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
07:33 ninjax INFO    : Setting up the generation prior
07:33 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 1.99, naming=["mass_1_source"])
07:33 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 1.99, naming=["mass_2_source"])
07:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
07:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
07:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
07:33 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
07:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
07:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
07:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
07:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
07:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
07:33 ninjax INFO    : Finished prior setup
07:33 ninjax INFO    : Setting the transforms
07:33 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
07:33 ninjax INFO    : transforms_str_list has 3 elements
07:33 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
07:33 ninjax INFO    : Setting the likelihood
07:33 ninjax INFO    : GW likelihood provided, setting up the GW pipe
07:33 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz
07:33 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz for BNS injections
07:33 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
07:33 ninjax INFO    : self.is_BNS_run is True
07:33 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
07:33 ninjax INFO    : GW run is an injection
07:33 ninjax INFO    : Setting up GW injection . . . 
07:33 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
07:33 ninjax INFO    : Generating new injection
07:33 ninjax INFO    : Sanity check: generated parameters:
07:33 ninjax INFO    : {'mass_1_source': 1.8368203636027807, 'mass_2_source': 1.688428059041434, 's1_z': 0.03895922037979249, 's2_z': 0.03298049533700141, 'cos_iota': -0.7128121239208571, 'd_L': 443.01896590202244, 't_c': -0.042053520918483134, 'phase_c': 0.34710582581999005, 'psi': 0.1365432552784313, 'ra': 1.405705107875789, 'sin_dec': 0.7675451788027021}
07:33 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz . . . 
07:33 ninjax INFO    : Injected lambda_1: 22.72407191660298
07:33 ninjax INFO    : Injected lambda_2: 46.54718352605512
07:33 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.686261503908966 is 128.0
07:33 ninjax INFO    : After transforms, the injection parameters are:
07:33 ninjax INFO    : {'mass_1_source': 1.8368203636027807, 'mass_2_source': 1.688428059041434, 's1_z': 0.03895922037979249, 's2_z': 0.03298049533700141, 'cos_iota': -0.7128121239208571, 'd_L': 443.01896590202244, 't_c': -0.042053520918483134, 'phase_c': 0.34710582581999005, 'psi': 0.1365432552784313, 'ra': 1.405705107875789, 'sin_dec': 0.7675451788027021, 'q': 0.9192124023111946, 'M_c': 1.686261503908966, 'eta': 0.24955702082098866, 'iota': Array(2.36429597, dtype=float64, weak_type=True), 'dec': Array(0.87500262, dtype=float64, weak_type=True), 'lambda_1': 22.72407191660298, 'lambda_2': 46.54718352605512}
07:33 ninjax INFO    : The trial injection parameters are {'M_c': 1.686261503908966, 'eta': 0.24955702082098866, 's1_z': 0.03895922037979249, 's2_z': 0.03298049533700141, 'lambda_1': 22.72407191660298, 'lambda_2': 46.54718352605512, 'd_L': 443.01896590202244, 'phase_c': 0.34710582581999005, 'iota': 2.3642959686842984, 't_c': -0.042053520918483134, 'psi': 0.1365432552784313, 'ra': 1.405705107875789, 'dec': 0.875002615565551}
07:33 ninjax INFO    : Injecting signals . . .
07:33 ninjax INFO    : self.ifos
07:33 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
07:33 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
07:33 ninjax INFO    : [-1.35719260e-22+2.35163609e-23j  8.02617546e-23-4.24244613e-23j
  3.22693746e-23+6.47511789e-24j ...
 -5.43132912e-24-3.32101649e-24j -2.99900176e-23-2.68349521e-24j
  2.10927270e-23-8.83658766e-24j]
07:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
07:33 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
07:33 ninjax INFO    : [-3.32816285e-23+6.77498774e-23j  3.48002305e-23+4.67663241e-23j
 -2.09137431e-24-2.19057718e-23j ...
 -1.59647573e-23+2.00078355e-23j -1.88869099e-23-3.16058081e-23j
 -6.57077488e-24+1.94024860e-23j]
07:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
07:33 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
07:33 ninjax INFO    : [-7.48979474e-24-4.62876941e-23j -3.84553321e-23+5.14857298e-23j
 -2.97409116e-23+3.17831805e-23j ...
 -1.84628901e-23-2.01029050e-23j  7.81025667e-24-5.06965056e-23j
  3.68723942e-24+1.44558800e-23j]
07:33 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
07:33 ninjax INFO    : SNR for ifo H1 is 11.680101647769284
07:33 ninjax INFO    : SNR for ifo L1 is 12.12964231247567
07:33 ninjax INFO    : SNR for ifo V1 is 6.179742028884374
07:33 ninjax INFO    : The network SNR is 17.937173932210804
07:33 ninjax INFO    : Network SNR passes threshold
07:33 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
07:33 ninjax INFO    :    mass_1_source: 1.8368203636027807
07:33 ninjax INFO    :    mass_2_source: 1.688428059041434
07:33 ninjax INFO    :    s1_z: 0.03895922037979249
07:33 ninjax INFO    :    s2_z: 0.03298049533700141
07:33 ninjax INFO    :    cos_iota: -0.7128121239208571
07:33 ninjax INFO    :    d_L: 443.01896590202244
07:33 ninjax INFO    :    t_c: -0.042053520918483134
07:33 ninjax INFO    :    phase_c: 0.34710582581999005
07:33 ninjax INFO    :    psi: 0.1365432552784313
07:33 ninjax INFO    :    ra: 1.405705107875789
07:33 ninjax INFO    :    sin_dec: 0.7675451788027021
07:33 ninjax INFO    :    q: 0.9192124023111946
07:33 ninjax INFO    :    M_c: 1.686261503908966
07:33 ninjax INFO    :    eta: 0.24955702082098866
07:33 ninjax INFO    :    iota: 2.3642959686842984
07:33 ninjax INFO    :    dec: 0.875002615565551
07:33 ninjax INFO    :    lambda_1: 22.72407191660298
07:33 ninjax INFO    :    lambda_2: 46.54718352605512
07:33 ninjax INFO    :    H1_SNR: 11.680101647769284
07:33 ninjax INFO    :    L1_SNR: 12.12964231247567
07:33 ninjax INFO    :    V1_SNR: 6.179742028884374
07:33 ninjax INFO    :    network_SNR: 17.937173932210804
07:33 ninjax INFO    :    epoch: 126.0
07:33 ninjax INFO    :    gmst: 2.7288901910520846
07:33 ninjax INFO    :    duration: 128.0
07:33 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
07:33 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
07:33 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
07:36 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 146.86940050125122 seconds = 2.44782334168752 minutes
07:36 ninjax INFO    : The priors are not modified after their initialization
07:36 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
07:36 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
07:36 ninjax INFO    : sample: {'M_c': Array([2.16997086, 1.75253822, 2.24233287], dtype=float64), 'q': Array([0.6089961 , 0.7140836 , 0.47286921], dtype=float64), 's1_z': Array([-0.03796739, -0.01418677,  0.04739274], dtype=float64), 's2_z': Array([-0.01883574, -0.01745835, -0.00014215], dtype=float64), 'lambda_1': Array([2639.30505875, 2537.8896821 , 1981.69561747], dtype=float64), 'lambda_2': Array([3696.95735707,  654.91488832, 4339.59740479], dtype=float64), 'cos_iota': Array([ 0.16444864,  0.79759712, -0.52557961], dtype=float64), 'd_L': Array([910.01300961, 605.87117002, 704.77685313], dtype=float64), 't_c': Array([-0.07979367, -0.02899268, -0.03409268], dtype=float64), 'phase_c': Array([3.04017838, 4.53614175, 4.7361739 ], dtype=float64), 'psi': Array([2.0779015 , 2.41009658, 0.19113064], dtype=float64), 'ra': Array([3.54944236, 1.53113151, 3.11847809], dtype=float64), 'sin_dec': Array([ 0.52750516,  0.24967369, -0.87726919], dtype=float64)}
07:36 ninjax INFO    : log_prob: [ -4.32200173 -76.3469467  -28.88763879]
07:36 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.8368203636027807, 'mass_2_source': 1.688428059041434, 's1_z': 0.03895922037979249, 's2_z': 0.03298049533700141, 'cos_iota': -0.7128121239208571, 'd_L': 443.01896590202244, 't_c': -0.042053520918483134, 'phase_c': 0.34710582581999005, 'psi': 0.1365432552784313, 'ra': 1.405705107875789, 'sin_dec': 0.7675451788027021, 'q': 0.9192124023111946, 'M_c': 1.686261503908966, 'eta': 0.24955702082098866, 'iota': Array(2.36429597, dtype=float64, weak_type=True), 'dec': Array(0.87500262, dtype=float64, weak_type=True), 'lambda_1': 22.72407191660298, 'lambda_2': 46.54718352605512, 'H1_SNR': 11.680101647769284, 'L1_SNR': 12.12964231247567, 'V1_SNR': 6.179742028884374, 'network_SNR': 17.937173932210804, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
07:36 ninjax INFO    : log_prob at the injection parameters is: 145.52308711964363
07:36 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
07:36 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
07:36 ninjax INFO    : Ninjax setup complete.
07:36 ninjax INFO    : Saving output to ./Aplus/injection_27/
07:36 ninjax INFO    : Using polynomial learning rate scheduler
07:36 ninjax INFO    : The hyperparameters passed to flowMC and jim are
07:36 ninjax INFO    :    n_loop_training: 200
07:36 ninjax INFO    :    n_loop_production: 10
07:36 ninjax INFO    :    n_local_steps: 100
07:36 ninjax INFO    :    n_global_steps: 1000
07:36 ninjax INFO    :    n_epochs: 25
07:36 ninjax INFO    :    n_chains: 1000
07:36 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x14908d25bbe0>
07:36 ninjax INFO    :    max_samples: 50000
07:36 ninjax INFO    :    momentum: 0.9
07:36 ninjax INFO    :    batch_size: 30000
07:36 ninjax INFO    :    use_global: True
07:36 ninjax INFO    :    keep_quantile: 0.0
07:36 ninjax INFO    :    train_thinning: 10
07:36 ninjax INFO    :    output_thinning: 50
07:36 ninjax INFO    :    n_sample_max: 10000
07:36 ninjax INFO    :    num_layers: 10
07:36 ninjax INFO    :    hidden_size: [128, 128]
07:36 ninjax INFO    :    num_bins: 8
07:36 ninjax INFO    :    save_training_chains: False
07:36 ninjax INFO    :    eps_mass_matrix: 1e-05
07:36 ninjax INFO    :    use_scheduler: True
07:36 ninjax INFO    :    use_temperature: False
07:36 ninjax INFO    :    which_temperature_schedule: exponential
07:36 ninjax INFO    :    starting_temperature: 2.0
07:36 ninjax INFO    :    stop_tempering_iteration: 75
07:36 ninjax INFO    :    stopping_criterion_global_acc: 0.1
07:36 ninjax INFO    :    stopping_criterion_loss: -inf
07:36 ninjax INFO    :    nf_model_kwargs: {}
07:36 ninjax INFO    :    local sampler arg not shown (pretty print)
07:36 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[-1.36545145e-22  8.56175033e-23  3.29433558e-23  1.38636914e-23
 -3.09329883e-23 -4.00281963e-23 -3.76342435e-23  5.76294352e-23
  8.43412469e-24  1.96458321e-23]
[ 2.88652489e-23 -4.16616931e-23  1.10996984e-24 -6.84624661e-24
 -5.49156408e-23  2.73313297e-23 -1.21216703e-23  3.29686634e-23
 -1.44390096e-23 -1.48554147e-23]
Checking the noise that was generated in inject_signal ifo:
[-3.26934098e-23  2.92065943e-23 -2.52176890e-24 -6.69298318e-23
  1.27941027e-23  2.07712322e-23 -2.80915263e-23 -5.01798202e-24
 -1.64044853e-23 -5.78064476e-23]
[ 6.21601637e-23  4.62436405e-23 -1.63068588e-23  5.66868377e-23
  3.09695100e-23  5.83440624e-23  4.40568127e-24 -1.27858481e-23
  3.19688021e-23  2.94543735e-24]
Checking the noise that was generated in inject_signal ifo:
[-4.75204366e-24 -4.08754960e-23 -3.24060886e-23 -3.52457535e-23
  5.48883915e-23 -3.82359072e-23  4.26434917e-23  2.66312338e-23
 -1.69199886e-23  4.08016314e-23]
[-4.86761362e-23  4.87782118e-23  3.42474458e-23  4.06292689e-24
 -4.07487562e-23 -2.80063874e-24 -3.29878038e-23 -3.24233385e-23
 -4.33032252e-23 -4.58154070e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.10982060432434082 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.8368203636027807, 'mass_2_source': 1.688428059041434, 's1_z': 0.03895922037979249, 's2_z': 0.03298049533700141, 'cos_iota': -0.7128121239208571, 'd_L': 443.01896590202244, 't_c': -0.042053520918483134, 'phase_c': 0.34710582581999005, 'psi': 0.1365432552784313, 'ra': 1.405705107875789, 'sin_dec': 0.7675451788027021, 'q': 0.9192124023111946, 'M_c': 1.686261503908966, 'eta': 0.24955702082098866, 'iota': Array(2.36429597, dtype=float64, weak_type=True), 'dec': Array(0.87500262, dtype=float64, weak_type=True), 'lambda_1': 22.72407191660298, 'lambda_2': 46.54718352605512, 'H1_SNR': 11.680101647769284, 'L1_SNR': 12.12964231247567, 'V1_SNR': 6.179742028884374, 'network_SNR': 17.937173932210804, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5220456123352051 seconds
Time for h_sky_low and h_sky_center: 5.388155460357666 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.6888060569763184
Going to compute coefficients . . .
Time for computing coefficients: 125.56871056556702 seconds
Time for computing coefficients: 7.0875794887542725 seconds
Time for computing coefficients: 6.966101408004761 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:01<6:42:22, 121.32s/it]Tuning global sampler:   1%|          | 2/200 [02:05<2:53:47, 52.66s/it] Tuning global sampler:   2%|▏         | 3/200 [02:10<1:40:53, 30.73s/it]Tuning global sampler:   2%|▏         | 4/200 [02:15<1:06:43, 20.43s/it]Tuning global sampler:   2%|▎         | 5/200 [02:19<47:51, 14.72s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:24<36:29, 11.29s/it]Tuning global sampler:   4%|▎         | 7/200 [02:29<30:06,  9.36s/it]Tuning global sampler:   4%|▍         | 8/200 [02:34<25:06,  7.85s/it]Tuning global sampler:   4%|▍         | 9/200 [02:38<21:42,  6.82s/it]Tuning global sampler:   5%|▌         | 10/200 [02:43<19:15,  6.08s/it]Tuning global sampler:   6%|▌         | 11/200 [02:47<17:43,  5.63s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:39,  5.32s/it]Tuning global sampler:   6%|▋         | 13/200 [02:57<15:51,  5.09s/it]Tuning global sampler:   7%|▋         | 14/200 [03:01<15:21,  4.95s/it]Tuning global sampler:   8%|▊         | 15/200 [03:06<14:59,  4.86s/it]Tuning global sampler:   8%|▊         | 16/200 [03:11<14:42,  4.80s/it]Tuning global sampler:   8%|▊         | 17/200 [03:15<14:29,  4.75s/it]Tuning global sampler:   9%|▉         | 18/200 [03:20<14:18,  4.72s/it]Tuning global sampler:  10%|▉         | 19/200 [03:25<14:09,  4.69s/it]Tuning global sampler:  10%|█         | 20/200 [03:29<14:01,  4.68s/it]Tuning global sampler:  10%|█         | 21/200 [03:34<13:55,  4.67s/it]Tuning global sampler:  11%|█         | 22/200 [03:39<14:34,  4.92s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:44<14:13,  4.82s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:48<13:47,  4.70s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:53<13:26,  4.61s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:57<13:10,  4.54s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:02<12:58,  4.50s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:06<12:47,  4.46s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:10<12:40,  4.44s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:15<12:33,  4.43s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:19<12:27,  4.42s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:23<12:21,  4.41s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:28<12:13,  4.39s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:32<12:07,  4.38s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:37<12:03,  4.39s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:41<11:59,  4.39s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:45<11:55,  4.39s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:50<11:50,  4.39s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:54<11:46,  4.39s/it]Tuning global sampler:  20%|██        | 40/200 [04:59<11:42,  4.39s/it]Tuning global sampler:  20%|██        | 41/200 [05:04<12:21,  4.67s/it]Tuning global sampler:  21%|██        | 42/200 [05:08<12:04,  4.58s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:13<11:51,  4.53s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:17<11:38,  4.48s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:21<11:28,  4.44s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:26<11:21,  4.43s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:30<11:15,  4.42s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:35<11:10,  4.41s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:39<11:05,  4.41s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:43<11:00,  4.40s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:48<10:56,  4.40s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:52<10:50,  4.40s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:57<10:46,  4.40s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:01<10:41,  4.40s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:05<10:36,  4.39s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:10<10:30,  4.38s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:14<10:27,  4.39s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:18<10:23,  4.39s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:23<10:19,  4.39s/it]Tuning global sampler:  30%|███       | 60/200 [06:27<10:15,  4.40s/it]Tuning global sampler:  30%|███       | 61/200 [06:32<10:12,  4.40s/it]Tuning global sampler:  31%|███       | 62/200 [06:37<10:47,  4.70s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:41<10:31,  4.61s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:46<10:17,  4.54s/it]Tuning global sampler:  32%|███▎      | 65/200 [06:50<10:07,  4.50s/it]Tuning global sampler:  33%|███▎      | 66/200 [06:55<09:57,  4.46s/it]Tuning global sampler:  34%|███▎      | 67/200 [06:59<09:49,  4.43s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:03<09:43,  4.42s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:08<13:51,  6.30s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.21s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.21s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.21s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.21s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.21s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.21s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.21s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.21s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]
07:44 ninjax INFO    : Saving samples to ./Aplus/injection_27/results_training.npz
07:44 ninjax INFO    : Saving the NF
07:44 ninjax INFO    : Time taken: 467.87908935546875 seconds (7.797984822591146 minutes)
07:44 ninjax INFO    : Creating the final corner plot
07:44 ninjax INFO    : Dumping the final production chains
07:44 ninjax INFO    : Chains shape is: (13, 220000)
07:44 ninjax INFO    : Key: M_c: ESS = 30068, Rhat = 1.0209911160503466
07:44 ninjax INFO    : Key: q: ESS = 31328, Rhat = 1.0211764969484396
07:44 ninjax INFO    : Key: s1_z: ESS = 33165, Rhat = 1.0197429645278404
07:44 ninjax INFO    : Key: s2_z: ESS = 31848, Rhat = 1.0205226629016626
07:44 ninjax INFO    : Key: lambda_1: ESS = 41918, Rhat = 1.016206253307274
07:44 ninjax INFO    : Key: lambda_2: ESS = 39545, Rhat = 1.017231602627862
07:44 ninjax INFO    : Key: cos_iota: ESS = 36295, Rhat = 1.018686095405478
07:44 ninjax INFO    : Key: d_L: ESS = 39735, Rhat = 1.0171007576159388
07:44 ninjax INFO    : Key: t_c: ESS = 39540, Rhat = 1.0168069165833946
07:44 ninjax INFO    : Key: phase_c: ESS = 50695, Rhat = 1.0179816657284677
07:44 ninjax INFO    : Key: psi: ESS = 48415, Rhat = 1.015031522251216
07:44 ninjax INFO    : Key: ra: ESS = 45231, Rhat = 1.016041591165715
07:44 ninjax INFO    : Key: sin_dec: ESS = 47826, Rhat = 1.0162326610617483
07:44 ninjax INFO    : Key: eta: ESS = 31328, Rhat = 1.0211764969484396
07:44 ninjax INFO    : Key: iota: ESS = 36295, Rhat = 1.018686095405478
07:44 ninjax INFO    : Key: dec: ESS = 47826, Rhat = 1.0162341128919887
07:44 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.672 +/- 0.154
q: 0.776 +/- 0.216
s1_z: 0.021 +/- 0.027
s2_z: 0.017 +/- 0.030
lambda_1: 1584.896 +/- 1508.416
lambda_2: 1674.010 +/- 1528.150
cos_iota: -0.291 +/- 0.530
d_L: 639.710 +/- 195.039
t_c: -0.044 +/- 0.028
phase_c: 3.330 +/- 1.765
psi: 1.578 +/- 0.856
ra: 1.893 +/- 1.304
sin_dec: 0.434 +/- 0.526
Log probability: 69.051 +/- 62.037
Local acceptance: 0.956 +/- 0.204
Global acceptance: 0.013 +/- 0.112
Max loss: 22.764, Min loss: 2.697
Production summary
==========
M_c: 1.686 +/- 0.000
q: 0.916 +/- 0.057
s1_z: 0.041 +/- 0.007
s2_z: 0.040 +/- 0.008
lambda_1: 157.723 +/- 136.037
lambda_2: 207.097 +/- 173.606
cos_iota: -0.802 +/- 0.154
d_L: 487.331 +/- 80.006
t_c: -0.042 +/- 0.000
phase_c: 3.114 +/- 1.826
psi: 1.622 +/- 0.919
ra: 1.402 +/- 0.013
sin_dec: 0.773 +/- 0.007
Log probability: 142.676 +/- 2.236
Local acceptance: 0.902 +/- 0.297
Global acceptance: 0.116 +/- 0.320
DONE

JOB STATISTICS
==============
Job ID: 10918565
Cluster: snellius
User/Group: twouters2/twouters2
State: RUNNING
Nodes: 1
Cores per node: 16
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 02:58:40 core-walltime
Job Wall-clock time: 00:11:10
Memory Utilized: 0.00 MB
Memory Efficiency: 0.00% of 10.00 GB (10.00 GB/node)
WARNING: Efficiency statistics can only be obtained after the job has ended as seff tool is based on the accounting database data.
