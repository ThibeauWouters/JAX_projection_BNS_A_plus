Wed Apr  2 07:33:42 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
07:33 ninjax INFO    : Checking and setting outdir
07:33 ninjax INFO    : Found generation prior file ./Aplus/injection_22/generation_prior.prior
07:33 ninjax INFO    : The outdir is set to ./Aplus/injection_22
07:33 ninjax INFO    : Loading the given config
07:33 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
07:33 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
07:33 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/jester_soft/Aplus/injection_22/complete_config.json
07:33 ninjax INFO    : No seed specified. Generating a random seed: 35244
07:33 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 187989
07:33 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 758494
07:33 ninjax INFO    : Loading the priors
07:33 ninjax INFO    : Setting up the prior
07:33 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
07:33 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
07:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
07:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
07:33 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
07:33 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
07:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
07:33 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
07:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
07:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
07:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
07:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
07:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
07:33 ninjax INFO    : Setting up the generation prior
07:33 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 1.99, naming=["mass_1_source"])
07:33 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 1.99, naming=["mass_2_source"])
07:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
07:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
07:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
07:33 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
07:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
07:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
07:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
07:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
07:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
07:33 ninjax INFO    : Finished prior setup
07:33 ninjax INFO    : Setting the transforms
07:33 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
07:33 ninjax INFO    : transforms_str_list has 3 elements
07:33 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
07:33 ninjax INFO    : Setting the likelihood
07:33 ninjax INFO    : GW likelihood provided, setting up the GW pipe
07:33 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz
07:33 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz for BNS injections
07:33 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
07:33 ninjax INFO    : self.is_BNS_run is True
07:33 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
07:33 ninjax INFO    : GW run is an injection
07:33 ninjax INFO    : Setting up GW injection . . . 
07:33 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
07:33 ninjax INFO    : Generating new injection
07:33 ninjax INFO    : Sanity check: generated parameters:
07:33 ninjax INFO    : {'mass_1_source': 1.3209565875086937, 'mass_2_source': 1.0258070016999616, 's1_z': 0.03159193563781053, 's2_z': -0.012604052596365524, 'cos_iota': -0.007973642106401613, 'd_L': 429.4373662089063, 't_c': 0.06713611914834769, 'phase_c': 2.6164063785140046, 'psi': 1.8778025835129073, 'ra': 0.7079133069432664, 'sin_dec': 0.8236673358646751}
07:33 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz . . . 
07:33 ninjax INFO    : Injected lambda_1: 276.9931353580619
07:33 ninjax INFO    : Injected lambda_2: 1534.1191496311633
07:33 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.1099381424794568 is 256.0
07:33 ninjax INFO    : After transforms, the injection parameters are:
07:33 ninjax INFO    : {'mass_1_source': 1.3209565875086937, 'mass_2_source': 1.0258070016999616, 's1_z': 0.03159193563781053, 's2_z': -0.012604052596365524, 'cos_iota': -0.007973642106401613, 'd_L': 429.4373662089063, 't_c': 0.06713611914834769, 'phase_c': 2.6164063785140046, 'psi': 1.8778025835129073, 'ra': 0.7079133069432664, 'sin_dec': 0.8236673358646751, 'q': 0.7765637503913886, 'M_c': 1.1099381424794568, 'eta': 0.24604555370211817, 'iota': Array(1.57877005, dtype=float64, weak_type=True), 'dec': Array(0.9678481, dtype=float64, weak_type=True), 'lambda_1': 276.9931353580619, 'lambda_2': 1534.1191496311633}
07:33 ninjax INFO    : The trial injection parameters are {'M_c': 1.1099381424794568, 'eta': 0.24604555370211817, 's1_z': 0.03159193563781053, 's2_z': -0.012604052596365524, 'lambda_1': 276.9931353580619, 'lambda_2': 1534.1191496311633, 'd_L': 429.4373662089063, 'phase_c': 2.6164063785140046, 'iota': 1.5787700533963722, 't_c': 0.06713611914834769, 'psi': 1.8778025835129073, 'ra': 0.7079133069432664, 'dec': 0.9678480991817633}
07:33 ninjax INFO    : Injecting signals . . .
07:33 ninjax INFO    : self.ifos
07:33 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
07:33 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
07:33 ninjax INFO    : [-5.21437862e-23+8.75241597e-23j  2.50820444e-25-1.29666371e-22j
  3.65640006e-23+9.79923736e-23j ...
  7.65584516e-24-5.23598596e-24j -2.17602750e-23-7.81529052e-24j
  1.01665227e-23+2.09298981e-23j]
07:33 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
07:33 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
07:33 ninjax INFO    : [ 4.92168858e-23-1.60327934e-23j  2.49391650e-23+3.73075628e-23j
 -3.99153546e-23+5.32104002e-23j ...
 -2.72615656e-23-1.97157083e-23j  7.23976685e-24+8.92667538e-24j
  4.76812456e-24+2.19058380e-24j]
07:33 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
07:33 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
07:33 ninjax INFO    : [ 3.48207323e-24+3.26433323e-23j  3.87423538e-23-1.12705719e-22j
  4.33102932e-23+4.30519761e-23j ...
  3.38551287e-24-5.22281646e-23j  1.47805756e-23+4.22144416e-23j
 -2.19449638e-23-6.73732563e-24j]
07:33 ninjax INFO    : [1.43183556e-46 1.43058540e-46 1.42935095e-46 ... 6.39793039e-47
 6.39795354e-47 6.39797668e-47]
07:33 ninjax INFO    : SNR for ifo H1 is 1.2853567570365452
07:33 ninjax INFO    : SNR for ifo L1 is 1.5636993622244624
07:33 ninjax INFO    : SNR for ifo V1 is 1.330858929868458
07:33 ninjax INFO    : The network SNR is 2.422495238280421
07:33 ninjax INFO    : The network SNR does not pass the threshold, trying again
07:33 ninjax INFO    : Generating new injection
07:33 ninjax INFO    : Sanity check: generated parameters:
07:33 ninjax INFO    : {'mass_1_source': 1.5940152087524, 'mass_2_source': 1.6574982215739813, 's1_z': 0.03882512996449146, 's2_z': -0.04220511107744791, 'cos_iota': 0.6590583896185529, 'd_L': 385.14111167252986, 't_c': 0.02471028234157871, 'phase_c': 5.896249642155978, 'psi': 1.5290504713004278, 'ra': 3.637159958607347, 'sin_dec': -0.3391692920000682}
07:33 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz . . . 
07:33 ninjax INFO    : Injected lambda_1: 53.71216686964497
07:33 ninjax INFO    : Injected lambda_2: 72.33411002770917
07:33 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.5381184017251492 is 128.0
07:33 ninjax INFO    : After transforms, the injection parameters are:
07:33 ninjax INFO    : {'mass_1_source': 1.6574982215739813, 'mass_2_source': 1.5940152087524, 's1_z': 0.03882512996449146, 's2_z': -0.04220511107744791, 'cos_iota': 0.6590583896185529, 'd_L': 385.14111167252986, 't_c': 0.02471028234157871, 'phase_c': 5.896249642155978, 'psi': 1.5290504713004278, 'ra': 3.637159958607347, 'sin_dec': -0.3391692920000682, 'q': 0.961699498681032, 'M_c': 1.5381184017251492, 'eta': 0.24990470196110534, 'iota': Array(0.85123024, dtype=float64, weak_type=True), 'dec': Array(-0.34603371, dtype=float64, weak_type=True), 'lambda_1': 53.71216686964497, 'lambda_2': 72.33411002770917}
07:33 ninjax INFO    : The trial injection parameters are {'M_c': 1.5381184017251492, 'eta': 0.24990470196110534, 's1_z': 0.03882512996449146, 's2_z': -0.04220511107744791, 'lambda_1': 53.71216686964497, 'lambda_2': 72.33411002770917, 'd_L': 385.14111167252986, 'phase_c': 5.896249642155978, 'iota': 0.8512302424663447, 't_c': 0.02471028234157871, 'psi': 1.5290504713004278, 'ra': 3.637159958607347, 'dec': -0.34603370629062963}
07:33 ninjax INFO    : Injecting signals . . .
07:33 ninjax INFO    : self.ifos
07:33 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
07:34 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
07:34 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
07:34 ninjax INFO    : [ 1.80788331e-23+2.03319476e-23j  6.94949464e-23-6.80227833e-23j
 -8.73902220e-23-2.09079745e-23j ...
  2.71286508e-24+2.30371152e-23j -1.21812979e-23-2.67317882e-24j
 -3.89451027e-23+1.07508124e-23j]
07:34 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
07:34 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
07:34 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
07:34 ninjax INFO    : [-7.05513238e-23-2.26100997e-23j  5.42125634e-24-4.67143471e-23j
  6.44364240e-23-6.25769066e-23j ...
  1.91042042e-24+1.57334610e-24j -1.20434130e-24+4.87376490e-24j
 -1.50570036e-23-1.42463413e-23j]
07:34 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
07:34 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
07:34 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
07:34 ninjax INFO    : [ 3.28878508e-23+2.27879991e-23j  3.69191570e-24-4.22736043e-23j
 -2.44990612e-23-8.57652008e-23j ...
 -3.49287763e-23+1.85872946e-23j  3.37018690e-23+4.86845619e-23j
  4.60005667e-23+3.31897273e-25j]
07:34 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
07:34 ninjax INFO    : SNR for ifo H1 is 11.03061369106771
07:34 ninjax INFO    : SNR for ifo L1 is 10.4375997331135
07:34 ninjax INFO    : SNR for ifo V1 is 3.5181262206125297
07:34 ninjax INFO    : The network SNR is 15.588301340890956
07:34 ninjax INFO    : Network SNR passes threshold
07:34 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
07:34 ninjax INFO    :    mass_1_source: 1.6574982215739813
07:34 ninjax INFO    :    mass_2_source: 1.5940152087524
07:34 ninjax INFO    :    s1_z: 0.03882512996449146
07:34 ninjax INFO    :    s2_z: -0.04220511107744791
07:34 ninjax INFO    :    cos_iota: 0.6590583896185529
07:34 ninjax INFO    :    d_L: 385.14111167252986
07:34 ninjax INFO    :    t_c: 0.02471028234157871
07:34 ninjax INFO    :    phase_c: 5.896249642155978
07:34 ninjax INFO    :    psi: 1.5290504713004278
07:34 ninjax INFO    :    ra: 3.637159958607347
07:34 ninjax INFO    :    sin_dec: -0.3391692920000682
07:34 ninjax INFO    :    q: 0.961699498681032
07:34 ninjax INFO    :    M_c: 1.5381184017251492
07:34 ninjax INFO    :    eta: 0.24990470196110534
07:34 ninjax INFO    :    iota: 0.8512302424663447
07:34 ninjax INFO    :    dec: -0.34603370629062963
07:34 ninjax INFO    :    lambda_1: 53.71216686964497
07:34 ninjax INFO    :    lambda_2: 72.33411002770917
07:34 ninjax INFO    :    H1_SNR: 11.03061369106771
07:34 ninjax INFO    :    L1_SNR: 10.4375997331135
07:34 ninjax INFO    :    V1_SNR: 3.5181262206125297
07:34 ninjax INFO    :    network_SNR: 15.588301340890956
07:34 ninjax INFO    :    epoch: 126.0
07:34 ninjax INFO    :    gmst: 2.7288901910520846
07:34 ninjax INFO    :    duration: 128.0
07:34 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
07:34 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
07:34 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
07:36 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 146.01354384422302 seconds = 2.433559064070384 minutes
07:36 ninjax INFO    : The priors are not modified after their initialization
07:36 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
07:36 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
07:36 ninjax INFO    : sample: {'M_c': Array([2.53588578, 1.7330253 , 2.25309043], dtype=float64), 'q': Array([0.87117915, 0.42458964, 0.58126873], dtype=float64), 's1_z': Array([ 0.02656972, -0.01535561, -0.01029489], dtype=float64), 's2_z': Array([ 0.038805  , -0.01550806, -0.00918386], dtype=float64), 'lambda_1': Array([4989.50135208, 4251.14018418, 1212.043687  ], dtype=float64), 'lambda_2': Array([2205.28630918,  483.50179726,  742.97079856], dtype=float64), 'cos_iota': Array([-0.08376838,  0.81658741, -0.98404056], dtype=float64), 'd_L': Array([898.23980959, 476.49408546, 716.72175984], dtype=float64), 't_c': Array([-0.01223289,  0.09783457, -0.09683626], dtype=float64), 'phase_c': Array([5.19551205, 1.4527981 , 0.3756097 ], dtype=float64), 'psi': Array([1.94231242, 0.74125045, 2.21347884], dtype=float64), 'ra': Array([0.98257399, 0.07071344, 4.12827412], dtype=float64), 'sin_dec': Array([-0.54653942,  0.69688041,  0.35746491], dtype=float64)}
07:36 ninjax INFO    : log_prob: [  -3.97166954 -131.78023489  -68.4844618 ]
07:36 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.6574982215739813, 'mass_2_source': 1.5940152087524, 's1_z': 0.03882512996449146, 's2_z': -0.04220511107744791, 'cos_iota': 0.6590583896185529, 'd_L': 385.14111167252986, 't_c': 0.02471028234157871, 'phase_c': 5.896249642155978, 'psi': 1.5290504713004278, 'ra': 3.637159958607347, 'sin_dec': -0.3391692920000682, 'q': 0.961699498681032, 'M_c': 1.5381184017251492, 'eta': 0.24990470196110534, 'iota': Array(0.85123024, dtype=float64, weak_type=True), 'dec': Array(-0.34603371, dtype=float64, weak_type=True), 'lambda_1': 53.71216686964497, 'lambda_2': 72.33411002770917, 'H1_SNR': 11.03061369106771, 'L1_SNR': 10.4375997331135, 'V1_SNR': 3.5181262206125297, 'network_SNR': 15.588301340890956, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
07:36 ninjax INFO    : log_prob at the injection parameters is: 102.43615861235156
07:36 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
07:36 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
07:36 ninjax INFO    : Ninjax setup complete.
07:36 ninjax INFO    : Saving output to ./Aplus/injection_22/
07:36 ninjax INFO    : Using polynomial learning rate scheduler
07:36 ninjax INFO    : The hyperparameters passed to flowMC and jim are
07:36 ninjax INFO    :    n_loop_training: 200
07:36 ninjax INFO    :    n_loop_production: 10
07:36 ninjax INFO    :    n_local_steps: 100
07:36 ninjax INFO    :    n_global_steps: 1000
07:36 ninjax INFO    :    n_epochs: 25
07:36 ninjax INFO    :    n_chains: 1000
07:36 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x14b956eac310>
07:36 ninjax INFO    :    max_samples: 50000
07:36 ninjax INFO    :    momentum: 0.9
07:36 ninjax INFO    :    batch_size: 30000
07:36 ninjax INFO    :    use_global: True
07:36 ninjax INFO    :    keep_quantile: 0.0
07:36 ninjax INFO    :    train_thinning: 10
07:36 ninjax INFO    :    output_thinning: 50
07:36 ninjax INFO    :    n_sample_max: 10000
07:36 ninjax INFO    :    num_layers: 10
07:36 ninjax INFO    :    hidden_size: [128, 128]
07:36 ninjax INFO    :    num_bins: 8
07:36 ninjax INFO    :    save_training_chains: False
07:36 ninjax INFO    :    eps_mass_matrix: 1e-05
07:36 ninjax INFO    :    use_scheduler: True
07:36 ninjax INFO    :    use_temperature: False
07:36 ninjax INFO    :    which_temperature_schedule: exponential
07:36 ninjax INFO    :    starting_temperature: 2.0
07:36 ninjax INFO    :    stop_tempering_iteration: 75
07:36 ninjax INFO    :    stopping_criterion_global_acc: 0.1
07:36 ninjax INFO    :    stopping_criterion_loss: -inf
07:36 ninjax INFO    :    nf_model_kwargs: {}
07:36 ninjax INFO    :    local sampler arg not shown (pretty print)
07:36 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[-5.16027488e-23 -2.06760885e-26  3.60558525e-23  2.51792395e-23
  6.26524924e-23 -1.29412151e-22  2.50351611e-23 -2.30260743e-25
  1.07953941e-22 -1.38753284e-23]
[ 8.72839960e-23 -1.30192232e-22  9.82954660e-23 -3.96076819e-23
 -2.48495099e-23  1.01973704e-24  3.28311442e-23  1.58754734e-22
  7.63084426e-23  2.70115836e-23]
Checking the noise that was generated in inject_signal ifo:
[ 4.87027743e-23  2.54726900e-23 -3.94656145e-23  4.50676406e-23
 -9.62553763e-23 -8.83989490e-23 -2.39691998e-25  3.56018844e-24
  1.53940872e-24 -6.50900539e-23]
[-1.55285331e-23  3.77909911e-23  5.26483962e-23  1.26233717e-23
  5.05165974e-23  4.75718262e-23 -8.39269443e-23 -3.51267012e-23
 -5.38648673e-23  6.74940693e-23]
Checking the noise that was generated in inject_signal ifo:
[ 2.97543728e-24  3.81824837e-23  4.38841631e-23 -5.58783249e-23
  8.71715361e-24  1.91665325e-23  3.51678218e-23 -5.26286459e-23
 -8.44320647e-23  1.33727064e-22]
[ 3.20523368e-23 -1.12165142e-22  4.35774043e-23 -9.58635083e-23
  5.91350556e-23 -9.01542389e-23  1.38995789e-23  6.66130187e-23
  2.72875535e-23 -1.62431196e-22]
Checking the noise that was generated in inject_signal ifo:
[ 1.72228528e-23  7.26357980e-23 -8.23020836e-23 -3.90021017e-23
 -2.27248063e-23 -7.35681894e-23 -4.19108230e-23  9.85103186e-23
  2.88301446e-23  1.51148340e-23]
[ 2.53652906e-23 -6.40005419e-23 -2.05468876e-23  2.61130644e-23
  2.19144313e-24 -5.73315527e-24 -7.23576512e-23 -3.47630470e-23
 -3.18400175e-23  4.93587199e-23]
Checking the noise that was generated in inject_signal ifo:
[-6.77596532e-23  4.38982668e-24  6.02444465e-23 -1.75958494e-23
 -4.44268219e-23  2.91938309e-23  5.37385213e-23 -2.30440677e-23
 -3.62636790e-23 -1.02682445e-23]
[-2.65529885e-23 -5.14318228e-23 -6.49694794e-23 -2.90238558e-24
 -1.85510965e-24  1.98092496e-23  3.74685839e-23 -3.56195175e-23
  7.34436312e-24 -1.75013184e-23]
Checking the noise that was generated in inject_signal ifo:
[ 3.33101924e-23  2.48446087e-24 -2.65509742e-23  1.64990928e-23
  1.19890391e-23 -8.43763199e-23  8.28340669e-23 -5.91586745e-24
  4.12466498e-23  4.51113007e-23]
[ 2.07651858e-23 -4.39493992e-23 -8.59931998e-23  7.27875083e-23
 -3.00872765e-23  5.10574906e-23 -4.95813943e-23 -2.67316083e-23
 -6.39320890e-23 -5.64505305e-24]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.10766911506652832 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.6574982215739813, 'mass_2_source': 1.5940152087524, 's1_z': 0.03882512996449146, 's2_z': -0.04220511107744791, 'cos_iota': 0.6590583896185529, 'd_L': 385.14111167252986, 't_c': 0.02471028234157871, 'phase_c': 5.896249642155978, 'psi': 1.5290504713004278, 'ra': 3.637159958607347, 'sin_dec': -0.3391692920000682, 'q': 0.961699498681032, 'M_c': 1.5381184017251492, 'eta': 0.24990470196110534, 'iota': Array(0.85123024, dtype=float64, weak_type=True), 'dec': Array(-0.34603371, dtype=float64, weak_type=True), 'lambda_1': 53.71216686964497, 'lambda_2': 72.33411002770917, 'H1_SNR': 11.03061369106771, 'L1_SNR': 10.4375997331135, 'V1_SNR': 3.5181262206125297, 'network_SNR': 15.588301340890956, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5088536739349365 seconds
Time for h_sky_low and h_sky_center: 5.381066799163818 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.6958560943603516
Going to compute coefficients . . .
Time for computing coefficients: 124.53776216506958 seconds
Time for computing coefficients: 7.247259140014648 seconds
Time for computing coefficients: 6.9892213344573975 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:01<6:41:38, 121.10s/it]Tuning global sampler:   1%|          | 2/200 [02:05<2:53:26, 52.56s/it] Tuning global sampler:   2%|▏         | 3/200 [02:10<1:40:42, 30.67s/it]Tuning global sampler:   2%|▏         | 4/200 [02:14<1:06:35, 20.39s/it]Tuning global sampler:   2%|▎         | 5/200 [02:20<48:47, 15.01s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:25<37:09, 11.49s/it]Tuning global sampler:   4%|▎         | 7/200 [02:29<29:39,  9.22s/it]Tuning global sampler:   4%|▍         | 8/200 [02:34<24:51,  7.77s/it]Tuning global sampler:   4%|▍         | 9/200 [02:38<21:31,  6.76s/it]Tuning global sampler:   5%|▌         | 10/200 [02:43<19:08,  6.05s/it]Tuning global sampler:   6%|▌         | 11/200 [02:47<17:39,  5.60s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:35,  5.30s/it]Tuning global sampler:   6%|▋         | 13/200 [02:57<15:49,  5.08s/it]Tuning global sampler:   7%|▋         | 14/200 [03:01<15:20,  4.95s/it]Tuning global sampler:   8%|▊         | 15/200 [03:06<14:58,  4.86s/it]Tuning global sampler:   8%|▊         | 16/200 [03:10<14:42,  4.80s/it]Tuning global sampler:   8%|▊         | 17/200 [03:15<14:30,  4.76s/it]Tuning global sampler:   9%|▉         | 18/200 [03:20<14:20,  4.73s/it]Tuning global sampler:  10%|▉         | 19/200 [03:24<14:12,  4.71s/it]Tuning global sampler:  10%|█         | 20/200 [03:29<14:04,  4.69s/it]Tuning global sampler:  10%|█         | 21/200 [03:34<13:59,  4.69s/it]Tuning global sampler:  11%|█         | 22/200 [03:39<14:38,  4.94s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:44<14:16,  4.84s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:48<13:50,  4.72s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:53<13:28,  4.62s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:57<13:11,  4.55s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:02<12:59,  4.50s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:06<12:48,  4.47s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:10<12:40,  4.45s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:15<12:33,  4.43s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:19<12:26,  4.42s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:23<12:20,  4.41s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:28<12:13,  4.39s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:32<12:07,  4.38s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:37<12:03,  4.39s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:41<11:59,  4.39s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:45<11:55,  4.39s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:50<11:51,  4.39s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:54<11:46,  4.39s/it]Tuning global sampler:  20%|██        | 40/200 [04:59<11:42,  4.39s/it]Tuning global sampler:  20%|██        | 41/200 [05:03<11:39,  4.40s/it]Tuning global sampler:  21%|██        | 42/200 [05:08<12:19,  4.68s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:13<12:02,  4.60s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:17<11:46,  4.53s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:21<11:34,  4.48s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:26<11:25,  4.45s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:30<11:17,  4.43s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:35<11:11,  4.42s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:39<11:06,  4.42s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:43<11:01,  4.41s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:48<10:56,  4.40s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:52<10:51,  4.40s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:57<10:46,  4.40s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:01<10:42,  4.40s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:05<10:36,  4.39s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:10<10:30,  4.38s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:14<10:27,  4.39s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:19<10:23,  4.39s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:23<10:19,  4.39s/it]Tuning global sampler:  30%|███       | 60/200 [06:27<10:15,  4.39s/it]Tuning global sampler:  30%|███       | 61/200 [06:32<10:10,  4.39s/it]Tuning global sampler:  31%|███       | 62/200 [06:37<10:46,  4.68s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:41<10:30,  4.60s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:46<10:16,  4.54s/it]Tuning global sampler:  32%|███▎      | 65/200 [06:50<10:06,  4.49s/it]Tuning global sampler:  33%|███▎      | 66/200 [06:55<09:56,  4.45s/it]Tuning global sampler:  34%|███▎      | 67/200 [06:59<09:48,  4.42s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:03<09:42,  4.41s/it]Tuning global sampler:  34%|███▍      | 69/200 [07:08<09:37,  4.41s/it]Tuning global sampler:  35%|███▌      | 70/200 [07:12<09:32,  4.41s/it]Tuning global sampler:  36%|███▌      | 71/200 [07:17<09:28,  4.41s/it]Tuning global sampler:  36%|███▌      | 72/200 [07:21<09:24,  4.41s/it]Tuning global sampler:  36%|███▋      | 73/200 [07:25<09:19,  4.40s/it]Tuning global sampler:  36%|███▋      | 73/200 [07:30<13:03,  6.17s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.21s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.21s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.21s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.21s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.21s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.21s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.21s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.21s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]
07:44 ninjax INFO    : Saving samples to ./Aplus/injection_22/results_training.npz
07:44 ninjax INFO    : Saving the NF
07:44 ninjax INFO    : Time taken: 489.79502630233765 seconds (8.163250438372295 minutes)
07:44 ninjax INFO    : Creating the final corner plot
07:44 ninjax INFO    : Dumping the final production chains
07:44 ninjax INFO    : Chains shape is: (13, 220000)
07:44 ninjax INFO    : Key: M_c: ESS = 36517, Rhat = 1.0177899339188914
07:44 ninjax INFO    : Key: q: ESS = 20019, Rhat = 1.0301714766451866
07:44 ninjax INFO    : Key: s1_z: ESS = 34681, Rhat = 1.0191151021891438
07:44 ninjax INFO    : Key: s2_z: ESS = 32150, Rhat = 1.0197770442870262
07:44 ninjax INFO    : Key: lambda_1: ESS = 18497, Rhat = 1.0320247901732063
07:44 ninjax INFO    : Key: lambda_2: ESS = 37432, Rhat = 1.0180307062644522
07:44 ninjax INFO    : Key: cos_iota: ESS = 27444, Rhat = 1.0230718899674405
07:44 ninjax INFO    : Key: d_L: ESS = 28655, Rhat = 1.0228178787641684
07:44 ninjax INFO    : Key: t_c: ESS = 23923, Rhat = 1.0255265470996973
07:44 ninjax INFO    : Key: phase_c: ESS = 22620, Rhat = 1.0278703058734122
07:44 ninjax INFO    : Key: psi: ESS = 23759, Rhat = 1.0312204104694465
07:44 ninjax INFO    : Key: ra: ESS = 19271, Rhat = 1.0309941153407023
07:44 ninjax INFO    : Key: sin_dec: ESS = 19692, Rhat = 1.0305227015773846
07:44 ninjax INFO    : Key: eta: ESS = 20019, Rhat = 1.0301714766451866
07:44 ninjax INFO    : Key: iota: ESS = 27444, Rhat = 1.0230718899674405
07:44 ninjax INFO    : Key: dec: ESS = 19692, Rhat = 1.0305227015773846
07:44 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.542 +/- 0.179
q: 0.743 +/- 0.223
s1_z: 0.011 +/- 0.027
s2_z: 0.010 +/- 0.027
lambda_1: 1875.076 +/- 1450.911
lambda_2: 1960.626 +/- 1468.071
cos_iota: 0.046 +/- 0.582
d_L: 656.341 +/- 205.810
t_c: 0.027 +/- 0.030
phase_c: 3.267 +/- 1.772
psi: 1.556 +/- 0.860
ra: 3.224 +/- 1.238
sin_dec: -0.225 +/- 0.464
Log probability: 42.360 +/- 46.553
Local acceptance: 0.947 +/- 0.225
Global acceptance: 0.015 +/- 0.120
Max loss: 22.670, Min loss: 5.381
Production summary
==========
M_c: 1.538 +/- 0.000
q: 0.856 +/- 0.093
s1_z: 0.021 +/- 0.020
s2_z: 0.015 +/- 0.023
lambda_1: 445.420 +/- 454.757
lambda_2: 708.790 +/- 656.799
cos_iota: 0.476 +/- 0.598
d_L: 459.510 +/- 103.858
t_c: 0.026 +/- 0.001
phase_c: 3.138 +/- 1.802
psi: 1.572 +/- 0.882
ra: 3.643 +/- 0.048
sin_dec: -0.355 +/- 0.064
Log probability: 97.219 +/- 2.792
Local acceptance: 0.876 +/- 0.330
Global acceptance: 0.102 +/- 0.303
DONE

JOB STATISTICS
==============
Job ID: 10918560
Cluster: snellius
User/Group: twouters2/twouters2
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 00:10:22
CPU Efficiency: 5.61% of 03:04:48 core-walltime
Job Wall-clock time: 00:11:33
Memory Utilized: 4.14 GB
Memory Efficiency: 41.42% of 10.00 GB (10.00 GB/node)
