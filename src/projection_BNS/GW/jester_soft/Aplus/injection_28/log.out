Wed Apr  2 07:33:42 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
07:33 ninjax INFO    : Checking and setting outdir
07:33 ninjax INFO    : Found generation prior file ./Aplus/injection_28/generation_prior.prior
07:33 ninjax INFO    : The outdir is set to ./Aplus/injection_28
07:33 ninjax INFO    : Loading the given config
07:33 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
07:33 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
07:33 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/jester_soft/Aplus/injection_28/complete_config.json
07:33 ninjax INFO    : No seed specified. Generating a random seed: 49579
07:33 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 861300
07:33 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 87999
07:33 ninjax INFO    : Loading the priors
07:33 ninjax INFO    : Setting up the prior
07:33 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
07:33 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
07:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
07:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
07:33 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
07:33 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
07:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
07:33 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
07:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
07:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
07:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
07:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
07:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
07:33 ninjax INFO    : Setting up the generation prior
07:33 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 1.99, naming=["mass_1_source"])
07:33 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 1.99, naming=["mass_2_source"])
07:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
07:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
07:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
07:33 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
07:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
07:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
07:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
07:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
07:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
07:33 ninjax INFO    : Finished prior setup
07:33 ninjax INFO    : Setting the transforms
07:33 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
07:33 ninjax INFO    : transforms_str_list has 3 elements
07:33 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
07:33 ninjax INFO    : Setting the likelihood
07:33 ninjax INFO    : GW likelihood provided, setting up the GW pipe
07:33 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz
07:33 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz for BNS injections
07:33 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
07:33 ninjax INFO    : self.is_BNS_run is True
07:33 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
07:33 ninjax INFO    : GW run is an injection
07:33 ninjax INFO    : Setting up GW injection . . . 
07:33 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
07:33 ninjax INFO    : Generating new injection
07:33 ninjax INFO    : Sanity check: generated parameters:
07:33 ninjax INFO    : {'mass_1_source': 1.4996298124752785, 'mass_2_source': 1.724530527782477, 's1_z': -0.03422226289479646, 's2_z': 0.040393751891243265, 'cos_iota': 0.252688211699859, 'd_L': 174.01441288085337, 't_c': 0.030893423803911302, 'phase_c': 0.31943635733549247, 'psi': 2.996315835836055, 'ra': 6.255936508262715, 'sin_dec': -0.4593755110237825}
07:33 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz . . . 
07:33 ninjax INFO    : Injected lambda_1: 39.32616599810485
07:33 ninjax INFO    : Injected lambda_2: 113.560051594541
07:33 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.4543160128071124 is 128.0
07:33 ninjax INFO    : After transforms, the injection parameters are:
07:33 ninjax INFO    : {'mass_1_source': 1.724530527782477, 'mass_2_source': 1.4996298124752785, 's1_z': -0.03422226289479646, 's2_z': 0.040393751891243265, 'cos_iota': 0.252688211699859, 'd_L': 174.01441288085337, 't_c': 0.030893423803911302, 'phase_c': 0.31943635733549247, 'psi': 2.996315835836055, 'ra': 6.255936508262715, 'sin_dec': -0.4593755110237825, 'q': 0.8695872808952871, 'M_c': 1.4543160128071124, 'eta': 0.24878356636773655, 'iota': Array(1.3153387, dtype=float64, weak_type=True), 'dec': Array(-0.47729201, dtype=float64, weak_type=True), 'lambda_1': 39.32616599810485, 'lambda_2': 113.560051594541}
07:33 ninjax INFO    : The trial injection parameters are {'M_c': 1.4543160128071124, 'eta': 0.24878356636773655, 's1_z': -0.03422226289479646, 's2_z': 0.040393751891243265, 'lambda_1': 39.32616599810485, 'lambda_2': 113.560051594541, 'd_L': 174.01441288085337, 'phase_c': 0.31943635733549247, 'iota': 1.3153386991304858, 't_c': 0.030893423803911302, 'psi': 2.996315835836055, 'ra': 6.255936508262715, 'dec': -0.4772920089735955}
07:33 ninjax INFO    : Injecting signals . . .
07:33 ninjax INFO    : self.ifos
07:33 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
07:33 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
07:33 ninjax INFO    : [ 1.41403733e-23-3.04676820e-24j  1.01726277e-23+2.35708094e-23j
 -1.41327065e-23+1.92231309e-23j ...
  6.02579132e-24-1.33102107e-23j -2.50337236e-23+1.85602397e-24j
 -1.20826506e-23+6.62520296e-25j]
07:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
07:33 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
07:33 ninjax INFO    : [-3.53209431e-23-2.56848742e-23j -9.82536803e-23+2.10867071e-23j
  1.09698344e-23-9.45547587e-23j ...
  2.84668523e-23-1.49819529e-23j  1.90578116e-23-9.81509693e-24j
  2.91796345e-24-2.95070271e-23j]
07:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
07:33 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
07:33 ninjax INFO    : [ 1.32376211e-23-6.67814296e-23j  9.69699992e-23-3.77211640e-23j
 -2.06531246e-23-5.37657500e-23j ...
 -6.47614138e-24+2.71189744e-23j -5.40372571e-24-2.22775242e-23j
  6.22641689e-24+8.74378159e-24j]
07:33 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
07:33 ninjax INFO    : SNR for ifo H1 is 4.2034855074437285
07:33 ninjax INFO    : SNR for ifo L1 is 6.272015248753928
07:33 ninjax INFO    : SNR for ifo V1 is 13.56607688421363
07:33 ninjax INFO    : The network SNR is 15.525653213964514
07:33 ninjax INFO    : Network SNR passes threshold
07:33 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
07:33 ninjax INFO    :    mass_1_source: 1.724530527782477
07:33 ninjax INFO    :    mass_2_source: 1.4996298124752785
07:33 ninjax INFO    :    s1_z: -0.03422226289479646
07:33 ninjax INFO    :    s2_z: 0.040393751891243265
07:33 ninjax INFO    :    cos_iota: 0.252688211699859
07:33 ninjax INFO    :    d_L: 174.01441288085337
07:33 ninjax INFO    :    t_c: 0.030893423803911302
07:33 ninjax INFO    :    phase_c: 0.31943635733549247
07:33 ninjax INFO    :    psi: 2.996315835836055
07:33 ninjax INFO    :    ra: 6.255936508262715
07:33 ninjax INFO    :    sin_dec: -0.4593755110237825
07:33 ninjax INFO    :    q: 0.8695872808952871
07:33 ninjax INFO    :    M_c: 1.4543160128071124
07:33 ninjax INFO    :    eta: 0.24878356636773655
07:33 ninjax INFO    :    iota: 1.3153386991304858
07:33 ninjax INFO    :    dec: -0.4772920089735955
07:33 ninjax INFO    :    lambda_1: 39.32616599810485
07:33 ninjax INFO    :    lambda_2: 113.560051594541
07:33 ninjax INFO    :    H1_SNR: 4.2034855074437285
07:33 ninjax INFO    :    L1_SNR: 6.272015248753928
07:33 ninjax INFO    :    V1_SNR: 13.56607688421363
07:33 ninjax INFO    :    network_SNR: 15.525653213964514
07:33 ninjax INFO    :    epoch: 126.0
07:33 ninjax INFO    :    gmst: 2.7288901910520846
07:33 ninjax INFO    :    duration: 128.0
07:33 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
07:33 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
07:33 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
07:36 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 148.05666303634644 seconds = 2.467611050605774 minutes
07:36 ninjax INFO    : The priors are not modified after their initialization
07:36 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
07:36 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
07:36 ninjax INFO    : sample: {'M_c': Array([1.01739597, 1.28809993, 1.37419177], dtype=float64), 'q': Array([0.75675556, 0.500584  , 0.86238096], dtype=float64), 's1_z': Array([-0.02347864,  0.0182229 ,  0.00600861], dtype=float64), 's2_z': Array([ 0.03116115,  0.01630146, -0.01010521], dtype=float64), 'lambda_1': Array([2040.76375531, 4064.7799205 ,  102.73115738], dtype=float64), 'lambda_2': Array([ 762.21926904, 4275.91245885,  637.12767402], dtype=float64), 'cos_iota': Array([-0.08578421, -0.92631552, -0.00433479], dtype=float64), 'd_L': Array([784.09906403, 803.33428933, 472.67605216], dtype=float64), 't_c': Array([-0.08075075, -0.09994706, -0.08137632], dtype=float64), 'phase_c': Array([3.64413917, 0.55120902, 1.96748537], dtype=float64), 'psi': Array([2.0384444 , 0.9183257 , 2.83411091], dtype=float64), 'ra': Array([0.27969477, 1.83803779, 4.34985954], dtype=float64), 'sin_dec': Array([0.03630604, 0.00102601, 0.94612649], dtype=float64)}
07:36 ninjax INFO    : log_prob: [ -3.96718514 -18.67508679 -13.05259408]
07:36 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.724530527782477, 'mass_2_source': 1.4996298124752785, 's1_z': -0.03422226289479646, 's2_z': 0.040393751891243265, 'cos_iota': 0.252688211699859, 'd_L': 174.01441288085337, 't_c': 0.030893423803911302, 'phase_c': 0.31943635733549247, 'psi': 2.996315835836055, 'ra': 6.255936508262715, 'sin_dec': -0.4593755110237825, 'q': 0.8695872808952871, 'M_c': 1.4543160128071124, 'eta': 0.24878356636773655, 'iota': Array(1.3153387, dtype=float64, weak_type=True), 'dec': Array(-0.47729201, dtype=float64, weak_type=True), 'lambda_1': 39.32616599810485, 'lambda_2': 113.560051594541, 'H1_SNR': 4.2034855074437285, 'L1_SNR': 6.272015248753928, 'V1_SNR': 13.56607688421363, 'network_SNR': 15.525653213964514, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
07:36 ninjax INFO    : log_prob at the injection parameters is: 82.58672662489637
07:36 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
07:36 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
07:36 ninjax INFO    : Ninjax setup complete.
07:36 ninjax INFO    : Saving output to ./Aplus/injection_28/
07:36 ninjax INFO    : Using polynomial learning rate scheduler
07:36 ninjax INFO    : The hyperparameters passed to flowMC and jim are
07:36 ninjax INFO    :    n_loop_training: 200
07:36 ninjax INFO    :    n_loop_production: 10
07:36 ninjax INFO    :    n_local_steps: 100
07:36 ninjax INFO    :    n_global_steps: 1000
07:36 ninjax INFO    :    n_epochs: 25
07:36 ninjax INFO    :    n_chains: 1000
07:36 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x1464abff3be0>
07:36 ninjax INFO    :    max_samples: 50000
07:36 ninjax INFO    :    momentum: 0.9
07:36 ninjax INFO    :    batch_size: 30000
07:36 ninjax INFO    :    use_global: True
07:36 ninjax INFO    :    keep_quantile: 0.0
07:36 ninjax INFO    :    train_thinning: 10
07:36 ninjax INFO    :    output_thinning: 50
07:36 ninjax INFO    :    n_sample_max: 10000
07:36 ninjax INFO    :    num_layers: 10
07:36 ninjax INFO    :    hidden_size: [128, 128]
07:36 ninjax INFO    :    num_bins: 8
07:36 ninjax INFO    :    save_training_chains: False
07:36 ninjax INFO    :    eps_mass_matrix: 1e-05
07:36 ninjax INFO    :    use_scheduler: True
07:36 ninjax INFO    :    use_temperature: False
07:36 ninjax INFO    :    which_temperature_schedule: exponential
07:36 ninjax INFO    :    starting_temperature: 2.0
07:36 ninjax INFO    :    stop_tempering_iteration: 75
07:36 ninjax INFO    :    stopping_criterion_global_acc: 0.1
07:36 ninjax INFO    :    stopping_criterion_loss: -inf
07:36 ninjax INFO    :    nf_model_kwargs: {}
07:36 ninjax INFO    :    local sampler arg not shown (pretty print)
07:36 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[ 1.53390915e-23  1.08502718e-23 -1.40513783e-23  4.94696003e-23
 -2.59491423e-24  1.06365528e-23 -5.55342427e-24 -1.82273544e-23
 -2.23151661e-24  5.70368601e-23]
[-4.57665566e-24  2.17501443e-23  1.72830395e-23 -4.20371981e-23
 -4.43609726e-23 -1.66785629e-23 -6.02869240e-24  5.29164849e-23
 -1.99132428e-24  4.71454324e-23]
Checking the noise that was generated in inject_signal ifo:
[-3.31017751e-23 -9.55737742e-23  1.38587105e-23  4.76794129e-23
 -8.57879232e-23  1.40030398e-24  3.45973879e-23 -6.44929578e-23
  4.36807914e-23 -5.01404959e-23]
[-2.38179729e-23  2.21914383e-23 -9.43333244e-23  7.85336528e-23
  1.71723567e-24 -1.43988981e-23  3.09013909e-23 -2.90841636e-25
  2.61914250e-23  4.67005179e-24]
Checking the noise that was generated in inject_signal ifo:
[ 1.81618181e-23  1.03562488e-22 -1.30063507e-23  1.23268515e-23
 -6.13547943e-23 -2.19607128e-23  5.00166234e-23  6.05277229e-23
  4.79639731e-23  2.45960277e-24]
[-6.05253506e-23 -3.32638895e-23 -5.15755214e-23 -1.45382748e-23
 -4.02999533e-23 -6.99025476e-23 -8.65769699e-23 -4.34316038e-23
 -9.54323816e-23 -9.60162545e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.10982871055603027 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.724530527782477, 'mass_2_source': 1.4996298124752785, 's1_z': -0.03422226289479646, 's2_z': 0.040393751891243265, 'cos_iota': 0.252688211699859, 'd_L': 174.01441288085337, 't_c': 0.030893423803911302, 'phase_c': 0.31943635733549247, 'psi': 2.996315835836055, 'ra': 6.255936508262715, 'sin_dec': -0.4593755110237825, 'q': 0.8695872808952871, 'M_c': 1.4543160128071124, 'eta': 0.24878356636773655, 'iota': Array(1.3153387, dtype=float64, weak_type=True), 'dec': Array(-0.47729201, dtype=float64, weak_type=True), 'lambda_1': 39.32616599810485, 'lambda_2': 113.560051594541, 'H1_SNR': 4.2034855074437285, 'L1_SNR': 6.272015248753928, 'V1_SNR': 13.56607688421363, 'network_SNR': 15.525653213964514, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5173938274383545 seconds
Time for h_sky_low and h_sky_center: 5.349421262741089 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.6725208759307861
Going to compute coefficients . . .
Time for computing coefficients: 126.55453252792358 seconds
Time for computing coefficients: 7.085482120513916 seconds
Time for computing coefficients: 7.219022512435913 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:01<6:41:42, 121.12s/it]Tuning global sampler:   1%|          | 2/200 [02:05<2:53:29, 52.57s/it] Tuning global sampler:   2%|▏         | 3/200 [02:10<1:40:45, 30.69s/it]Tuning global sampler:   2%|▏         | 4/200 [02:14<1:06:39, 20.40s/it]Tuning global sampler:   2%|▎         | 5/200 [02:19<47:50, 14.72s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:24<36:30, 11.29s/it]Tuning global sampler:   4%|▎         | 7/200 [02:29<30:10,  9.38s/it]Tuning global sampler:   4%|▍         | 8/200 [02:34<25:11,  7.87s/it]Tuning global sampler:   4%|▍         | 9/200 [02:38<21:46,  6.84s/it]Tuning global sampler:   5%|▌         | 10/200 [02:43<19:18,  6.10s/it]Tuning global sampler:   6%|▌         | 11/200 [02:47<17:46,  5.64s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:40,  5.32s/it]Tuning global sampler:   6%|▋         | 13/200 [02:57<15:53,  5.10s/it]Tuning global sampler:   7%|▋         | 14/200 [03:01<15:24,  4.97s/it]Tuning global sampler:   8%|▊         | 15/200 [03:06<15:02,  4.88s/it]Tuning global sampler:   8%|▊         | 16/200 [03:11<14:45,  4.81s/it]Tuning global sampler:   8%|▊         | 17/200 [03:15<14:31,  4.76s/it]Tuning global sampler:   9%|▉         | 18/200 [03:20<14:20,  4.73s/it]Tuning global sampler:  10%|▉         | 19/200 [03:25<14:11,  4.70s/it]Tuning global sampler:  10%|█         | 20/200 [03:29<14:04,  4.69s/it]Tuning global sampler:  10%|█         | 21/200 [03:34<13:58,  4.68s/it]Tuning global sampler:  11%|█         | 22/200 [03:39<14:39,  4.94s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:44<14:17,  4.85s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:49<13:51,  4.72s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:53<13:30,  4.63s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:57<13:14,  4.56s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:02<13:01,  4.52s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:06<12:51,  4.48s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:11<12:42,  4.46s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:15<12:36,  4.45s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:19<12:29,  4.44s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:24<12:23,  4.43s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:28<12:16,  4.41s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:33<12:09,  4.40s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:37<12:06,  4.40s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:41<12:01,  4.40s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:46<11:57,  4.40s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:50<11:53,  4.40s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:55<11:49,  4.41s/it]Tuning global sampler:  20%|██        | 40/200 [04:59<11:44,  4.40s/it]Tuning global sampler:  20%|██        | 41/200 [05:04<12:25,  4.69s/it]Tuning global sampler:  21%|██        | 42/200 [05:09<12:07,  4.60s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:13<11:53,  4.55s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:18<11:41,  4.49s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:22<11:30,  4.45s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:26<11:22,  4.43s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:31<11:17,  4.43s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:35<11:10,  4.41s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:39<11:06,  4.41s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:44<11:01,  4.41s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:48<10:56,  4.41s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:53<10:51,  4.40s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:57<10:46,  4.40s/it]