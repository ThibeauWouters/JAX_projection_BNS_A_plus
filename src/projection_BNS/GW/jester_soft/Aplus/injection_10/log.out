Wed Apr  2 07:33:39 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
07:33 ninjax INFO    : Checking and setting outdir
07:33 ninjax INFO    : Found generation prior file ./Aplus/injection_10/generation_prior.prior
07:33 ninjax INFO    : The outdir is set to ./Aplus/injection_10
07:33 ninjax INFO    : Loading the given config
07:33 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
07:33 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
07:33 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/jester_soft/Aplus/injection_10/complete_config.json
07:33 ninjax INFO    : No seed specified. Generating a random seed: 34244
07:33 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 42396
07:33 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 253667
07:33 ninjax INFO    : Loading the priors
07:33 ninjax INFO    : Setting up the prior
07:33 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
07:33 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
07:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
07:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
07:33 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
07:33 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
07:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
07:33 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
07:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
07:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
07:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
07:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
07:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
07:33 ninjax INFO    : Setting up the generation prior
07:33 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 1.99, naming=["mass_1_source"])
07:33 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 1.99, naming=["mass_2_source"])
07:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
07:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
07:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
07:33 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
07:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
07:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
07:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
07:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
07:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
07:33 ninjax INFO    : Finished prior setup
07:33 ninjax INFO    : Setting the transforms
07:33 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
07:33 ninjax INFO    : transforms_str_list has 3 elements
07:33 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
07:33 ninjax INFO    : Setting the likelihood
07:33 ninjax INFO    : GW likelihood provided, setting up the GW pipe
07:33 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz
07:33 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz for BNS injections
07:33 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
07:33 ninjax INFO    : self.is_BNS_run is True
07:33 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
07:33 ninjax INFO    : GW run is an injection
07:33 ninjax INFO    : Setting up GW injection . . . 
07:33 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
07:33 ninjax INFO    : Generating new injection
07:33 ninjax INFO    : Sanity check: generated parameters:
07:33 ninjax INFO    : {'mass_1_source': 1.0467359497434534, 'mass_2_source': 1.8412161311000912, 's1_z': 0.02546738490351455, 's2_z': -0.03206833708084809, 'cos_iota': -0.755802255716925, 'd_L': 301.4686434828833, 't_c': -0.030402693046511373, 'phase_c': 2.4869011800970453, 'psi': 1.7776511669827306, 'ra': 6.084613929035385, 'sin_dec': 0.5984224518188288}
07:33 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz . . . 
07:33 ninjax INFO    : Injected lambda_1: 22.194493269586005
07:33 ninjax INFO    : Injected lambda_2: 1341.4406758196346
07:33 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.2807568486187266 is 256.0
07:33 ninjax INFO    : After transforms, the injection parameters are:
07:33 ninjax INFO    : {'mass_1_source': 1.8412161311000912, 'mass_2_source': 1.0467359497434534, 's1_z': 0.02546738490351455, 's2_z': -0.03206833708084809, 'cos_iota': -0.755802255716925, 'd_L': 301.4686434828833, 't_c': -0.030402693046511373, 'phase_c': 2.4869011800970453, 'psi': 1.7776511669827306, 'ra': 6.084613929035385, 'sin_dec': 0.5984224518188288, 'q': 0.5685024870589467, 'M_c': 1.2807568486187266, 'eta': 0.2310797801250191, 'iota': Array(2.42767477, dtype=float64, weak_type=True), 'dec': Array(0.64153063, dtype=float64, weak_type=True), 'lambda_1': 22.194493269586005, 'lambda_2': 1341.4406758196346}
07:33 ninjax INFO    : The trial injection parameters are {'M_c': 1.2807568486187266, 'eta': 0.2310797801250191, 's1_z': 0.02546738490351455, 's2_z': -0.03206833708084809, 'lambda_1': 22.194493269586005, 'lambda_2': 1341.4406758196346, 'd_L': 301.4686434828833, 'phase_c': 2.4869011800970453, 'iota': 2.4276747736291484, 't_c': -0.030402693046511373, 'psi': 1.7776511669827306, 'ra': 6.084613929035385, 'dec': 0.6415306283386465}
07:33 ninjax INFO    : Injecting signals . . .
07:33 ninjax INFO    : self.ifos
07:33 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
07:33 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
07:33 ninjax INFO    : [ 7.75231409e-24+4.54426792e-23j -8.81270022e-23-8.32359157e-23j
  1.05437808e-23+1.73387024e-23j ...
 -9.35382689e-24+5.03845240e-23j -3.07612999e-23-2.59347055e-23j
  2.30886158e-23-2.97717721e-23j]
07:33 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
07:33 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
07:33 ninjax INFO    : [ 3.52590512e-23+6.24852256e-23j  6.98633414e-23+8.01543278e-23j
 -4.60850493e-23+9.81070053e-23j ...
 -5.00558574e-23-1.59838316e-23j  1.34545247e-23-2.94897476e-23j
 -2.39707253e-23+2.82652987e-23j]
07:33 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
07:33 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
07:33 ninjax INFO    : [-2.35481724e-23+2.79525337e-23j -5.64717572e-23+2.15557863e-23j
 -2.88823467e-23-3.83549278e-23j ...
 -5.76500392e-23+4.93526574e-23j -4.66937535e-23+1.36843460e-23j
  2.39604700e-23+1.07882200e-22j]
07:33 ninjax INFO    : [1.43183556e-46 1.43058540e-46 1.42935095e-46 ... 6.39793039e-47
 6.39795354e-47 6.39797668e-47]
07:33 ninjax INFO    : SNR for ifo H1 is 13.00697776518307
07:33 ninjax INFO    : SNR for ifo L1 is 7.4418356376295485
07:33 ninjax INFO    : SNR for ifo V1 is 5.049380843413572
07:33 ninjax INFO    : The network SNR is 15.813242398170335
07:33 ninjax INFO    : Network SNR passes threshold
07:33 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
07:33 ninjax INFO    :    mass_1_source: 1.8412161311000912
07:33 ninjax INFO    :    mass_2_source: 1.0467359497434534
07:33 ninjax INFO    :    s1_z: 0.02546738490351455
07:33 ninjax INFO    :    s2_z: -0.03206833708084809
07:33 ninjax INFO    :    cos_iota: -0.755802255716925
07:33 ninjax INFO    :    d_L: 301.4686434828833
07:33 ninjax INFO    :    t_c: -0.030402693046511373
07:33 ninjax INFO    :    phase_c: 2.4869011800970453
07:33 ninjax INFO    :    psi: 1.7776511669827306
07:33 ninjax INFO    :    ra: 6.084613929035385
07:33 ninjax INFO    :    sin_dec: 0.5984224518188288
07:33 ninjax INFO    :    q: 0.5685024870589467
07:33 ninjax INFO    :    M_c: 1.2807568486187266
07:33 ninjax INFO    :    eta: 0.2310797801250191
07:33 ninjax INFO    :    iota: 2.4276747736291484
07:33 ninjax INFO    :    dec: 0.6415306283386465
07:33 ninjax INFO    :    lambda_1: 22.194493269586005
07:33 ninjax INFO    :    lambda_2: 1341.4406758196346
07:33 ninjax INFO    :    H1_SNR: 13.00697776518307
07:33 ninjax INFO    :    L1_SNR: 7.4418356376295485
07:33 ninjax INFO    :    V1_SNR: 5.049380843413572
07:33 ninjax INFO    :    network_SNR: 15.813242398170335
07:33 ninjax INFO    :    epoch: 254.0
07:33 ninjax INFO    :    gmst: 2.7288901910520846
07:33 ninjax INFO    :    duration: 256.0
07:33 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
07:33 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
07:33 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
07:36 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 182.42199611663818 seconds = 3.04036660194397 minutes
07:36 ninjax INFO    : The priors are not modified after their initialization
07:36 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
07:36 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
07:36 ninjax INFO    : sample: {'M_c': Array([1.42698281, 1.4085453 , 2.13313989], dtype=float64), 'q': Array([0.71453338, 0.43071644, 0.92566217], dtype=float64), 's1_z': Array([-0.04323995,  0.03924444,  0.00459132], dtype=float64), 's2_z': Array([-0.00081955, -0.03121091,  0.0042729 ], dtype=float64), 'lambda_1': Array([3234.72668812,   46.62007467, 1233.56259117], dtype=float64), 'lambda_2': Array([2004.74409707, 1677.85119757, 1174.64870275], dtype=float64), 'cos_iota': Array([-0.91202317, -0.16403978,  0.07195372], dtype=float64), 'd_L': Array([868.39375217, 930.99982062, 537.39816073], dtype=float64), 't_c': Array([0.05771358, 0.0325143 , 0.01602109], dtype=float64), 'phase_c': Array([5.40181318, 3.00731216, 3.31839976], dtype=float64), 'psi': Array([2.40670392, 0.01136674, 1.53059515], dtype=float64), 'ra': Array([0.66783629, 5.72881478, 1.19552956], dtype=float64), 'sin_dec': Array([0.6300259 , 0.73462888, 0.09438375], dtype=float64)}
07:37 ninjax INFO    : log_prob: [-49.63616402   1.68443275 -34.73525264]
07:37 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.8412161311000912, 'mass_2_source': 1.0467359497434534, 's1_z': 0.02546738490351455, 's2_z': -0.03206833708084809, 'cos_iota': -0.755802255716925, 'd_L': 301.4686434828833, 't_c': -0.030402693046511373, 'phase_c': 2.4869011800970453, 'psi': 1.7776511669827306, 'ra': 6.084613929035385, 'sin_dec': 0.5984224518188288, 'q': 0.5685024870589467, 'M_c': 1.2807568486187266, 'eta': 0.2310797801250191, 'iota': Array(2.42767477, dtype=float64, weak_type=True), 'dec': Array(0.64153063, dtype=float64, weak_type=True), 'lambda_1': 22.194493269586005, 'lambda_2': 1341.4406758196346, 'H1_SNR': 13.00697776518307, 'L1_SNR': 7.4418356376295485, 'V1_SNR': 5.049380843413572, 'network_SNR': 15.813242398170335, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
07:37 ninjax INFO    : log_prob at the injection parameters is: 104.29753922562335
07:37 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
07:37 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
07:37 ninjax INFO    : Ninjax setup complete.
07:37 ninjax INFO    : Saving output to ./Aplus/injection_10/
07:37 ninjax INFO    : Using polynomial learning rate scheduler
07:37 ninjax INFO    : The hyperparameters passed to flowMC and jim are
07:37 ninjax INFO    :    n_loop_training: 200
07:37 ninjax INFO    :    n_loop_production: 10
07:37 ninjax INFO    :    n_local_steps: 100
07:37 ninjax INFO    :    n_global_steps: 1000
07:37 ninjax INFO    :    n_epochs: 25
07:37 ninjax INFO    :    n_chains: 1000
07:37 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x14890e9924d0>
07:37 ninjax INFO    :    max_samples: 50000
07:37 ninjax INFO    :    momentum: 0.9
07:37 ninjax INFO    :    batch_size: 30000
07:37 ninjax INFO    :    use_global: True
07:37 ninjax INFO    :    keep_quantile: 0.0
07:37 ninjax INFO    :    train_thinning: 10
07:37 ninjax INFO    :    output_thinning: 50
07:37 ninjax INFO    :    n_sample_max: 10000
07:37 ninjax INFO    :    num_layers: 10
07:37 ninjax INFO    :    hidden_size: [128, 128]
07:37 ninjax INFO    :    num_bins: 8
07:37 ninjax INFO    :    save_training_chains: False
07:37 ninjax INFO    :    eps_mass_matrix: 1e-05
07:37 ninjax INFO    :    use_scheduler: True
07:37 ninjax INFO    :    use_temperature: False
07:37 ninjax INFO    :    which_temperature_schedule: exponential
07:37 ninjax INFO    :    starting_temperature: 2.0
07:37 ninjax INFO    :    stop_tempering_iteration: 75
07:37 ninjax INFO    :    stopping_criterion_global_acc: 0.1
07:37 ninjax INFO    :    stopping_criterion_loss: -inf
07:37 ninjax INFO    :    nf_model_kwargs: {}
07:37 ninjax INFO    :    local sampler arg not shown (pretty print)
07:37 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[ 9.54009862e-24 -9.26041219e-23  1.64410231e-23 -4.41947234e-23
  3.66044647e-23 -1.55066757e-22 -5.23420198e-23  4.36458539e-23
 -5.51161457e-23  1.18747966e-23]
[ 3.97015162e-23 -7.92239374e-23  1.61782889e-23 -3.82961074e-23
  3.14750869e-23 -6.19744294e-23 -1.59864263e-23 -8.23336953e-23
  2.16654563e-25  7.32860295e-23]
Checking the noise that was generated in inject_signal ifo:
[ 3.68876088e-23  7.00179420e-23 -4.79728931e-23  2.80283117e-23
 -2.57227135e-23 -3.90781557e-23  1.98750328e-23 -1.08293722e-23
  8.36576261e-23  4.06658279e-23]
[ 6.55156875e-23  7.67182576e-23  1.00981220e-22 -1.55845352e-23
 -3.12424319e-23  2.35613205e-23  8.79101011e-24 -7.70790293e-23
 -5.61240186e-23 -6.10809477e-23]
Checking the noise that was generated in inject_signal ifo:
[-2.37908413e-23 -5.77754329e-23 -2.64039952e-23  3.60971076e-23
  2.30539114e-23 -2.27704785e-23  1.28779578e-24 -6.81192927e-23
 -2.68038232e-23 -1.94177879e-23]
[ 2.49998209e-23  2.42154501e-23 -3.99757732e-23  6.02261844e-23
  1.33361679e-23  2.07642576e-23 -1.36385504e-22  6.29669927e-23
  1.50152293e-23 -3.49228106e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.17995357513427734 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.8412161311000912, 'mass_2_source': 1.0467359497434534, 's1_z': 0.02546738490351455, 's2_z': -0.03206833708084809, 'cos_iota': -0.755802255716925, 'd_L': 301.4686434828833, 't_c': -0.030402693046511373, 'phase_c': 2.4869011800970453, 'psi': 1.7776511669827306, 'ra': 6.084613929035385, 'sin_dec': 0.5984224518188288, 'q': 0.5685024870589467, 'M_c': 1.2807568486187266, 'eta': 0.2310797801250191, 'iota': Array(2.42767477, dtype=float64, weak_type=True), 'dec': Array(0.64153063, dtype=float64, weak_type=True), 'lambda_1': 22.194493269586005, 'lambda_2': 1341.4406758196346, 'H1_SNR': 13.00697776518307, 'L1_SNR': 7.4418356376295485, 'V1_SNR': 5.049380843413572, 'network_SNR': 15.813242398170335, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5101532936096191 seconds
Time for h_sky_low and h_sky_center: 5.408458232879639 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.731501579284668
Going to compute coefficients . . .
Time for computing coefficients: 160.56671047210693 seconds
Time for computing coefficients: 7.347300291061401 seconds
Time for computing coefficients: 7.148690223693848 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:00<6:40:20, 120.70s/it]Tuning global sampler:   1%|          | 2/200 [02:06<2:54:42, 52.94s/it] Tuning global sampler:   2%|▏         | 3/200 [02:10<1:41:24, 30.88s/it]Tuning global sampler:   2%|▏         | 4/200 [02:15<1:07:00, 20.51s/it]Tuning global sampler:   2%|▎         | 5/200 [02:20<48:00, 14.77s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:24<36:34, 11.31s/it]Tuning global sampler:   4%|▎         | 7/200 [02:29<29:15,  9.10s/it]Tuning global sampler:   4%|▍         | 8/200 [02:33<24:32,  7.67s/it]Tuning global sampler:   4%|▍         | 9/200 [02:38<21:18,  6.69s/it]Tuning global sampler:   5%|▌         | 10/200 [02:42<18:57,  5.99s/it]Tuning global sampler:   6%|▌         | 11/200 [02:47<17:30,  5.56s/it]Tuning global sampler:   6%|▌         | 12/200 [02:51<16:29,  5.27s/it]Tuning global sampler:   6%|▋         | 13/200 [02:56<15:44,  5.05s/it]Tuning global sampler:   7%|▋         | 14/200 [03:01<15:16,  4.93s/it]Tuning global sampler:   8%|▊         | 15/200 [03:05<14:55,  4.84s/it]Tuning global sampler:   8%|▊         | 16/200 [03:10<14:38,  4.78s/it]Tuning global sampler:   8%|▊         | 17/200 [03:15<14:25,  4.73s/it]Tuning global sampler:   9%|▉         | 18/200 [03:19<14:15,  4.70s/it]Tuning global sampler:  10%|▉         | 19/200 [03:24<14:06,  4.68s/it]Tuning global sampler:  10%|█         | 20/200 [03:28<13:59,  4.66s/it]Tuning global sampler:  10%|█         | 21/200 [03:34<14:48,  4.96s/it]Tuning global sampler:  11%|█         | 22/200 [03:39<14:22,  4.85s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:43<14:04,  4.77s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:48<13:41,  4.67s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:52<13:21,  4.58s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:56<13:05,  4.52s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:01<12:54,  4.48s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:05<12:45,  4.45s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:10<12:37,  4.43s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:14<12:30,  4.42s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:18<12:24,  4.41s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:23<12:18,  4.40s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:27<12:11,  4.38s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:31<12:06,  4.38s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:36<12:02,  4.38s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:40<11:58,  4.38s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:45<11:54,  4.38s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:49<11:49,  4.38s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:53<11:45,  4.38s/it]Tuning global sampler:  20%|██        | 40/200 [04:58<11:40,  4.38s/it]Tuning global sampler:  20%|██        | 41/200 [05:03<12:25,  4.69s/it]Tuning global sampler:  21%|██        | 42/200 [05:08<12:06,  4.60s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:12<11:52,  4.54s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:16<11:39,  4.48s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:21<11:29,  4.45s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:25<11:22,  4.43s/it]