Wed Apr  2 07:33:42 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
07:33 ninjax INFO    : Checking and setting outdir
07:33 ninjax INFO    : Found generation prior file ./Aplus/injection_29/generation_prior.prior
07:33 ninjax INFO    : The outdir is set to ./Aplus/injection_29
07:33 ninjax INFO    : Loading the given config
07:33 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
07:33 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
07:33 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/jester_soft/Aplus/injection_29/complete_config.json
07:33 ninjax INFO    : No seed specified. Generating a random seed: 674635
07:33 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 677441
07:33 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 307037
07:33 ninjax INFO    : Loading the priors
07:33 ninjax INFO    : Setting up the prior
07:33 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
07:33 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
07:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
07:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
07:33 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
07:33 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
07:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
07:33 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
07:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
07:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
07:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
07:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
07:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
07:33 ninjax INFO    : Setting up the generation prior
07:33 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 1.99, naming=["mass_1_source"])
07:33 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 1.99, naming=["mass_2_source"])
07:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
07:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
07:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
07:33 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
07:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
07:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
07:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
07:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
07:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
07:33 ninjax INFO    : Finished prior setup
07:33 ninjax INFO    : Setting the transforms
07:33 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
07:33 ninjax INFO    : transforms_str_list has 3 elements
07:33 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
07:33 ninjax INFO    : Setting the likelihood
07:33 ninjax INFO    : GW likelihood provided, setting up the GW pipe
07:33 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz
07:33 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz for BNS injections
07:33 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
07:33 ninjax INFO    : self.is_BNS_run is True
07:33 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
07:33 ninjax INFO    : GW run is an injection
07:33 ninjax INFO    : Setting up GW injection . . . 
07:33 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
07:33 ninjax INFO    : Generating new injection
07:33 ninjax INFO    : Sanity check: generated parameters:
07:33 ninjax INFO    : {'mass_1_source': 1.6400558756116346, 'mass_2_source': 1.3684548776213086, 's1_z': 0.028707293636951528, 's2_z': 0.032413910702747156, 'cos_iota': -0.9245924671030039, 'd_L': 396.52219437850914, 't_c': -0.03960232689049575, 'phase_c': 1.086570193634082, 'psi': 0.27907572892723853, 'ra': 4.68403338384284, 'sin_dec': -0.7870774964601837}
07:33 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz . . . 
07:33 ninjax INFO    : Injected lambda_1: 58.147217584255316
07:33 ninjax INFO    : Injected lambda_2: 216.75395725509384
07:33 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.4198711646910478 is 128.0
07:33 ninjax INFO    : After transforms, the injection parameters are:
07:33 ninjax INFO    : {'mass_1_source': 1.6400558756116346, 'mass_2_source': 1.3684548776213086, 's1_z': 0.028707293636951528, 's2_z': 0.032413910702747156, 'cos_iota': -0.9245924671030039, 'd_L': 396.52219437850914, 't_c': -0.03960232689049575, 'phase_c': 1.086570193634082, 'psi': 0.27907572892723853, 'ra': 4.68403338384284, 'sin_dec': -0.7870774964601837, 'q': 0.834395277606602, 'M_c': 1.4198711646910478, 'eta': 0.24796249072083573, 'iota': Array(2.75076077, dtype=float64, weak_type=True), 'dec': Array(-0.90605682, dtype=float64, weak_type=True), 'lambda_1': 58.147217584255316, 'lambda_2': 216.75395725509384}
07:33 ninjax INFO    : The trial injection parameters are {'M_c': 1.4198711646910478, 'eta': 0.24796249072083573, 's1_z': 0.028707293636951528, 's2_z': 0.032413910702747156, 'lambda_1': 58.147217584255316, 'lambda_2': 216.75395725509384, 'd_L': 396.52219437850914, 'phase_c': 1.086570193634082, 'iota': 2.750760769331461, 't_c': -0.03960232689049575, 'psi': 0.27907572892723853, 'ra': 4.68403338384284, 'dec': -0.906056817278355}
07:33 ninjax INFO    : Injecting signals . . .
07:33 ninjax INFO    : self.ifos
07:33 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
07:33 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
07:33 ninjax INFO    : [-7.07814552e-23-1.20153408e-23j -3.53369354e-23-3.81536387e-23j
 -4.23173312e-23+7.99108088e-23j ...
  1.38105545e-23+1.09252917e-23j  9.26514821e-24+1.52245733e-23j
 -2.70017896e-24+1.26534570e-23j]
07:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
07:33 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
07:33 ninjax INFO    : [ 5.33423102e-23+6.06380309e-23j -6.52761796e-24+9.39794403e-24j
  9.91772856e-24-2.60852481e-23j ...
 -2.80251075e-24-2.45100440e-23j -8.21880027e-24+9.35380692e-24j
  2.62498916e-23+1.25571066e-23j]
07:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
07:33 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
07:33 ninjax INFO    : [-3.52606270e-23-4.05620763e-23j  2.95329494e-23+5.30706921e-23j
 -2.88873179e-23+1.14492513e-22j ...
 -3.94586282e-23-2.77551386e-24j  2.22026931e-23-6.37595416e-23j
 -3.99737755e-23+1.16131308e-24j]
07:33 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
07:33 ninjax INFO    : SNR for ifo H1 is 13.494643325447187
07:33 ninjax INFO    : SNR for ifo L1 is 14.17101639671185
07:33 ninjax INFO    : SNR for ifo V1 is 8.447831882616354
07:33 ninjax INFO    : The network SNR is 21.31405563739247
07:33 ninjax INFO    : Network SNR passes threshold
07:33 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
07:33 ninjax INFO    :    mass_1_source: 1.6400558756116346
07:33 ninjax INFO    :    mass_2_source: 1.3684548776213086
07:33 ninjax INFO    :    s1_z: 0.028707293636951528
07:33 ninjax INFO    :    s2_z: 0.032413910702747156
07:33 ninjax INFO    :    cos_iota: -0.9245924671030039
07:33 ninjax INFO    :    d_L: 396.52219437850914
07:33 ninjax INFO    :    t_c: -0.03960232689049575
07:33 ninjax INFO    :    phase_c: 1.086570193634082
07:33 ninjax INFO    :    psi: 0.27907572892723853
07:33 ninjax INFO    :    ra: 4.68403338384284
07:33 ninjax INFO    :    sin_dec: -0.7870774964601837
07:33 ninjax INFO    :    q: 0.834395277606602
07:33 ninjax INFO    :    M_c: 1.4198711646910478
07:33 ninjax INFO    :    eta: 0.24796249072083573
07:33 ninjax INFO    :    iota: 2.750760769331461
07:33 ninjax INFO    :    dec: -0.906056817278355
07:33 ninjax INFO    :    lambda_1: 58.147217584255316
07:33 ninjax INFO    :    lambda_2: 216.75395725509384
07:33 ninjax INFO    :    H1_SNR: 13.494643325447187
07:33 ninjax INFO    :    L1_SNR: 14.17101639671185
07:33 ninjax INFO    :    V1_SNR: 8.447831882616354
07:33 ninjax INFO    :    network_SNR: 21.31405563739247
07:33 ninjax INFO    :    epoch: 126.0
07:33 ninjax INFO    :    gmst: 2.7288901910520846
07:33 ninjax INFO    :    duration: 128.0
07:33 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
07:33 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
07:33 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
07:36 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 149.23160934448242 seconds = 2.487193489074707 minutes
07:36 ninjax INFO    : The priors are not modified after their initialization
07:36 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
07:36 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
07:36 ninjax INFO    : sample: {'M_c': Array([2.52649446, 1.73859903, 0.9909349 ], dtype=float64), 'q': Array([0.63769419, 0.44297466, 0.3777125 ], dtype=float64), 's1_z': Array([-0.03598237,  0.0056226 , -0.01426269], dtype=float64), 's2_z': Array([ 0.03123235,  0.01019756, -0.04426415], dtype=float64), 'lambda_1': Array([3110.40949114, 2834.31480613, 1607.81280997], dtype=float64), 'lambda_2': Array([1683.53184261, 4577.69495564, 3738.33863069], dtype=float64), 'cos_iota': Array([0.25588306, 0.09578233, 0.82520592], dtype=float64), 'd_L': Array([770.62720698, 546.41681065, 417.41015651], dtype=float64), 't_c': Array([-0.0436611 , -0.03539173, -0.02696489], dtype=float64), 'phase_c': Array([3.48784004, 5.0322081 , 0.25959251], dtype=float64), 'psi': Array([0.118682  , 1.7043259 , 0.02072628], dtype=float64), 'ra': Array([2.5712839 , 2.34688088, 3.17161766], dtype=float64), 'sin_dec': Array([-0.67429688,  0.32659763,  0.30527791], dtype=float64)}
07:36 ninjax INFO    : log_prob: [-10.72615005 -22.24664616 -19.85518083]
07:36 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.6400558756116346, 'mass_2_source': 1.3684548776213086, 's1_z': 0.028707293636951528, 's2_z': 0.032413910702747156, 'cos_iota': -0.9245924671030039, 'd_L': 396.52219437850914, 't_c': -0.03960232689049575, 'phase_c': 1.086570193634082, 'psi': 0.27907572892723853, 'ra': 4.68403338384284, 'sin_dec': -0.7870774964601837, 'q': 0.834395277606602, 'M_c': 1.4198711646910478, 'eta': 0.24796249072083573, 'iota': Array(2.75076077, dtype=float64, weak_type=True), 'dec': Array(-0.90605682, dtype=float64, weak_type=True), 'lambda_1': 58.147217584255316, 'lambda_2': 216.75395725509384, 'H1_SNR': 13.494643325447187, 'L1_SNR': 14.17101639671185, 'V1_SNR': 8.447831882616354, 'network_SNR': 21.31405563739247, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
07:36 ninjax INFO    : log_prob at the injection parameters is: 208.8534619977762
07:36 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
07:36 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
07:36 ninjax INFO    : Ninjax setup complete.
07:36 ninjax INFO    : Saving output to ./Aplus/injection_29/
07:36 ninjax INFO    : Using polynomial learning rate scheduler
07:36 ninjax INFO    : The hyperparameters passed to flowMC and jim are
07:36 ninjax INFO    :    n_loop_training: 200
07:36 ninjax INFO    :    n_loop_production: 10
07:36 ninjax INFO    :    n_local_steps: 100
07:36 ninjax INFO    :    n_global_steps: 1000
07:36 ninjax INFO    :    n_epochs: 25
07:36 ninjax INFO    :    n_chains: 1000
07:36 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x1502ae4ebbe0>
07:36 ninjax INFO    :    max_samples: 50000
07:36 ninjax INFO    :    momentum: 0.9
07:36 ninjax INFO    :    batch_size: 30000
07:36 ninjax INFO    :    use_global: True
07:36 ninjax INFO    :    keep_quantile: 0.0
07:36 ninjax INFO    :    train_thinning: 10
07:36 ninjax INFO    :    output_thinning: 50
07:36 ninjax INFO    :    n_sample_max: 10000
07:36 ninjax INFO    :    num_layers: 10
07:36 ninjax INFO    :    hidden_size: [128, 128]
07:36 ninjax INFO    :    num_bins: 8
07:36 ninjax INFO    :    save_training_chains: False
07:36 ninjax INFO    :    eps_mass_matrix: 1e-05
07:36 ninjax INFO    :    use_scheduler: True
07:36 ninjax INFO    :    use_temperature: False
07:36 ninjax INFO    :    which_temperature_schedule: exponential
07:36 ninjax INFO    :    starting_temperature: 2.0
07:36 ninjax INFO    :    stop_tempering_iteration: 75
07:36 ninjax INFO    :    stopping_criterion_global_acc: 0.1
07:36 ninjax INFO    :    stopping_criterion_loss: -inf
07:36 ninjax INFO    :    nf_model_kwargs: {}
07:36 ninjax INFO    :    local sampler arg not shown (pretty print)
07:36 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[-7.34348472e-23 -3.83479389e-23 -4.57063156e-23  8.42270544e-23
 -1.06721026e-23 -5.97556806e-23  1.41469356e-23  2.54796228e-23
  9.84732705e-23 -1.80303295e-23]
[-1.76567353e-23 -4.36092873e-23  7.46849597e-23 -7.82441895e-23
 -1.06714974e-23  6.02960263e-24  7.87445088e-23 -7.42880749e-23
  1.71575203e-23 -8.04543413e-23]
Checking the noise that was generated in inject_signal ifo:
[ 5.56337955e-23 -3.84553219e-24  1.30155005e-23  6.66463691e-24
 -2.29336238e-23  5.68532010e-23 -6.72131746e-23 -6.76628463e-24
 -7.17229675e-24 -4.67703915e-23]
[ 6.67706150e-23  1.53667526e-23 -2.03246155e-23 -3.43222839e-24
 -7.63964797e-23 -6.03670033e-23  2.59800226e-23 -9.29604087e-23
 -3.28117748e-23 -1.24568138e-22]
Checking the noise that was generated in inject_signal ifo:
[-3.03487582e-23  3.44740477e-23 -2.39375582e-23  7.42662760e-23
  1.05608861e-22 -2.05793009e-23  6.97967861e-24 -5.91141963e-23
  1.91038582e-24  5.01918173e-23]
[-3.99147646e-23  5.34001551e-23  1.14471597e-22 -1.25204144e-23
  1.07234370e-23 -3.51735450e-23  6.89763713e-23  3.52664537e-23
 -4.26049332e-23 -1.23440366e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.11044120788574219 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.6400558756116346, 'mass_2_source': 1.3684548776213086, 's1_z': 0.028707293636951528, 's2_z': 0.032413910702747156, 'cos_iota': -0.9245924671030039, 'd_L': 396.52219437850914, 't_c': -0.03960232689049575, 'phase_c': 1.086570193634082, 'psi': 0.27907572892723853, 'ra': 4.68403338384284, 'sin_dec': -0.7870774964601837, 'q': 0.834395277606602, 'M_c': 1.4198711646910478, 'eta': 0.24796249072083573, 'iota': Array(2.75076077, dtype=float64, weak_type=True), 'dec': Array(-0.90605682, dtype=float64, weak_type=True), 'lambda_1': 58.147217584255316, 'lambda_2': 216.75395725509384, 'H1_SNR': 13.494643325447187, 'L1_SNR': 14.17101639671185, 'V1_SNR': 8.447831882616354, 'network_SNR': 21.31405563739247, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5119023323059082 seconds
Time for h_sky_low and h_sky_center: 5.354650974273682 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.693594217300415
Going to compute coefficients . . .
Time for computing coefficients: 127.98402881622314 seconds
Time for computing coefficients: 6.92900276184082 seconds
Time for computing coefficients: 7.106882095336914 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:01<6:42:02, 121.22s/it]Tuning global sampler:   1%|          | 2/200 [02:05<2:53:37, 52.61s/it] Tuning global sampler:   2%|▏         | 3/200 [02:10<1:40:49, 30.71s/it]Tuning global sampler:   2%|▏         | 4/200 [02:15<1:06:39, 20.40s/it]Tuning global sampler:   2%|▎         | 5/200 [02:19<47:48, 14.71s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:24<36:29, 11.28s/it]Tuning global sampler:   4%|▎         | 7/200 [02:29<30:09,  9.37s/it]Tuning global sampler:   4%|▍         | 8/200 [02:34<25:10,  7.86s/it]Tuning global sampler:   4%|▍         | 9/200 [02:38<21:45,  6.83s/it]Tuning global sampler:   5%|▌         | 10/200 [02:43<19:18,  6.10s/it]Tuning global sampler:   6%|▌         | 11/200 [02:47<17:46,  5.64s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:41,  5.33s/it]Tuning global sampler:   6%|▋         | 13/200 [02:57<15:53,  5.10s/it]Tuning global sampler:   7%|▋         | 14/200 [03:01<15:22,  4.96s/it]Tuning global sampler:   8%|▊         | 15/200 [03:06<15:00,  4.87s/it]Tuning global sampler:   8%|▊         | 16/200 [03:11<14:43,  4.80s/it]Tuning global sampler:   8%|▊         | 17/200 [03:15<14:30,  4.75s/it]Tuning global sampler:   9%|▉         | 18/200 [03:20<14:19,  4.72s/it]Tuning global sampler:  10%|▉         | 19/200 [03:25<14:11,  4.70s/it]Tuning global sampler:  10%|█         | 20/200 [03:29<14:03,  4.69s/it]Tuning global sampler:  10%|█         | 21/200 [03:34<13:57,  4.68s/it]Tuning global sampler:  11%|█         | 22/200 [03:39<14:38,  4.93s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:44<14:17,  4.84s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:48<13:51,  4.72s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:53<13:30,  4.63s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:57<13:14,  4.57s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:02<13:02,  4.52s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:06<12:52,  4.49s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:11<12:43,  4.47s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:15<12:36,  4.45s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:19<12:29,  4.44s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:24<12:23,  4.43s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:28<12:16,  4.41s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:33<12:10,  4.40s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:37<12:06,  4.40s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:41<12:02,  4.40s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:46<11:58,  4.41s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:50<11:53,  4.40s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:55<11:48,  4.40s/it]Tuning global sampler:  20%|██        | 40/200 [04:59<11:44,  4.40s/it]Tuning global sampler:  20%|██        | 41/200 [05:04<12:25,  4.69s/it]Tuning global sampler:  21%|██        | 42/200 [05:09<12:07,  4.60s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:13<11:53,  4.55s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:17<11:41,  4.49s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:22<11:30,  4.46s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:26<11:23,  4.44s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:31<11:17,  4.43s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:35<11:12,  4.42s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:39<11:07,  4.42s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:44<11:01,  4.41s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:48<10:57,  4.41s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:53<10:52,  4.41s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:57<10:47,  4.41s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:02<10:43,  4.41s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:06<10:37,  4.40s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:10<10:32,  4.39s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:15<10:30,  4.41s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:19<10:26,  4.41s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:24<10:21,  4.41s/it]Tuning global sampler:  30%|███       | 60/200 [06:28<10:18,  4.42s/it]Tuning global sampler:  30%|███       | 61/200 [06:32<10:14,  4.42s/it]Tuning global sampler:  31%|███       | 62/200 [06:38<10:50,  4.71s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:42<10:33,  4.62s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:47<10:19,  4.56s/it]Tuning global sampler:  32%|███▎      | 65/200 [06:51<10:09,  4.51s/it]Tuning global sampler:  33%|███▎      | 66/200 [06:55<09:58,  4.47s/it]Tuning global sampler:  34%|███▎      | 67/200 [07:00<09:50,  4.44s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:04<09:44,  4.42s/it]Tuning global sampler:  34%|███▍      | 69/200 [07:09<09:38,  4.42s/it]Tuning global sampler:  35%|███▌      | 70/200 [07:13<09:33,  4.42s/it]Tuning global sampler:  36%|███▌      | 71/200 [07:17<09:30,  4.42s/it]Tuning global sampler:  36%|███▌      | 72/200 [07:22<09:25,  4.42s/it]Tuning global sampler:  36%|███▋      | 73/200 [07:26<09:20,  4.42s/it]Tuning global sampler:  37%|███▋      | 74/200 [07:31<09:15,  4.41s/it]Tuning global sampler:  38%|███▊      | 75/200 [07:35<09:12,  4.42s/it]Tuning global sampler:  38%|███▊      | 76/200 [07:39<09:08,  4.42s/it]Tuning global sampler:  38%|███▊      | 77/200 [07:44<09:02,  4.41s/it]Tuning global sampler:  39%|███▉      | 78/200 [07:48<08:57,  4.40s/it]Tuning global sampler:  40%|███▉      | 79/200 [07:53<08:53,  4.41s/it]Tuning global sampler:  40%|████      | 80/200 [07:57<08:49,  4.41s/it]Tuning global sampler:  40%|████      | 81/200 [08:02<08:45,  4.41s/it]Tuning global sampler:  41%|████      | 82/200 [08:07<09:16,  4.72s/it]Tuning global sampler:  42%|████▏     | 83/200 [08:11<09:01,  4.63s/it]Tuning global sampler:  42%|████▏     | 84/200 [08:16<08:50,  4.57s/it]Tuning global sampler:  42%|████▎     | 85/200 [08:20<08:40,  4.53s/it]Tuning global sampler:  43%|████▎     | 86/200 [08:25<08:32,  4.50s/it]Tuning global sampler:  44%|████▎     | 87/200 [08:29<08:25,  4.48s/it]Tuning global sampler:  44%|████▍     | 88/200 [08:33<08:18,  4.45s/it]Tuning global sampler:  44%|████▍     | 88/200 [08:38<10:59,  5.89s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.21s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.21s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.21s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.21s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.21s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.21s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.21s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.21s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]
07:45 ninjax INFO    : Saving samples to ./Aplus/injection_29/results_training.npz
07:45 ninjax INFO    : Saving the NF
07:45 ninjax INFO    : Time taken: 558.154863357544 seconds (9.302581055959065 minutes)
07:45 ninjax INFO    : Creating the final corner plot
07:45 ninjax INFO    : Dumping the final production chains
07:45 ninjax INFO    : Chains shape is: (13, 220000)
07:46 ninjax INFO    : Key: M_c: ESS = 45317, Rhat = 1.014953734863543
07:46 ninjax INFO    : Key: q: ESS = 29451, Rhat = 1.0218801489275686
07:46 ninjax INFO    : Key: s1_z: ESS = 45944, Rhat = 1.014825632582914
07:46 ninjax INFO    : Key: s2_z: ESS = 32369, Rhat = 1.020452938931942
07:46 ninjax INFO    : Key: lambda_1: ESS = 43228, Rhat = 1.0163523309262834
07:46 ninjax INFO    : Key: lambda_2: ESS = 43645, Rhat = 1.015925532387179
07:46 ninjax INFO    : Key: cos_iota: ESS = 40776, Rhat = 1.0167958120019978
07:46 ninjax INFO    : Key: d_L: ESS = 42953, Rhat = 1.0159487285803586
07:46 ninjax INFO    : Key: t_c: ESS = 36940, Rhat = 1.0177721522852379
07:46 ninjax INFO    : Key: phase_c: ESS = 45456, Rhat = 1.014853950905294
07:46 ninjax INFO    : Key: psi: ESS = 47975, Rhat = 1.015110297899178
07:46 ninjax INFO    : Key: ra: ESS = 60467, Rhat = 1.0115772262608291
07:46 ninjax INFO    : Key: sin_dec: ESS = 79240, Rhat = 1.01002909398612
07:46 ninjax INFO    : Key: eta: ESS = 29451, Rhat = 1.0218801489275686
07:46 ninjax INFO    : Key: iota: ESS = 40776, Rhat = 1.0167958120019978
07:46 ninjax INFO    : Key: dec: ESS = 79240, Rhat = 1.01002909398612
07:46 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.433 +/- 0.138
q: 0.784 +/- 0.216
s1_z: 0.023 +/- 0.026
s2_z: 0.020 +/- 0.026
lambda_1: 1456.434 +/- 1447.006
lambda_2: 1446.428 +/- 1360.859
cos_iota: -0.202 +/- 0.589
d_L: 518.393 +/- 235.571
t_c: -0.026 +/- 0.026
phase_c: 3.480 +/- 1.746
psi: 1.720 +/- 0.884
ra: 3.199 +/- 1.780
sin_dec: -0.219 +/- 0.640
Log probability: 113.394 +/- 88.305
Local acceptance: 0.751 +/- 0.432
Global acceptance: 0.009 +/- 0.096
Max loss: 40.989, Min loss: 0.597
Production summary
==========
M_c: 1.420 +/- 0.000
q: 0.906 +/- 0.063
s1_z: 0.039 +/- 0.009
s2_z: 0.037 +/- 0.009
lambda_1: 254.141 +/- 220.332
lambda_2: 341.302 +/- 287.541
cos_iota: -0.828 +/- 0.129
d_L: 357.951 +/- 51.824
t_c: -0.039 +/- 0.000
phase_c: 3.132 +/- 1.807
psi: 1.598 +/- 0.908
ra: 4.669 +/- 0.011
sin_dec: -0.795 +/- 0.007
Log probability: 208.804 +/- 2.234
Local acceptance: 0.507 +/- 0.500
Global acceptance: 0.100 +/- 0.300
DONE

JOB STATISTICS
==============
Job ID: 10918567
Cluster: snellius
User/Group: twouters2/twouters2
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 00:11:21
CPU Efficiency: 5.58% of 03:23:28 core-walltime
Job Wall-clock time: 00:12:43
Memory Utilized: 4.41 GB
Memory Efficiency: 44.10% of 10.00 GB (10.00 GB/node)
