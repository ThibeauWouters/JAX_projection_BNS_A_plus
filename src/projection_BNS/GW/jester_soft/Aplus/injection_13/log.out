Wed Apr  2 07:33:40 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
07:33 ninjax INFO    : Checking and setting outdir
07:33 ninjax INFO    : Found generation prior file ./Aplus/injection_13/generation_prior.prior
07:33 ninjax INFO    : The outdir is set to ./Aplus/injection_13
07:33 ninjax INFO    : Loading the given config
07:33 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
07:33 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
07:33 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/jester_soft/Aplus/injection_13/complete_config.json
07:33 ninjax INFO    : No seed specified. Generating a random seed: 719165
07:33 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 171916
07:33 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 303982
07:33 ninjax INFO    : Loading the priors
07:33 ninjax INFO    : Setting up the prior
07:33 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
07:33 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
07:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
07:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
07:33 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
07:33 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
07:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
07:33 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
07:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
07:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
07:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
07:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
07:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
07:33 ninjax INFO    : Setting up the generation prior
07:33 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 1.99, naming=["mass_1_source"])
07:33 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 1.99, naming=["mass_2_source"])
07:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
07:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
07:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
07:33 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
07:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
07:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
07:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
07:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
07:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
07:33 ninjax INFO    : Finished prior setup
07:33 ninjax INFO    : Setting the transforms
07:33 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
07:33 ninjax INFO    : transforms_str_list has 3 elements
07:33 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
07:33 ninjax INFO    : Setting the likelihood
07:33 ninjax INFO    : GW likelihood provided, setting up the GW pipe
07:33 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz
07:33 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz for BNS injections
07:33 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
07:33 ninjax INFO    : self.is_BNS_run is True
07:33 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
07:33 ninjax INFO    : GW run is an injection
07:33 ninjax INFO    : Setting up GW injection . . . 
07:33 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
07:33 ninjax INFO    : Generating new injection
07:33 ninjax INFO    : Sanity check: generated parameters:
07:33 ninjax INFO    : {'mass_1_source': 1.8874851339821888, 'mass_2_source': 1.0828476603819233, 's1_z': 0.021481570054816282, 's2_z': -0.04561182306949192, 'cos_iota': 0.25610870075971404, 'd_L': 99.00912473518052, 't_c': 0.08926078833791734, 'phase_c': 4.0099519437192095, 'psi': 1.9004496461801703, 'ra': 4.7244777758400325, 'sin_dec': 0.6699105432225188}
07:33 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz . . . 
07:33 ninjax INFO    : Injected lambda_1: 17.101147802869736
07:33 ninjax INFO    : Injected lambda_2: 1065.668253787441
07:33 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.2627528418552163 is 256.0
07:33 ninjax INFO    : After transforms, the injection parameters are:
07:33 ninjax INFO    : {'mass_1_source': 1.8874851339821888, 'mass_2_source': 1.0828476603819233, 's1_z': 0.021481570054816282, 's2_z': -0.04561182306949192, 'cos_iota': 0.25610870075971404, 'd_L': 99.00912473518052, 't_c': 0.08926078833791734, 'phase_c': 4.0099519437192095, 'psi': 1.9004496461801703, 'ra': 4.7244777758400325, 'sin_dec': 0.6699105432225188, 'q': 0.5736986431767793, 'M_c': 1.2627528418552163, 'eta': 0.2316544685316531, 'iota': Array(1.31180184, dtype=float64, weak_type=True), 'dec': Array(0.73408829, dtype=float64, weak_type=True), 'lambda_1': 17.101147802869736, 'lambda_2': 1065.668253787441}
07:33 ninjax INFO    : The trial injection parameters are {'M_c': 1.2627528418552163, 'eta': 0.2316544685316531, 's1_z': 0.021481570054816282, 's2_z': -0.04561182306949192, 'lambda_1': 17.101147802869736, 'lambda_2': 1065.668253787441, 'd_L': 99.00912473518052, 'phase_c': 4.0099519437192095, 'iota': 1.3118018435694287, 't_c': 0.08926078833791734, 'psi': 1.9004496461801703, 'ra': 4.7244777758400325, 'dec': 0.7340882909538478}
07:33 ninjax INFO    : Injecting signals . . .
07:33 ninjax INFO    : self.ifos
07:33 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
07:33 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
07:33 ninjax INFO    : [ 6.36055875e-23-6.02876364e-23j -2.26875924e-23+2.39845132e-23j
 -8.46239116e-23+7.27936492e-23j ...
 -8.02845775e-24-1.34227411e-23j -6.15872097e-24+2.00591719e-23j
  1.50989355e-23-4.28367869e-24j]
07:33 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
07:33 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
07:33 ninjax INFO    : [-3.32386776e-23+7.38233497e-23j  2.23723793e-23-1.40737740e-22j
  6.21640492e-24+2.33482731e-23j ...
  1.50440036e-24+3.60662738e-24j -2.19410355e-23+2.90188275e-23j
 -1.90149619e-23+3.00872751e-23j]
07:33 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
07:33 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
07:33 ninjax INFO    : [-3.89990964e-23+3.91479971e-23j -8.52066513e-23+3.11566854e-23j
  3.20849209e-23+1.35981472e-22j ...
  2.17994206e-23-3.93669310e-24j  1.50593234e-23-4.77647184e-23j
  2.72412575e-23+3.66183008e-23j]
07:33 ninjax INFO    : [1.43183556e-46 1.43058540e-46 1.42935095e-46 ... 6.39793039e-47
 6.39795354e-47 6.39797668e-47]
07:33 ninjax INFO    : SNR for ifo H1 is 15.176304827219969
07:33 ninjax INFO    : SNR for ifo L1 is 17.487353493972968
07:33 ninjax INFO    : SNR for ifo V1 is 10.406283118510405
07:33 ninjax INFO    : The network SNR is 25.385399125766437
07:33 ninjax INFO    : Network SNR passes threshold
07:33 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
07:33 ninjax INFO    :    mass_1_source: 1.8874851339821888
07:33 ninjax INFO    :    mass_2_source: 1.0828476603819233
07:33 ninjax INFO    :    s1_z: 0.021481570054816282
07:33 ninjax INFO    :    s2_z: -0.04561182306949192
07:33 ninjax INFO    :    cos_iota: 0.25610870075971404
07:33 ninjax INFO    :    d_L: 99.00912473518052
07:33 ninjax INFO    :    t_c: 0.08926078833791734
07:33 ninjax INFO    :    phase_c: 4.0099519437192095
07:33 ninjax INFO    :    psi: 1.9004496461801703
07:33 ninjax INFO    :    ra: 4.7244777758400325
07:33 ninjax INFO    :    sin_dec: 0.6699105432225188
07:33 ninjax INFO    :    q: 0.5736986431767793
07:33 ninjax INFO    :    M_c: 1.2627528418552163
07:33 ninjax INFO    :    eta: 0.2316544685316531
07:33 ninjax INFO    :    iota: 1.3118018435694287
07:33 ninjax INFO    :    dec: 0.7340882909538478
07:33 ninjax INFO    :    lambda_1: 17.101147802869736
07:33 ninjax INFO    :    lambda_2: 1065.668253787441
07:33 ninjax INFO    :    H1_SNR: 15.176304827219969
07:33 ninjax INFO    :    L1_SNR: 17.487353493972968
07:33 ninjax INFO    :    V1_SNR: 10.406283118510405
07:33 ninjax INFO    :    network_SNR: 25.385399125766437
07:33 ninjax INFO    :    epoch: 254.0
07:33 ninjax INFO    :    gmst: 2.7288901910520846
07:33 ninjax INFO    :    duration: 256.0
07:33 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
07:33 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
07:33 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
07:37 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 186.24388647079468 seconds = 3.104064774513245 minutes
07:37 ninjax INFO    : The priors are not modified after their initialization
07:37 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
07:37 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
07:37 ninjax INFO    : sample: {'M_c': Array([2.01235223, 1.18849408, 1.22196192], dtype=float64), 'q': Array([0.39120761, 0.30920334, 0.80103775], dtype=float64), 's1_z': Array([ 0.00758063, -0.00456516,  0.01864185], dtype=float64), 's2_z': Array([-0.01898469,  0.00081401,  0.01804379], dtype=float64), 'lambda_1': Array([1783.70217832, 3452.43217824, 4589.34979791], dtype=float64), 'lambda_2': Array([1866.724461  , 4924.79822058, 2959.03579254], dtype=float64), 'cos_iota': Array([ 0.50610096, -0.12153648, -0.79574735], dtype=float64), 'd_L': Array([520.13037641, 921.77542197, 559.60800078], dtype=float64), 't_c': Array([-0.04642643,  0.06457694,  0.06012733], dtype=float64), 'phase_c': Array([4.99065409, 1.31275029, 3.72274612], dtype=float64), 'psi': Array([0.78837148, 2.41677729, 1.21321233], dtype=float64), 'ra': Array([3.50382544, 1.92702096, 5.63865257], dtype=float64), 'sin_dec': Array([-0.63559072, -0.61619275,  0.80406796], dtype=float64)}
07:37 ninjax INFO    : log_prob: [-90.4481451   -0.2664255  -24.96456791]
07:37 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.8874851339821888, 'mass_2_source': 1.0828476603819233, 's1_z': 0.021481570054816282, 's2_z': -0.04561182306949192, 'cos_iota': 0.25610870075971404, 'd_L': 99.00912473518052, 't_c': 0.08926078833791734, 'phase_c': 4.0099519437192095, 'psi': 1.9004496461801703, 'ra': 4.7244777758400325, 'sin_dec': 0.6699105432225188, 'q': 0.5736986431767793, 'M_c': 1.2627528418552163, 'eta': 0.2316544685316531, 'iota': Array(1.31180184, dtype=float64, weak_type=True), 'dec': Array(0.73408829, dtype=float64, weak_type=True), 'lambda_1': 17.101147802869736, 'lambda_2': 1065.668253787441, 'H1_SNR': 15.176304827219969, 'L1_SNR': 17.487353493972968, 'V1_SNR': 10.406283118510405, 'network_SNR': 25.385399125766437, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
07:37 ninjax INFO    : log_prob at the injection parameters is: 290.6171812390521
07:37 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
07:37 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
07:37 ninjax INFO    : Ninjax setup complete.
07:37 ninjax INFO    : Saving output to ./Aplus/injection_13/
07:37 ninjax INFO    : Using polynomial learning rate scheduler
07:37 ninjax INFO    : The hyperparameters passed to flowMC and jim are
07:37 ninjax INFO    :    n_loop_training: 200
07:37 ninjax INFO    :    n_loop_production: 10
07:37 ninjax INFO    :    n_local_steps: 100
07:37 ninjax INFO    :    n_global_steps: 1000
07:37 ninjax INFO    :    n_epochs: 25
07:37 ninjax INFO    :    n_chains: 1000
07:37 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x151e2793a4d0>
07:37 ninjax INFO    :    max_samples: 50000
07:37 ninjax INFO    :    momentum: 0.9
07:37 ninjax INFO    :    batch_size: 30000
07:37 ninjax INFO    :    use_global: True
07:37 ninjax INFO    :    keep_quantile: 0.0
07:37 ninjax INFO    :    train_thinning: 10
07:37 ninjax INFO    :    output_thinning: 50
07:37 ninjax INFO    :    n_sample_max: 10000
07:37 ninjax INFO    :    num_layers: 10
07:37 ninjax INFO    :    hidden_size: [128, 128]
07:37 ninjax INFO    :    num_bins: 8
07:37 ninjax INFO    :    save_training_chains: False
07:37 ninjax INFO    :    eps_mass_matrix: 1e-05
07:37 ninjax INFO    :    use_scheduler: True
07:37 ninjax INFO    :    use_temperature: False
07:37 ninjax INFO    :    which_temperature_schedule: exponential
07:37 ninjax INFO    :    starting_temperature: 2.0
07:37 ninjax INFO    :    stop_tempering_iteration: 75
07:37 ninjax INFO    :    stopping_criterion_global_acc: 0.1
07:37 ninjax INFO    :    stopping_criterion_loss: -inf
07:37 ninjax INFO    :    nf_model_kwargs: {}
07:37 ninjax INFO    :    local sampler arg not shown (pretty print)
07:37 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[ 7.04367681e-23 -2.73180327e-23 -8.39087851e-23  9.01492517e-23
  4.71318559e-24  7.10177179e-23 -4.34732727e-23 -3.29424112e-23
 -2.78693830e-24  1.46271158e-23]
[-5.86998013e-23  1.87192733e-23  7.97671574e-23 -3.03509689e-23
 -1.09460205e-22  5.82691248e-23 -7.10655643e-23 -1.52461716e-23
 -6.75034494e-23  2.74861760e-24]
Checking the noise that was generated in inject_signal ifo:
[-3.96787127e-23  3.04486868e-23 -4.90432809e-25 -9.18591326e-23
 -7.86954453e-24  9.17077849e-23 -3.48864597e-23 -4.15075372e-23
  1.71114210e-23  2.92573806e-24]
[ 7.87052508e-23 -1.40962163e-22  1.88465452e-23 -5.96143731e-23
  6.10735059e-23 -1.34028752e-22  1.03235035e-23  1.66762534e-23
  6.97902830e-23 -6.39726172e-25]
Checking the noise that was generated in inject_signal ifo:
[-4.26152922e-23 -8.51278991e-23  3.55617337e-23  4.94568911e-23
 -4.87738168e-24  3.20040451e-23  7.94290565e-24 -6.55661465e-23
 -3.19200268e-23 -7.57829990e-23]
[ 3.42303475e-23  3.72588889e-23  1.30967710e-22  4.96564847e-23
  4.25192601e-23  8.65200547e-23 -1.73263421e-23  2.16664447e-23
 -8.87554272e-23  3.45128362e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.17997264862060547 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.8874851339821888, 'mass_2_source': 1.0828476603819233, 's1_z': 0.021481570054816282, 's2_z': -0.04561182306949192, 'cos_iota': 0.25610870075971404, 'd_L': 99.00912473518052, 't_c': 0.08926078833791734, 'phase_c': 4.0099519437192095, 'psi': 1.9004496461801703, 'ra': 4.7244777758400325, 'sin_dec': 0.6699105432225188, 'q': 0.5736986431767793, 'M_c': 1.2627528418552163, 'eta': 0.2316544685316531, 'iota': Array(1.31180184, dtype=float64, weak_type=True), 'dec': Array(0.73408829, dtype=float64, weak_type=True), 'lambda_1': 17.101147802869736, 'lambda_2': 1065.668253787441, 'H1_SNR': 15.176304827219969, 'L1_SNR': 17.487353493972968, 'V1_SNR': 10.406283118510405, 'network_SNR': 25.385399125766437, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5127301216125488 seconds
Time for h_sky_low and h_sky_center: 5.55056095123291 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.7415871620178223
Going to compute coefficients . . .
Time for computing coefficients: 164.29940176010132 seconds
Time for computing coefficients: 7.053891181945801 seconds
Time for computing coefficients: 7.37407112121582 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:01<6:41:54, 121.18s/it]Tuning global sampler:   1%|          | 2/200 [02:06<2:55:22, 53.14s/it] Tuning global sampler:   2%|▏         | 3/200 [02:11<1:41:46, 31.00s/it]Tuning global sampler:   2%|▏         | 4/200 [02:15<1:07:15, 20.59s/it]Tuning global sampler:   2%|▎         | 5/200 [02:20<48:12, 14.83s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:25<36:44, 11.36s/it]Tuning global sampler:   4%|▎         | 7/200 [02:29<29:22,  9.13s/it]Tuning global sampler:   4%|▍         | 8/200 [02:34<24:37,  7.70s/it]Tuning global sampler:   4%|▍         | 9/200 [02:38<21:22,  6.71s/it]Tuning global sampler:   5%|▌         | 10/200 [02:43<19:01,  6.01s/it]Tuning global sampler:   6%|▌         | 11/200 [02:47<17:34,  5.58s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:32,  5.28s/it]Tuning global sampler:   6%|▋         | 13/200 [02:57<15:47,  5.07s/it]Tuning global sampler:   7%|▋         | 14/200 [03:01<15:18,  4.94s/it]Tuning global sampler:   8%|▊         | 15/200 [03:06<14:57,  4.85s/it]Tuning global sampler:   8%|▊         | 16/200 [03:11<14:42,  4.79s/it]Tuning global sampler:   8%|▊         | 17/200 [03:15<14:29,  4.75s/it]Tuning global sampler:   9%|▉         | 18/200 [03:20<14:19,  4.72s/it]Tuning global sampler:  10%|▉         | 19/200 [03:25<14:10,  4.70s/it]Tuning global sampler:  10%|█         | 20/200 [03:29<14:03,  4.69s/it]Tuning global sampler:  10%|█         | 21/200 [03:35<14:48,  4.97s/it]Tuning global sampler:  11%|█         | 22/200 [03:39<14:25,  4.86s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:44<14:07,  4.79s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:49<13:43,  4.68s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:53<13:24,  4.60s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:57<13:09,  4.54s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:02<12:58,  4.50s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:06<12:48,  4.47s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:11<12:41,  4.45s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:15<12:34,  4.44s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:19<12:28,  4.43s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:24<12:22,  4.42s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:28<12:15,  4.40s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:32<12:09,  4.40s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:37<12:06,  4.40s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:41<12:02,  4.40s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:46<11:58,  4.41s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:50<11:54,  4.41s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:55<11:49,  4.41s/it]Tuning global sampler:  20%|██        | 40/200 [04:59<11:46,  4.41s/it]Tuning global sampler:  20%|██        | 41/200 [05:04<12:30,  4.72s/it]Tuning global sampler:  21%|██        | 42/200 [05:09<12:10,  4.62s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:13<11:56,  4.56s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:18<11:43,  4.51s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:22<11:32,  4.47s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:26<11:24,  4.45s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:31<11:18,  4.44s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:35<11:13,  4.43s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:40<11:09,  4.43s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:44<11:04,  4.43s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:48<10:59,  4.43s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:53<10:54,  4.42s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:57<10:50,  4.42s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:02<10:45,  4.42s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:06<10:38,  4.41s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:10<10:33,  4.40s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:15<10:30,  4.41s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:19<10:27,  4.42s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:24<10:24,  4.43s/it]Tuning global sampler:  30%|███       | 60/200 [06:28<10:19,  4.43s/it]Tuning global sampler:  30%|███       | 61/200 [06:33<10:15,  4.43s/it]Tuning global sampler:  31%|███       | 62/200 [06:38<10:54,  4.74s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:43<10:38,  4.66s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:47<10:24,  4.59s/it]Tuning global sampler:  32%|███▎      | 65/200 [06:51<10:12,  4.54s/it]Tuning global sampler:  33%|███▎      | 66/200 [06:56<10:02,  4.49s/it]Tuning global sampler:  34%|███▎      | 67/200 [07:00<09:53,  4.46s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:05<09:47,  4.45s/it]Tuning global sampler:  34%|███▍      | 69/200 [07:09<09:42,  4.45s/it]Tuning global sampler:  35%|███▌      | 70/200 [07:14<09:37,  4.45s/it]Tuning global sampler:  36%|███▌      | 71/200 [07:18<09:33,  4.44s/it]Tuning global sampler:  36%|███▌      | 72/200 [07:22<09:28,  4.44s/it]Tuning global sampler:  36%|███▋      | 73/200 [07:27<09:23,  4.44s/it]Tuning global sampler:  36%|███▋      | 73/200 [07:31<13:06,  6.19s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.22s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.22s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.22s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.22s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.22s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.22s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.22s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.22s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]
07:45 ninjax INFO    : Saving samples to ./Aplus/injection_13/results_training.npz
07:45 ninjax INFO    : Saving the NF
07:45 ninjax INFO    : Time taken: 491.00559878349304 seconds (8.18342664639155 minutes)
07:45 ninjax INFO    : Creating the final corner plot
07:45 ninjax INFO    : Dumping the final production chains
07:45 ninjax INFO    : Chains shape is: (13, 220000)
07:45 ninjax INFO    : Key: M_c: ESS = 52046, Rhat = 1.0138403805231972
07:45 ninjax INFO    : Key: q: ESS = 21862, Rhat = 1.0284896686053615
07:45 ninjax INFO    : Key: s1_z: ESS = 28881, Rhat = 1.0220918181810683
07:45 ninjax INFO    : Key: s2_z: ESS = 53900, Rhat = 1.0127376956513727
07:45 ninjax INFO    : Key: lambda_1: ESS = 33582, Rhat = 1.0190823263620867
07:45 ninjax INFO    : Key: lambda_2: ESS = 34492, Rhat = 1.0182548851563242
07:45 ninjax INFO    : Key: cos_iota: ESS = 33290, Rhat = 1.0196454680118257
07:45 ninjax INFO    : Key: d_L: ESS = 27212, Rhat = 1.02297878454633
07:45 ninjax INFO    : Key: t_c: ESS = 45618, Rhat = 1.0146508552595728
07:45 ninjax INFO    : Key: phase_c: ESS = 59470, Rhat = 1.0151368691809868
07:45 ninjax INFO    : Key: psi: ESS = 34305, Rhat = 1.0175018442209207
07:45 ninjax INFO    : Key: ra: ESS = 52837, Rhat = 1.0142607989080215
07:45 ninjax INFO    : Key: sin_dec: ESS = 50732, Rhat = 1.0133269132260707
07:45 ninjax INFO    : Key: eta: ESS = 21862, Rhat = 1.0284896686053615
07:45 ninjax INFO    : Key: iota: ESS = 33290, Rhat = 1.0196454680118257
07:45 ninjax INFO    : Key: dec: ESS = 50732, Rhat = 1.0133269132260707
07:45 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.288 +/- 0.153
q: 0.598 +/- 0.177
s1_z: -0.006 +/- 0.028
s2_z: -0.003 +/- 0.028
lambda_1: 1958.478 +/- 1594.767
lambda_2: 1846.207 +/- 1282.742
cos_iota: 0.344 +/- 0.540
d_L: 394.121 +/- 298.915
t_c: 0.079 +/- 0.030
phase_c: 2.908 +/- 1.743
psi: 1.531 +/- 0.847
ra: 4.553 +/- 0.785
sin_dec: 0.467 +/- 0.371
Log probability: 152.089 +/- 124.056
Local acceptance: 0.512 +/- 0.500
Global acceptance: 0.011 +/- 0.103
Max loss: 22.807, Min loss: 5.014
Production summary
==========
M_c: 1.263 +/- 0.000
q: 0.631 +/- 0.092
s1_z: -0.009 +/- 0.028
s2_z: -0.008 +/- 0.029
lambda_1: 231.307 +/- 222.064
lambda_2: 933.355 +/- 715.527
cos_iota: 0.362 +/- 0.250
d_L: 113.974 +/- 26.795
t_c: 0.089 +/- 0.001
phase_c: 3.246 +/- 1.768
psi: 1.206 +/- 0.813
ra: 4.732 +/- 0.012
sin_dec: 0.653 +/- 0.025
Log probability: 285.530 +/- 2.955
Local acceptance: 0.164 +/- 0.370
Global acceptance: 0.125 +/- 0.331
DONE

JOB STATISTICS
==============
Job ID: 10918551
Cluster: snellius
User/Group: twouters2/twouters2
State: RUNNING
Nodes: 1
Cores per node: 16
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 03:15:28 core-walltime
Job Wall-clock time: 00:12:13
Memory Utilized: 0.00 MB
Memory Efficiency: 0.00% of 10.00 GB (10.00 GB/node)
WARNING: Efficiency statistics can only be obtained after the job has ended as seff tool is based on the accounting database data.
