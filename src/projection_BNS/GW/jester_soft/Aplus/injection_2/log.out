Wed Apr  2 07:33:39 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
07:33 ninjax INFO    : Checking and setting outdir
07:33 ninjax INFO    : Found generation prior file ./Aplus/injection_2/generation_prior.prior
07:33 ninjax INFO    : The outdir is set to ./Aplus/injection_2
07:33 ninjax INFO    : Loading the given config
07:33 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
07:33 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
07:33 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/jester_soft/Aplus/injection_2/complete_config.json
07:33 ninjax INFO    : No seed specified. Generating a random seed: 730176
07:33 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 640995
07:33 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 907972
07:33 ninjax INFO    : Loading the priors
07:33 ninjax INFO    : Setting up the prior
07:33 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
07:33 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
07:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
07:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
07:33 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
07:33 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
07:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
07:33 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
07:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
07:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
07:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
07:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
07:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
07:33 ninjax INFO    : Setting up the generation prior
07:33 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 1.99, naming=["mass_1_source"])
07:33 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 1.99, naming=["mass_2_source"])
07:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
07:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
07:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
07:33 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
07:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
07:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
07:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
07:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
07:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
07:33 ninjax INFO    : Finished prior setup
07:33 ninjax INFO    : Setting the transforms
07:33 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
07:33 ninjax INFO    : transforms_str_list has 3 elements
07:33 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
07:33 ninjax INFO    : Setting the likelihood
07:33 ninjax INFO    : GW likelihood provided, setting up the GW pipe
07:33 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz
07:33 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz for BNS injections
07:33 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
07:33 ninjax INFO    : self.is_BNS_run is True
07:33 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
07:33 ninjax INFO    : GW run is an injection
07:33 ninjax INFO    : Setting up GW injection . . . 
07:33 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
07:33 ninjax INFO    : Generating new injection
07:33 ninjax INFO    : Sanity check: generated parameters:
07:33 ninjax INFO    : {'mass_1_source': 1.7308101654910555, 'mass_2_source': 1.3745810662326419, 's1_z': 0.023092397901580866, 's2_z': -0.022094873150829898, 'cos_iota': -0.5498624639215848, 'd_L': 359.008940454154, 't_c': 0.040461512180753, 'phase_c': 1.3106840827131776, 'psi': 2.197855312612573, 'ra': 4.399666389454047, 'sin_dec': -0.8094741810756285}
07:33 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz . . . 
07:33 ninjax INFO    : Injected lambda_1: 38.16482753475794
07:33 ninjax INFO    : Injected lambda_2: 209.82768062914877
07:33 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.4497818214113725 is 128.0
07:33 ninjax INFO    : After transforms, the injection parameters are:
07:33 ninjax INFO    : {'mass_1_source': 1.7308101654910555, 'mass_2_source': 1.3745810662326419, 's1_z': 0.023092397901580866, 's2_z': -0.022094873150829898, 'cos_iota': -0.5498624639215848, 'd_L': 359.008940454154, 't_c': 0.040461512180753, 'phase_c': 1.3106840827131776, 'psi': 2.197855312612573, 'ra': 4.399666389454047, 'sin_dec': -0.8094741810756285, 'q': 0.7941836104496496, 'M_c': 1.4497818214113725, 'eta': 0.24671022535286893, 'iota': Array(2.15299589, dtype=float64, weak_type=True), 'dec': Array(-0.94325603, dtype=float64, weak_type=True), 'lambda_1': 38.16482753475794, 'lambda_2': 209.82768062914877}
07:33 ninjax INFO    : The trial injection parameters are {'M_c': 1.4497818214113725, 'eta': 0.24671022535286893, 's1_z': 0.023092397901580866, 's2_z': -0.022094873150829898, 'lambda_1': 38.16482753475794, 'lambda_2': 209.82768062914877, 'd_L': 359.008940454154, 'phase_c': 1.3106840827131776, 'iota': 2.1529958921992014, 't_c': 0.040461512180753, 'psi': 2.197855312612573, 'ra': 4.399666389454047, 'dec': -0.943256025425081}
07:33 ninjax INFO    : Injecting signals . . .
07:33 ninjax INFO    : self.ifos
07:33 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
07:33 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
07:33 ninjax INFO    : [-4.69949480e-23-5.59425011e-23j  4.12496792e-23+1.09854345e-23j
  4.73925516e-23+3.34614615e-23j ...
 -3.11222712e-23+2.99013853e-24j  2.51940658e-23+2.81967370e-23j
  3.14597852e-23-3.99354102e-24j]
07:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
07:33 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
07:33 ninjax INFO    : [ 5.66526825e-23-7.49572109e-24j -6.21446631e-23-1.07166335e-24j
  7.93049379e-23-8.51438166e-23j ...
  9.94234564e-24+3.12539452e-23j  1.11821101e-23+1.49828123e-23j
  1.22665831e-23-2.64459502e-23j]
07:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
07:33 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
07:33 ninjax INFO    : [ 2.52724469e-23-7.56499079e-23j -2.17935522e-24-1.47414466e-23j
  5.87888352e-24-8.45453837e-24j ...
  1.15135972e-23-3.01501215e-23j  3.11892658e-23-2.30591230e-23j
  3.96721761e-23+3.02534540e-23j]
07:33 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
07:33 ninjax INFO    : SNR for ifo H1 is 10.397070432734608
07:33 ninjax INFO    : SNR for ifo L1 is 10.619765394225805
07:33 ninjax INFO    : SNR for ifo V1 is 5.218879493909363
07:33 ninjax INFO    : The network SNR is 15.751672729700418
07:33 ninjax INFO    : Network SNR passes threshold
07:33 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
07:33 ninjax INFO    :    mass_1_source: 1.7308101654910555
07:33 ninjax INFO    :    mass_2_source: 1.3745810662326419
07:33 ninjax INFO    :    s1_z: 0.023092397901580866
07:33 ninjax INFO    :    s2_z: -0.022094873150829898
07:33 ninjax INFO    :    cos_iota: -0.5498624639215848
07:33 ninjax INFO    :    d_L: 359.008940454154
07:33 ninjax INFO    :    t_c: 0.040461512180753
07:33 ninjax INFO    :    phase_c: 1.3106840827131776
07:33 ninjax INFO    :    psi: 2.197855312612573
07:33 ninjax INFO    :    ra: 4.399666389454047
07:33 ninjax INFO    :    sin_dec: -0.8094741810756285
07:33 ninjax INFO    :    q: 0.7941836104496496
07:33 ninjax INFO    :    M_c: 1.4497818214113725
07:33 ninjax INFO    :    eta: 0.24671022535286893
07:33 ninjax INFO    :    iota: 2.1529958921992014
07:33 ninjax INFO    :    dec: -0.943256025425081
07:33 ninjax INFO    :    lambda_1: 38.16482753475794
07:33 ninjax INFO    :    lambda_2: 209.82768062914877
07:33 ninjax INFO    :    H1_SNR: 10.397070432734608
07:33 ninjax INFO    :    L1_SNR: 10.619765394225805
07:33 ninjax INFO    :    V1_SNR: 5.218879493909363
07:33 ninjax INFO    :    network_SNR: 15.751672729700418
07:33 ninjax INFO    :    epoch: 126.0
07:33 ninjax INFO    :    gmst: 2.7288901910520846
07:33 ninjax INFO    :    duration: 128.0
07:33 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
07:33 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
07:33 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
07:36 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 141.03852939605713 seconds = 2.3506421566009523 minutes
07:36 ninjax INFO    : The priors are not modified after their initialization
07:36 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
07:36 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
07:36 ninjax INFO    : sample: {'M_c': Array([2.07145236, 1.1808016 , 2.55254843], dtype=float64), 'q': Array([0.90588861, 0.70472306, 0.34034869], dtype=float64), 's1_z': Array([-0.04292343, -0.02700112, -0.04554067], dtype=float64), 's2_z': Array([ 0.00361114, -0.04714907,  0.03978148], dtype=float64), 'lambda_1': Array([3671.42441277, 3785.45948397,  943.5399209 ], dtype=float64), 'lambda_2': Array([4051.72470481, 3700.12590488,  999.88111341], dtype=float64), 'cos_iota': Array([-0.20714128, -0.71339074, -0.79090459], dtype=float64), 'd_L': Array([961.83310963, 884.39422483, 967.64052523], dtype=float64), 't_c': Array([0.0528716 , 0.09472621, 0.01637493], dtype=float64), 'phase_c': Array([0.85319271, 2.58939523, 1.4929487 ], dtype=float64), 'psi': Array([1.1810584 , 0.21547595, 2.75316724], dtype=float64), 'ra': Array([2.50592332, 2.60276494, 2.92660755], dtype=float64), 'sin_dec': Array([-0.35163853, -0.93922917,  0.0259489 ], dtype=float64)}
07:36 ninjax INFO    : log_prob: [ -1.01608124 -16.83215459 -40.2109532 ]
07:36 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.7308101654910555, 'mass_2_source': 1.3745810662326419, 's1_z': 0.023092397901580866, 's2_z': -0.022094873150829898, 'cos_iota': -0.5498624639215848, 'd_L': 359.008940454154, 't_c': 0.040461512180753, 'phase_c': 1.3106840827131776, 'psi': 2.197855312612573, 'ra': 4.399666389454047, 'sin_dec': -0.8094741810756285, 'q': 0.7941836104496496, 'M_c': 1.4497818214113725, 'eta': 0.24671022535286893, 'iota': Array(2.15299589, dtype=float64, weak_type=True), 'dec': Array(-0.94325603, dtype=float64, weak_type=True), 'lambda_1': 38.16482753475794, 'lambda_2': 209.82768062914877, 'H1_SNR': 10.397070432734608, 'L1_SNR': 10.619765394225805, 'V1_SNR': 5.218879493909363, 'network_SNR': 15.751672729700418, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
07:36 ninjax INFO    : log_prob at the injection parameters is: 86.65358279963989
07:36 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
07:36 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
07:36 ninjax INFO    : Ninjax setup complete.
07:36 ninjax INFO    : Saving output to ./Aplus/injection_2/
07:36 ninjax INFO    : Using polynomial learning rate scheduler
07:36 ninjax INFO    : The hyperparameters passed to flowMC and jim are
07:36 ninjax INFO    :    n_loop_training: 200
07:36 ninjax INFO    :    n_loop_production: 10
07:36 ninjax INFO    :    n_local_steps: 100
07:36 ninjax INFO    :    n_global_steps: 1000
07:36 ninjax INFO    :    n_epochs: 25
07:36 ninjax INFO    :    n_chains: 1000
07:36 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x150ef0bbfbe0>
07:36 ninjax INFO    :    max_samples: 50000
07:36 ninjax INFO    :    momentum: 0.9
07:36 ninjax INFO    :    batch_size: 30000
07:36 ninjax INFO    :    use_global: True
07:36 ninjax INFO    :    keep_quantile: 0.0
07:36 ninjax INFO    :    train_thinning: 10
07:36 ninjax INFO    :    output_thinning: 50
07:36 ninjax INFO    :    n_sample_max: 10000
07:36 ninjax INFO    :    num_layers: 10
07:36 ninjax INFO    :    hidden_size: [128, 128]
07:36 ninjax INFO    :    num_bins: 8
07:36 ninjax INFO    :    save_training_chains: False
07:36 ninjax INFO    :    eps_mass_matrix: 1e-05
07:36 ninjax INFO    :    use_scheduler: True
07:36 ninjax INFO    :    use_temperature: False
07:36 ninjax INFO    :    which_temperature_schedule: exponential
07:36 ninjax INFO    :    starting_temperature: 2.0
07:36 ninjax INFO    :    stop_tempering_iteration: 75
07:36 ninjax INFO    :    stopping_criterion_global_acc: 0.1
07:36 ninjax INFO    :    stopping_criterion_loss: -inf
07:36 ninjax INFO    :    nf_model_kwargs: {}
07:36 ninjax INFO    :    local sampler arg not shown (pretty print)
07:36 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[-5.11527114e-23  3.65893858e-23  4.25923195e-23 -3.34196838e-23
 -1.30566355e-23 -6.48836924e-23 -9.00313882e-25  1.55629358e-24
 -4.34601337e-23 -1.89780518e-23]
[-5.83574297e-23  9.81096640e-24  3.36467799e-23  8.06917193e-25
  3.87467026e-23 -9.93635360e-23  3.78517895e-23  4.73513846e-24
 -7.88381763e-24  5.84300739e-24]
Checking the noise that was generated in inject_signal ifo:
[ 6.04113864e-23 -5.76621874e-23  8.41673525e-23  2.31224647e-23
 -5.24281715e-23 -1.38761937e-23  3.59540548e-23 -4.52880776e-23
 -6.56074207e-24  5.85544236e-23]
[-4.33470943e-24  9.29630885e-25 -8.44860649e-23  4.61656484e-24
 -3.29576798e-23 -4.97644271e-23 -7.80720064e-24 -1.95502146e-25
  1.07945195e-22 -1.44658703e-23]
Checking the noise that was generated in inject_signal ifo:
[ 2.83326031e-23  7.23492390e-25  8.38961810e-24  2.66580200e-23
  1.23475327e-23  3.67675365e-23 -3.10398818e-23  3.31654528e-23
  2.07304462e-24 -4.91677931e-23]
[-7.57869181e-23 -1.57152088e-23 -1.02045010e-23 -9.04292272e-24
  7.21423766e-23 -2.86124290e-23  1.58008230e-23  5.41511739e-23
 -8.07646936e-24  6.44387836e-24]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.10986924171447754 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.7308101654910555, 'mass_2_source': 1.3745810662326419, 's1_z': 0.023092397901580866, 's2_z': -0.022094873150829898, 'cos_iota': -0.5498624639215848, 'd_L': 359.008940454154, 't_c': 0.040461512180753, 'phase_c': 1.3106840827131776, 'psi': 2.197855312612573, 'ra': 4.399666389454047, 'sin_dec': -0.8094741810756285, 'q': 0.7941836104496496, 'M_c': 1.4497818214113725, 'eta': 0.24671022535286893, 'iota': Array(2.15299589, dtype=float64, weak_type=True), 'dec': Array(-0.94325603, dtype=float64, weak_type=True), 'lambda_1': 38.16482753475794, 'lambda_2': 209.82768062914877, 'H1_SNR': 10.397070432734608, 'L1_SNR': 10.619765394225805, 'V1_SNR': 5.218879493909363, 'network_SNR': 15.751672729700418, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.4968912601470947 seconds
Time for h_sky_low and h_sky_center: 5.194293260574341 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.6409337520599365
Going to compute coefficients . . .
Time for computing coefficients: 119.63235592842102 seconds
Time for computing coefficients: 7.2573769092559814 seconds
Time for computing coefficients: 7.172983884811401 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:00<6:40:07, 120.64s/it]Tuning global sampler:   1%|          | 2/200 [02:05<2:52:49, 52.37s/it] Tuning global sampler:   2%|▏         | 3/200 [02:09<1:40:19, 30.56s/it]Tuning global sampler:   2%|▏         | 4/200 [02:14<1:06:19, 20.30s/it]Tuning global sampler:   2%|▎         | 5/200 [02:19<47:35, 14.64s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:23<36:18, 11.23s/it]Tuning global sampler:   4%|▎         | 7/200 [02:28<29:58,  9.32s/it]Tuning global sampler:   4%|▍         | 8/200 [02:33<25:00,  7.82s/it]Tuning global sampler:   4%|▍         | 9/200 [02:38<21:36,  6.79s/it]Tuning global sampler:   5%|▌         | 10/200 [02:42<19:11,  6.06s/it]Tuning global sampler:   6%|▌         | 11/200 [02:47<17:40,  5.61s/it]Tuning global sampler:   6%|▌         | 12/200 [02:51<16:35,  5.30s/it]Tuning global sampler:   6%|▋         | 13/200 [02:56<15:47,  5.07s/it]Tuning global sampler:   7%|▋         | 14/200 [03:00<15:17,  4.93s/it]Tuning global sampler:   8%|▊         | 15/200 [03:05<14:55,  4.84s/it]Tuning global sampler:   8%|▊         | 16/200 [03:10<14:38,  4.77s/it]Tuning global sampler:   8%|▊         | 17/200 [03:14<14:25,  4.73s/it]Tuning global sampler:   9%|▉         | 18/200 [03:19<14:14,  4.70s/it]Tuning global sampler:  10%|▉         | 19/200 [03:24<14:06,  4.68s/it]Tuning global sampler:  10%|█         | 20/200 [03:28<13:59,  4.66s/it]Tuning global sampler:  10%|█         | 21/200 [03:33<13:52,  4.65s/it]Tuning global sampler:  11%|█         | 22/200 [03:38<14:31,  4.89s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:43<14:11,  4.81s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:47<13:45,  4.69s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:52<13:25,  4.60s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:56<13:09,  4.54s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:00<12:57,  4.50s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:05<12:47,  4.46s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:09<12:39,  4.44s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:14<12:32,  4.43s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:18<12:25,  4.41s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:22<12:20,  4.40s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:27<12:12,  4.39s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:31<12:06,  4.38s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:35<12:03,  4.38s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:40<12:00,  4.39s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:44<11:55,  4.39s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:49<11:51,  4.39s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:53<11:46,  4.39s/it]Tuning global sampler:  20%|██        | 40/200 [04:57<11:42,  4.39s/it]Tuning global sampler:  20%|██        | 41/200 [05:03<12:21,  4.66s/it]Tuning global sampler:  21%|██        | 42/200 [05:07<12:03,  4.58s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:12<11:50,  4.52s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:16<11:38,  4.48s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:20<11:27,  4.44s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:25<11:20,  4.42s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:29<11:14,  4.41s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:33<11:08,  4.40s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:38<11:03,  4.40s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:42<10:58,  4.39s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:47<10:54,  4.39s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:51<10:49,  4.39s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:55<10:44,  4.39s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:00<10:41,  4.39s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:04<10:35,  4.38s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:08<10:30,  4.38s/it]