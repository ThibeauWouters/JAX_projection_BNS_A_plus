Wed Apr  2 07:33:40 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
07:33 ninjax INFO    : Checking and setting outdir
07:33 ninjax INFO    : Found generation prior file ./Aplus/injection_20/generation_prior.prior
07:33 ninjax INFO    : The outdir is set to ./Aplus/injection_20
07:33 ninjax INFO    : Loading the given config
07:33 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
07:33 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
07:33 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/jester_soft/Aplus/injection_20/complete_config.json
07:33 ninjax INFO    : No seed specified. Generating a random seed: 428985
07:33 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 255352
07:33 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 634472
07:33 ninjax INFO    : Loading the priors
07:33 ninjax INFO    : Setting up the prior
07:33 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
07:33 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
07:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
07:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
07:33 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
07:33 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
07:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
07:33 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
07:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
07:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
07:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
07:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
07:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
07:33 ninjax INFO    : Setting up the generation prior
07:33 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 1.99, naming=["mass_1_source"])
07:33 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 1.99, naming=["mass_2_source"])
07:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
07:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
07:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
07:33 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
07:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
07:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
07:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
07:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
07:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
07:33 ninjax INFO    : Finished prior setup
07:33 ninjax INFO    : Setting the transforms
07:33 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
07:33 ninjax INFO    : transforms_str_list has 3 elements
07:33 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
07:33 ninjax INFO    : Setting the likelihood
07:33 ninjax INFO    : GW likelihood provided, setting up the GW pipe
07:33 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz
07:33 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz for BNS injections
07:33 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
07:33 ninjax INFO    : self.is_BNS_run is True
07:33 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
07:33 ninjax INFO    : GW run is an injection
07:33 ninjax INFO    : Setting up GW injection . . . 
07:33 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
07:33 ninjax INFO    : Generating new injection
07:33 ninjax INFO    : Sanity check: generated parameters:
07:33 ninjax INFO    : {'mass_1_source': 1.852786592460736, 'mass_2_source': 1.511118902697303, 's1_z': 0.038014672978291975, 's2_z': 0.008357840051690268, 'cos_iota': -0.7931487902113581, 'd_L': 226.06701939990134, 't_c': -0.008682705135211993, 'phase_c': 3.500211997223089, 'psi': 0.5333055891117647, 'ra': 2.3494921827712316, 'sin_dec': -0.811562337666639}
07:33 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz . . . 
07:33 ninjax INFO    : Injected lambda_1: 20.85921878268389
07:33 ninjax INFO    : Injected lambda_2: 107.4447960377755
07:33 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.5294735220509714 is 128.0
07:33 ninjax INFO    : After transforms, the injection parameters are:
07:33 ninjax INFO    : {'mass_1_source': 1.852786592460736, 'mass_2_source': 1.511118902697303, 's1_z': 0.038014672978291975, 's2_z': 0.008357840051690268, 'cos_iota': -0.7931487902113581, 'd_L': 226.06701939990134, 't_c': -0.008682705135211993, 'phase_c': 3.500211997223089, 'psi': 0.5333055891117647, 'ra': 2.3494921827712316, 'sin_dec': -0.811562337666639, 'q': 0.815592529029663, 'M_c': 1.5294735220509714, 'eta': 0.24742094705202022, 'iota': Array(2.48675825, dtype=float64, weak_type=True), 'dec': Array(-0.94682119, dtype=float64, weak_type=True), 'lambda_1': 20.85921878268389, 'lambda_2': 107.4447960377755}
07:33 ninjax INFO    : The trial injection parameters are {'M_c': 1.5294735220509714, 'eta': 0.24742094705202022, 's1_z': 0.038014672978291975, 's2_z': 0.008357840051690268, 'lambda_1': 20.85921878268389, 'lambda_2': 107.4447960377755, 'd_L': 226.06701939990134, 'phase_c': 3.500211997223089, 'iota': 2.4867582473724816, 't_c': -0.008682705135211993, 'psi': 0.5333055891117647, 'ra': 2.3494921827712316, 'dec': -0.9468211891361387}
07:33 ninjax INFO    : Injecting signals . . .
07:33 ninjax INFO    : self.ifos
07:33 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
07:33 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
07:33 ninjax INFO    : [ 3.40097296e-23-5.78075204e-23j  1.82758075e-23-4.85120166e-23j
 -3.90118110e-23-4.06845346e-23j ...
 -1.36931111e-23+1.26538231e-23j  2.00020564e-24-8.03952554e-24j
  3.08949332e-23-4.50210558e-24j]
07:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
07:33 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
07:33 ninjax INFO    : [ 7.07235452e-24+2.94713763e-23j -3.70131829e-23-3.50380236e-23j
  5.43794964e-23-8.79917093e-23j ...
 -2.13197031e-23+1.94974360e-23j  8.00517052e-25+1.30932282e-23j
  5.92978602e-24+3.62025071e-23j]
07:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
07:33 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
07:33 ninjax INFO    : [-7.84190353e-23-3.00951291e-23j -3.55231203e-23-1.81730080e-23j
 -5.97106643e-23-2.82743374e-23j ...
  1.37944572e-23+1.83801816e-23j  1.04950093e-24+2.09681022e-23j
 -3.34072488e-23+1.18942137e-23j]
07:33 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
07:33 ninjax INFO    : SNR for ifo H1 is 17.97343812547495
07:33 ninjax INFO    : SNR for ifo L1 is 11.995877756782251
07:33 ninjax INFO    : SNR for ifo V1 is 10.66406938079731
07:33 ninjax INFO    : The network SNR is 24.0970524538666
07:33 ninjax INFO    : Network SNR passes threshold
07:33 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
07:33 ninjax INFO    :    mass_1_source: 1.852786592460736
07:33 ninjax INFO    :    mass_2_source: 1.511118902697303
07:33 ninjax INFO    :    s1_z: 0.038014672978291975
07:33 ninjax INFO    :    s2_z: 0.008357840051690268
07:33 ninjax INFO    :    cos_iota: -0.7931487902113581
07:33 ninjax INFO    :    d_L: 226.06701939990134
07:33 ninjax INFO    :    t_c: -0.008682705135211993
07:33 ninjax INFO    :    phase_c: 3.500211997223089
07:33 ninjax INFO    :    psi: 0.5333055891117647
07:33 ninjax INFO    :    ra: 2.3494921827712316
07:33 ninjax INFO    :    sin_dec: -0.811562337666639
07:33 ninjax INFO    :    q: 0.815592529029663
07:33 ninjax INFO    :    M_c: 1.5294735220509714
07:33 ninjax INFO    :    eta: 0.24742094705202022
07:33 ninjax INFO    :    iota: 2.4867582473724816
07:33 ninjax INFO    :    dec: -0.9468211891361387
07:33 ninjax INFO    :    lambda_1: 20.85921878268389
07:33 ninjax INFO    :    lambda_2: 107.4447960377755
07:33 ninjax INFO    :    H1_SNR: 17.97343812547495
07:33 ninjax INFO    :    L1_SNR: 11.995877756782251
07:33 ninjax INFO    :    V1_SNR: 10.66406938079731
07:33 ninjax INFO    :    network_SNR: 24.0970524538666
07:33 ninjax INFO    :    epoch: 126.0
07:33 ninjax INFO    :    gmst: 2.7288901910520846
07:33 ninjax INFO    :    duration: 128.0
07:33 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
07:33 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
07:33 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
07:36 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 144.2363622188568 seconds = 2.4039393703142804 minutes
07:36 ninjax INFO    : The priors are not modified after their initialization
07:36 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
07:36 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
07:36 ninjax INFO    : sample: {'M_c': Array([1.0635067 , 1.93560092, 1.56750269], dtype=float64), 'q': Array([0.61548894, 0.64738396, 0.7490557 ], dtype=float64), 's1_z': Array([-0.0355271 , -0.00868718, -0.02153667], dtype=float64), 's2_z': Array([-0.00934071, -0.01023906,  0.04725246], dtype=float64), 'lambda_1': Array([2346.12501391, 4548.14672154, 3015.91069146], dtype=float64), 'lambda_2': Array([1016.71288612, 2563.09607477, 3325.13758086], dtype=float64), 'cos_iota': Array([-0.10871873, -0.14805619, -0.88728294], dtype=float64), 'd_L': Array([889.80769303, 949.04777709, 568.30902301], dtype=float64), 't_c': Array([-0.0592323 , -0.02718285,  0.07884026], dtype=float64), 'phase_c': Array([0.37568301, 5.23117067, 1.53741755], dtype=float64), 'psi': Array([2.65398681, 0.0544395 , 0.62299853], dtype=float64), 'ra': Array([4.49097748, 2.56868583, 5.79930444], dtype=float64), 'sin_dec': Array([-0.51053937,  0.17939425,  0.57254189], dtype=float64)}
07:36 ninjax INFO    : log_prob: [ -2.15361407  -8.97485302 -35.13053515]
07:36 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.852786592460736, 'mass_2_source': 1.511118902697303, 's1_z': 0.038014672978291975, 's2_z': 0.008357840051690268, 'cos_iota': -0.7931487902113581, 'd_L': 226.06701939990134, 't_c': -0.008682705135211993, 'phase_c': 3.500211997223089, 'psi': 0.5333055891117647, 'ra': 2.3494921827712316, 'sin_dec': -0.811562337666639, 'q': 0.815592529029663, 'M_c': 1.5294735220509714, 'eta': 0.24742094705202022, 'iota': Array(2.48675825, dtype=float64, weak_type=True), 'dec': Array(-0.94682119, dtype=float64, weak_type=True), 'lambda_1': 20.85921878268389, 'lambda_2': 107.4447960377755, 'H1_SNR': 17.97343812547495, 'L1_SNR': 11.995877756782251, 'V1_SNR': 10.66406938079731, 'network_SNR': 24.0970524538666, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
07:36 ninjax INFO    : log_prob at the injection parameters is: 259.286466969462
07:36 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
07:36 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
07:36 ninjax INFO    : Ninjax setup complete.
07:36 ninjax INFO    : Saving output to ./Aplus/injection_20/
07:36 ninjax INFO    : Using polynomial learning rate scheduler
07:36 ninjax INFO    : The hyperparameters passed to flowMC and jim are
07:36 ninjax INFO    :    n_loop_training: 200
07:36 ninjax INFO    :    n_loop_production: 10
07:36 ninjax INFO    :    n_local_steps: 100
07:36 ninjax INFO    :    n_global_steps: 1000
07:36 ninjax INFO    :    n_epochs: 25
07:36 ninjax INFO    :    n_chains: 1000
07:36 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x153d15293be0>
07:36 ninjax INFO    :    max_samples: 50000
07:36 ninjax INFO    :    momentum: 0.9
07:36 ninjax INFO    :    batch_size: 30000
07:36 ninjax INFO    :    use_global: True
07:36 ninjax INFO    :    keep_quantile: 0.0
07:36 ninjax INFO    :    train_thinning: 10
07:36 ninjax INFO    :    output_thinning: 50
07:36 ninjax INFO    :    n_sample_max: 10000
07:36 ninjax INFO    :    num_layers: 10
07:36 ninjax INFO    :    hidden_size: [128, 128]
07:36 ninjax INFO    :    num_bins: 8
07:36 ninjax INFO    :    save_training_chains: False
07:36 ninjax INFO    :    eps_mass_matrix: 1e-05
07:36 ninjax INFO    :    use_scheduler: True
07:36 ninjax INFO    :    use_temperature: False
07:36 ninjax INFO    :    which_temperature_schedule: exponential
07:36 ninjax INFO    :    starting_temperature: 2.0
07:36 ninjax INFO    :    stop_tempering_iteration: 75
07:36 ninjax INFO    :    stopping_criterion_global_acc: 0.1
07:36 ninjax INFO    :    stopping_criterion_loss: -inf
07:36 ninjax INFO    :    nf_model_kwargs: {}
07:36 ninjax INFO    :    local sampler arg not shown (pretty print)
07:36 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[ 2.63678322e-23  1.51309110e-23 -3.58145273e-23 -1.16311867e-23
 -2.29996471e-23  9.54714986e-23 -1.05966390e-23 -8.64133531e-23
 -5.24434806e-23 -3.75195861e-23]
[-5.45284933e-23 -4.08180630e-23 -3.30163251e-23  6.72056144e-24
  6.65288149e-23 -2.81797370e-23  7.73088036e-23 -3.35614097e-23
  6.17315594e-23 -2.25689267e-23]
Checking the noise that was generated in inject_signal ifo:
[ 9.72678483e-24 -3.17054456e-23  5.92784383e-23  5.99988735e-23
 -9.20340088e-23 -4.65293353e-23 -1.49647856e-23  1.57084044e-23
 -3.97608869e-23 -7.04776479e-23]
[ 3.43455263e-23 -3.34246239e-23 -9.05892722e-23  4.43817448e-23
 -1.21949295e-23 -3.16296586e-23 -6.60787404e-23  5.46856105e-23
  4.81525573e-23 -2.76320427e-23]
Checking the noise that was generated in inject_signal ifo:
[-7.52470919e-23 -2.94788507e-23 -5.42815198e-23  1.50095390e-23
  3.32631808e-23  2.99950063e-23 -1.75510561e-23 -5.30227450e-23
  5.76416244e-23  1.41171518e-24]
[-2.46962286e-23 -1.65481225e-23 -3.13827105e-23  7.88033041e-23
 -1.75424417e-23 -5.20234624e-23 -4.21329131e-23  3.57471752e-24
  2.96722574e-23  4.95665090e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.11088061332702637 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.852786592460736, 'mass_2_source': 1.511118902697303, 's1_z': 0.038014672978291975, 's2_z': 0.008357840051690268, 'cos_iota': -0.7931487902113581, 'd_L': 226.06701939990134, 't_c': -0.008682705135211993, 'phase_c': 3.500211997223089, 'psi': 0.5333055891117647, 'ra': 2.3494921827712316, 'sin_dec': -0.811562337666639, 'q': 0.815592529029663, 'M_c': 1.5294735220509714, 'eta': 0.24742094705202022, 'iota': Array(2.48675825, dtype=float64, weak_type=True), 'dec': Array(-0.94682119, dtype=float64, weak_type=True), 'lambda_1': 20.85921878268389, 'lambda_2': 107.4447960377755, 'H1_SNR': 17.97343812547495, 'L1_SNR': 11.995877756782251, 'V1_SNR': 10.66406938079731, 'network_SNR': 24.0970524538666, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5131914615631104 seconds
Time for h_sky_low and h_sky_center: 5.368433713912964 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.6760842800140381
Going to compute coefficients . . .
Time for computing coefficients: 122.76046633720398 seconds
Time for computing coefficients: 7.1809282302856445 seconds
Time for computing coefficients: 7.086699724197388 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:01<6:42:40, 121.41s/it]Tuning global sampler:   1%|          | 2/200 [02:06<2:53:53, 52.70s/it] Tuning global sampler:   2%|▏         | 3/200 [02:10<1:40:56, 30.74s/it]Tuning global sampler:   2%|▏         | 4/200 [02:15<1:06:44, 20.43s/it]Tuning global sampler:   2%|▎         | 5/200 [02:20<48:52, 15.04s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:25<37:09, 11.49s/it]Tuning global sampler:   4%|▎         | 7/200 [02:29<29:39,  9.22s/it]Tuning global sampler:   4%|▍         | 8/200 [02:34<24:48,  7.75s/it]Tuning global sampler:   4%|▍         | 9/200 [02:39<21:29,  6.75s/it]Tuning global sampler:   5%|▌         | 10/200 [02:43<19:06,  6.03s/it]Tuning global sampler:   6%|▌         | 11/200 [02:48<17:36,  5.59s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:33,  5.29s/it]Tuning global sampler:   6%|▋         | 13/200 [02:57<15:47,  5.07s/it]Tuning global sampler:   7%|▋         | 14/200 [03:01<15:18,  4.94s/it]Tuning global sampler:   8%|▊         | 15/200 [03:06<14:56,  4.85s/it]Tuning global sampler:   8%|▊         | 16/200 [03:11<14:39,  4.78s/it]Tuning global sampler:   8%|▊         | 17/200 [03:15<14:27,  4.74s/it]Tuning global sampler:   9%|▉         | 18/200 [03:20<14:17,  4.71s/it]Tuning global sampler:  10%|▉         | 19/200 [03:25<14:08,  4.69s/it]Tuning global sampler:  10%|█         | 20/200 [03:29<14:00,  4.67s/it]Tuning global sampler:  10%|█         | 21/200 [03:34<13:54,  4.66s/it]Tuning global sampler:  11%|█         | 22/200 [03:38<13:47,  4.65s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:43<13:40,  4.63s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:48<13:31,  4.61s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:53<14:03,  4.82s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:57<13:35,  4.69s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:02<13:15,  4.60s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:06<12:59,  4.53s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:10<12:47,  4.49s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:15<12:38,  4.46s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:19<12:29,  4.44s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:24<12:22,  4.42s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:28<12:14,  4.40s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:32<12:07,  4.38s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:37<12:03,  4.39s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:41<11:59,  4.38s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:45<11:54,  4.38s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:50<11:49,  4.38s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:54<11:45,  4.38s/it]Tuning global sampler:  20%|██        | 40/200 [04:59<11:41,  4.38s/it]Tuning global sampler:  20%|██        | 41/200 [05:03<11:37,  4.39s/it]Tuning global sampler:  21%|██        | 42/200 [05:07<11:33,  4.39s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:12<11:29,  4.39s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:17<12:08,  4.67s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:21<11:49,  4.58s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:26<11:36,  4.52s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:30<11:25,  4.48s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:35<11:16,  4.45s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:39<11:10,  4.44s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:43<11:03,  4.42s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:48<10:57,  4.41s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:52<10:52,  4.41s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:57<10:47,  4.40s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:01<10:42,  4.40s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:05<10:36,  4.39s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:10<10:30,  4.38s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:14<10:27,  4.39s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:18<10:23,  4.39s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:23<10:19,  4.39s/it]Tuning global sampler:  30%|███       | 60/200 [06:27<10:15,  4.40s/it]Tuning global sampler:  30%|███       | 60/200 [06:32<15:15,  6.54s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.22s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.22s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.22s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.22s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.22s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.22s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.22s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.22s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]
07:43 ninjax INFO    : Saving samples to ./Aplus/injection_20/results_training.npz
07:43 ninjax INFO    : Saving the NF
07:43 ninjax INFO    : Time taken: 431.094388961792 seconds (7.184906482696533 minutes)
07:43 ninjax INFO    : Creating the final corner plot
07:43 ninjax INFO    : Dumping the final production chains
07:43 ninjax INFO    : Chains shape is: (13, 220000)
07:43 ninjax INFO    : Key: M_c: ESS = 54133, Rhat = 1.013104203404594
07:43 ninjax INFO    : Key: q: ESS = 16891, Rhat = 1.0370904960419534
07:43 ninjax INFO    : Key: s1_z: ESS = 40440, Rhat = 1.0162052005719648
07:43 ninjax INFO    : Key: s2_z: ESS = 32069, Rhat = 1.0203339234073454
07:43 ninjax INFO    : Key: lambda_1: ESS = 30884, Rhat = 1.0210464823276013
07:43 ninjax INFO    : Key: lambda_2: ESS = 36772, Rhat = 1.0184747311210494
07:43 ninjax INFO    : Key: cos_iota: ESS = 34576, Rhat = 1.0190981066296971
07:43 ninjax INFO    : Key: d_L: ESS = 34804, Rhat = 1.0189782002285313
07:43 ninjax INFO    : Key: t_c: ESS = 37202, Rhat = 1.0173538788170806
07:43 ninjax INFO    : Key: phase_c: ESS = 28625, Rhat = 1.0216049319311875
07:43 ninjax INFO    : Key: psi: ESS = 33142, Rhat = 1.0194746923123494
07:43 ninjax INFO    : Key: ra: ESS = 39132, Rhat = 1.0166788792663484
07:43 ninjax INFO    : Key: sin_dec: ESS = 34044, Rhat = 1.0185690982343825
07:43 ninjax INFO    : Key: eta: ESS = 16891, Rhat = 1.0370904960419534
07:43 ninjax INFO    : Key: iota: ESS = 34576, Rhat = 1.0190981066296971
07:43 ninjax INFO    : Key: dec: ESS = 34044, Rhat = 1.0185690982343825
07:43 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.535 +/- 0.115
q: 0.784 +/- 0.200
s1_z: 0.015 +/- 0.026
s2_z: 0.012 +/- 0.028
lambda_1: 1716.858 +/- 1505.172
lambda_2: 2020.596 +/- 1524.573
cos_iota: -0.351 +/- 0.562
d_L: 436.964 +/- 256.138
t_c: -0.007 +/- 0.018
phase_c: 3.025 +/- 1.733
psi: 1.451 +/- 0.860
ra: 2.511 +/- 0.886
sin_dec: -0.625 +/- 0.411
Log probability: 133.253 +/- 108.478
Local acceptance: 0.823 +/- 0.381
Global acceptance: 0.010 +/- 0.102
Max loss: 22.825, Min loss: 7.967
Production summary
==========
M_c: 1.530 +/- 0.000
q: 0.877 +/- 0.079
s1_z: 0.030 +/- 0.014
s2_z: 0.027 +/- 0.016
lambda_1: 300.065 +/- 263.436
lambda_2: 447.843 +/- 382.090
cos_iota: -0.801 +/- 0.156
d_L: 232.537 +/- 39.721
t_c: -0.008 +/- 0.001
phase_c: 3.131 +/- 1.792
psi: 1.559 +/- 0.892
ra: 2.347 +/- 0.014
sin_dec: -0.809 +/- 0.010
Log probability: 255.060 +/- 2.155
Local acceptance: 0.600 +/- 0.490
Global acceptance: 0.116 +/- 0.320
DONE

JOB STATISTICS
==============
Job ID: 10918558
Cluster: snellius
User/Group: twouters2/twouters2
State: RUNNING
Nodes: 1
Cores per node: 16
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 02:48:16 core-walltime
Job Wall-clock time: 00:10:31
Memory Utilized: 0.00 MB
Memory Efficiency: 0.00% of 10.00 GB (10.00 GB/node)
WARNING: Efficiency statistics can only be obtained after the job has ended as seff tool is based on the accounting database data.
