Wed Apr  2 07:33:40 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
07:33 ninjax INFO    : Checking and setting outdir
07:33 ninjax INFO    : Found generation prior file ./Aplus/injection_15/generation_prior.prior
07:33 ninjax INFO    : The outdir is set to ./Aplus/injection_15
07:33 ninjax INFO    : Loading the given config
07:33 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
07:33 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
07:33 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/jester_soft/Aplus/injection_15/complete_config.json
07:33 ninjax INFO    : No seed specified. Generating a random seed: 472876
07:33 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 536286
07:33 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 523865
07:33 ninjax INFO    : Loading the priors
07:33 ninjax INFO    : Setting up the prior
07:33 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
07:33 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
07:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
07:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
07:33 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
07:33 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
07:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
07:33 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
07:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
07:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
07:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
07:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
07:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
07:33 ninjax INFO    : Setting up the generation prior
07:33 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 1.99, naming=["mass_1_source"])
07:33 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 1.99, naming=["mass_2_source"])
07:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
07:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
07:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
07:33 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
07:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
07:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
07:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
07:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
07:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
07:33 ninjax INFO    : Finished prior setup
07:33 ninjax INFO    : Setting the transforms
07:33 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
07:33 ninjax INFO    : transforms_str_list has 3 elements
07:33 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
07:33 ninjax INFO    : Setting the likelihood
07:33 ninjax INFO    : GW likelihood provided, setting up the GW pipe
07:33 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz
07:33 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz for BNS injections
07:33 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
07:33 ninjax INFO    : self.is_BNS_run is True
07:33 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
07:33 ninjax INFO    : GW run is an injection
07:33 ninjax INFO    : Setting up GW injection . . . 
07:33 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
07:33 ninjax INFO    : Generating new injection
07:33 ninjax INFO    : Sanity check: generated parameters:
07:33 ninjax INFO    : {'mass_1_source': 1.8411762169005712, 'mass_2_source': 1.6287953953031726, 's1_z': -0.014244539670067294, 's2_z': 0.0007718804392645023, 'cos_iota': -0.7909258259109642, 'd_L': 236.989400538125, 't_c': -0.08217767503162975, 'phase_c': 5.250474640361813, 'psi': 1.4071940547853516, 'ra': 5.167694494208444, 'sin_dec': 0.06604769282788947}
07:33 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz . . . 
07:33 ninjax INFO    : Injected lambda_1: 22.199099517394362
07:33 ninjax INFO    : Injected lambda_2: 61.44553005312258
07:33 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.5876939592346018 is 128.0
07:33 ninjax INFO    : After transforms, the injection parameters are:
07:33 ninjax INFO    : {'mass_1_source': 1.8411762169005712, 'mass_2_source': 1.6287953953031726, 's1_z': -0.014244539670067294, 's2_z': 0.0007718804392645023, 'cos_iota': -0.7909258259109642, 'd_L': 236.989400538125, 't_c': -0.08217767503162975, 'phase_c': 5.250474640361813, 'psi': 1.4071940547853516, 'ra': 5.167694494208444, 'sin_dec': 0.06604769282788947, 'q': 0.8846493781269239, 'M_c': 1.5876939592346018, 'eta': 0.24906347633062367, 'iota': Array(2.48311685, dtype=float64, weak_type=True), 'dec': Array(0.06609581, dtype=float64, weak_type=True), 'lambda_1': 22.199099517394362, 'lambda_2': 61.44553005312258}
07:33 ninjax INFO    : The trial injection parameters are {'M_c': 1.5876939592346018, 'eta': 0.24906347633062367, 's1_z': -0.014244539670067294, 's2_z': 0.0007718804392645023, 'lambda_1': 22.199099517394362, 'lambda_2': 61.44553005312258, 'd_L': 236.989400538125, 'phase_c': 5.250474640361813, 'iota': 2.4831168531302312, 't_c': -0.08217767503162975, 'psi': 1.4071940547853516, 'ra': 5.167694494208444, 'dec': 0.06609580728823977}
07:33 ninjax INFO    : Injecting signals . . .
07:33 ninjax INFO    : self.ifos
07:33 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
07:33 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
07:33 ninjax INFO    : [ 6.43626863e-24+2.98818684e-23j -3.71447360e-24+8.13729154e-23j
 -7.13348154e-23-5.07847096e-25j ...
 -1.50029863e-24+4.16307066e-23j -1.90896275e-23-1.13813953e-23j
 -3.61715665e-23+7.36707577e-24j]
07:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
07:33 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
07:33 ninjax INFO    : [-3.90963569e-23+7.61858775e-23j  1.36683253e-22+7.07085855e-23j
 -5.05705394e-23-5.53674134e-23j ...
 -8.41970465e-25+4.54001999e-23j -3.27813983e-23-4.39788277e-24j
  7.33329780e-24-2.17250214e-23j]
07:33 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
07:33 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
07:33 ninjax INFO    : [ 5.46987516e-23-1.82255045e-23j -6.69755833e-24+4.35756113e-23j
 -9.97866276e-24-4.64954879e-23j ...
  1.68693946e-23+9.96219970e-24j  5.11098313e-23+8.54251484e-24j
 -7.95324945e-24+4.76790919e-24j]
07:33 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
07:33 ninjax INFO    : SNR for ifo H1 is 2.163027549129597
07:33 ninjax INFO    : SNR for ifo L1 is 13.033613364193622
07:33 ninjax INFO    : SNR for ifo V1 is 8.47330941053897
07:33 ninjax INFO    : The network SNR is 15.695564273778388
07:33 ninjax INFO    : Network SNR passes threshold
07:33 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
07:33 ninjax INFO    :    mass_1_source: 1.8411762169005712
07:33 ninjax INFO    :    mass_2_source: 1.6287953953031726
07:33 ninjax INFO    :    s1_z: -0.014244539670067294
07:33 ninjax INFO    :    s2_z: 0.0007718804392645023
07:33 ninjax INFO    :    cos_iota: -0.7909258259109642
07:33 ninjax INFO    :    d_L: 236.989400538125
07:33 ninjax INFO    :    t_c: -0.08217767503162975
07:33 ninjax INFO    :    phase_c: 5.250474640361813
07:33 ninjax INFO    :    psi: 1.4071940547853516
07:33 ninjax INFO    :    ra: 5.167694494208444
07:33 ninjax INFO    :    sin_dec: 0.06604769282788947
07:33 ninjax INFO    :    q: 0.8846493781269239
07:33 ninjax INFO    :    M_c: 1.5876939592346018
07:33 ninjax INFO    :    eta: 0.24906347633062367
07:33 ninjax INFO    :    iota: 2.4831168531302312
07:33 ninjax INFO    :    dec: 0.06609580728823977
07:33 ninjax INFO    :    lambda_1: 22.199099517394362
07:33 ninjax INFO    :    lambda_2: 61.44553005312258
07:33 ninjax INFO    :    H1_SNR: 2.163027549129597
07:33 ninjax INFO    :    L1_SNR: 13.033613364193622
07:33 ninjax INFO    :    V1_SNR: 8.47330941053897
07:33 ninjax INFO    :    network_SNR: 15.695564273778388
07:33 ninjax INFO    :    epoch: 126.0
07:33 ninjax INFO    :    gmst: 2.7288901910520846
07:33 ninjax INFO    :    duration: 128.0
07:33 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
07:33 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
07:33 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
07:36 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 144.6404914855957 seconds = 2.4106748580932615 minutes
07:36 ninjax INFO    : The priors are not modified after their initialization
07:36 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
07:36 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
07:36 ninjax INFO    : sample: {'M_c': Array([1.83852755, 1.02695491, 1.12473517], dtype=float64), 'q': Array([0.54716516, 0.36440758, 0.96451028], dtype=float64), 's1_z': Array([ 0.02999552, -0.04509184,  0.02652063], dtype=float64), 's2_z': Array([-0.03199417,  0.02603202,  0.03161107], dtype=float64), 'lambda_1': Array([2888.62135051,  111.12110664,   22.24587873], dtype=float64), 'lambda_2': Array([  36.7893563 , 2163.31010535, 2485.76385926], dtype=float64), 'cos_iota': Array([ 0.44822151, -0.28624675,  0.69950955], dtype=float64), 'd_L': Array([968.80905667, 373.06579422, 803.61073838], dtype=float64), 't_c': Array([ 0.0661472 , -0.07267338, -0.02099949], dtype=float64), 'phase_c': Array([2.48236576, 6.09837104, 0.92827609], dtype=float64), 'psi': Array([1.15386484, 2.69603325, 2.50266039], dtype=float64), 'ra': Array([2.67093733, 1.82832303, 3.38669855], dtype=float64), 'sin_dec': Array([ 0.50573969, -0.67165417, -0.81448933], dtype=float64)}
07:36 ninjax INFO    : log_prob: [-14.91460426 -12.40884333 -24.70225501]
07:36 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.8411762169005712, 'mass_2_source': 1.6287953953031726, 's1_z': -0.014244539670067294, 's2_z': 0.0007718804392645023, 'cos_iota': -0.7909258259109642, 'd_L': 236.989400538125, 't_c': -0.08217767503162975, 'phase_c': 5.250474640361813, 'psi': 1.4071940547853516, 'ra': 5.167694494208444, 'sin_dec': 0.06604769282788947, 'q': 0.8846493781269239, 'M_c': 1.5876939592346018, 'eta': 0.24906347633062367, 'iota': Array(2.48311685, dtype=float64, weak_type=True), 'dec': Array(0.06609581, dtype=float64, weak_type=True), 'lambda_1': 22.199099517394362, 'lambda_2': 61.44553005312258, 'H1_SNR': 2.163027549129597, 'L1_SNR': 13.033613364193622, 'V1_SNR': 8.47330941053897, 'network_SNR': 15.695564273778388, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
07:36 ninjax INFO    : log_prob at the injection parameters is: 88.3832587330734
07:36 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
07:36 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
07:36 ninjax INFO    : Ninjax setup complete.
07:36 ninjax INFO    : Saving output to ./Aplus/injection_15/
07:36 ninjax INFO    : Using polynomial learning rate scheduler
07:36 ninjax INFO    : The hyperparameters passed to flowMC and jim are
07:36 ninjax INFO    :    n_loop_training: 200
07:36 ninjax INFO    :    n_loop_production: 10
07:36 ninjax INFO    :    n_local_steps: 100
07:36 ninjax INFO    :    n_global_steps: 1000
07:36 ninjax INFO    :    n_epochs: 25
07:36 ninjax INFO    :    n_chains: 1000
07:36 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x14b5226dfbe0>
07:36 ninjax INFO    :    max_samples: 50000
07:36 ninjax INFO    :    momentum: 0.9
07:36 ninjax INFO    :    batch_size: 30000
07:36 ninjax INFO    :    use_global: True
07:36 ninjax INFO    :    keep_quantile: 0.0
07:36 ninjax INFO    :    train_thinning: 10
07:36 ninjax INFO    :    output_thinning: 50
07:36 ninjax INFO    :    n_sample_max: 10000
07:36 ninjax INFO    :    num_layers: 10
07:36 ninjax INFO    :    hidden_size: [128, 128]
07:36 ninjax INFO    :    num_bins: 8
07:36 ninjax INFO    :    save_training_chains: False
07:36 ninjax INFO    :    eps_mass_matrix: 1e-05
07:36 ninjax INFO    :    use_scheduler: True
07:36 ninjax INFO    :    use_temperature: False
07:36 ninjax INFO    :    which_temperature_schedule: exponential
07:36 ninjax INFO    :    starting_temperature: 2.0
07:36 ninjax INFO    :    stop_tempering_iteration: 75
07:36 ninjax INFO    :    stopping_criterion_global_acc: 0.1
07:36 ninjax INFO    :    stopping_criterion_loss: -inf
07:36 ninjax INFO    :    nf_model_kwargs: {}
07:36 ninjax INFO    :    local sampler arg not shown (pretty print)
07:36 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[ 7.11426612e-24 -4.06521623e-24 -7.23302166e-23 -5.65674611e-23
  3.41539011e-24 -8.78393314e-23 -9.08411007e-24 -8.58142372e-23
  5.42507634e-23  2.84672950e-23]
[ 2.91440574e-23  8.04347759e-23 -6.14544493e-25 -4.26931536e-23
  1.32642441e-23 -1.34793820e-23 -5.55341938e-24 -3.35511194e-23
  3.16077807e-23  3.90204391e-25]
Checking the noise that was generated in inject_signal ifo:
[-3.62494460e-23  1.42716889e-22 -4.79875432e-23 -3.71088188e-23
 -7.47255855e-23 -2.96135153e-23 -7.67595034e-24  1.33920692e-23
 -1.92946454e-23  7.73902372e-23]
[ 8.15103740e-23  7.05781356e-23 -6.08187036e-23 -1.58090906e-23
 -9.86175666e-24 -1.90203019e-23 -4.68292267e-23 -1.97758847e-23
  5.14492104e-24  2.65772401e-23]
Checking the noise that was generated in inject_signal ifo:
[ 5.25822269e-23 -1.16733449e-23 -1.23413901e-23 -2.74653594e-23
  1.71483512e-23 -3.14342856e-23  9.08308496e-24 -8.47350839e-24
 -1.26456819e-23  2.03445302e-23]
[-2.27337898e-23  4.34234791e-23 -4.21163980e-23  3.63124776e-23
  5.70215371e-23  2.36218356e-23  4.01747340e-23 -7.85332324e-24
 -7.29498858e-23  7.48031619e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.11007285118103027 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.8411762169005712, 'mass_2_source': 1.6287953953031726, 's1_z': -0.014244539670067294, 's2_z': 0.0007718804392645023, 'cos_iota': -0.7909258259109642, 'd_L': 236.989400538125, 't_c': -0.08217767503162975, 'phase_c': 5.250474640361813, 'psi': 1.4071940547853516, 'ra': 5.167694494208444, 'sin_dec': 0.06604769282788947, 'q': 0.8846493781269239, 'M_c': 1.5876939592346018, 'eta': 0.24906347633062367, 'iota': Array(2.48311685, dtype=float64, weak_type=True), 'dec': Array(0.06609581, dtype=float64, weak_type=True), 'lambda_1': 22.199099517394362, 'lambda_2': 61.44553005312258, 'H1_SNR': 2.163027549129597, 'L1_SNR': 13.033613364193622, 'V1_SNR': 8.47330941053897, 'network_SNR': 15.695564273778388, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5168612003326416 seconds
Time for h_sky_low and h_sky_center: 5.3236448764801025 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.6752736568450928
Going to compute coefficients . . .
Time for computing coefficients: 122.89660573005676 seconds
Time for computing coefficients: 7.295342206954956 seconds
Time for computing coefficients: 7.286937236785889 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:00<6:40:56, 120.89s/it]Tuning global sampler:   1%|          | 2/200 [02:05<2:53:10, 52.48s/it] Tuning global sampler:   2%|▏         | 3/200 [02:10<1:40:32, 30.62s/it]Tuning global sampler:   2%|▏         | 4/200 [02:14<1:06:29, 20.35s/it]Tuning global sampler:   2%|▎         | 5/200 [02:20<48:42, 14.99s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:24<37:03, 11.46s/it]Tuning global sampler:   4%|▎         | 7/200 [02:29<29:35,  9.20s/it]Tuning global sampler:   4%|▍         | 8/200 [02:33<24:46,  7.74s/it]Tuning global sampler:   4%|▍         | 9/200 [02:38<21:28,  6.75s/it]Tuning global sampler:   5%|▌         | 10/200 [02:42<19:06,  6.03s/it]Tuning global sampler:   6%|▌         | 11/200 [02:47<17:37,  5.60s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:34,  5.29s/it]Tuning global sampler:   6%|▋         | 13/200 [02:56<15:48,  5.07s/it]Tuning global sampler:   7%|▋         | 14/200 [03:01<15:19,  4.94s/it]Tuning global sampler:   8%|▊         | 15/200 [03:06<14:58,  4.85s/it]Tuning global sampler:   8%|▊         | 16/200 [03:10<14:42,  4.79s/it]Tuning global sampler:   8%|▊         | 17/200 [03:15<14:29,  4.75s/it]Tuning global sampler:   9%|▉         | 18/200 [03:19<14:18,  4.72s/it]Tuning global sampler:  10%|▉         | 19/200 [03:24<14:10,  4.70s/it]Tuning global sampler:  10%|█         | 20/200 [03:29<14:02,  4.68s/it]Tuning global sampler:  10%|█         | 21/200 [03:33<13:55,  4.67s/it]Tuning global sampler:  11%|█         | 22/200 [03:38<13:47,  4.65s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:43<13:41,  4.64s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:47<13:25,  4.58s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:52<13:59,  4.80s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:57<13:33,  4.68s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:01<13:14,  4.59s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:06<12:59,  4.53s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:10<12:48,  4.49s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:14<12:39,  4.47s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:19<12:32,  4.45s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:23<12:26,  4.44s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:28<12:17,  4.42s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:32<12:10,  4.40s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:36<12:05,  4.40s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:41<12:00,  4.40s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:45<11:56,  4.39s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:49<11:51,  4.39s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:54<11:47,  4.39s/it]Tuning global sampler:  20%|██        | 40/200 [04:58<11:43,  4.40s/it]Tuning global sampler:  20%|██        | 41/200 [05:03<11:38,  4.40s/it]Tuning global sampler:  21%|██        | 42/200 [05:07<11:34,  4.39s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:11<11:30,  4.40s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:16<11:24,  4.39s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:21<12:03,  4.67s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:26<11:46,  4.59s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:30<11:32,  4.53s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:34<11:22,  4.49s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:39<11:13,  4.46s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:43<11:06,  4.44s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:48<10:59,  4.43s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:52<10:53,  4.42s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:56<10:47,  4.41s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:01<10:43,  4.41s/it]