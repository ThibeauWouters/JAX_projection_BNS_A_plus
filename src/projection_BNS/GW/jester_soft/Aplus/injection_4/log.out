Wed Apr  2 07:33:38 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
07:33 ninjax INFO    : Checking and setting outdir
07:33 ninjax INFO    : Found generation prior file ./Aplus/injection_4/generation_prior.prior
07:33 ninjax INFO    : The outdir is set to ./Aplus/injection_4
07:33 ninjax INFO    : Loading the given config
07:33 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
07:33 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/psds/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
07:33 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/jester_soft/Aplus/injection_4/complete_config.json
07:33 ninjax INFO    : No seed specified. Generating a random seed: 147789
07:33 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 452045
07:33 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 769684
07:33 ninjax INFO    : Loading the priors
07:33 ninjax INFO    : Setting up the prior
07:33 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
07:33 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
07:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
07:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
07:33 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
07:33 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
07:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
07:33 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
07:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
07:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
07:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
07:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
07:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
07:33 ninjax INFO    : Setting up the generation prior
07:33 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 1.99, naming=["mass_1_source"])
07:33 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 1.99, naming=["mass_2_source"])
07:33 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
07:33 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
07:33 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
07:33 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
07:33 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
07:33 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
07:33 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
07:33 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
07:33 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
07:33 ninjax INFO    : Finished prior setup
07:33 ninjax INFO    : Setting the transforms
07:33 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
07:33 ninjax INFO    : transforms_str_list has 3 elements
07:33 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
07:33 ninjax INFO    : Setting the likelihood
07:33 ninjax INFO    : GW likelihood provided, setting up the GW pipe
07:33 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz
07:33 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz for BNS injections
07:33 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
07:33 ninjax INFO    : self.is_BNS_run is True
07:33 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
07:33 ninjax INFO    : GW run is an injection
07:33 ninjax INFO    : Setting up GW injection . . . 
07:33 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
07:33 ninjax INFO    : Generating new injection
07:33 ninjax INFO    : Sanity check: generated parameters:
07:33 ninjax INFO    : {'mass_1_source': 1.3728655340586753, 'mass_2_source': 1.3364709256693923, 's1_z': -0.0082240224223884, 's2_z': 0.0018455885754498497, 'cos_iota': 0.7079677353401626, 'd_L': 398.32630806656346, 't_c': 0.09141801976105302, 'phase_c': 2.9360732829749536, 'psi': 2.2011470339624433, 'ra': 6.065429653731775, 'sin_dec': 0.6229130074677958}
07:33 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/eos/jester_soft.npz . . . 
07:33 ninjax INFO    : Injected lambda_1: 211.71349459291343
07:33 ninjax INFO    : Injected lambda_2: 255.5177164834292
07:33 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.285310785058803 is 256.0
07:33 ninjax INFO    : After transforms, the injection parameters are:
07:33 ninjax INFO    : {'mass_1_source': 1.3728655340586753, 'mass_2_source': 1.3364709256693923, 's1_z': -0.0082240224223884, 's2_z': 0.0018455885754498497, 'cos_iota': 0.7079677353401626, 'd_L': 398.32630806656346, 't_c': 0.09141801976105302, 'phase_c': 2.9360732829749536, 'psi': 2.2011470339624433, 'ra': 6.065429653731775, 'sin_dec': 0.6229130074677958, 'q': 0.9734900414597141, 'M_c': 1.285310785058803, 'eta': 0.2499548884003597, 'iota': Array(0.78417985, dtype=float64, weak_type=True), 'dec': Array(0.67246089, dtype=float64, weak_type=True), 'lambda_1': 211.71349459291343, 'lambda_2': 255.5177164834292}
07:33 ninjax INFO    : The trial injection parameters are {'M_c': 1.285310785058803, 'eta': 0.2499548884003597, 's1_z': -0.0082240224223884, 's2_z': 0.0018455885754498497, 'lambda_1': 211.71349459291343, 'lambda_2': 255.5177164834292, 'd_L': 398.32630806656346, 'phase_c': 2.9360732829749536, 'iota': 0.7841798479092124, 't_c': 0.09141801976105302, 'psi': 2.2011470339624433, 'ra': 6.065429653731775, 'dec': 0.6724608948793405}
07:33 ninjax INFO    : Injecting signals . . .
07:33 ninjax INFO    : self.ifos
07:33 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
07:33 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
07:33 ninjax INFO    : [-6.81474829e-23+3.82528557e-23j -5.80643930e-23+4.13112481e-23j
 -3.08013991e-24+1.20507291e-22j ...
 -7.43759498e-24+1.54579838e-23j -9.39008884e-24-5.41759978e-23j
  2.46583026e-23-2.93898134e-24j]
07:33 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
07:33 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
07:33 ninjax INFO    : [-1.92224317e-23+1.50996479e-23j -2.97498079e-23-9.96978767e-23j
  2.41726495e-23-1.27828933e-23j ...
 -2.78093614e-23+1.03081256e-23j  4.87301831e-23-3.69067371e-23j
 -1.88599557e-23-4.42005931e-24j]
07:33 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
07:33 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
07:33 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
07:33 ninjax INFO    : [ 1.59251012e-23+2.54957182e-23j -4.77087041e-23-5.27245766e-23j
 -3.49691903e-23+5.13118414e-23j ...
 -3.87113883e-23-3.49149485e-23j  3.25240296e-23-4.22029118e-23j
  4.42331837e-23+1.42631747e-23j]
07:33 ninjax INFO    : [1.43183556e-46 1.43058540e-46 1.42935095e-46 ... 6.39793039e-47
 6.39795354e-47 6.39797668e-47]
07:33 ninjax INFO    : SNR for ifo H1 is 9.339336042173596
07:33 ninjax INFO    : SNR for ifo L1 is 5.35720811458051
07:33 ninjax INFO    : SNR for ifo V1 is 3.5219016434296675
07:33 ninjax INFO    : The network SNR is 11.328136107831801
07:33 ninjax INFO    : Network SNR passes threshold
07:33 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
07:33 ninjax INFO    :    mass_1_source: 1.3728655340586753
07:33 ninjax INFO    :    mass_2_source: 1.3364709256693923
07:33 ninjax INFO    :    s1_z: -0.0082240224223884
07:33 ninjax INFO    :    s2_z: 0.0018455885754498497
07:33 ninjax INFO    :    cos_iota: 0.7079677353401626
07:33 ninjax INFO    :    d_L: 398.32630806656346
07:33 ninjax INFO    :    t_c: 0.09141801976105302
07:33 ninjax INFO    :    phase_c: 2.9360732829749536
07:33 ninjax INFO    :    psi: 2.2011470339624433
07:33 ninjax INFO    :    ra: 6.065429653731775
07:33 ninjax INFO    :    sin_dec: 0.6229130074677958
07:33 ninjax INFO    :    q: 0.9734900414597141
07:33 ninjax INFO    :    M_c: 1.285310785058803
07:33 ninjax INFO    :    eta: 0.2499548884003597
07:33 ninjax INFO    :    iota: 0.7841798479092124
07:33 ninjax INFO    :    dec: 0.6724608948793405
07:33 ninjax INFO    :    lambda_1: 211.71349459291343
07:33 ninjax INFO    :    lambda_2: 255.5177164834292
07:33 ninjax INFO    :    H1_SNR: 9.339336042173596
07:33 ninjax INFO    :    L1_SNR: 5.35720811458051
07:33 ninjax INFO    :    V1_SNR: 3.5219016434296675
07:33 ninjax INFO    :    network_SNR: 11.328136107831801
07:33 ninjax INFO    :    epoch: 254.0
07:33 ninjax INFO    :    gmst: 2.7288901910520846
07:33 ninjax INFO    :    duration: 256.0
07:33 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
07:33 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
07:33 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
07:36 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 184.6263782978058 seconds = 3.0771063049634297 minutes
07:36 ninjax INFO    : The priors are not modified after their initialization
07:36 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
07:36 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
07:36 ninjax INFO    : sample: {'M_c': Array([1.0110687 , 1.7664456 , 2.29090964], dtype=float64), 'q': Array([0.75872886, 0.19137787, 0.213784  ], dtype=float64), 's1_z': Array([ 0.02423625, -0.0340805 ,  0.03595339], dtype=float64), 's2_z': Array([ 0.01027947, -0.00777986,  0.01461708], dtype=float64), 'lambda_1': Array([1079.21724285, 1516.95055458, 4344.75242873], dtype=float64), 'lambda_2': Array([1041.59646349,  215.1320373 ,  643.77218814], dtype=float64), 'cos_iota': Array([0.87217964, 0.45282168, 0.52783465], dtype=float64), 'd_L': Array([832.25182545, 622.72605663, 914.16863919], dtype=float64), 't_c': Array([-0.05854057,  0.01426938,  0.07633273], dtype=float64), 'phase_c': Array([3.95117624, 0.71178564, 1.796365  ], dtype=float64), 'psi': Array([0.16976261, 1.91220966, 0.05292002], dtype=float64), 'ra': Array([3.27742729, 5.90204396, 2.70030797], dtype=float64), 'sin_dec': Array([ 0.13261264,  0.52325468, -0.82956243], dtype=float64)}
07:37 ninjax INFO    : log_prob: [-15.95512592 -27.93237882 -25.85973706]
07:37 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.3728655340586753, 'mass_2_source': 1.3364709256693923, 's1_z': -0.0082240224223884, 's2_z': 0.0018455885754498497, 'cos_iota': 0.7079677353401626, 'd_L': 398.32630806656346, 't_c': 0.09141801976105302, 'phase_c': 2.9360732829749536, 'psi': 2.2011470339624433, 'ra': 6.065429653731775, 'sin_dec': 0.6229130074677958, 'q': 0.9734900414597141, 'M_c': 1.285310785058803, 'eta': 0.2499548884003597, 'iota': Array(0.78417985, dtype=float64, weak_type=True), 'dec': Array(0.67246089, dtype=float64, weak_type=True), 'lambda_1': 211.71349459291343, 'lambda_2': 255.5177164834292, 'H1_SNR': 9.339336042173596, 'L1_SNR': 5.35720811458051, 'V1_SNR': 3.5219016434296675, 'network_SNR': 11.328136107831801, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
07:37 ninjax INFO    : log_prob at the injection parameters is: 42.410370996472935
07:37 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
07:37 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
07:37 ninjax INFO    : Ninjax setup complete.
07:37 ninjax INFO    : Saving output to ./Aplus/injection_4/
07:37 ninjax INFO    : Using polynomial learning rate scheduler
07:37 ninjax INFO    : The hyperparameters passed to flowMC and jim are
07:37 ninjax INFO    :    n_loop_training: 200
07:37 ninjax INFO    :    n_loop_production: 10
07:37 ninjax INFO    :    n_local_steps: 100
07:37 ninjax INFO    :    n_global_steps: 1000
07:37 ninjax INFO    :    n_epochs: 25
07:37 ninjax INFO    :    n_chains: 1000
07:37 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x1515fdb2e4d0>
07:37 ninjax INFO    :    max_samples: 50000
07:37 ninjax INFO    :    momentum: 0.9
07:37 ninjax INFO    :    batch_size: 30000
07:37 ninjax INFO    :    use_global: True
07:37 ninjax INFO    :    keep_quantile: 0.0
07:37 ninjax INFO    :    train_thinning: 10
07:37 ninjax INFO    :    output_thinning: 50
07:37 ninjax INFO    :    n_sample_max: 10000
07:37 ninjax INFO    :    num_layers: 10
07:37 ninjax INFO    :    hidden_size: [128, 128]
07:37 ninjax INFO    :    num_bins: 8
07:37 ninjax INFO    :    save_training_chains: False
07:37 ninjax INFO    :    eps_mass_matrix: 1e-05
07:37 ninjax INFO    :    use_scheduler: True
07:37 ninjax INFO    :    use_temperature: False
07:37 ninjax INFO    :    which_temperature_schedule: exponential
07:37 ninjax INFO    :    starting_temperature: 2.0
07:37 ninjax INFO    :    stop_tempering_iteration: 75
07:37 ninjax INFO    :    stopping_criterion_global_acc: 0.1
07:37 ninjax INFO    :    stopping_criterion_loss: -inf
07:37 ninjax INFO    :    nf_model_kwargs: {}
07:37 ninjax INFO    :    local sampler arg not shown (pretty print)
07:37 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[-7.23456391e-23 -5.48901550e-23 -4.41516282e-24 -1.14937256e-22
  1.95780113e-22  4.18508231e-23 -4.05731218e-23  9.63374384e-23
  9.33945819e-24  4.31262573e-23]
[ 3.72813864e-23  4.42239759e-23  1.16412295e-22 -2.24859571e-24
 -1.54389666e-23 -6.01225755e-23 -1.43615855e-22 -1.06198649e-23
 -1.55852821e-23  6.80134270e-23]
Checking the noise that was generated in inject_signal ifo:
[-1.74558456e-23 -3.21381372e-23  2.65644584e-23  2.58743758e-23
 -5.49860214e-23 -9.47601058e-23  9.50240986e-23 -8.22029779e-23
  1.02522678e-22 -6.14994343e-23]
[ 1.33708260e-23 -9.90632601e-23 -1.21637726e-23  2.65021266e-23
 -6.40498257e-23 -3.83169989e-23  5.98248217e-23  9.88168778e-23
 -7.98671050e-23 -1.12139878e-22]
Checking the noise that was generated in inject_signal ifo:
[ 1.63106024e-23 -4.90415599e-23 -3.30358753e-23 -3.76575396e-23
 -4.52523304e-23 -7.11064514e-23  7.67773387e-24 -2.71737472e-23
  3.07938528e-23 -2.45338427e-23]
[ 2.34687778e-23 -5.11502052e-23  5.05938609e-23 -3.99755025e-23
  3.18978330e-23  9.94857203e-23  2.17396243e-23  3.14963808e-23
  6.14769451e-23 -1.73325510e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.18527436256408691 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.3728655340586753, 'mass_2_source': 1.3364709256693923, 's1_z': -0.0082240224223884, 's2_z': 0.0018455885754498497, 'cos_iota': 0.7079677353401626, 'd_L': 398.32630806656346, 't_c': 0.09141801976105302, 'phase_c': 2.9360732829749536, 'psi': 2.2011470339624433, 'ra': 6.065429653731775, 'sin_dec': 0.6229130074677958, 'q': 0.9734900414597141, 'M_c': 1.285310785058803, 'eta': 0.2499548884003597, 'iota': Array(0.78417985, dtype=float64, weak_type=True), 'dec': Array(0.67246089, dtype=float64, weak_type=True), 'lambda_1': 211.71349459291343, 'lambda_2': 255.5177164834292, 'H1_SNR': 9.339336042173596, 'L1_SNR': 5.35720811458051, 'V1_SNR': 3.5219016434296675, 'network_SNR': 11.328136107831801, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5151829719543457 seconds
Time for h_sky_low and h_sky_center: 5.535602569580078 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.73769211769104
Going to compute coefficients . . .
Time for computing coefficients: 162.4661045074463 seconds
Time for computing coefficients: 7.228075265884399 seconds
Time for computing coefficients: 7.412813663482666 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:02<6:46:05, 122.44s/it]Tuning global sampler:   1%|          | 2/200 [02:07<2:55:16, 53.11s/it] Tuning global sampler:   2%|▏         | 3/200 [02:11<1:41:42, 30.98s/it]Tuning global sampler:   2%|▏         | 4/200 [02:16<1:07:12, 20.57s/it]Tuning global sampler:   2%|▎         | 5/200 [02:20<48:09, 14.82s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:25<36:41, 11.35s/it]Tuning global sampler:   4%|▎         | 7/200 [02:30<29:21,  9.13s/it]Tuning global sampler:   4%|▍         | 8/200 [02:34<24:36,  7.69s/it]Tuning global sampler:   4%|▍         | 9/200 [02:39<21:21,  6.71s/it]Tuning global sampler:   5%|▌         | 10/200 [02:43<19:00,  6.01s/it]Tuning global sampler:   6%|▌         | 11/200 [02:48<17:33,  5.58s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:32,  5.28s/it]Tuning global sampler:   6%|▋         | 13/200 [02:57<15:47,  5.07s/it]Tuning global sampler:   7%|▋         | 14/200 [03:02<15:18,  4.94s/it]Tuning global sampler:   8%|▊         | 15/200 [03:06<14:57,  4.85s/it]Tuning global sampler:   8%|▊         | 16/200 [03:11<14:41,  4.79s/it]Tuning global sampler:   8%|▊         | 17/200 [03:16<14:28,  4.75s/it]Tuning global sampler:   9%|▉         | 18/200 [03:21<15:11,  5.01s/it]Tuning global sampler:  10%|▉         | 19/200 [03:26<14:46,  4.90s/it]Tuning global sampler:  10%|█         | 20/200 [03:30<14:28,  4.83s/it]Tuning global sampler:  10%|█         | 21/200 [03:35<14:15,  4.78s/it]Tuning global sampler:  11%|█         | 22/200 [03:40<14:01,  4.73s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:44<13:50,  4.69s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:49<13:31,  4.61s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:53<13:15,  4.55s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:58<13:02,  4.50s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:02<12:52,  4.47s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:06<12:44,  4.44s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:11<12:37,  4.43s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:15<12:30,  4.42s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:19<12:24,  4.41s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:24<12:19,  4.40s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:28<12:12,  4.39s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:33<12:06,  4.38s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:37<12:03,  4.38s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:41<11:58,  4.38s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:47<12:42,  4.68s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:51<12:24,  4.59s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:56<12:09,  4.53s/it]Tuning global sampler:  20%|██        | 40/200 [05:00<11:58,  4.49s/it]Tuning global sampler:  20%|██        | 41/200 [05:04<11:49,  4.46s/it]Tuning global sampler:  21%|██        | 42/200 [05:09<11:41,  4.44s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:13<11:34,  4.42s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:17<11:27,  4.41s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:22<11:20,  4.39s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:26<11:16,  4.39s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:31<11:11,  4.39s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:35<11:07,  4.39s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:39<11:03,  4.39s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:44<10:59,  4.40s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:48<10:54,  4.40s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:53<10:50,  4.40s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:57<10:46,  4.40s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:01<10:41,  4.39s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:06<10:35,  4.38s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:10<10:29,  4.37s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:14<10:26,  4.38s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:20<11:06,  4.69s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:24<10:49,  4.61s/it]Tuning global sampler:  30%|███       | 60/200 [06:29<10:35,  4.54s/it]Tuning global sampler:  30%|███       | 61/200 [06:33<10:25,  4.50s/it]Tuning global sampler:  31%|███       | 62/200 [06:37<10:16,  4.47s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:42<10:10,  4.46s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:46<10:03,  4.43s/it]Tuning global sampler:  32%|███▎      | 65/200 [06:51<09:56,  4.42s/it]Tuning global sampler:  33%|███▎      | 66/200 [06:55<09:49,  4.40s/it]Tuning global sampler:  34%|███▎      | 67/200 [06:59<09:43,  4.39s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:04<09:39,  4.39s/it]Tuning global sampler:  34%|███▍      | 69/200 [07:08<09:35,  4.40s/it]Tuning global sampler:  35%|███▌      | 70/200 [07:13<09:31,  4.40s/it]Tuning global sampler:  36%|███▌      | 71/200 [07:17<09:27,  4.40s/it]Tuning global sampler:  36%|███▌      | 72/200 [07:21<09:23,  4.40s/it]Tuning global sampler:  36%|███▋      | 73/200 [07:26<09:18,  4.40s/it]Tuning global sampler:  37%|███▋      | 74/200 [07:30<09:14,  4.40s/it]Tuning global sampler:  38%|███▊      | 75/200 [07:35<09:10,  4.41s/it]Tuning global sampler:  38%|███▊      | 76/200 [07:39<09:06,  4.41s/it]Tuning global sampler:  38%|███▊      | 77/200 [07:43<09:00,  4.39s/it]Tuning global sampler:  39%|███▉      | 78/200 [07:48<08:54,  4.38s/it]Tuning global sampler:  40%|███▉      | 79/200 [07:53<09:27,  4.69s/it]Tuning global sampler:  40%|████      | 80/200 [07:58<09:12,  4.60s/it]Tuning global sampler:  40%|████      | 81/200 [08:02<09:00,  4.54s/it]Tuning global sampler:  41%|████      | 82/200 [08:06<08:51,  4.50s/it]Tuning global sampler:  42%|████▏     | 83/200 [08:11<08:43,  4.47s/it]Tuning global sampler:  42%|████▏     | 84/200 [08:15<08:36,  4.45s/it]Tuning global sampler:  42%|████▎     | 85/200 [08:20<08:29,  4.43s/it]Tuning global sampler:  43%|████▎     | 86/200 [08:24<08:24,  4.42s/it]Tuning global sampler:  44%|████▎     | 87/200 [08:28<08:19,  4.42s/it]Tuning global sampler:  44%|████▍     | 88/200 [08:33<08:13,  4.40s/it]Tuning global sampler:  44%|████▍     | 89/200 [08:37<08:07,  4.39s/it]Tuning global sampler:  45%|████▌     | 90/200 [08:41<08:02,  4.39s/it]Tuning global sampler:  46%|████▌     | 91/200 [08:46<07:59,  4.39s/it]Tuning global sampler:  46%|████▌     | 92/200 [08:50<07:55,  4.40s/it]Tuning global sampler:  46%|████▋     | 93/200 [08:55<07:51,  4.41s/it]Tuning global sampler:  47%|████▋     | 94/200 [08:59<07:47,  4.41s/it]Tuning global sampler:  48%|████▊     | 95/200 [09:04<07:43,  4.41s/it]Tuning global sampler:  48%|████▊     | 96/200 [09:08<07:40,  4.43s/it]Tuning global sampler:  48%|████▊     | 97/200 [09:12<07:36,  4.43s/it]Tuning global sampler:  49%|████▉     | 98/200 [09:17<07:31,  4.43s/it]Tuning global sampler:  50%|████▉     | 99/200 [09:21<07:24,  4.40s/it]Tuning global sampler:  50%|█████     | 100/200 [09:26<07:19,  4.39s/it]Tuning global sampler:  50%|█████     | 101/200 [09:31<07:48,  4.73s/it]Tuning global sampler:  51%|█████     | 102/200 [09:36<07:33,  4.63s/it]Tuning global sampler:  52%|█████▏    | 103/200 [09:40<07:22,  4.56s/it]Tuning global sampler:  52%|█████▏    | 104/200 [09:44<07:12,  4.51s/it]Tuning global sampler:  52%|█████▎    | 105/200 [09:49<07:04,  4.47s/it]Tuning global sampler:  52%|█████▎    | 105/200 [09:53<08:57,  5.65s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.22s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.22s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.22s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.22s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.22s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.22s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.22s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.22s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]
07:47 ninjax INFO    : Saving samples to ./Aplus/injection_4/results_training.npz
07:47 ninjax INFO    : Saving the NF
07:47 ninjax INFO    : Time taken: 632.1661047935486 seconds (10.536101746559144 minutes)
07:47 ninjax INFO    : Creating the final corner plot
07:47 ninjax INFO    : Dumping the final production chains
07:47 ninjax INFO    : Chains shape is: (13, 220000)
07:47 ninjax INFO    : Key: M_c: ESS = 47469, Rhat = 1.014908650082511
07:47 ninjax INFO    : Key: q: ESS = 28149, Rhat = 1.0233024352908153
07:47 ninjax INFO    : Key: s1_z: ESS = 26978, Rhat = 1.023340190280702
07:47 ninjax INFO    : Key: s2_z: ESS = 33336, Rhat = 1.0200559609550013
07:47 ninjax INFO    : Key: lambda_1: ESS = 28336, Rhat = 1.0224086821147542
07:47 ninjax INFO    : Key: lambda_2: ESS = 36157, Rhat = 1.0190541114139435
07:47 ninjax INFO    : Key: cos_iota: ESS = 18949, Rhat = 1.0331417750900933
07:47 ninjax INFO    : Key: d_L: ESS = 30745, Rhat = 1.0214836788795103
07:47 ninjax INFO    : Key: t_c: ESS = 36057, Rhat = 1.0187063072826021
07:47 ninjax INFO    : Key: phase_c: ESS = 19810, Rhat = 1.0322879197966681
07:47 ninjax INFO    : Key: psi: ESS = 48510, Rhat = 1.0148013347746747
07:47 ninjax INFO    : Key: ra: ESS = 42293, Rhat = 1.0158265033541813
07:47 ninjax INFO    : Key: sin_dec: ESS = 21133, Rhat = 1.0286353821173577
07:47 ninjax INFO    : Key: eta: ESS = 28149, Rhat = 1.0233024352908153
07:47 ninjax INFO    : Key: iota: ESS = 18949, Rhat = 1.0331417750900933
07:47 ninjax INFO    : Key: dec: ESS = 21133, Rhat = 1.0286353821173577
07:47 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.400 +/- 0.316
q: 0.677 +/- 0.245
s1_z: 0.005 +/- 0.027
s2_z: 0.005 +/- 0.028
lambda_1: 2273.033 +/- 1453.342
lambda_2: 2444.696 +/- 1417.809
cos_iota: 0.236 +/- 0.477
d_L: 725.315 +/- 200.392
t_c: 0.048 +/- 0.060
phase_c: 2.970 +/- 1.759
psi: 1.416 +/- 0.907
ra: 4.658 +/- 1.809
sin_dec: 0.342 +/- 0.510
Log probability: -0.733 +/- 24.191
Local acceptance: 0.952 +/- 0.214
Global acceptance: 0.028 +/- 0.164
Max loss: 22.802, Min loss: 7.691
Production summary
==========
M_c: 1.285 +/- 0.000
q: 0.855 +/- 0.096
s1_z: 0.018 +/- 0.022
s2_z: 0.013 +/- 0.024
lambda_1: 1554.090 +/- 1158.027
lambda_2: 1994.809 +/- 1356.216
cos_iota: 0.764 +/- 0.235
d_L: 438.145 +/- 90.979
t_c: 0.094 +/- 0.002
phase_c: 3.100 +/- 1.800
psi: 1.550 +/- 0.915
ra: 6.019 +/- 0.041
sin_dec: 0.619 +/- 0.035
Log probability: 39.523 +/- 2.324
Local acceptance: 0.808 +/- 0.394
Global acceptance: 0.100 +/- 0.300
DONE

JOB STATISTICS
==============
Job ID: 10918542
Cluster: snellius
User/Group: twouters2/twouters2
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 00:12:44
CPU Efficiency: 5.49% of 03:52:00 core-walltime
Job Wall-clock time: 00:14:30
Memory Utilized: 4.69 GB
Memory Efficiency: 46.92% of 10.00 GB (10.00 GB/node)
