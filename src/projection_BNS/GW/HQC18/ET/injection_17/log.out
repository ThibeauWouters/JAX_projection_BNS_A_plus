Sat Mar 29 11:32:21 CET 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
11:32 ninjax INFO    : Checking and setting outdir
11:32 ninjax INFO    : Found generation prior file ./ET/injection_17/generation_prior.prior
11:32 ninjax INFO    : The outdir is set to ./ET/injection_17
11:32 ninjax INFO    : Loading the given config
11:32 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
11:32 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'ET', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '2000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
11:32 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/HQC18/ET/injection_17/complete_config.json
11:32 ninjax INFO    : No seed specified. Generating a random seed: 112496
11:32 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 718536
11:32 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 20961
11:32 ninjax INFO    : Loading the priors
11:32 ninjax INFO    : Setting up the prior
11:32 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
11:32 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
11:32 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
11:32 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
11:32 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
11:32 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
11:32 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
11:32 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1500.0, 2.0, naming=["d_L"])
11:32 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
11:32 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
11:32 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
11:32 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
11:32 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
11:32 ninjax INFO    : Setting up the generation prior
11:32 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.0452447532113593, naming=["mass_1_source"])
11:32 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.0452447532113593, naming=["mass_2_source"])
11:32 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
11:32 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
11:32 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
11:32 ninjax INFO    :    dL_prior = PowerLaw(100.0, 1000.0, 2.0, naming=["d_L"])
11:32 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
11:32 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
11:32 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
11:32 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
11:32 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
11:32 ninjax INFO    : Finished prior setup
11:32 ninjax INFO    : Setting the transforms
11:32 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
11:32 ninjax INFO    : transforms_str_list has 3 elements
11:32 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
11:32 ninjax INFO    : Setting the likelihood
11:32 ninjax INFO    : GW likelihood provided, setting up the GW pipe
11:32 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz
11:32 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz for BNS injections
11:32 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
11:32 ninjax INFO    : self.is_BNS_run is True
11:32 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
11:32 ninjax INFO    : GW run is an injection
11:32 ninjax INFO    : Setting up GW injection . . . 
11:32 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
11:32 ninjax INFO    : Generating new injection
11:32 ninjax INFO    : Sanity check: generated parameters:
11:32 ninjax INFO    : {'mass_1_source': 1.5598424373931818, 'mass_2_source': 1.5631570363567464, 's1_z': 0.041668867385407427, 's2_z': 0.009585924766985367, 'cos_iota': -0.7521866674049433, 'd_L': 827.8012869493762, 't_c': 0.08911113627487005, 'phase_c': 5.247490752949253, 'psi': 0.2411295479867899, 'ra': 1.8459565474634112, 'sin_dec': -0.4728820826443747}
11:32 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz . . . 
11:32 ninjax INFO    : Injected lambda_1: 124.40576936354456
11:32 ninjax INFO    : Injected lambda_2: 126.22755146335062
11:32 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.6136283380341738 is 128.0
11:32 ninjax INFO    : After transforms, the injection parameters are:
11:32 ninjax INFO    : {'mass_1_source': 1.5631570363567464, 'mass_2_source': 1.5598424373931818, 's1_z': 0.041668867385407427, 's2_z': 0.009585924766985367, 'cos_iota': -0.7521866674049433, 'd_L': 827.8012869493762, 't_c': 0.08911113627487005, 'phase_c': 5.247490752949253, 'psi': 0.2411295479867899, 'ra': 1.8459565474634112, 'sin_dec': -0.4728820826443747, 'q': 0.9978795483201803, 'M_c': 1.6136283380341738, 'eta': 0.2499997183834544, 'iota': Array(2.42217056, dtype=float64, weak_type=True), 'dec': Array(-0.49255883, dtype=float64, weak_type=True), 'lambda_1': 124.40576936354456, 'lambda_2': 126.22755146335062}
11:32 ninjax INFO    : The trial injection parameters are {'M_c': 1.6136283380341738, 'eta': 0.2499997183834544, 's1_z': 0.041668867385407427, 's2_z': 0.009585924766985367, 'lambda_1': 124.40576936354456, 'lambda_2': 126.22755146335062, 'd_L': 827.8012869493762, 'phase_c': 5.247490752949253, 'iota': 2.422170561819559, 't_c': 0.08911113627487005, 'psi': 0.2411295479867899, 'ra': 1.8459565474634112, 'dec': -0.49255882759987935}
11:32 ninjax INFO    : Injecting signals . . .
11:32 ninjax INFO    : self.ifos
11:32 ninjax INFO    : [GroundBased2G(ET1), GroundBased2G(ET2), GroundBased2G(ET3)]
11:32 ninjax INFO    : Signal injected in ifo ET1. Frequencies, data, and PSD:
11:32 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:32 ninjax INFO    : [ 2.57576836e-24+3.11755468e-24j  3.11387583e-24+2.87825438e-24j
 -6.94007943e-25+1.93482702e-26j ...
  5.25023051e-24-1.61492140e-24j  4.71546581e-24+1.99064660e-25j
 -5.17609702e-24-1.00344413e-24j]
11:32 ninjax INFO    : [8.83385322e-49 8.82885595e-49 8.82385867e-49 ... 1.23822108e-48
 1.23823022e-48 1.23823937e-48]
11:32 ninjax INFO    : Signal injected in ifo ET2. Frequencies, data, and PSD:
11:32 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:32 ninjax INFO    : [ 9.71784968e-24-1.82078219e-24j  1.04383578e-25-2.68967032e-24j
 -3.90267544e-24+2.37743398e-24j ...
 -2.34562627e-24-1.97826622e-24j  7.33980279e-24+9.40767780e-25j
  4.08470078e-24-3.47903909e-24j]
11:32 ninjax INFO    : [8.83385322e-49 8.82885595e-49 8.82385867e-49 ... 1.23822108e-48
 1.23823022e-48 1.23823937e-48]
11:32 ninjax INFO    : Signal injected in ifo ET3. Frequencies, data, and PSD:
11:32 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:32 ninjax INFO    : [-3.89336216e-24-3.26478079e-24j -9.23689033e-25+5.93232807e-26j
  3.05635734e-24-7.35029037e-25j ...
 -9.73814364e-25-3.29597400e-24j -3.27277344e-24-5.98486373e-24j
  3.08147174e-24-2.31261721e-24j]
11:32 ninjax INFO    : [8.83385322e-49 8.82885595e-49 8.82385867e-49 ... 1.23822108e-48
 1.23823022e-48 1.23823937e-48]
11:32 ninjax INFO    : SNR for ifo ET1 is 14.737388103485138
11:32 ninjax INFO    : SNR for ifo ET2 is 15.409987248790774
11:32 ninjax INFO    : SNR for ifo ET3 is 0.8763375059607079
11:32 ninjax INFO    : The network SNR is 21.340718885384177
11:32 ninjax INFO    : Network SNR passes threshold
11:32 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
11:32 ninjax INFO    :    mass_1_source: 1.5631570363567464
11:32 ninjax INFO    :    mass_2_source: 1.5598424373931818
11:32 ninjax INFO    :    s1_z: 0.041668867385407427
11:32 ninjax INFO    :    s2_z: 0.009585924766985367
11:32 ninjax INFO    :    cos_iota: -0.7521866674049433
11:32 ninjax INFO    :    d_L: 827.8012869493762
11:32 ninjax INFO    :    t_c: 0.08911113627487005
11:32 ninjax INFO    :    phase_c: 5.247490752949253
11:32 ninjax INFO    :    psi: 0.2411295479867899
11:32 ninjax INFO    :    ra: 1.8459565474634112
11:32 ninjax INFO    :    sin_dec: -0.4728820826443747
11:32 ninjax INFO    :    q: 0.9978795483201803
11:32 ninjax INFO    :    M_c: 1.6136283380341738
11:32 ninjax INFO    :    eta: 0.2499997183834544
11:32 ninjax INFO    :    iota: 2.422170561819559
11:32 ninjax INFO    :    dec: -0.49255882759987935
11:32 ninjax INFO    :    lambda_1: 124.40576936354456
11:32 ninjax INFO    :    lambda_2: 126.22755146335062
11:32 ninjax INFO    :    ET1_SNR: 14.737388103485138
11:32 ninjax INFO    :    ET2_SNR: 15.409987248790774
11:32 ninjax INFO    :    ET3_SNR: 0.8763375059607079
11:32 ninjax INFO    :    network_SNR: 21.340718885384177
11:32 ninjax INFO    :    epoch: 126.0
11:32 ninjax INFO    :    gmst: 2.7288901910520846
11:32 ninjax INFO    :    duration: 128.0
11:32 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
11:32 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
11:32 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
11:34 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 140.8102560043335 seconds = 2.346837600072225 minutes
11:34 ninjax INFO    : The priors are not modified after their initialization
11:34 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
11:34 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
11:34 ninjax INFO    : sample: {'M_c': Array([2.39176233, 2.00674289, 2.49353352], dtype=float64), 'q': Array([0.98037026, 0.72308854, 0.67707968], dtype=float64), 's1_z': Array([-0.00502883,  0.00388145,  0.02689983], dtype=float64), 's2_z': Array([-0.04025614, -0.01410841, -0.00826467], dtype=float64), 'lambda_1': Array([ 523.17004716, 3540.99802015,  293.25734904], dtype=float64), 'lambda_2': Array([3100.14475372, 4945.41364806, 2845.80986346], dtype=float64), 'cos_iota': Array([-0.76386029,  0.50709984,  0.63300608], dtype=float64), 'd_L': Array([1237.91039271,  378.99619863,  837.20733842], dtype=float64), 't_c': Array([-0.06337181,  0.04689085,  0.04562206], dtype=float64), 'phase_c': Array([1.58273977, 1.95828335, 4.08160218], dtype=float64), 'psi': Array([1.04549027, 0.25330384, 2.25449604], dtype=float64), 'ra': Array([0.97428232, 3.84323807, 2.5923876 ], dtype=float64), 'sin_dec': Array([-0.86505324, -0.25903123,  0.77314282], dtype=float64)}
11:35 ninjax INFO    : log_prob: [ -859.31916424 -1041.1570065  -2395.02438895]
11:35 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.5631570363567464, 'mass_2_source': 1.5598424373931818, 's1_z': 0.041668867385407427, 's2_z': 0.009585924766985367, 'cos_iota': -0.7521866674049433, 'd_L': 827.8012869493762, 't_c': 0.08911113627487005, 'phase_c': 5.247490752949253, 'psi': 0.2411295479867899, 'ra': 1.8459565474634112, 'sin_dec': -0.4728820826443747, 'q': 0.9978795483201803, 'M_c': 1.6136283380341738, 'eta': 0.2499997183834544, 'iota': Array(2.42217056, dtype=float64, weak_type=True), 'dec': Array(-0.49255883, dtype=float64, weak_type=True), 'lambda_1': 124.40576936354456, 'lambda_2': 126.22755146335062, 'ET1_SNR': 14.737388103485138, 'ET2_SNR': 15.409987248790774, 'ET3_SNR': 0.8763375059607079, 'network_SNR': 21.340718885384177, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
11:35 ninjax INFO    : log_prob at the injection parameters is: 198.40861847088576
11:35 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
11:35 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
11:35 ninjax INFO    : Ninjax setup complete.
11:35 ninjax INFO    : Saving output to ./ET/injection_17/
11:35 ninjax INFO    : Using polynomial learning rate scheduler
11:35 ninjax INFO    : The hyperparameters passed to flowMC and jim are
11:35 ninjax INFO    :    n_loop_training: 200
11:35 ninjax INFO    :    n_loop_production: 10
11:35 ninjax INFO    :    n_local_steps: 100
11:35 ninjax INFO    :    n_global_steps: 1000
11:35 ninjax INFO    :    n_epochs: 25
11:35 ninjax INFO    :    n_chains: 1000
11:35 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x14d6b5c96680>
11:35 ninjax INFO    :    max_samples: 50000
11:35 ninjax INFO    :    momentum: 0.9
11:35 ninjax INFO    :    batch_size: 30000
11:35 ninjax INFO    :    use_global: True
11:35 ninjax INFO    :    keep_quantile: 0.0
11:35 ninjax INFO    :    train_thinning: 10
11:35 ninjax INFO    :    output_thinning: 50
11:35 ninjax INFO    :    n_sample_max: 10000
11:35 ninjax INFO    :    num_layers: 10
11:35 ninjax INFO    :    hidden_size: [128, 128]
11:35 ninjax INFO    :    num_bins: 8
11:35 ninjax INFO    :    save_training_chains: False
11:35 ninjax INFO    :    eps_mass_matrix: 1e-05
11:35 ninjax INFO    :    use_scheduler: True
11:35 ninjax INFO    :    use_temperature: False
11:35 ninjax INFO    :    which_temperature_schedule: exponential
11:35 ninjax INFO    :    starting_temperature: 2.0
11:35 ninjax INFO    :    stop_tempering_iteration: 75
11:35 ninjax INFO    :    stopping_criterion_global_acc: 0.1
11:35 ninjax INFO    :    stopping_criterion_loss: -inf
11:35 ninjax INFO    :    nf_model_kwargs: {}
11:35 ninjax INFO    :    local sampler arg not shown (pretty print)
11:35 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[ 3.73662414e-24  3.71261884e-24 -1.47144065e-24 -4.79064859e-24
 -5.66204180e-24 -5.36833853e-24  4.01903472e-24  2.41145109e-24
 -2.52028928e-24 -4.71370563e-24]
[ 3.35397590e-24  1.85663673e-24 -8.73126152e-25 -7.04034880e-25
 -5.98292535e-25 -5.95666694e-25  6.73383427e-24  2.50385488e-24
 -2.36800268e-24  4.07472973e-24]
Checking the noise that was generated in inject_signal ifo:
[ 8.49541449e-24 -4.80195151e-25 -3.05451953e-24 -1.77046964e-24
 -1.84516400e-24 -5.74082794e-24 -8.61257842e-24 -1.90046388e-24
 -3.80738493e-24 -4.00232278e-25]
[-2.02119059e-24 -1.59816964e-24  3.27872977e-24 -5.33133414e-25
  1.23887219e-24  2.70841399e-24  4.65142050e-24  3.78347933e-24
 -2.09755037e-24 -5.30896704e-24]
Checking the noise that was generated in inject_signal ifo:
[-3.83339474e-24 -9.39276081e-25  2.98633382e-24 -2.60660052e-24
 -8.95657965e-25  1.97043683e-24  7.24145895e-24 -1.60577809e-24
  1.28749048e-24 -1.65448400e-25]
[-3.30174695e-24 -9.34322150e-27 -7.42115060e-25 -6.66903599e-25
  2.58377123e-24  2.60756902e-24  6.69912111e-25 -1.02525139e-24
 -1.62016203e-24 -1.39619610e-24]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.12342572212219238 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.5631570363567464, 'mass_2_source': 1.5598424373931818, 's1_z': 0.041668867385407427, 's2_z': 0.009585924766985367, 'cos_iota': -0.7521866674049433, 'd_L': 827.8012869493762, 't_c': 0.08911113627487005, 'phase_c': 5.247490752949253, 'psi': 0.2411295479867899, 'ra': 1.8459565474634112, 'sin_dec': -0.4728820826443747, 'q': 0.9978795483201803, 'M_c': 1.6136283380341738, 'eta': 0.2499997183834544, 'iota': Array(2.42217056, dtype=float64, weak_type=True), 'dec': Array(-0.49255883, dtype=float64, weak_type=True), 'lambda_1': 124.40576936354456, 'lambda_2': 126.22755146335062, 'ET1_SNR': 14.737388103485138, 'ET2_SNR': 15.409987248790774, 'ET3_SNR': 0.8763375059607079, 'network_SNR': 21.340718885384177, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5140044689178467 seconds
Time for h_sky_low and h_sky_center: 5.93885064125061 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 1.2449305057525635
Going to compute coefficients . . .
Time for computing coefficients: 105.32190942764282 seconds
Time for computing coefficients: 13.835048913955688 seconds
Time for computing coefficients: 13.288055658340454 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [01:59<6:37:03, 119.71s/it]Tuning global sampler:   1%|          | 2/200 [02:05<2:54:39, 52.93s/it] Tuning global sampler:   2%|▏         | 3/200 [02:12<1:43:46, 31.61s/it]Tuning global sampler:   2%|▏         | 4/200 [02:18<1:10:32, 21.59s/it]Tuning global sampler:   2%|▎         | 5/200 [02:24<52:10, 16.05s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:31<42:00, 12.99s/it]Tuning global sampler:   4%|▎         | 7/200 [02:37<34:36, 10.76s/it]Tuning global sampler:   4%|▍         | 8/200 [02:44<29:49,  9.32s/it]Tuning global sampler:   4%|▍         | 9/200 [02:50<26:31,  8.33s/it]Tuning global sampler:   5%|▌         | 10/200 [02:56<24:08,  7.63s/it]Tuning global sampler:   6%|▌         | 11/200 [03:02<22:39,  7.19s/it]Tuning global sampler:   6%|▌         | 12/200 [03:08<21:37,  6.90s/it]Tuning global sampler:   6%|▋         | 13/200 [03:14<20:49,  6.68s/it]Tuning global sampler:   7%|▋         | 14/200 [03:21<20:19,  6.56s/it]Tuning global sampler:   8%|▊         | 15/200 [03:27<19:56,  6.47s/it]Tuning global sampler:   8%|▊         | 16/200 [03:33<19:39,  6.41s/it]Tuning global sampler:   8%|▊         | 17/200 [03:39<19:25,  6.37s/it]Tuning global sampler:   9%|▉         | 18/200 [03:46<19:13,  6.34s/it]Tuning global sampler:  10%|▉         | 19/200 [03:52<19:03,  6.32s/it]Tuning global sampler:  10%|█         | 20/200 [03:58<18:54,  6.30s/it]Tuning global sampler:  10%|█         | 21/200 [04:05<18:47,  6.30s/it]Tuning global sampler:  11%|█         | 22/200 [04:12<19:23,  6.54s/it]Tuning global sampler:  12%|█▏        | 23/200 [04:18<19:01,  6.45s/it]Tuning global sampler:  12%|█▏        | 24/200 [04:24<18:33,  6.33s/it]Tuning global sampler:  12%|█▎        | 25/200 [04:30<18:10,  6.23s/it]Tuning global sampler:  13%|█▎        | 26/200 [04:36<17:53,  6.17s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:42<17:39,  6.12s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:48<17:27,  6.09s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:54<17:17,  6.06s/it]Tuning global sampler:  15%|█▌        | 30/200 [05:00<17:08,  6.05s/it]Tuning global sampler:  16%|█▌        | 31/200 [05:06<17:00,  6.04s/it]Tuning global sampler:  16%|█▌        | 32/200 [05:12<16:52,  6.03s/it]Tuning global sampler:  16%|█▋        | 33/200 [05:18<16:43,  6.01s/it]Tuning global sampler:  17%|█▋        | 34/200 [05:24<16:36,  6.00s/it]Tuning global sampler:  18%|█▊        | 35/200 [05:30<16:31,  6.01s/it]Tuning global sampler:  18%|█▊        | 36/200 [05:36<16:25,  6.01s/it]Tuning global sampler:  18%|█▊        | 37/200 [05:42<16:19,  6.01s/it]Tuning global sampler:  19%|█▉        | 38/200 [05:48<16:13,  6.01s/it]Tuning global sampler:  20%|█▉        | 39/200 [05:54<16:07,  6.01s/it]Tuning global sampler:  20%|██        | 40/200 [06:01<16:44,  6.28s/it]Tuning global sampler:  20%|██        | 41/200 [06:07<16:26,  6.20s/it]Tuning global sampler:  21%|██        | 42/200 [06:13<16:11,  6.15s/it]Tuning global sampler:  22%|██▏       | 43/200 [06:19<15:59,  6.11s/it]Tuning global sampler:  22%|██▏       | 44/200 [06:25<15:47,  6.08s/it]Tuning global sampler:  22%|██▎       | 45/200 [06:31<15:37,  6.05s/it]Tuning global sampler:  23%|██▎       | 46/200 [06:37<15:30,  6.04s/it]Tuning global sampler:  24%|██▎       | 47/200 [06:43<15:24,  6.04s/it]Tuning global sampler:  24%|██▍       | 48/200 [06:49<15:17,  6.04s/it]Tuning global sampler:  24%|██▍       | 49/200 [06:55<15:11,  6.03s/it]Tuning global sampler:  25%|██▌       | 50/200 [07:01<15:04,  6.03s/it]Tuning global sampler:  26%|██▌       | 51/200 [07:07<14:58,  6.03s/it]Tuning global sampler:  26%|██▌       | 52/200 [07:13<14:52,  6.03s/it]Tuning global sampler:  26%|██▋       | 53/200 [07:19<14:46,  6.03s/it]Tuning global sampler:  27%|██▋       | 54/200 [07:25<14:40,  6.03s/it]Tuning global sampler:  28%|██▊       | 55/200 [07:31<14:32,  6.02s/it]Tuning global sampler:  28%|██▊       | 56/200 [07:37<14:25,  6.01s/it]Tuning global sampler:  28%|██▊       | 57/200 [07:43<14:20,  6.02s/it]Tuning global sampler:  29%|██▉       | 58/200 [07:49<14:15,  6.02s/it]Tuning global sampler:  30%|██▉       | 59/200 [07:55<14:09,  6.03s/it]Tuning global sampler:  30%|███       | 60/200 [08:02<14:44,  6.31s/it]Tuning global sampler:  30%|███       | 61/200 [08:08<14:25,  6.23s/it]Tuning global sampler:  31%|███       | 62/200 [08:14<14:11,  6.17s/it]Tuning global sampler:  32%|███▏      | 63/200 [08:20<13:59,  6.13s/it]Tuning global sampler:  32%|███▏      | 64/200 [08:26<13:49,  6.10s/it]Tuning global sampler:  32%|███▎      | 65/200 [08:33<13:40,  6.08s/it]Tuning global sampler:  33%|███▎      | 66/200 [08:39<13:31,  6.05s/it]Tuning global sampler:  34%|███▎      | 67/200 [08:44<13:22,  6.04s/it]Tuning global sampler:  34%|███▍      | 68/200 [08:51<13:16,  6.03s/it]Tuning global sampler:  34%|███▍      | 69/200 [08:57<13:10,  6.04s/it]Tuning global sampler:  35%|███▌      | 70/200 [09:03<13:04,  6.04s/it]Tuning global sampler:  36%|███▌      | 71/200 [09:09<12:58,  6.04s/it]Tuning global sampler:  36%|███▌      | 72/200 [09:15<12:52,  6.04s/it]Tuning global sampler:  36%|███▋      | 73/200 [09:21<12:46,  6.03s/it]Tuning global sampler:  37%|███▋      | 74/200 [09:27<12:40,  6.03s/it]Tuning global sampler:  38%|███▊      | 75/200 [09:33<12:34,  6.03s/it]Tuning global sampler:  38%|███▊      | 76/200 [09:39<12:29,  6.04s/it]Tuning global sampler:  38%|███▊      | 77/200 [09:45<12:21,  6.03s/it]Tuning global sampler:  39%|███▉      | 78/200 [09:51<12:14,  6.02s/it]Tuning global sampler:  40%|███▉      | 79/200 [09:58<12:42,  6.30s/it]Tuning global sampler:  40%|████      | 80/200 [10:04<12:26,  6.22s/it]Tuning global sampler:  40%|████      | 81/200 [10:10<12:13,  6.16s/it]Tuning global sampler:  41%|████      | 82/200 [10:16<12:02,  6.12s/it]Tuning global sampler:  42%|████▏     | 83/200 [10:22<11:53,  6.10s/it]Tuning global sampler:  42%|████▏     | 84/200 [10:28<11:45,  6.08s/it]Tuning global sampler:  42%|████▎     | 85/200 [10:34<11:37,  6.07s/it]Tuning global sampler:  43%|████▎     | 86/200 [10:40<11:30,  6.06s/it]Tuning global sampler:  44%|████▎     | 87/200 [10:46<11:23,  6.05s/it]Tuning global sampler:  44%|████▍     | 88/200 [10:52<11:15,  6.03s/it]Tuning global sampler:  44%|████▍     | 89/200 [10:58<11:08,  6.02s/it]Tuning global sampler:  45%|████▌     | 90/200 [11:04<11:02,  6.02s/it]Tuning global sampler:  46%|████▌     | 91/200 [11:10<10:57,  6.03s/it]Tuning global sampler:  46%|████▌     | 92/200 [11:16<10:51,  6.03s/it]Tuning global sampler:  46%|████▋     | 93/200 [11:22<10:45,  6.03s/it]Tuning global sampler:  47%|████▋     | 94/200 [11:28<10:40,  6.04s/it]Tuning global sampler:  48%|████▊     | 95/200 [11:34<10:34,  6.05s/it]Tuning global sampler:  48%|████▊     | 96/200 [11:40<10:28,  6.04s/it]Tuning global sampler:  48%|████▊     | 97/200 [11:46<10:23,  6.05s/it]Tuning global sampler:  49%|████▉     | 98/200 [11:53<10:18,  6.06s/it]Tuning global sampler:  50%|████▉     | 99/200 [11:59<10:10,  6.05s/it]Tuning global sampler:  50%|█████     | 100/200 [12:06<10:33,  6.34s/it]Tuning global sampler:  50%|█████     | 101/200 [12:12<10:18,  6.24s/it]Tuning global sampler:  51%|█████     | 102/200 [12:18<10:06,  6.19s/it]Tuning global sampler:  52%|█████▏    | 103/200 [12:24<09:55,  6.14s/it]Tuning global sampler:  52%|█████▏    | 104/200 [12:30<09:46,  6.11s/it]Tuning global sampler:  52%|█████▎    | 105/200 [12:36<09:37,  6.08s/it]Tuning global sampler:  53%|█████▎    | 106/200 [12:42<09:30,  6.07s/it]Tuning global sampler:  54%|█████▎    | 107/200 [12:48<09:23,  6.06s/it]Tuning global sampler:  54%|█████▍    | 108/200 [12:54<09:16,  6.05s/it]Tuning global sampler:  55%|█████▍    | 109/200 [13:00<09:10,  6.05s/it]Tuning global sampler:  55%|█████▌    | 110/200 [13:06<09:02,  6.03s/it]Tuning global sampler:  56%|█████▌    | 111/200 [13:12<08:55,  6.02s/it]Tuning global sampler:  56%|█████▌    | 112/200 [13:18<08:50,  6.02s/it]Tuning global sampler:  56%|█████▋    | 113/200 [13:24<08:44,  6.03s/it]Tuning global sampler:  57%|█████▋    | 114/200 [13:30<08:38,  6.03s/it]Tuning global sampler:  57%|█████▊    | 115/200 [13:36<08:32,  6.03s/it]Tuning global sampler:  58%|█████▊    | 116/200 [13:42<08:26,  6.03s/it]Tuning global sampler:  58%|█████▊    | 117/200 [13:48<08:20,  6.03s/it]Tuning global sampler:  59%|█████▉    | 118/200 [13:54<08:14,  6.03s/it]Tuning global sampler:  60%|█████▉    | 119/200 [14:01<08:33,  6.34s/it]Tuning global sampler:  60%|██████    | 120/200 [14:07<08:20,  6.26s/it]Tuning global sampler:  60%|██████    | 121/200 [14:13<08:08,  6.18s/it]Tuning global sampler:  61%|██████    | 122/200 [14:19<07:58,  6.14s/it]Tuning global sampler:  62%|██████▏   | 123/200 [14:25<07:50,  6.11s/it]Tuning global sampler:  62%|██████▏   | 124/200 [14:31<07:43,  6.09s/it]Tuning global sampler:  62%|██████▎   | 125/200 [14:37<07:36,  6.09s/it]Tuning global sampler:  63%|██████▎   | 126/200 [14:43<07:29,  6.08s/it]Tuning global sampler:  64%|██████▎   | 127/200 [14:50<07:23,  6.07s/it]Tuning global sampler:  64%|██████▍   | 128/200 [14:56<07:16,  6.07s/it]Tuning global sampler:  64%|██████▍   | 129/200 [15:02<07:10,  6.06s/it]Tuning global sampler:  65%|██████▌   | 130/200 [15:08<07:04,  6.06s/it]Tuning global sampler:  66%|██████▌   | 131/200 [15:14<06:58,  6.06s/it]Tuning global sampler:  66%|██████▌   | 132/200 [15:20<06:51,  6.05s/it]Tuning global sampler:  66%|██████▋   | 133/200 [15:26<06:44,  6.04s/it]Tuning global sampler:  67%|██████▋   | 134/200 [15:32<06:39,  6.05s/it]Tuning global sampler:  67%|██████▋   | 134/200 [15:38<07:42,  7.00s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:04<00:43,  4.83s/it]Production run:  20%|██        | 2/10 [00:09<00:38,  4.83s/it]Production run:  30%|███       | 3/10 [00:14<00:33,  4.83s/it]Production run:  40%|████      | 4/10 [00:19<00:28,  4.83s/it]Production run:  50%|█████     | 5/10 [00:24<00:24,  4.83s/it]Production run:  60%|██████    | 6/10 [00:28<00:19,  4.83s/it]Production run:  70%|███████   | 7/10 [00:33<00:14,  4.83s/it]Production run:  80%|████████  | 8/10 [00:38<00:09,  4.83s/it]Production run:  90%|█████████ | 9/10 [00:43<00:04,  4.83s/it]Production run: 100%|██████████| 10/10 [00:48<00:00,  4.83s/it]Production run: 100%|██████████| 10/10 [00:48<00:00,  4.83s/it]
11:51 ninjax INFO    : Saving samples to ./ET/injection_17/results_training.npz
11:51 ninjax INFO    : Saving the NF
11:51 ninjax INFO    : Time taken: 993.753246307373 seconds (16.562554105122885 minutes)
11:51 ninjax INFO    : Creating the final corner plot
11:51 ninjax INFO    : Dumping the final production chains
11:51 ninjax INFO    : Chains shape is: (13, 220000)
11:51 ninjax INFO    : Key: M_c: ESS = 38338, Rhat = 1.0170539895579696
11:51 ninjax INFO    : Key: q: ESS = 24995, Rhat = 1.024101365223264
11:51 ninjax INFO    : Key: s1_z: ESS = 34487, Rhat = 1.0205947722686677
11:51 ninjax INFO    : Key: s2_z: ESS = 34928, Rhat = 1.018422060204179
11:51 ninjax INFO    : Key: lambda_1: ESS = 32143, Rhat = 1.020871640470961
11:51 ninjax INFO    : Key: lambda_2: ESS = 33095, Rhat = 1.0192816792587602
11:51 ninjax INFO    : Key: cos_iota: ESS = 58107, Rhat = 1.037171103632336
11:51 ninjax INFO    : Key: d_L: ESS = 15508, Rhat = 1.0388908513648163
11:51 ninjax INFO    : Key: t_c: ESS = 12394, Rhat = 1.0489695798829748
11:51 ninjax INFO    : Key: phase_c: ESS = 42210, Rhat = 1.0155580587880433
11:51 ninjax INFO    : Key: psi: ESS = 44303, Rhat = 1.0268416887457774
11:51 ninjax INFO    : Key: ra: ESS = 23116, Rhat = 1.0267814937846618
11:51 ninjax INFO    : Key: sin_dec: ESS = 15064, Rhat = 1.0395542251325798
11:51 ninjax INFO    : Key: eta: ESS = 24995, Rhat = 1.024101365223264
11:51 ninjax INFO    : Key: iota: ESS = 58107, Rhat = 1.0361711979487955
11:51 ninjax INFO    : Key: dec: ESS = 15064, Rhat = 1.0395542251325798
11:51 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.605 +/- 0.093
q: 0.820 +/- 0.176
s1_z: 0.025 +/- 0.022
s2_z: 0.021 +/- 0.023
lambda_1: 827.578 +/- 1144.174
lambda_2: 988.048 +/- 1182.408
cos_iota: 0.134 +/- 0.592
d_L: 925.043 +/- 270.469
t_c: 0.084 +/- 0.025
phase_c: 3.167 +/- 1.721
psi: 1.534 +/- 0.869
ra: 2.675 +/- 1.638
sin_dec: -0.049 +/- 0.517
Log probability: 150.442 +/- 91.207
Local acceptance: 0.874 +/- 0.332
Global acceptance: 0.026 +/- 0.161
Max loss: 22.778, Min loss: 2.557
Production summary
==========
M_c: 1.614 +/- 0.000
q: 0.884 +/- 0.076
s1_z: 0.032 +/- 0.013
s2_z: 0.030 +/- 0.014
lambda_1: 245.974 +/- 220.165
lambda_2: 365.329 +/- 312.402
cos_iota: 0.007 +/- 0.719
d_L: 824.525 +/- 205.853
t_c: 0.090 +/- 0.001
phase_c: 3.219 +/- 1.776
psi: 1.578 +/- 0.876
ra: 2.861 +/- 1.664
sin_dec: -0.020 +/- 0.512
Log probability: 195.767 +/- 2.238
Local acceptance: 0.826 +/- 0.379
Global acceptance: 0.106 +/- 0.308
DONE

JOB STATISTICS
==============
Job ID: 10874081
Cluster: snellius
User/Group: twouters2/twouters2
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 00:15:25
CPU Efficiency: 4.86% of 05:17:20 core-walltime
Job Wall-clock time: 00:19:50
Memory Utilized: 4.39 GB
Memory Efficiency: 43.91% of 10.00 GB
