Sat Mar 29 11:32:21 CET 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
11:32 ninjax INFO    : Checking and setting outdir
11:32 ninjax INFO    : Found generation prior file ./ET/injection_20/generation_prior.prior
11:32 ninjax INFO    : The outdir is set to ./ET/injection_20
11:32 ninjax INFO    : Loading the given config
11:32 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
11:32 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'ET', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '2000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
11:32 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/HQC18/ET/injection_20/complete_config.json
11:32 ninjax INFO    : No seed specified. Generating a random seed: 180245
11:32 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 130067
11:32 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 896371
11:32 ninjax INFO    : Loading the priors
11:32 ninjax INFO    : Setting up the prior
11:32 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
11:32 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
11:32 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
11:32 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
11:32 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
11:32 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
11:32 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
11:32 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1500.0, 2.0, naming=["d_L"])
11:32 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
11:32 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
11:32 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
11:32 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
11:32 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
11:32 ninjax INFO    : Setting up the generation prior
11:32 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.0452447532113593, naming=["mass_1_source"])
11:32 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.0452447532113593, naming=["mass_2_source"])
11:32 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
11:32 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
11:32 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
11:32 ninjax INFO    :    dL_prior = PowerLaw(100.0, 1000.0, 2.0, naming=["d_L"])
11:32 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
11:32 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
11:32 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
11:32 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
11:32 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
11:32 ninjax INFO    : Finished prior setup
11:32 ninjax INFO    : Setting the transforms
11:32 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
11:32 ninjax INFO    : transforms_str_list has 3 elements
11:32 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
11:32 ninjax INFO    : Setting the likelihood
11:32 ninjax INFO    : GW likelihood provided, setting up the GW pipe
11:32 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz
11:32 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz for BNS injections
11:32 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
11:32 ninjax INFO    : self.is_BNS_run is True
11:32 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
11:32 ninjax INFO    : GW run is an injection
11:32 ninjax INFO    : Setting up GW injection . . . 
11:32 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
11:32 ninjax INFO    : Generating new injection
11:32 ninjax INFO    : Sanity check: generated parameters:
11:32 ninjax INFO    : {'mass_1_source': 1.6908440655566848, 'mass_2_source': 2.0122137189742855, 's1_z': 0.048067280055303585, 's2_z': 0.0024405244264918274, 'cos_iota': 0.09149846537796424, 'd_L': 481.9780985853591, 't_c': 0.06372613353358894, 'phase_c': 1.7493018232794073, 'psi': 2.314900470797779, 'ra': 2.2977360346041737, 'sin_dec': -0.5433642690814833}
11:32 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz . . . 
11:32 ninjax INFO    : Injected lambda_1: 12.569070603075424
11:32 ninjax INFO    : Injected lambda_2: 71.07833838772494
11:32 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.7793002185334859 is 128.0
11:32 ninjax INFO    : After transforms, the injection parameters are:
11:32 ninjax INFO    : {'mass_1_source': 2.0122137189742855, 'mass_2_source': 1.6908440655566848, 's1_z': 0.048067280055303585, 's2_z': 0.0024405244264918274, 'cos_iota': 0.09149846537796424, 'd_L': 481.9780985853591, 't_c': 0.06372613353358894, 'phase_c': 1.7493018232794073, 'psi': 2.314900470797779, 'ra': 2.2977360346041737, 'sin_dec': -0.5433642690814833, 'q': 0.8402904967860884, 'M_c': 1.7793002185334859, 'eta': 0.2481170934796798, 'iota': Array(1.47916971, dtype=float64, weak_type=True), 'dec': Array(-0.57443942, dtype=float64, weak_type=True), 'lambda_1': 12.569070603075424, 'lambda_2': 71.07833838772494}
11:32 ninjax INFO    : The trial injection parameters are {'M_c': 1.7793002185334859, 'eta': 0.2481170934796798, 's1_z': 0.048067280055303585, 's2_z': 0.0024405244264918274, 'lambda_1': 12.569070603075424, 'lambda_2': 71.07833838772494, 'd_L': 481.9780985853591, 'phase_c': 1.7493018232794073, 'iota': 1.47916970763416, 't_c': 0.06372613353358894, 'psi': 2.314900470797779, 'ra': 2.2977360346041737, 'dec': -0.5744394179084079}
11:32 ninjax INFO    : Injecting signals . . .
11:32 ninjax INFO    : self.ifos
11:32 ninjax INFO    : [GroundBased2G(ET1), GroundBased2G(ET2), GroundBased2G(ET3)]
11:32 ninjax INFO    : Signal injected in ifo ET1. Frequencies, data, and PSD:
11:32 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:32 ninjax INFO    : [-2.69845449e-24-2.10250686e-24j  6.04350997e-24+2.18892388e-24j
  1.65791680e-24+1.36599693e-24j ...
  2.63106566e-24-3.53925656e-24j -1.04935238e-23-5.82149177e-24j
  3.43117329e-24-7.42544406e-25j]
11:32 ninjax INFO    : [8.83385322e-49 8.82885595e-49 8.82385867e-49 ... 1.23822108e-48
 1.23823022e-48 1.23823937e-48]
11:32 ninjax INFO    : Signal injected in ifo ET2. Frequencies, data, and PSD:
11:32 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:32 ninjax INFO    : [ 2.14414084e-24-1.39274422e-24j -1.08576873e-24+6.59013118e-24j
  1.45589686e-24+3.57307703e-24j ...
 -7.82832964e-24-3.18501170e-24j -1.50630458e-24+5.25695727e-24j
 -1.75437198e-24-7.06204986e-24j]
11:32 ninjax INFO    : [8.83385322e-49 8.82885595e-49 8.82385867e-49 ... 1.23822108e-48
 1.23823022e-48 1.23823937e-48]
11:32 ninjax INFO    : Signal injected in ifo ET3. Frequencies, data, and PSD:
11:32 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:32 ninjax INFO    : [ 2.38272278e-24-5.62821235e-24j -4.13639087e-24-8.05958285e-25j
  5.89681819e-24+2.43188531e-24j ...
 -2.48253863e-24+3.59228611e-24j  8.85486657e-24-4.91402298e-24j
 -5.87142228e-24+4.73421428e-24j]
11:32 ninjax INFO    : [8.83385322e-49 8.82885595e-49 8.82385867e-49 ... 1.23822108e-48
 1.23823022e-48 1.23823937e-48]
11:32 ninjax INFO    : SNR for ifo ET1 is 17.99220743690129
11:32 ninjax INFO    : SNR for ifo ET2 is 8.766440167584387
11:32 ninjax INFO    : SNR for ifo ET3 is 9.373050782751685
11:32 ninjax INFO    : The network SNR is 22.10031860947631
11:32 ninjax INFO    : Network SNR passes threshold
11:32 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
11:32 ninjax INFO    :    mass_1_source: 2.0122137189742855
11:32 ninjax INFO    :    mass_2_source: 1.6908440655566848
11:32 ninjax INFO    :    s1_z: 0.048067280055303585
11:32 ninjax INFO    :    s2_z: 0.0024405244264918274
11:32 ninjax INFO    :    cos_iota: 0.09149846537796424
11:32 ninjax INFO    :    d_L: 481.9780985853591
11:32 ninjax INFO    :    t_c: 0.06372613353358894
11:32 ninjax INFO    :    phase_c: 1.7493018232794073
11:32 ninjax INFO    :    psi: 2.314900470797779
11:32 ninjax INFO    :    ra: 2.2977360346041737
11:32 ninjax INFO    :    sin_dec: -0.5433642690814833
11:32 ninjax INFO    :    q: 0.8402904967860884
11:32 ninjax INFO    :    M_c: 1.7793002185334859
11:32 ninjax INFO    :    eta: 0.2481170934796798
11:32 ninjax INFO    :    iota: 1.47916970763416
11:32 ninjax INFO    :    dec: -0.5744394179084079
11:32 ninjax INFO    :    lambda_1: 12.569070603075424
11:32 ninjax INFO    :    lambda_2: 71.07833838772494
11:32 ninjax INFO    :    ET1_SNR: 17.99220743690129
11:32 ninjax INFO    :    ET2_SNR: 8.766440167584387
11:32 ninjax INFO    :    ET3_SNR: 9.373050782751685
11:32 ninjax INFO    :    network_SNR: 22.10031860947631
11:32 ninjax INFO    :    epoch: 126.0
11:32 ninjax INFO    :    gmst: 2.7288901910520846
11:32 ninjax INFO    :    duration: 128.0
11:32 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
11:32 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
11:32 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
11:35 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 143.09619617462158 seconds = 2.3849366029103596 minutes
11:35 ninjax INFO    : The priors are not modified after their initialization
11:35 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
11:35 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
11:35 ninjax INFO    : sample: {'M_c': Array([1.23887032, 1.85404931, 2.12311128], dtype=float64), 'q': Array([0.70286614, 0.64455235, 0.73234839], dtype=float64), 's1_z': Array([-0.02649368,  0.0380452 , -0.0047159 ], dtype=float64), 's2_z': Array([ 0.02789867, -0.00497429, -0.04854449], dtype=float64), 'lambda_1': Array([3327.2364172 , 3986.11505443, 4183.5081903 ], dtype=float64), 'lambda_2': Array([2590.39680284, 3886.60247636, 2765.38041153], dtype=float64), 'cos_iota': Array([-0.72551876,  0.84838235,  0.79781755], dtype=float64), 'd_L': Array([ 532.10618863,  840.29521105, 1288.65068792], dtype=float64), 't_c': Array([-0.09930374,  0.08956861, -0.02138174], dtype=float64), 'phase_c': Array([6.08813962, 1.340195  , 5.98058227], dtype=float64), 'psi': Array([2.11006858, 1.74454783, 0.58376533], dtype=float64), 'ra': Array([0.49343573, 4.10992826, 1.14138915], dtype=float64), 'sin_dec': Array([ 0.83022179,  0.49811953, -0.82686467], dtype=float64)}
11:35 ninjax INFO    : log_prob: [-448.61351572 -969.13643785 -567.22969555]
11:35 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 2.0122137189742855, 'mass_2_source': 1.6908440655566848, 's1_z': 0.048067280055303585, 's2_z': 0.0024405244264918274, 'cos_iota': 0.09149846537796424, 'd_L': 481.9780985853591, 't_c': 0.06372613353358894, 'phase_c': 1.7493018232794073, 'psi': 2.314900470797779, 'ra': 2.2977360346041737, 'sin_dec': -0.5433642690814833, 'q': 0.8402904967860884, 'M_c': 1.7793002185334859, 'eta': 0.2481170934796798, 'iota': Array(1.47916971, dtype=float64, weak_type=True), 'dec': Array(-0.57443942, dtype=float64, weak_type=True), 'lambda_1': 12.569070603075424, 'lambda_2': 71.07833838772494, 'ET1_SNR': 17.99220743690129, 'ET2_SNR': 8.766440167584387, 'ET3_SNR': 9.373050782751685, 'network_SNR': 22.10031860947631, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
11:35 ninjax INFO    : log_prob at the injection parameters is: 233.36154943588056
11:35 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
11:35 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
11:35 ninjax INFO    : Ninjax setup complete.
11:35 ninjax INFO    : Saving output to ./ET/injection_20/
11:35 ninjax INFO    : Using polynomial learning rate scheduler
11:35 ninjax INFO    : The hyperparameters passed to flowMC and jim are
11:35 ninjax INFO    :    n_loop_training: 200
11:35 ninjax INFO    :    n_loop_production: 10
11:35 ninjax INFO    :    n_local_steps: 100
11:35 ninjax INFO    :    n_global_steps: 1000
11:35 ninjax INFO    :    n_epochs: 25
11:35 ninjax INFO    :    n_chains: 1000
11:35 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x1503f1266680>
11:35 ninjax INFO    :    max_samples: 50000
11:35 ninjax INFO    :    momentum: 0.9
11:35 ninjax INFO    :    batch_size: 30000
11:35 ninjax INFO    :    use_global: True
11:35 ninjax INFO    :    keep_quantile: 0.0
11:35 ninjax INFO    :    train_thinning: 10
11:35 ninjax INFO    :    output_thinning: 50
11:35 ninjax INFO    :    n_sample_max: 10000
11:35 ninjax INFO    :    num_layers: 10
11:35 ninjax INFO    :    hidden_size: [128, 128]
11:35 ninjax INFO    :    num_bins: 8
11:35 ninjax INFO    :    save_training_chains: False
11:35 ninjax INFO    :    eps_mass_matrix: 1e-05
11:35 ninjax INFO    :    use_scheduler: True
11:35 ninjax INFO    :    use_temperature: False
11:35 ninjax INFO    :    which_temperature_schedule: exponential
11:35 ninjax INFO    :    starting_temperature: 2.0
11:35 ninjax INFO    :    stop_tempering_iteration: 75
11:35 ninjax INFO    :    stopping_criterion_global_acc: 0.1
11:35 ninjax INFO    :    stopping_criterion_loss: -inf
11:35 ninjax INFO    :    nf_model_kwargs: {}
11:35 ninjax INFO    :    local sampler arg not shown (pretty print)
11:35 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[-1.79018802e-24  4.64638925e-24  1.87300966e-24  5.68529015e-24
 -5.57327558e-24  1.09003425e-24  1.25008554e-25  1.66741032e-24
 -5.09701296e-24 -4.33437583e-24]
[-3.23133783e-24  1.80769198e-24  2.79746412e-24 -4.73288575e-24
  3.25827582e-25  1.62704502e-24  4.79997411e-24  1.95161273e-24
 -2.11084463e-24 -4.90061536e-24]
Checking the noise that was generated in inject_signal ifo:
[ 1.76543269e-24 -3.88622142e-25  1.27427375e-24  4.65971132e-24
  1.58492188e-24  2.97431479e-24 -7.66347924e-24  6.31414616e-25
 -8.24415615e-25  5.90287449e-24]
[-7.96985502e-25  6.69911901e-24  2.89157225e-24  3.92217168e-24
  2.29692229e-24 -4.46417936e-24  4.34167124e-24  3.72235345e-25
  4.48701187e-24  5.41290304e-25]
Checking the noise that was generated in inject_signal ifo:
[ 1.84811143e-24 -3.43463286e-24  5.86695896e-24  3.33806357e-24
  1.79499774e-24 -2.94087023e-25  9.67271200e-24  3.07457115e-24
  5.10732928e-24 -7.46127922e-24]
[-5.09539575e-24 -5.28980740e-25  1.67838149e-24 -1.93171804e-24
  2.01369548e-24 -2.51129495e-24 -2.59030155e-24 -4.24021655e-24
 -3.38365868e-24 -2.00831689e-24]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.12526750564575195 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 2.0122137189742855, 'mass_2_source': 1.6908440655566848, 's1_z': 0.048067280055303585, 's2_z': 0.0024405244264918274, 'cos_iota': 0.09149846537796424, 'd_L': 481.9780985853591, 't_c': 0.06372613353358894, 'phase_c': 1.7493018232794073, 'psi': 2.314900470797779, 'ra': 2.2977360346041737, 'sin_dec': -0.5433642690814833, 'q': 0.8402904967860884, 'M_c': 1.7793002185334859, 'eta': 0.2481170934796798, 'iota': Array(1.47916971, dtype=float64, weak_type=True), 'dec': Array(-0.57443942, dtype=float64, weak_type=True), 'lambda_1': 12.569070603075424, 'lambda_2': 71.07833838772494, 'ET1_SNR': 17.99220743690129, 'ET2_SNR': 8.766440167584387, 'ET3_SNR': 9.373050782751685, 'network_SNR': 22.10031860947631, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5197556018829346 seconds
Time for h_sky_low and h_sky_center: 5.994055271148682 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 1.2501544952392578
Going to compute coefficients . . .
Time for computing coefficients: 107.16395688056946 seconds
Time for computing coefficients: 13.984158515930176 seconds
Time for computing coefficients: 13.502673864364624 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:00<6:38:11, 120.06s/it]Tuning global sampler:   1%|          | 2/200 [02:06<2:55:08, 53.07s/it] Tuning global sampler:   2%|▏         | 3/200 [02:12<1:44:03, 31.69s/it]Tuning global sampler:   2%|▏         | 4/200 [02:18<1:10:43, 21.65s/it]Tuning global sampler:   2%|▎         | 5/200 [02:25<52:19, 16.10s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:31<41:13, 12.75s/it]Tuning global sampler:   4%|▎         | 7/200 [02:38<34:58, 10.87s/it]Tuning global sampler:   4%|▍         | 8/200 [02:44<30:05,  9.40s/it]Tuning global sampler:   4%|▍         | 9/200 [02:50<26:43,  8.39s/it]Tuning global sampler:   5%|▌         | 10/200 [02:56<24:17,  7.67s/it]Tuning global sampler:   6%|▌         | 11/200 [03:02<22:46,  7.23s/it]Tuning global sampler:   6%|▌         | 12/200 [03:09<21:41,  6.92s/it]Tuning global sampler:   6%|▋         | 13/200 [03:15<20:54,  6.71s/it]Tuning global sampler:   7%|▋         | 14/200 [03:21<20:23,  6.58s/it]Tuning global sampler:   8%|▊         | 15/200 [03:27<20:00,  6.49s/it]Tuning global sampler:   8%|▊         | 16/200 [03:34<19:43,  6.43s/it]Tuning global sampler:   8%|▊         | 17/200 [03:40<19:30,  6.40s/it]Tuning global sampler:   9%|▉         | 18/200 [03:46<19:18,  6.36s/it]Tuning global sampler:  10%|▉         | 19/200 [03:53<19:07,  6.34s/it]Tuning global sampler:  10%|█         | 20/200 [03:59<18:57,  6.32s/it]Tuning global sampler:  10%|█         | 21/200 [04:05<18:49,  6.31s/it]Tuning global sampler:  11%|█         | 22/200 [04:11<18:39,  6.29s/it]Tuning global sampler:  12%|█▏        | 23/200 [04:18<18:30,  6.28s/it]Tuning global sampler:  12%|█▏        | 24/200 [04:25<18:58,  6.47s/it]Tuning global sampler:  12%|█▎        | 25/200 [04:31<18:28,  6.34s/it]Tuning global sampler:  13%|█▎        | 26/200 [04:37<18:06,  6.24s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:43<17:48,  6.18s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:49<17:34,  6.13s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:55<17:23,  6.10s/it]Tuning global sampler:  15%|█▌        | 30/200 [05:01<17:13,  6.08s/it]Tuning global sampler:  16%|█▌        | 31/200 [05:07<17:04,  6.06s/it]Tuning global sampler:  16%|█▌        | 32/200 [05:13<16:57,  6.06s/it]Tuning global sampler:  16%|█▋        | 33/200 [05:19<16:48,  6.04s/it]Tuning global sampler:  17%|█▋        | 34/200 [05:25<16:41,  6.03s/it]Tuning global sampler:  18%|█▊        | 35/200 [05:31<16:36,  6.04s/it]Tuning global sampler:  18%|█▊        | 36/200 [05:37<16:30,  6.04s/it]Tuning global sampler:  18%|█▊        | 37/200 [05:43<16:23,  6.03s/it]Tuning global sampler:  19%|█▉        | 38/200 [05:49<16:17,  6.03s/it]Tuning global sampler:  20%|█▉        | 39/200 [05:55<16:12,  6.04s/it]Tuning global sampler:  20%|██        | 40/200 [06:01<16:06,  6.04s/it]Tuning global sampler:  20%|██        | 41/200 [06:07<15:59,  6.03s/it]Tuning global sampler:  21%|██        | 42/200 [06:13<15:53,  6.04s/it]Tuning global sampler:  22%|██▏       | 43/200 [06:20<16:30,  6.31s/it]Tuning global sampler:  22%|██▏       | 44/200 [06:26<16:09,  6.21s/it]Tuning global sampler:  22%|██▎       | 45/200 [06:32<15:53,  6.15s/it]Tuning global sampler:  23%|██▎       | 46/200 [06:38<15:42,  6.12s/it]Tuning global sampler:  24%|██▎       | 47/200 [06:44<15:32,  6.09s/it]Tuning global sampler:  24%|██▍       | 48/200 [06:50<15:23,  6.07s/it]Tuning global sampler:  24%|██▍       | 49/200 [06:56<15:14,  6.06s/it]Tuning global sampler:  25%|██▌       | 50/200 [07:02<15:07,  6.05s/it]Tuning global sampler:  26%|██▌       | 51/200 [07:08<15:01,  6.05s/it]Tuning global sampler:  26%|██▌       | 52/200 [07:14<14:54,  6.05s/it]Tuning global sampler:  26%|██▋       | 53/200 [07:20<14:48,  6.04s/it]Tuning global sampler:  27%|██▋       | 54/200 [07:26<14:42,  6.04s/it]Tuning global sampler:  28%|██▊       | 55/200 [07:32<14:33,  6.02s/it]Tuning global sampler:  28%|██▊       | 56/200 [07:38<14:26,  6.02s/it]Tuning global sampler:  28%|██▊       | 57/200 [07:44<14:21,  6.02s/it]Tuning global sampler:  29%|██▉       | 58/200 [07:50<14:16,  6.03s/it]Tuning global sampler:  30%|██▉       | 59/200 [07:57<14:10,  6.03s/it]Tuning global sampler:  30%|███       | 60/200 [08:03<14:04,  6.04s/it]Tuning global sampler:  30%|███       | 61/200 [08:09<13:58,  6.03s/it]Tuning global sampler:  31%|███       | 62/200 [08:16<14:30,  6.31s/it]Tuning global sampler:  32%|███▏      | 63/200 [08:22<14:13,  6.23s/it]Tuning global sampler:  32%|███▏      | 64/200 [08:28<13:59,  6.17s/it]Tuning global sampler:  32%|███▎      | 65/200 [08:34<13:48,  6.13s/it]Tuning global sampler:  33%|███▎      | 66/200 [08:40<13:36,  6.09s/it]Tuning global sampler:  34%|███▎      | 67/200 [08:46<13:26,  6.07s/it]Tuning global sampler:  34%|███▍      | 68/200 [08:52<13:19,  6.05s/it]Tuning global sampler:  34%|███▍      | 69/200 [08:58<13:12,  6.05s/it]Tuning global sampler:  35%|███▌      | 70/200 [09:04<13:06,  6.05s/it]Tuning global sampler:  36%|███▌      | 71/200 [09:10<12:59,  6.05s/it]Tuning global sampler:  36%|███▌      | 72/200 [09:16<12:53,  6.04s/it]Tuning global sampler:  36%|███▋      | 73/200 [09:22<12:47,  6.04s/it]Tuning global sampler:  37%|███▋      | 74/200 [09:28<12:41,  6.04s/it]Tuning global sampler:  38%|███▊      | 75/200 [09:34<12:35,  6.04s/it]Tuning global sampler:  38%|███▊      | 76/200 [09:40<12:30,  6.05s/it]Tuning global sampler:  38%|███▊      | 77/200 [09:46<12:22,  6.04s/it]Tuning global sampler:  39%|███▉      | 78/200 [09:52<12:15,  6.03s/it]Tuning global sampler:  40%|███▉      | 79/200 [09:58<12:11,  6.04s/it]Tuning global sampler:  40%|████      | 80/200 [10:04<12:05,  6.04s/it]Tuning global sampler:  40%|████      | 81/200 [10:10<11:59,  6.04s/it]Tuning global sampler:  41%|████      | 82/200 [10:17<12:26,  6.33s/it]Tuning global sampler:  42%|████▏     | 83/200 [10:23<12:10,  6.24s/it]Tuning global sampler:  42%|████▏     | 84/200 [10:29<11:56,  6.17s/it]Tuning global sampler:  42%|████▎     | 85/200 [10:35<11:44,  6.13s/it]Tuning global sampler:  43%|████▎     | 86/200 [10:41<11:34,  6.09s/it]Tuning global sampler:  44%|████▎     | 87/200 [10:47<11:26,  6.07s/it]Tuning global sampler:  44%|████▍     | 88/200 [10:53<11:17,  6.05s/it]Tuning global sampler:  44%|████▍     | 89/200 [10:59<11:09,  6.03s/it]Tuning global sampler:  45%|████▌     | 90/200 [11:05<11:03,  6.03s/it]Tuning global sampler:  46%|████▌     | 91/200 [11:11<10:57,  6.03s/it]Tuning global sampler:  46%|████▌     | 92/200 [11:17<10:52,  6.04s/it]Tuning global sampler:  46%|████▋     | 93/200 [11:24<10:46,  6.04s/it]Tuning global sampler:  47%|████▋     | 94/200 [11:30<10:41,  6.05s/it]Tuning global sampler:  48%|████▊     | 95/200 [11:36<10:36,  6.06s/it]Tuning global sampler:  48%|████▊     | 96/200 [11:42<10:29,  6.06s/it]Tuning global sampler:  48%|████▊     | 97/200 [11:48<10:24,  6.06s/it]Tuning global sampler:  49%|████▉     | 98/200 [11:54<10:18,  6.06s/it]Tuning global sampler:  50%|████▉     | 99/200 [12:00<10:10,  6.05s/it]Tuning global sampler:  50%|█████     | 100/200 [12:06<10:03,  6.04s/it]Tuning global sampler:  50%|█████     | 101/200 [12:13<10:27,  6.34s/it]Tuning global sampler:  51%|█████     | 102/200 [12:19<10:12,  6.25s/it]Tuning global sampler:  52%|█████▏    | 103/200 [12:25<10:00,  6.19s/it]Tuning global sampler:  52%|█████▏    | 104/200 [12:31<09:50,  6.15s/it]Tuning global sampler:  52%|█████▎    | 105/200 [12:37<09:41,  6.12s/it]Tuning global sampler:  53%|█████▎    | 106/200 [12:43<09:32,  6.09s/it]Tuning global sampler:  54%|█████▎    | 107/200 [12:49<09:25,  6.08s/it]Tuning global sampler:  54%|█████▍    | 108/200 [12:55<09:18,  6.07s/it]Tuning global sampler:  55%|█████▍    | 109/200 [13:01<09:11,  6.06s/it]Tuning global sampler:  55%|█████▌    | 110/200 [13:07<09:04,  6.05s/it]Tuning global sampler:  56%|█████▌    | 111/200 [13:13<08:57,  6.04s/it]Tuning global sampler:  56%|█████▌    | 112/200 [13:19<08:51,  6.04s/it]Tuning global sampler:  56%|█████▋    | 113/200 [13:25<08:45,  6.04s/it]Tuning global sampler:  57%|█████▋    | 114/200 [13:31<08:39,  6.04s/it]Tuning global sampler:  57%|█████▊    | 115/200 [13:37<08:33,  6.04s/it]Tuning global sampler:  58%|█████▊    | 116/200 [13:44<08:27,  6.04s/it]Tuning global sampler:  58%|█████▊    | 116/200 [13:50<10:01,  7.16s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:04<00:43,  4.83s/it]Production run:  20%|██        | 2/10 [00:09<00:38,  4.83s/it]Production run:  30%|███       | 3/10 [00:14<00:33,  4.83s/it]Production run:  40%|████      | 4/10 [00:19<00:28,  4.83s/it]Production run:  50%|█████     | 5/10 [00:24<00:24,  4.83s/it]Production run:  60%|██████    | 6/10 [00:28<00:19,  4.83s/it]Production run:  70%|███████   | 7/10 [00:33<00:14,  4.83s/it]Production run:  80%|████████  | 8/10 [00:38<00:09,  4.83s/it]Production run:  90%|█████████ | 9/10 [00:43<00:04,  4.83s/it]Production run: 100%|██████████| 10/10 [00:48<00:00,  4.83s/it]Production run: 100%|██████████| 10/10 [00:48<00:00,  4.83s/it]
11:49 ninjax INFO    : Saving samples to ./ET/injection_20/results_training.npz
11:49 ninjax INFO    : Saving the NF
11:49 ninjax INFO    : Time taken: 885.729484796524 seconds (14.762158079942067 minutes)
11:49 ninjax INFO    : Creating the final corner plot
11:49 ninjax INFO    : Dumping the final production chains
11:49 ninjax INFO    : Chains shape is: (13, 220000)
11:50 ninjax INFO    : Key: M_c: ESS = 33125, Rhat = 1.019523651634657
11:50 ninjax INFO    : Key: q: ESS = 26101, Rhat = 1.0271758802411914
11:50 ninjax INFO    : Key: s1_z: ESS = 20955, Rhat = 1.0291396258927616
11:50 ninjax INFO    : Key: s2_z: ESS = 28765, Rhat = 1.0219452385453032
11:50 ninjax INFO    : Key: lambda_1: ESS = 24153, Rhat = 1.0251644542174525
11:50 ninjax INFO    : Key: lambda_2: ESS = 31216, Rhat = 1.0200680512611913
11:50 ninjax INFO    : Key: cos_iota: ESS = 88047, Rhat = 1.0346078043335767
11:50 ninjax INFO    : Key: d_L: ESS = 15420, Rhat = 1.0403202702034378
11:50 ninjax INFO    : Key: t_c: ESS = 9173, Rhat = 1.065534219768465
11:50 ninjax INFO    : Key: phase_c: ESS = 36971, Rhat = 1.0211276632214417
11:50 ninjax INFO    : Key: psi: ESS = 23287, Rhat = 1.026397758879176
11:50 ninjax INFO    : Key: ra: ESS = 13188, Rhat = 1.045814153228135
11:50 ninjax INFO    : Key: sin_dec: ESS = 25720, Rhat = 1.0239664854122634
11:50 ninjax INFO    : Key: eta: ESS = 26101, Rhat = 1.0275082288294257
11:50 ninjax INFO    : Key: iota: ESS = 88047, Rhat = 1.0345437254928294
11:50 ninjax INFO    : Key: dec: ESS = 25720, Rhat = 1.0239664854122634
11:50 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.768 +/- 0.098
q: 0.841 +/- 0.160
s1_z: 0.027 +/- 0.021
s2_z: 0.023 +/- 0.023
lambda_1: 910.222 +/- 1268.434
lambda_2: 865.740 +/- 1167.919
cos_iota: 0.244 +/- 0.603
d_L: 977.455 +/- 257.869
t_c: 0.059 +/- 0.019
phase_c: 3.064 +/- 1.729
psi: 1.604 +/- 0.850
ra: 2.620 +/- 1.611
sin_dec: -0.018 +/- 0.529
Log probability: 179.568 +/- 98.587
Local acceptance: 0.927 +/- 0.261
Global acceptance: 0.026 +/- 0.159
Max loss: 22.884, Min loss: 1.758
Production summary
==========
M_c: 1.779 +/- 0.000
q: 0.890 +/- 0.072
s1_z: 0.034 +/- 0.012
s2_z: 0.031 +/- 0.013
lambda_1: 195.397 +/- 171.808
lambda_2: 279.807 +/- 237.947
cos_iota: 0.023 +/- 0.758
d_L: 867.893 +/- 186.691
t_c: 0.062 +/- 0.002
phase_c: 3.000 +/- 1.790
psi: 1.603 +/- 0.878
ra: 3.127 +/- 1.680
sin_dec: 0.001 +/- 0.514
Log probability: 231.579 +/- 2.160
Local acceptance: 0.901 +/- 0.299
Global acceptance: 0.108 +/- 0.311
DONE

JOB STATISTICS
==============
Job ID: 10874085
Cluster: snellius
User/Group: twouters2/twouters2
State: RUNNING
Nodes: 1
Cores per node: 16
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 04:49:20 core-walltime
Job Wall-clock time: 00:18:05
Memory Utilized: 0.00 MB (estimated maximum)
Memory Efficiency: 0.00% of 10.00 GB (10.00 GB/node)
WARNING: Efficiency statistics may be misleading for RUNNING jobs.
