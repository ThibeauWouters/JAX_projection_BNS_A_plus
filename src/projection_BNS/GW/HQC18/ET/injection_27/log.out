Sun Mar 30 19:16:33 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
19:16 ninjax INFO    : Checking and setting outdir
19:16 ninjax INFO    : Found generation prior file ./ET/injection_27/generation_prior.prior
19:16 ninjax INFO    : The outdir is set to ./ET/injection_27
19:16 ninjax INFO    : Loading the given config
19:16 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'ET', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '2000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '75', 'n_loop_production': '30', 'n_local_steps': '500', 'n_global_steps': '1000', 'n_epochs': '50', 'n_chains': '1000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '50000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '30', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'True', 'which_temperature_schedule': 'exponential', 'starting_temperature': '10.0', 'stop_tempering_iteration': '50', 'stopping_criterion_global_acc': '1.0', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
19:16 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/HQC18/ET/injection_27/complete_config.json
19:16 ninjax INFO    : No seed specified. Generating a random seed: 624509
19:16 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 734574
19:16 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 485311
19:16 ninjax INFO    : Loading the priors
19:16 ninjax INFO    : Setting up the prior
19:16 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
19:16 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
19:16 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
19:16 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
19:16 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
19:16 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
19:16 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
19:16 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1500.0, 2.0, naming=["d_L"])
19:16 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
19:16 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
19:16 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
19:16 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
19:16 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
19:16 ninjax INFO    : Setting up the generation prior
19:16 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.0452447532113593, naming=["mass_1_source"])
19:16 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.0452447532113593, naming=["mass_2_source"])
19:16 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
19:16 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
19:16 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
19:16 ninjax INFO    :    dL_prior = PowerLaw(10.0, 800.0, 2.0, naming=["d_L"])
19:16 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
19:16 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
19:16 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
19:16 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
19:16 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
19:16 ninjax INFO    : Finished prior setup
19:16 ninjax INFO    : Setting the transforms
19:16 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
19:16 ninjax INFO    : transforms_str_list has 3 elements
19:16 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
19:16 ninjax INFO    : Setting the likelihood
19:16 ninjax INFO    : GW likelihood provided, setting up the GW pipe
19:16 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz
19:16 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz for BNS injections
19:16 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
19:16 ninjax INFO    : self.is_BNS_run is True
19:16 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
19:16 ninjax INFO    : GW run is an injection
19:16 ninjax INFO    : Setting up GW injection . . . 
19:16 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
19:16 ninjax INFO    : Generating new injection
19:16 ninjax INFO    : Sanity check: generated parameters:
19:16 ninjax INFO    : {'mass_1_source': 1.3982383796761795, 'mass_2_source': 1.9846562403429207, 's1_z': -0.006934555185790871, 's2_z': -0.04401718051441572, 'cos_iota': -0.8286801132282209, 'd_L': 686.5598363327653, 't_c': -0.0025136102750962647, 'phase_c': 1.710008934556391, 'psi': 2.022813332984287, 'ra': 2.1421726830267946, 'sin_dec': 0.5500347821191363}
19:16 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz . . . 
19:16 ninjax INFO    : Injected lambda_1: 15.801633414468307
19:16 ninjax INFO    : Injected lambda_2: 259.2544421404389
19:16 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.6700675174227075 is 128.0
19:16 ninjax INFO    : After transforms, the injection parameters are:
19:16 ninjax INFO    : {'mass_1_source': 1.9846562403429207, 'mass_2_source': 1.3982383796761795, 's1_z': -0.006934555185790871, 's2_z': -0.04401718051441572, 'cos_iota': -0.8286801132282209, 'd_L': 686.5598363327653, 't_c': -0.0025136102750962647, 'phase_c': 1.710008934556391, 'psi': 2.022813332984287, 'ra': 2.1421726830267946, 'sin_dec': 0.5500347821191363, 'q': 0.7045242149514939, 'M_c': 1.6700675174227075, 'eta': 0.24248762171897623, 'iota': Array(2.54754177, dtype=float64, weak_type=True), 'dec': Array(0.58240589, dtype=float64, weak_type=True), 'lambda_1': 15.801633414468307, 'lambda_2': 259.2544421404389}
19:16 ninjax INFO    : The trial injection parameters are {'M_c': 1.6700675174227075, 'eta': 0.24248762171897623, 's1_z': -0.006934555185790871, 's2_z': -0.04401718051441572, 'lambda_1': 15.801633414468307, 'lambda_2': 259.2544421404389, 'd_L': 686.5598363327653, 'phase_c': 1.710008934556391, 'iota': 2.5475417689614344, 't_c': -0.0025136102750962647, 'psi': 2.022813332984287, 'ra': 2.1421726830267946, 'dec': 0.5824058854599765}
19:16 ninjax INFO    : Injecting signals . . .
19:16 ninjax INFO    : self.ifos
19:16 ninjax INFO    : [GroundBased2G(ET1), GroundBased2G(ET2), GroundBased2G(ET3)]
19:16 ninjax INFO    : Signal injected in ifo ET1. Frequencies, data, and PSD:
19:16 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
19:16 ninjax INFO    : [-2.96367096e-24-3.17436478e-24j -2.26258365e-24-1.99904020e-24j
 -6.71824047e-24+5.02521840e-25j ...
  3.34089548e-24+1.90738047e-24j -4.95429407e-24-2.08940687e-24j
  3.97531465e-24-3.28644915e-24j]
19:16 ninjax INFO    : [8.83385322e-49 8.82885595e-49 8.82385867e-49 ... 1.23822108e-48
 1.23823022e-48 1.23823937e-48]
19:16 ninjax INFO    : Signal injected in ifo ET2. Frequencies, data, and PSD:
19:16 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
19:16 ninjax INFO    : [ 1.15190727e-24+1.91408615e-24j  4.56580486e-24+1.92009237e-24j
  3.77642184e-25+3.08692739e-24j ...
  2.95444695e-25+7.56941823e-25j -2.78893701e-24-8.99061187e-24j
 -5.09231641e-24-4.66655404e-24j]
19:16 ninjax INFO    : [8.83385322e-49 8.82885595e-49 8.82385867e-49 ... 1.23822108e-48
 1.23823022e-48 1.23823937e-48]
19:16 ninjax INFO    : Signal injected in ifo ET3. Frequencies, data, and PSD:
19:16 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
19:16 ninjax INFO    : [ 4.46427966e-24+6.38793649e-24j  8.57961242e-24-2.35903141e-24j
 -4.61534930e-24-2.45555870e-24j ...
 -4.92529838e-24-1.91278097e-24j -2.57639584e-24-4.65728943e-24j
 -8.18841067e-25-2.21069104e-24j]
19:16 ninjax INFO    : [8.83385322e-49 8.82885595e-49 8.82385867e-49 ... 1.23822108e-48
 1.23823022e-48 1.23823937e-48]
19:16 ninjax INFO    : SNR for ifo ET1 is 38.44149023522442
19:16 ninjax INFO    : SNR for ifo ET2 is 38.90445359029318
19:16 ninjax INFO    : SNR for ifo ET3 is 38.776141569212
19:16 ninjax INFO    : The network SNR is 67.0439694205206
19:16 ninjax INFO    : Network SNR passes threshold
19:16 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
19:16 ninjax INFO    :    mass_1_source: 1.9846562403429207
19:16 ninjax INFO    :    mass_2_source: 1.3982383796761795
19:16 ninjax INFO    :    s1_z: -0.006934555185790871
19:16 ninjax INFO    :    s2_z: -0.04401718051441572
19:16 ninjax INFO    :    cos_iota: -0.8286801132282209
19:16 ninjax INFO    :    d_L: 686.5598363327653
19:16 ninjax INFO    :    t_c: -0.0025136102750962647
19:16 ninjax INFO    :    phase_c: 1.710008934556391
19:16 ninjax INFO    :    psi: 2.022813332984287
19:16 ninjax INFO    :    ra: 2.1421726830267946
19:16 ninjax INFO    :    sin_dec: 0.5500347821191363
19:16 ninjax INFO    :    q: 0.7045242149514939
19:16 ninjax INFO    :    M_c: 1.6700675174227075
19:16 ninjax INFO    :    eta: 0.24248762171897623
19:16 ninjax INFO    :    iota: 2.5475417689614344
19:16 ninjax INFO    :    dec: 0.5824058854599765
19:16 ninjax INFO    :    lambda_1: 15.801633414468307
19:16 ninjax INFO    :    lambda_2: 259.2544421404389
19:16 ninjax INFO    :    ET1_SNR: 38.44149023522442
19:16 ninjax INFO    :    ET2_SNR: 38.90445359029318
19:16 ninjax INFO    :    ET3_SNR: 38.776141569212
19:16 ninjax INFO    :    network_SNR: 67.0439694205206
19:16 ninjax INFO    :    epoch: 126.0
19:16 ninjax INFO    :    gmst: 2.7288901910520846
19:16 ninjax INFO    :    duration: 128.0
19:16 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
19:16 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
19:16 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
19:19 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 138.20873188972473 seconds = 2.3034788648287456 minutes
19:19 ninjax INFO    : The priors are not modified after their initialization
19:19 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
19:19 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
19:19 ninjax INFO    : sample: {'M_c': Array([1.12329599, 1.37919026, 2.06863802], dtype=float64), 'q': Array([0.52136791, 0.34920462, 0.72076503], dtype=float64), 's1_z': Array([-0.02542281,  0.02083146,  0.04616019], dtype=float64), 's2_z': Array([-0.04148548, -0.03492617, -0.03238779], dtype=float64), 'lambda_1': Array([1737.7690083 ,  707.98825135, 4925.9554076 ], dtype=float64), 'lambda_2': Array([3325.91615054,  838.51464563, 1307.15302736], dtype=float64), 'cos_iota': Array([-0.9670364 ,  0.12546607, -0.79946445], dtype=float64), 'd_L': Array([1095.78801185, 1316.84686183, 1441.47757595], dtype=float64), 't_c': Array([-0.07164873, -0.01123693, -0.05814949], dtype=float64), 'phase_c': Array([4.53762423, 0.63390995, 1.53881777], dtype=float64), 'psi': Array([1.48491763, 2.87736799, 2.95622885], dtype=float64), 'ra': Array([1.99268823, 4.98294582, 3.83508264], dtype=float64), 'sin_dec': Array([-0.64259143, -0.74458637,  0.00489039], dtype=float64)}
19:19 ninjax INFO    : log_prob: [-103.97761301  -87.18927662 -284.83623073]
19:19 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.9846562403429207, 'mass_2_source': 1.3982383796761795, 's1_z': -0.006934555185790871, 's2_z': -0.04401718051441572, 'cos_iota': -0.8286801132282209, 'd_L': 686.5598363327653, 't_c': -0.0025136102750962647, 'phase_c': 1.710008934556391, 'psi': 2.022813332984287, 'ra': 2.1421726830267946, 'sin_dec': 0.5500347821191363, 'q': 0.7045242149514939, 'M_c': 1.6700675174227075, 'eta': 0.24248762171897623, 'iota': Array(2.54754177, dtype=float64, weak_type=True), 'dec': Array(0.58240589, dtype=float64, weak_type=True), 'lambda_1': 15.801633414468307, 'lambda_2': 259.2544421404389, 'ET1_SNR': 38.44149023522442, 'ET2_SNR': 38.90445359029318, 'ET3_SNR': 38.776141569212, 'network_SNR': 67.0439694205206, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
19:19 ninjax INFO    : log_prob at the injection parameters is: 2278.860539155461
19:19 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
19:19 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
19:19 ninjax INFO    : Ninjax setup complete.
19:19 ninjax INFO    : Saving output to ./ET/injection_27/
19:19 ninjax INFO    : Using polynomial learning rate scheduler
19:19 ninjax INFO    : Using temperature scheduler
19:19 ninjax INFO    : Using exponential temperature scheduler
19:19 ninjax INFO    : The hyperparameters passed to flowMC and jim are
19:19 ninjax INFO    :    n_loop_training: 75
19:19 ninjax INFO    :    n_loop_production: 30
19:19 ninjax INFO    :    n_local_steps: 500
19:19 ninjax INFO    :    n_global_steps: 1000
19:19 ninjax INFO    :    n_epochs: 50
19:19 ninjax INFO    :    n_chains: 1000
19:19 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x14750058a680>
19:19 ninjax INFO    :    max_samples: 50000
19:19 ninjax INFO    :    momentum: 0.9
19:19 ninjax INFO    :    batch_size: 50000
19:19 ninjax INFO    :    use_global: True
19:19 ninjax INFO    :    keep_quantile: 0.0
19:19 ninjax INFO    :    train_thinning: 10
19:19 ninjax INFO    :    output_thinning: 30
19:19 ninjax INFO    :    n_sample_max: 10000
19:19 ninjax INFO    :    num_layers: 10
19:19 ninjax INFO    :    hidden_size: [128, 128]
19:19 ninjax INFO    :    num_bins: 8
19:19 ninjax INFO    :    save_training_chains: False
19:19 ninjax INFO    :    eps_mass_matrix: 1e-05
19:19 ninjax INFO    :    use_scheduler: True
19:19 ninjax INFO    :    use_temperature: True
19:19 ninjax INFO    :    which_temperature_schedule: exponential
19:19 ninjax INFO    :    starting_temperature: 10.0
19:19 ninjax INFO    :    stop_tempering_iteration: 50
19:19 ninjax INFO    :    stopping_criterion_global_acc: 1.0
19:19 ninjax INFO    :    stopping_criterion_loss: -inf
19:19 ninjax INFO    :    nf_model_kwargs: {}
19:19 ninjax INFO    :    local sampler arg not shown (pretty print)
19:19 ninjax INFO    :    temperature_scheduler: <function exponential_decay.<locals>.schedule at 0x14750058a710>
19:19 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[-4.59638743e-24  2.74124168e-25 -4.81937379e-24 -4.94289579e-27
 -8.03272279e-24 -2.05104037e-25  4.53679927e-24  1.65724499e-24
  5.64242276e-24  2.69317107e-24]
[-5.42512637e-25 -2.24573170e-25 -1.94066207e-24  3.78157885e-24
  1.69387848e-24 -4.94975775e-24 -3.38585629e-24  2.36673659e-24
  5.06989295e-25  4.79050733e-24]
Checking the noise that was generated in inject_signal ifo:
[ 4.28472692e-24  4.83961864e-24 -2.72426428e-24 -3.67094302e-24
  4.00743292e-24  1.93328151e-24 -4.76499561e-24  2.62957653e-24
  6.12729010e-25 -2.44125660e-24]
[ 2.01552646e-24 -1.20094482e-24  2.65677255e-24  1.11365410e-24
 -2.09410712e-24 -2.51047928e-24  4.36090164e-24 -4.80582075e-24
 -3.87623302e-24 -4.32728931e-25]
Checking the noise that was generated in inject_signal ifo:
[ 2.96885554e-24  5.75969375e-24 -3.41797706e-24  1.50468557e-24
 -3.85791464e-24 -3.03391272e-24 -4.63318635e-24 -9.43191695e-24
 -1.84639727e-24 -1.27611322e-24]
[ 3.64497178e-24 -1.01766469e-24  4.26901132e-25  1.96002571e-24
  1.02418522e-24  3.04670586e-26  3.37129591e-25  2.94388156e-24
 -3.70772176e-24  5.51671380e-24]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.12348556518554688 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.9846562403429207, 'mass_2_source': 1.3982383796761795, 's1_z': -0.006934555185790871, 's2_z': -0.04401718051441572, 'cos_iota': -0.8286801132282209, 'd_L': 686.5598363327653, 't_c': -0.0025136102750962647, 'phase_c': 1.710008934556391, 'psi': 2.022813332984287, 'ra': 2.1421726830267946, 'sin_dec': 0.5500347821191363, 'q': 0.7045242149514939, 'M_c': 1.6700675174227075, 'eta': 0.24248762171897623, 'iota': Array(2.54754177, dtype=float64, weak_type=True), 'dec': Array(0.58240589, dtype=float64, weak_type=True), 'lambda_1': 15.801633414468307, 'lambda_2': 259.2544421404389, 'ET1_SNR': 38.44149023522442, 'ET2_SNR': 38.90445359029318, 'ET3_SNR': 38.776141569212, 'network_SNR': 67.0439694205206, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5100395679473877 seconds
Time for h_sky_low and h_sky_center: 5.784026861190796 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 1.218233585357666
Going to compute coefficients . . .
Time for computing coefficients: 101.68390035629272 seconds
Time for computing coefficients: 14.402645111083984 seconds
Time for computing coefficients: 13.967177391052246 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/75 [00:00<?, ?it/s]Tuning global sampler:   1%|▏         | 1/75 [02:11<2:42:45, 131.97s/it]Tuning global sampler:   3%|▎         | 2/75 [02:27<1:16:53, 63.19s/it] Tuning global sampler:   4%|▍         | 3/75 [02:42<49:25, 41.19s/it]  Tuning global sampler:   5%|▌         | 4/75 [02:57<36:50, 31.13s/it]Tuning global sampler:   7%|▋         | 5/75 [03:12<29:32, 25.33s/it]Tuning global sampler:   8%|▊         | 6/75 [03:27<25:04, 21.80s/it]Tuning global sampler:   9%|▉         | 7/75 [03:42<22:11, 19.58s/it]Tuning global sampler:  11%|█         | 8/75 [03:57<20:15, 18.14s/it]Tuning global sampler:  12%|█▏        | 9/75 [04:12<18:53, 17.17s/it]Tuning global sampler:  13%|█▎        | 10/75 [04:27<17:52, 16.51s/it]Tuning global sampler:  15%|█▍        | 11/75 [04:42<17:04, 16.00s/it]Tuning global sampler:  16%|█▌        | 12/75 [04:57<16:24, 15.63s/it]Tuning global sampler:  17%|█▋        | 13/75 [05:12<15:53, 15.38s/it]Tuning global sampler:  19%|█▊        | 14/75 [05:27<15:43, 15.47s/it]Tuning global sampler:  20%|██        | 15/75 [05:42<15:16, 15.27s/it]Tuning global sampler:  21%|██▏       | 16/75 [05:57<14:52, 15.12s/it]Tuning global sampler:  23%|██▎       | 17/75 [06:12<14:32, 15.03s/it]Tuning global sampler:  24%|██▍       | 18/75 [06:27<14:12, 14.96s/it]Tuning global sampler:  25%|██▌       | 19/75 [06:41<13:54, 14.91s/it]Tuning global sampler:  27%|██▋       | 20/75 [06:56<13:38, 14.88s/it]Tuning global sampler:  28%|██▊       | 21/75 [07:11<13:21, 14.85s/it]Tuning global sampler:  29%|██▉       | 22/75 [07:26<13:06, 14.83s/it]Tuning global sampler:  31%|███       | 23/75 [07:42<13:04, 15.08s/it]Tuning global sampler:  32%|███▏      | 24/75 [07:56<12:44, 15.00s/it]Tuning global sampler:  33%|███▎      | 25/75 [08:11<12:26, 14.93s/it]Tuning global sampler:  35%|███▍      | 26/75 [08:26<12:09, 14.90s/it]Tuning global sampler:  36%|███▌      | 27/75 [08:41<11:53, 14.86s/it]Tuning global sampler:  37%|███▋      | 28/75 [08:55<11:37, 14.83s/it]Tuning global sampler:  39%|███▊      | 29/75 [09:10<11:22, 14.83s/it]Tuning global sampler:  40%|████      | 30/75 [09:25<11:06, 14.81s/it]Tuning global sampler:  41%|████▏     | 31/75 [09:40<10:51, 14.80s/it]Tuning global sampler:  43%|████▎     | 32/75 [09:55<10:36, 14.80s/it]Tuning global sampler:  44%|████▍     | 33/75 [10:09<10:21, 14.79s/it]Tuning global sampler:  45%|████▌     | 34/75 [10:25<10:16, 15.03s/it]Tuning global sampler:  47%|████▋     | 35/75 [10:40<09:58, 14.97s/it]Tuning global sampler:  48%|████▊     | 36/75 [10:55<09:41, 14.91s/it]Tuning global sampler:  49%|████▉     | 37/75 [11:09<09:24, 14.87s/it]Tuning global sampler:  51%|█████     | 38/75 [11:24<09:09, 14.85s/it]Tuning global sampler:  52%|█████▏    | 39/75 [11:39<08:53, 14.83s/it]Tuning global sampler:  53%|█████▎    | 40/75 [11:54<08:38, 14.81s/it]Tuning global sampler:  55%|█████▍    | 41/75 [12:08<08:23, 14.81s/it]Tuning global sampler:  56%|█████▌    | 42/75 [12:23<08:08, 14.80s/it]Tuning global sampler:  57%|█████▋    | 43/75 [12:38<07:53, 14.79s/it]Tuning global sampler:  59%|█████▊    | 44/75 [12:54<07:46, 15.05s/it]Tuning global sampler:  60%|██████    | 45/75 [13:08<07:28, 14.97s/it]Tuning global sampler:  61%|██████▏   | 46/75 [13:23<07:12, 14.91s/it]Tuning global sampler:  63%|██████▎   | 47/75 [13:38<06:56, 14.88s/it]Tuning global sampler:  64%|██████▍   | 48/75 [13:53<06:40, 14.85s/it]Tuning global sampler:  65%|██████▌   | 49/75 [14:08<06:25, 14.82s/it]Tuning global sampler:  67%|██████▋   | 50/75 [14:22<06:10, 14.82s/it]Tuning global sampler:  68%|██████▊   | 51/75 [14:37<05:55, 14.80s/it]Tuning global sampler:  69%|██████▉   | 52/75 [14:52<05:40, 14.79s/it]Tuning global sampler:  71%|███████   | 53/75 [15:07<05:25, 14.80s/it]Tuning global sampler:  72%|███████▏  | 54/75 [15:22<05:16, 15.05s/it]Tuning global sampler:  73%|███████▎  | 55/75 [15:37<04:59, 14.97s/it]Tuning global sampler:  75%|███████▍  | 56/75 [15:52<04:43, 14.93s/it]Tuning global sampler:  76%|███████▌  | 57/75 [16:07<04:27, 14.89s/it]Tuning global sampler:  77%|███████▋  | 58/75 [16:22<04:12, 14.86s/it]Tuning global sampler:  79%|███████▊  | 59/75 [16:36<03:57, 14.85s/it]Tuning global sampler:  80%|████████  | 60/75 [16:51<03:42, 14.83s/it]Tuning global sampler:  81%|████████▏ | 61/75 [17:06<03:27, 14.82s/it]Tuning global sampler:  83%|████████▎ | 62/75 [17:21<03:12, 14.82s/it]Tuning global sampler:  84%|████████▍ | 63/75 [17:36<02:57, 14.81s/it]Tuning global sampler:  85%|████████▌ | 64/75 [17:50<02:42, 14.80s/it]Tuning global sampler:  87%|████████▋ | 65/75 [18:06<02:30, 15.08s/it]Tuning global sampler:  88%|████████▊ | 66/75 [18:21<02:14, 14.99s/it]Tuning global sampler:  89%|████████▉ | 67/75 [18:36<01:59, 14.93s/it]Tuning global sampler:  91%|█████████ | 68/75 [18:50<01:44, 14.90s/it]Tuning global sampler:  92%|█████████▏| 69/75 [19:05<01:29, 14.86s/it]Tuning global sampler:  93%|█████████▎| 70/75 [19:20<01:14, 14.84s/it]Tuning global sampler:  95%|█████████▍| 71/75 [19:35<00:59, 14.84s/it]Tuning global sampler:  96%|█████████▌| 72/75 [19:50<00:44, 14.82s/it]Tuning global sampler:  97%|█████████▋| 73/75 [20:04<00:29, 14.81s/it]Tuning global sampler:  99%|█████████▊| 74/75 [20:19<00:14, 14.82s/it]Tuning global sampler: 100%|██████████| 75/75 [20:34<00:00, 14.80s/it]Tuning global sampler: 100%|██████████| 75/75 [20:34<00:00, 16.46s/it]
Compiling MALA body
Starting Production run
Production run:   0%|          | 0/30 [00:00<?, ?it/s]Production run:   3%|▎         | 1/30 [00:12<06:00, 12.44s/it]Production run:   7%|▋         | 2/30 [00:24<05:47, 12.42s/it]Production run:  10%|█         | 3/30 [00:37<05:35, 12.42s/it]Production run:  13%|█▎        | 4/30 [00:49<05:22, 12.41s/it]Production run:  17%|█▋        | 5/30 [01:02<05:10, 12.41s/it]Production run:  20%|██        | 6/30 [01:14<04:57, 12.41s/it]Production run:  23%|██▎       | 7/30 [01:26<04:45, 12.41s/it]Production run:  27%|██▋       | 8/30 [01:39<04:32, 12.41s/it]Production run:  30%|███       | 9/30 [01:51<04:20, 12.41s/it]Production run:  33%|███▎      | 10/30 [02:04<04:08, 12.41s/it]Production run:  37%|███▋      | 11/30 [02:16<03:55, 12.41s/it]Production run:  40%|████      | 12/30 [02:28<03:43, 12.41s/it]Production run:  43%|████▎     | 13/30 [02:41<03:30, 12.41s/it]Production run:  47%|████▋     | 14/30 [02:53<03:18, 12.41s/it]Production run:  50%|█████     | 15/30 [03:06<03:06, 12.41s/it]Production run:  53%|█████▎    | 16/30 [03:18<02:53, 12.41s/it]Production run:  57%|█████▋    | 17/30 [03:30<02:41, 12.41s/it]Production run:  60%|██████    | 18/30 [03:43<02:28, 12.41s/it]Production run:  63%|██████▎   | 19/30 [03:55<02:16, 12.41s/it]Production run:  67%|██████▋   | 20/30 [04:08<02:04, 12.41s/it]Production run:  70%|███████   | 21/30 [04:20<01:51, 12.41s/it]Production run:  73%|███████▎  | 22/30 [04:32<01:39, 12.41s/it]Production run:  77%|███████▋  | 23/30 [04:45<01:26, 12.41s/it]Production run:  80%|████████  | 24/30 [04:57<01:14, 12.41s/it]Production run:  83%|████████▎ | 25/30 [05:10<01:02, 12.41s/it]Production run:  87%|████████▋ | 26/30 [05:22<00:49, 12.41s/it]Production run:  90%|█████████ | 27/30 [05:35<00:37, 12.41s/it]Production run:  93%|█████████▎| 28/30 [05:47<00:24, 12.41s/it]Production run:  97%|█████████▋| 29/30 [05:59<00:12, 12.41s/it]Production run: 100%|██████████| 30/30 [06:12<00:00, 12.41s/it]Production run: 100%|██████████| 30/30 [06:12<00:00, 12.41s/it]
19:46 ninjax INFO    : Saving samples to ./ET/injection_27/results_training.npz
19:46 ninjax INFO    : Saving the NF
19:46 ninjax INFO    : Time taken: 1614.6424098014832 seconds (26.91070683002472 minutes)
19:46 ninjax INFO    : Creating the final corner plot
19:46 ninjax INFO    : Dumping the final production chains
19:46 ninjax INFO    : Chains shape is: (13, 1530000)
19:46 ninjax INFO    : Key: M_c: ESS = 58819, Rhat = 1.0116089987546737
19:46 ninjax INFO    : Key: q: ESS = 55086, Rhat = 1.0117927645160196
19:46 ninjax INFO    : Key: s1_z: ESS = 56695, Rhat = 1.0126089451031293
19:46 ninjax INFO    : Key: s2_z: ESS = 58555, Rhat = 1.0113623700827725
19:46 ninjax INFO    : Key: lambda_1: ESS = 61761, Rhat = 1.0122213863681786
19:46 ninjax INFO    : Key: lambda_2: ESS = 47935, Rhat = 1.0134955071135232
19:46 ninjax INFO    : Key: cos_iota: ESS = 50354, Rhat = 1.0130145991122121
19:46 ninjax INFO    : Key: d_L: ESS = 40562, Rhat = 1.0154414231124702
19:46 ninjax INFO    : Key: t_c: ESS = 32856, Rhat = 1.019098465058556
19:46 ninjax INFO    : Key: phase_c: ESS = 61529, Rhat = 1.0134661956068443
19:46 ninjax INFO    : Key: psi: ESS = 59360, Rhat = 1.0114248293104466
19:46 ninjax INFO    : Key: ra: ESS = 25010, Rhat = 1.023639303120168
19:46 ninjax INFO    : Key: sin_dec: ESS = 18057, Rhat = 1.0331995153170355
19:46 ninjax INFO    : Key: eta: ESS = 55086, Rhat = 1.0117927645160196
19:46 ninjax INFO    : Key: iota: ESS = 50354, Rhat = 1.0130068599846969
19:46 ninjax INFO    : Key: dec: ESS = 18057, Rhat = 1.0331995153170355
19:46 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.668 +/- 0.064
q: 0.711 +/- 0.149
s1_z: -0.013 +/- 0.026
s2_z: -0.012 +/- 0.027
lambda_1: 682.807 +/- 1194.761
lambda_2: 853.988 +/- 1270.311
cos_iota: -0.672 +/- 0.489
d_L: 859.791 +/- 208.906
t_c: -0.004 +/- 0.014
phase_c: 3.106 +/- 1.744
psi: 1.615 +/- 0.909
ra: 3.038 +/- 0.943
sin_dec: 0.450 +/- 0.434
Log probability: 1281.502 +/- 872.097
Local acceptance: 0.376 +/- 0.484
Global acceptance: 0.038 +/- 0.191
Max loss: 22.830, Min loss: 1.118
Production summary
==========
M_c: 1.670 +/- 0.000
q: 0.703 +/- 0.111
s1_z: -0.017 +/- 0.025
s2_z: -0.014 +/- 0.027
lambda_1: 49.831 +/- 40.577
lambda_2: 143.306 +/- 96.968
cos_iota: -0.884 +/- 0.081
d_L: 787.279 +/- 94.920
t_c: -0.001 +/- 0.002
phase_c: 3.082 +/- 1.798
psi: 1.597 +/- 0.908
ra: 2.860 +/- 0.487
sin_dec: 0.609 +/- 0.233
Log probability: 2276.281 +/- 1.908
Local acceptance: 0.087 +/- 0.282
Global acceptance: 0.126 +/- 0.332
DONE

JOB STATISTICS
==============
Job ID: 10885692
Cluster: snellius
User/Group: twouters2/twouters2
State: RUNNING
Nodes: 1
Cores per node: 16
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 08:06:40 core-walltime
Job Wall-clock time: 00:30:25
Memory Utilized: 0.00 MB (estimated maximum)
Memory Efficiency: 0.00% of 10.00 GB (10.00 GB/node)
WARNING: Efficiency statistics may be misleading for RUNNING jobs.
