Sat Mar 29 11:32:21 CET 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
11:32 ninjax INFO    : Checking and setting outdir
11:32 ninjax INFO    : Found generation prior file ./ET/injection_19/generation_prior.prior
11:32 ninjax INFO    : The outdir is set to ./ET/injection_19
11:32 ninjax INFO    : Loading the given config
11:32 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
11:32 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'ET', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '2000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
11:32 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/HQC18/ET/injection_19/complete_config.json
11:32 ninjax INFO    : No seed specified. Generating a random seed: 687787
11:32 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 377003
11:32 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 72132
11:32 ninjax INFO    : Loading the priors
11:32 ninjax INFO    : Setting up the prior
11:32 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
11:32 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
11:32 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
11:32 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
11:32 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
11:32 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
11:32 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
11:32 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1500.0, 2.0, naming=["d_L"])
11:32 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
11:32 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
11:32 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
11:32 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
11:32 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
11:32 ninjax INFO    : Setting up the generation prior
11:32 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.0452447532113593, naming=["mass_1_source"])
11:32 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.0452447532113593, naming=["mass_2_source"])
11:32 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
11:32 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
11:32 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
11:32 ninjax INFO    :    dL_prior = PowerLaw(100.0, 1000.0, 2.0, naming=["d_L"])
11:32 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
11:32 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
11:32 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
11:32 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
11:32 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
11:32 ninjax INFO    : Finished prior setup
11:32 ninjax INFO    : Setting the transforms
11:32 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
11:32 ninjax INFO    : transforms_str_list has 3 elements
11:32 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
11:32 ninjax INFO    : Setting the likelihood
11:32 ninjax INFO    : GW likelihood provided, setting up the GW pipe
11:32 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz
11:32 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz for BNS injections
11:32 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
11:32 ninjax INFO    : self.is_BNS_run is True
11:32 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
11:32 ninjax INFO    : GW run is an injection
11:32 ninjax INFO    : Setting up GW injection . . . 
11:32 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
11:32 ninjax INFO    : Generating new injection
11:32 ninjax INFO    : Sanity check: generated parameters:
11:32 ninjax INFO    : {'mass_1_source': 2.0082795903323776, 'mass_2_source': 1.9399039868797672, 's1_z': 0.031769152551335764, 's2_z': -0.024348775699640758, 'cos_iota': -0.6905979924958552, 'd_L': 699.7352304596417, 't_c': -0.08495091027341646, 'phase_c': 0.6343372161796905, 'psi': 0.7032745828499065, 'ra': 1.0742594493598905, 'sin_dec': 0.13385739405880503}
11:32 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz . . . 
11:32 ninjax INFO    : Injected lambda_1: 13.035903723032826
11:32 ninjax INFO    : Injected lambda_2: 21.231249319783014
11:32 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.989907270900192 is 128.0
11:32 ninjax INFO    : After transforms, the injection parameters are:
11:32 ninjax INFO    : {'mass_1_source': 2.0082795903323776, 'mass_2_source': 1.9399039868797672, 's1_z': 0.031769152551335764, 's2_z': -0.024348775699640758, 'cos_iota': -0.6905979924958552, 'd_L': 699.7352304596417, 't_c': -0.08495091027341646, 'phase_c': 0.6343372161796905, 'psi': 0.7032745828499065, 'ra': 1.0742594493598905, 'sin_dec': 0.13385739405880503, 'q': 0.9659531452782957, 'M_c': 1.989907270900192, 'eta': 0.24992501961297559, 'iota': Array(2.33311188, dtype=float64, weak_type=True), 'dec': Array(0.13426039, dtype=float64, weak_type=True), 'lambda_1': 13.035903723032826, 'lambda_2': 21.231249319783014}
11:32 ninjax INFO    : The trial injection parameters are {'M_c': 1.989907270900192, 'eta': 0.24992501961297559, 's1_z': 0.031769152551335764, 's2_z': -0.024348775699640758, 'lambda_1': 13.035903723032826, 'lambda_2': 21.231249319783014, 'd_L': 699.7352304596417, 'phase_c': 0.6343372161796905, 'iota': 2.333111879255297, 't_c': -0.08495091027341646, 'psi': 0.7032745828499065, 'ra': 1.0742594493598905, 'dec': 0.13426039033320342}
11:32 ninjax INFO    : Injecting signals . . .
11:32 ninjax INFO    : self.ifos
11:32 ninjax INFO    : [GroundBased2G(ET1), GroundBased2G(ET2), GroundBased2G(ET3)]
11:32 ninjax INFO    : Signal injected in ifo ET1. Frequencies, data, and PSD:
11:32 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:32 ninjax INFO    : [ 4.13807719e-24-7.99294835e-25j -3.62844708e-25+7.54626966e-24j
 -7.81767224e-25+3.21601015e-24j ...
 -1.18486813e-24-4.89139315e-24j -6.31965481e-24+7.83158662e-24j
 -1.72997517e-24+4.72704270e-24j]
11:32 ninjax INFO    : [8.83385322e-49 8.82885595e-49 8.82385867e-49 ... 1.23822108e-48
 1.23823022e-48 1.23823937e-48]
11:32 ninjax INFO    : Signal injected in ifo ET2. Frequencies, data, and PSD:
11:32 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:32 ninjax INFO    : [-7.23532230e-24+1.70380399e-24j -5.38403435e-25+3.47041703e-24j
  4.63083439e-24-4.87773662e-24j ...
 -7.01419991e-26-5.75455365e-24j -3.31129194e-24+2.93864781e-24j
 -1.15348475e-24-1.58686331e-24j]
11:32 ninjax INFO    : [8.83385322e-49 8.82885595e-49 8.82385867e-49 ... 1.23822108e-48
 1.23823022e-48 1.23823937e-48]
11:32 ninjax INFO    : Signal injected in ifo ET3. Frequencies, data, and PSD:
11:32 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
11:32 ninjax INFO    : [ 6.95265315e-25-5.98844912e-24j -2.34142844e-24+1.04744161e-24j
 -1.10991948e-24-3.12255076e-24j ...
 -2.16379723e-24-7.18525987e-24j -3.22132094e-24+5.94209452e-24j
 -1.00942786e-24+6.29937994e-25j]
11:32 ninjax INFO    : [8.83385322e-49 8.82885595e-49 8.82385867e-49 ... 1.23822108e-48
 1.23823022e-48 1.23823937e-48]
11:32 ninjax INFO    : SNR for ifo ET1 is 19.298519987940445
11:32 ninjax INFO    : SNR for ifo ET2 is 5.007403559850433
11:32 ninjax INFO    : SNR for ifo ET3 is 21.80681648050372
11:32 ninjax INFO    : The network SNR is 29.547321522441052
11:32 ninjax INFO    : Network SNR passes threshold
11:32 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
11:32 ninjax INFO    :    mass_1_source: 2.0082795903323776
11:32 ninjax INFO    :    mass_2_source: 1.9399039868797672
11:32 ninjax INFO    :    s1_z: 0.031769152551335764
11:32 ninjax INFO    :    s2_z: -0.024348775699640758
11:32 ninjax INFO    :    cos_iota: -0.6905979924958552
11:32 ninjax INFO    :    d_L: 699.7352304596417
11:32 ninjax INFO    :    t_c: -0.08495091027341646
11:32 ninjax INFO    :    phase_c: 0.6343372161796905
11:32 ninjax INFO    :    psi: 0.7032745828499065
11:32 ninjax INFO    :    ra: 1.0742594493598905
11:32 ninjax INFO    :    sin_dec: 0.13385739405880503
11:32 ninjax INFO    :    q: 0.9659531452782957
11:32 ninjax INFO    :    M_c: 1.989907270900192
11:32 ninjax INFO    :    eta: 0.24992501961297559
11:32 ninjax INFO    :    iota: 2.333111879255297
11:32 ninjax INFO    :    dec: 0.13426039033320342
11:32 ninjax INFO    :    lambda_1: 13.035903723032826
11:32 ninjax INFO    :    lambda_2: 21.231249319783014
11:32 ninjax INFO    :    ET1_SNR: 19.298519987940445
11:32 ninjax INFO    :    ET2_SNR: 5.007403559850433
11:32 ninjax INFO    :    ET3_SNR: 21.80681648050372
11:32 ninjax INFO    :    network_SNR: 29.547321522441052
11:32 ninjax INFO    :    epoch: 126.0
11:32 ninjax INFO    :    gmst: 2.7288901910520846
11:32 ninjax INFO    :    duration: 128.0
11:32 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
11:32 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
11:32 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
11:35 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 142.95418000221252 seconds = 2.382569666703542 minutes
11:35 ninjax INFO    : The priors are not modified after their initialization
11:35 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
11:35 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
11:35 ninjax INFO    : sample: {'M_c': Array([2.40548736, 2.51981389, 1.26944922], dtype=float64), 'q': Array([0.58538635, 0.6927212 , 0.65977713], dtype=float64), 's1_z': Array([-0.00102775, -0.04520117, -0.01902202], dtype=float64), 's2_z': Array([-0.046897  ,  0.0361832 , -0.01933104], dtype=float64), 'lambda_1': Array([1304.31133624, 3022.72008229, 2986.2946924 ], dtype=float64), 'lambda_2': Array([2099.32338267, 1145.28448901, 1632.06098285], dtype=float64), 'cos_iota': Array([ 0.6449653, -0.781627 ,  0.1875594], dtype=float64), 'd_L': Array([1478.2658441 ,  985.9330646 ,  806.84588701], dtype=float64), 't_c': Array([-0.08386975, -0.01222462, -0.02881105], dtype=float64), 'phase_c': Array([3.40682324, 4.20771984, 3.215376  ], dtype=float64), 'psi': Array([0.62981825, 0.14718295, 2.39348885], dtype=float64), 'ra': Array([1.26388395, 4.71791652, 3.74072448], dtype=float64), 'sin_dec': Array([-0.33947121,  0.04525169,  0.37968804], dtype=float64)}
11:35 ninjax INFO    : log_prob: [-150.4490989  -348.93081752 -172.73599965]
11:35 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 2.0082795903323776, 'mass_2_source': 1.9399039868797672, 's1_z': 0.031769152551335764, 's2_z': -0.024348775699640758, 'cos_iota': -0.6905979924958552, 'd_L': 699.7352304596417, 't_c': -0.08495091027341646, 'phase_c': 0.6343372161796905, 'psi': 0.7032745828499065, 'ra': 1.0742594493598905, 'sin_dec': 0.13385739405880503, 'q': 0.9659531452782957, 'M_c': 1.989907270900192, 'eta': 0.24992501961297559, 'iota': Array(2.33311188, dtype=float64, weak_type=True), 'dec': Array(0.13426039, dtype=float64, weak_type=True), 'lambda_1': 13.035903723032826, 'lambda_2': 21.231249319783014, 'ET1_SNR': 19.298519987940445, 'ET2_SNR': 5.007403559850433, 'ET3_SNR': 21.80681648050372, 'network_SNR': 29.547321522441052, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
11:35 ninjax INFO    : log_prob at the injection parameters is: 410.8818681631284
11:35 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
11:35 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
11:35 ninjax INFO    : Ninjax setup complete.
11:35 ninjax INFO    : Saving output to ./ET/injection_19/
11:35 ninjax INFO    : Using polynomial learning rate scheduler
11:35 ninjax INFO    : The hyperparameters passed to flowMC and jim are
11:35 ninjax INFO    :    n_loop_training: 200
11:35 ninjax INFO    :    n_loop_production: 10
11:35 ninjax INFO    :    n_local_steps: 100
11:35 ninjax INFO    :    n_global_steps: 1000
11:35 ninjax INFO    :    n_epochs: 25
11:35 ninjax INFO    :    n_chains: 1000
11:35 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x14492093e680>
11:35 ninjax INFO    :    max_samples: 50000
11:35 ninjax INFO    :    momentum: 0.9
11:35 ninjax INFO    :    batch_size: 30000
11:35 ninjax INFO    :    use_global: True
11:35 ninjax INFO    :    keep_quantile: 0.0
11:35 ninjax INFO    :    train_thinning: 10
11:35 ninjax INFO    :    output_thinning: 50
11:35 ninjax INFO    :    n_sample_max: 10000
11:35 ninjax INFO    :    num_layers: 10
11:35 ninjax INFO    :    hidden_size: [128, 128]
11:35 ninjax INFO    :    num_bins: 8
11:35 ninjax INFO    :    save_training_chains: False
11:35 ninjax INFO    :    eps_mass_matrix: 1e-05
11:35 ninjax INFO    :    use_scheduler: True
11:35 ninjax INFO    :    use_temperature: False
11:35 ninjax INFO    :    which_temperature_schedule: exponential
11:35 ninjax INFO    :    starting_temperature: 2.0
11:35 ninjax INFO    :    stop_tempering_iteration: 75
11:35 ninjax INFO    :    stopping_criterion_global_acc: 0.1
11:35 ninjax INFO    :    stopping_criterion_loss: -inf
11:35 ninjax INFO    :    nf_model_kwargs: {}
11:35 ninjax INFO    :    local sampler arg not shown (pretty print)
11:35 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[ 3.12339965e-24  1.06548263e-24 -2.33724163e-24 -8.54785457e-25
 -1.28666864e-24  5.46727028e-25 -7.52248906e-25 -9.00143917e-25
 -3.12912209e-24 -6.66231429e-25]
[ 3.83036313e-25  6.92567866e-24  3.15660353e-24  8.14641877e-24
  1.74429562e-25 -5.05360362e-25 -1.52760802e-24 -1.92295467e-25
  5.96917558e-25 -1.41810480e-24]
Checking the noise that was generated in inject_signal ifo:
[-7.62140219e-24 -2.43504117e-25  4.48478569e-24 -4.27940713e-24
  2.34025198e-24 -3.31926909e-24 -1.43533463e-24 -1.13235368e-24
 -7.43319026e-25  2.71561147e-24]
[ 1.58391847e-24  3.74666836e-24 -5.25430078e-24 -1.99582560e-24
  1.43904525e-24  1.48631666e-24  2.89927976e-24  8.73344483e-26
 -3.31145365e-24 -3.88799503e-24]
Checking the noise that was generated in inject_signal ifo:
[ 2.09849190e-24 -4.06721704e-24  5.93749720e-25 -2.75253226e-24
 -3.58079934e-24  4.90492300e-25  1.70310902e-24  6.05907610e-25
 -1.39042423e-24 -3.21791759e-24]
[-7.05167808e-24  1.39140825e-24 -2.68513451e-24 -2.92214531e-24
 -2.35715086e-24 -2.86983577e-24 -1.03885797e-24 -7.53484071e-24
 -8.23583233e-24  2.54654762e-24]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.1278984546661377 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 2.0082795903323776, 'mass_2_source': 1.9399039868797672, 's1_z': 0.031769152551335764, 's2_z': -0.024348775699640758, 'cos_iota': -0.6905979924958552, 'd_L': 699.7352304596417, 't_c': -0.08495091027341646, 'phase_c': 0.6343372161796905, 'psi': 0.7032745828499065, 'ra': 1.0742594493598905, 'sin_dec': 0.13385739405880503, 'q': 0.9659531452782957, 'M_c': 1.989907270900192, 'eta': 0.24992501961297559, 'iota': Array(2.33311188, dtype=float64, weak_type=True), 'dec': Array(0.13426039, dtype=float64, weak_type=True), 'lambda_1': 13.035903723032826, 'lambda_2': 21.231249319783014, 'ET1_SNR': 19.298519987940445, 'ET2_SNR': 5.007403559850433, 'ET3_SNR': 21.80681648050372, 'network_SNR': 29.547321522441052, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5099127292633057 seconds
Time for h_sky_low and h_sky_center: 5.976971626281738 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 1.2536108493804932
Going to compute coefficients . . .
Time for computing coefficients: 107.17275762557983 seconds
Time for computing coefficients: 13.870677471160889 seconds
Time for computing coefficients: 13.49429988861084 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:00<6:38:56, 120.28s/it]Tuning global sampler:   1%|          | 2/200 [02:06<2:55:24, 53.15s/it] Tuning global sampler:   2%|▏         | 3/200 [02:12<1:44:09, 31.73s/it]Tuning global sampler:   2%|▏         | 4/200 [02:18<1:10:44, 21.66s/it]Tuning global sampler:   2%|▎         | 5/200 [02:25<52:17, 16.09s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:31<41:10, 12.73s/it]Tuning global sampler:   4%|▎         | 7/200 [02:38<34:53, 10.84s/it]Tuning global sampler:   4%|▍         | 8/200 [02:44<29:59,  9.37s/it]Tuning global sampler:   4%|▍         | 9/200 [02:50<26:37,  8.37s/it]Tuning global sampler:   5%|▌         | 10/200 [02:56<24:13,  7.65s/it]Tuning global sampler:   6%|▌         | 11/200 [03:02<22:41,  7.20s/it]Tuning global sampler:   6%|▌         | 12/200 [03:09<21:36,  6.90s/it]Tuning global sampler:   6%|▋         | 13/200 [03:15<20:49,  6.68s/it]Tuning global sampler:   7%|▋         | 14/200 [03:21<20:18,  6.55s/it]Tuning global sampler:   8%|▊         | 15/200 [03:27<19:55,  6.46s/it]Tuning global sampler:   8%|▊         | 16/200 [03:34<19:36,  6.40s/it]Tuning global sampler:   8%|▊         | 17/200 [03:40<19:23,  6.36s/it]Tuning global sampler:   9%|▉         | 18/200 [03:46<19:10,  6.32s/it]Tuning global sampler:  10%|▉         | 19/200 [03:52<18:59,  6.30s/it]Tuning global sampler:  10%|█         | 20/200 [03:59<18:50,  6.28s/it]Tuning global sampler:  10%|█         | 21/200 [04:05<18:42,  6.27s/it]Tuning global sampler:  11%|█         | 22/200 [04:11<18:33,  6.25s/it]Tuning global sampler:  12%|█▏        | 23/200 [04:17<18:24,  6.24s/it]Tuning global sampler:  12%|█▏        | 24/200 [04:24<18:52,  6.44s/it]Tuning global sampler:  12%|█▎        | 25/200 [04:30<18:23,  6.31s/it]Tuning global sampler:  13%|█▎        | 26/200 [04:36<18:01,  6.21s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:42<17:43,  6.15s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:48<17:30,  6.11s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:54<17:19,  6.08s/it]Tuning global sampler:  15%|█▌        | 30/200 [05:00<17:10,  6.06s/it]Tuning global sampler:  16%|█▌        | 31/200 [05:06<17:03,  6.06s/it]Tuning global sampler:  16%|█▌        | 32/200 [05:12<16:55,  6.05s/it]Tuning global sampler:  16%|█▋        | 33/200 [05:18<16:46,  6.02s/it]Tuning global sampler:  17%|█▋        | 34/200 [05:24<16:38,  6.01s/it]Tuning global sampler:  18%|█▊        | 35/200 [05:30<16:32,  6.01s/it]Tuning global sampler:  18%|█▊        | 36/200 [05:36<16:27,  6.02s/it]Tuning global sampler:  18%|█▊        | 37/200 [05:42<16:20,  6.02s/it]Tuning global sampler:  19%|█▉        | 38/200 [05:48<16:14,  6.01s/it]Tuning global sampler:  20%|█▉        | 39/200 [05:54<16:08,  6.02s/it]Tuning global sampler:  20%|██        | 40/200 [06:00<16:02,  6.02s/it]Tuning global sampler:  20%|██        | 41/200 [06:06<15:57,  6.02s/it]Tuning global sampler:  21%|██        | 42/200 [06:12<15:50,  6.02s/it]Tuning global sampler:  22%|██▏       | 43/200 [06:19<16:26,  6.28s/it]Tuning global sampler:  22%|██▏       | 44/200 [06:25<16:05,  6.19s/it]Tuning global sampler:  22%|██▎       | 45/200 [06:31<15:49,  6.12s/it]Tuning global sampler:  23%|██▎       | 46/200 [06:37<15:37,  6.09s/it]Tuning global sampler:  24%|██▎       | 47/200 [06:43<15:28,  6.07s/it]Tuning global sampler:  24%|██▍       | 48/200 [06:49<15:19,  6.05s/it]Tuning global sampler:  24%|██▍       | 49/200 [06:55<15:11,  6.04s/it]Tuning global sampler:  25%|██▌       | 50/200 [07:01<15:04,  6.03s/it]Tuning global sampler:  26%|██▌       | 51/200 [07:07<14:57,  6.02s/it]Tuning global sampler:  26%|██▌       | 52/200 [07:13<14:50,  6.02s/it]Tuning global sampler:  26%|██▋       | 53/200 [07:19<14:44,  6.02s/it]Tuning global sampler:  27%|██▋       | 54/200 [07:25<14:38,  6.02s/it]Tuning global sampler:  28%|██▊       | 55/200 [07:31<14:30,  6.00s/it]Tuning global sampler:  28%|██▊       | 56/200 [07:37<14:23,  5.99s/it]Tuning global sampler:  28%|██▊       | 57/200 [07:43<14:17,  6.00s/it]Tuning global sampler:  29%|██▉       | 58/200 [07:49<14:12,  6.00s/it]Tuning global sampler:  30%|██▉       | 59/200 [07:55<14:06,  6.01s/it]Tuning global sampler:  30%|███       | 60/200 [08:01<14:01,  6.01s/it]Tuning global sampler:  30%|███       | 61/200 [08:07<13:55,  6.01s/it]Tuning global sampler:  31%|███       | 62/200 [08:14<14:26,  6.28s/it]Tuning global sampler:  32%|███▏      | 63/200 [08:20<14:09,  6.20s/it]Tuning global sampler:  32%|███▏      | 64/200 [08:26<13:55,  6.14s/it]Tuning global sampler:  32%|███▎      | 65/200 [08:32<13:44,  6.10s/it]Tuning global sampler:  33%|███▎      | 66/200 [08:38<13:32,  6.06s/it]Tuning global sampler:  34%|███▎      | 67/200 [08:44<13:23,  6.04s/it]Tuning global sampler:  34%|███▍      | 68/200 [08:50<13:15,  6.03s/it]Tuning global sampler:  34%|███▍      | 69/200 [08:56<13:08,  6.02s/it]Tuning global sampler:  35%|███▌      | 70/200 [09:02<13:02,  6.02s/it]Tuning global sampler:  36%|███▌      | 71/200 [09:08<12:56,  6.02s/it]Tuning global sampler:  36%|███▌      | 72/200 [09:14<12:49,  6.01s/it]Tuning global sampler:  36%|███▋      | 73/200 [09:20<12:42,  6.00s/it]Tuning global sampler:  37%|███▋      | 74/200 [09:26<12:36,  6.00s/it]Tuning global sampler:  38%|███▊      | 75/200 [09:32<12:30,  6.00s/it]Tuning global sampler:  38%|███▊      | 76/200 [09:38<12:24,  6.00s/it]Tuning global sampler:  38%|███▊      | 77/200 [09:44<12:17,  6.00s/it]Tuning global sampler:  39%|███▉      | 78/200 [09:50<12:10,  5.99s/it]Tuning global sampler:  40%|███▉      | 79/200 [09:56<12:05,  5.99s/it]Tuning global sampler:  40%|████      | 80/200 [10:02<11:59,  6.00s/it]Tuning global sampler:  40%|████      | 81/200 [10:08<11:53,  6.00s/it]Tuning global sampler:  41%|████      | 82/200 [10:15<12:21,  6.29s/it]Tuning global sampler:  42%|████▏     | 83/200 [10:21<12:05,  6.20s/it]Tuning global sampler:  42%|████▏     | 84/200 [10:27<11:51,  6.13s/it]Tuning global sampler:  42%|████▎     | 85/200 [10:33<11:40,  6.09s/it]Tuning global sampler:  43%|████▎     | 86/200 [10:39<11:31,  6.06s/it]Tuning global sampler:  44%|████▎     | 87/200 [10:45<11:23,  6.04s/it]Tuning global sampler:  44%|████▍     | 88/200 [10:51<11:13,  6.02s/it]Tuning global sampler:  44%|████▍     | 89/200 [10:57<11:06,  6.00s/it]Tuning global sampler:  45%|████▌     | 90/200 [11:03<10:59,  6.00s/it]Tuning global sampler:  46%|████▌     | 91/200 [11:09<10:53,  5.99s/it]Tuning global sampler:  46%|████▌     | 92/200 [11:15<10:47,  5.99s/it]Tuning global sampler:  46%|████▋     | 93/200 [11:21<10:41,  5.99s/it]Tuning global sampler:  47%|████▋     | 94/200 [11:27<10:36,  6.00s/it]Tuning global sampler:  48%|████▊     | 95/200 [11:33<10:30,  6.00s/it]Tuning global sampler:  48%|████▊     | 96/200 [11:39<10:23,  6.00s/it]Tuning global sampler:  48%|████▊     | 97/200 [11:45<10:18,  6.01s/it]Tuning global sampler:  49%|████▉     | 98/200 [11:51<10:13,  6.01s/it]Tuning global sampler:  50%|████▉     | 99/200 [11:57<10:05,  6.00s/it]Tuning global sampler:  50%|█████     | 100/200 [12:03<09:58,  5.98s/it]Tuning global sampler:  50%|█████     | 101/200 [12:10<10:22,  6.28s/it]Tuning global sampler:  51%|█████     | 102/200 [12:16<10:06,  6.19s/it]Tuning global sampler:  52%|█████▏    | 103/200 [12:22<09:54,  6.13s/it]Tuning global sampler:  52%|█████▏    | 104/200 [12:28<09:44,  6.09s/it]Tuning global sampler:  52%|█████▎    | 105/200 [12:34<09:35,  6.05s/it]Tuning global sampler:  53%|█████▎    | 106/200 [12:40<09:27,  6.03s/it]Tuning global sampler:  54%|█████▎    | 107/200 [12:46<09:19,  6.02s/it]Tuning global sampler:  54%|█████▍    | 108/200 [12:52<09:12,  6.01s/it]Tuning global sampler:  55%|█████▍    | 109/200 [12:58<09:06,  6.00s/it]Tuning global sampler:  55%|█████▌    | 110/200 [13:04<08:58,  5.98s/it]Tuning global sampler:  56%|█████▌    | 111/200 [13:10<08:51,  5.97s/it]Tuning global sampler:  56%|█████▌    | 112/200 [13:16<08:46,  5.98s/it]Tuning global sampler:  56%|█████▌    | 112/200 [13:22<10:30,  7.16s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:04<00:43,  4.81s/it]Production run:  20%|██        | 2/10 [00:09<00:38,  4.81s/it]Production run:  30%|███       | 3/10 [00:14<00:33,  4.81s/it]Production run:  40%|████      | 4/10 [00:19<00:28,  4.81s/it]Production run:  50%|█████     | 5/10 [00:24<00:24,  4.81s/it]Production run:  60%|██████    | 6/10 [00:28<00:19,  4.81s/it]Production run:  70%|███████   | 7/10 [00:33<00:14,  4.81s/it]Production run:  80%|████████  | 8/10 [00:38<00:09,  4.81s/it]Production run:  90%|█████████ | 9/10 [00:43<00:04,  4.81s/it]Production run: 100%|██████████| 10/10 [00:48<00:00,  4.81s/it]Production run: 100%|██████████| 10/10 [00:48<00:00,  4.81s/it]
11:49 ninjax INFO    : Saving samples to ./ET/injection_19/results_training.npz
11:49 ninjax INFO    : Saving the NF
11:49 ninjax INFO    : Time taken: 857.3725848197937 seconds (14.289543080329896 minutes)
11:49 ninjax INFO    : Creating the final corner plot
11:49 ninjax INFO    : Dumping the final production chains
11:49 ninjax INFO    : Chains shape is: (13, 220000)
11:49 ninjax INFO    : Key: M_c: ESS = 20420, Rhat = 1.0298351950186018
11:49 ninjax INFO    : Key: q: ESS = 21482, Rhat = 1.0304523917159376
11:49 ninjax INFO    : Key: s1_z: ESS = 17782, Rhat = 1.0362487689646087
11:49 ninjax INFO    : Key: s2_z: ESS = 18364, Rhat = 1.0384905383425
11:49 ninjax INFO    : Key: lambda_1: ESS = 14708, Rhat = 1.0402756272135103
11:49 ninjax INFO    : Key: lambda_2: ESS = 13739, Rhat = 1.0427910986644309
11:49 ninjax INFO    : Key: cos_iota: ESS = 19495, Rhat = 1.0362197081801539
11:49 ninjax INFO    : Key: d_L: ESS = 10029, Rhat = 1.0599916003374712
11:49 ninjax INFO    : Key: t_c: ESS = 8595, Rhat = 1.071309366522398
11:49 ninjax INFO    : Key: phase_c: ESS = 13793, Rhat = 1.043041908120072
11:49 ninjax INFO    : Key: psi: ESS = 17038, Rhat = 1.0356485714148813
11:49 ninjax INFO    : Key: ra: ESS = 5646, Rhat = 1.1111104736362187
11:49 ninjax INFO    : Key: sin_dec: ESS = 16922, Rhat = 1.0356734027142205
11:49 ninjax INFO    : Key: eta: ESS = 21482, Rhat = 1.0314510802169872
11:49 ninjax INFO    : Key: iota: ESS = 19495, Rhat = 1.0379156043527302
11:49 ninjax INFO    : Key: dec: ESS = 16922, Rhat = 1.0356734027142205
11:49 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.976 +/- 0.102
q: 0.838 +/- 0.142
s1_z: 0.014 +/- 0.023
s2_z: 0.010 +/- 0.025
lambda_1: 883.740 +/- 1370.268
lambda_2: 881.924 +/- 1347.640
cos_iota: 0.189 +/- 0.676
d_L: 875.532 +/- 243.692
t_c: -0.078 +/- 0.017
phase_c: 2.866 +/- 1.722
psi: 1.563 +/- 0.865
ra: 3.630 +/- 1.554
sin_dec: -0.129 +/- 0.656
Log probability: 329.890 +/- 140.017
Local acceptance: 0.934 +/- 0.248
Global acceptance: 0.018 +/- 0.133
Max loss: 22.799, Min loss: -1.631
Production summary
==========
M_c: 1.990 +/- 0.000
q: 0.866 +/- 0.088
s1_z: 0.016 +/- 0.022
s2_z: 0.010 +/- 0.024
lambda_1: 51.461 +/- 56.059
lambda_2: 81.729 +/- 94.943
cos_iota: 0.042 +/- 0.778
d_L: 752.933 +/- 146.198
t_c: -0.082 +/- 0.002
phase_c: 3.108 +/- 1.801
psi: 1.581 +/- 0.913
ra: 3.696 +/- 1.600
sin_dec: -0.105 +/- 0.673
Log probability: 407.877 +/- 2.565
Local acceptance: 0.907 +/- 0.290
Global acceptance: 0.100 +/- 0.300
DONE

JOB STATISTICS
==============
Job ID: 10874083
Cluster: snellius
User/Group: twouters2/twouters2
State: RUNNING
Nodes: 1
Cores per node: 16
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 04:41:36 core-walltime
Job Wall-clock time: 00:17:36
Memory Utilized: 0.00 MB (estimated maximum)
Memory Efficiency: 0.00% of 10.00 GB (10.00 GB/node)
WARNING: Efficiency statistics may be misleading for RUNNING jobs.
