Sun Mar 30 19:16:33 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
19:16 ninjax INFO    : Checking and setting outdir
19:16 ninjax INFO    : Found generation prior file ./ET/injection_21/generation_prior.prior
19:16 ninjax INFO    : The outdir is set to ./ET/injection_21
19:16 ninjax INFO    : Loading the given config
19:16 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'ET', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '2000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '75', 'n_loop_production': '30', 'n_local_steps': '500', 'n_global_steps': '1000', 'n_epochs': '50', 'n_chains': '1000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '50000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '30', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'True', 'which_temperature_schedule': 'exponential', 'starting_temperature': '10.0', 'stop_tempering_iteration': '50', 'stopping_criterion_global_acc': '1.0', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
19:16 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/HQC18/ET/injection_21/complete_config.json
19:16 ninjax INFO    : No seed specified. Generating a random seed: 359949
19:16 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 3571
19:16 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 532505
19:16 ninjax INFO    : Loading the priors
19:16 ninjax INFO    : Setting up the prior
19:16 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
19:16 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
19:16 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
19:16 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
19:16 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
19:16 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
19:16 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
19:16 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1500.0, 2.0, naming=["d_L"])
19:16 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
19:16 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
19:16 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
19:16 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
19:16 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
19:16 ninjax INFO    : Setting up the generation prior
19:16 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.0452447532113593, naming=["mass_1_source"])
19:16 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.0452447532113593, naming=["mass_2_source"])
19:16 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
19:16 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
19:16 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
19:16 ninjax INFO    :    dL_prior = PowerLaw(10.0, 800.0, 2.0, naming=["d_L"])
19:16 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
19:16 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
19:16 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
19:16 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
19:16 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
19:16 ninjax INFO    : Finished prior setup
19:16 ninjax INFO    : Setting the transforms
19:16 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
19:16 ninjax INFO    : transforms_str_list has 3 elements
19:16 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
19:16 ninjax INFO    : Setting the likelihood
19:16 ninjax INFO    : GW likelihood provided, setting up the GW pipe
19:16 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz
19:16 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz for BNS injections
19:16 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
19:16 ninjax INFO    : self.is_BNS_run is True
19:16 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
19:16 ninjax INFO    : GW run is an injection
19:16 ninjax INFO    : Setting up GW injection . . . 
19:16 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
19:16 ninjax INFO    : Generating new injection
19:16 ninjax INFO    : Sanity check: generated parameters:
19:16 ninjax INFO    : {'mass_1_source': 1.5596208101269444, 'mass_2_source': 1.7012549473403396, 's1_z': -0.03062129893831658, 's2_z': 0.030113532480805755, 'cos_iota': -0.29344391738940345, 'd_L': 587.7049741785036, 't_c': 0.03027540690899838, 'phase_c': 1.5459441304906654, 'psi': 1.7996569113161398, 'ra': 4.870584947992282, 'sin_dec': 0.5099924039434733}
19:16 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz . . . 
19:16 ninjax INFO    : Injected lambda_1: 67.88429409969572
19:16 ninjax INFO    : Injected lambda_2: 126.35002072779422
19:16 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.6060452472908733 is 128.0
19:16 ninjax INFO    : After transforms, the injection parameters are:
19:16 ninjax INFO    : {'mass_1_source': 1.7012549473403396, 'mass_2_source': 1.5596208101269444, 's1_z': -0.03062129893831658, 's2_z': 0.030113532480805755, 'cos_iota': -0.29344391738940345, 'd_L': 587.7049741785036, 't_c': 0.03027540690899838, 'phase_c': 1.5459441304906654, 'psi': 1.7996569113161398, 'ra': 4.870584947992282, 'sin_dec': 0.5099924039434733, 'q': 0.9167472591719312, 'M_c': 1.6060452472908733, 'eta': 0.24952836352243646, 'iota': Array(1.8686237, dtype=float64, weak_type=True), 'dec': Array(0.53517596, dtype=float64, weak_type=True), 'lambda_1': 67.88429409969572, 'lambda_2': 126.35002072779422}
19:16 ninjax INFO    : The trial injection parameters are {'M_c': 1.6060452472908733, 'eta': 0.24952836352243646, 's1_z': -0.03062129893831658, 's2_z': 0.030113532480805755, 'lambda_1': 67.88429409969572, 'lambda_2': 126.35002072779422, 'd_L': 587.7049741785036, 'phase_c': 1.5459441304906654, 'iota': 1.868623696048418, 't_c': 0.03027540690899838, 'psi': 1.7996569113161398, 'ra': 4.870584947992282, 'dec': 0.5351759594656701}
19:16 ninjax INFO    : Injecting signals . . .
19:16 ninjax INFO    : self.ifos
19:16 ninjax INFO    : [GroundBased2G(ET1), GroundBased2G(ET2), GroundBased2G(ET3)]
19:16 ninjax INFO    : Signal injected in ifo ET1. Frequencies, data, and PSD:
19:16 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
19:16 ninjax INFO    : [-2.42622630e-24+3.80859471e-24j  8.23087956e-25+2.32044208e-24j
  6.23535392e-24+3.79272324e-24j ...
 -1.86991119e-24-5.32144780e-24j -7.41227897e-24+8.81259884e-24j
  1.34659388e-24-1.35264232e-24j]
19:16 ninjax INFO    : [8.83385322e-49 8.82885595e-49 8.82385867e-49 ... 1.23822108e-48
 1.23823022e-48 1.23823937e-48]
19:16 ninjax INFO    : Signal injected in ifo ET2. Frequencies, data, and PSD:
19:16 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
19:16 ninjax INFO    : [ 4.61673518e-24+4.15491825e-24j  1.79377029e-26+6.05451533e-24j
  1.49344175e-24-5.27329691e-25j ...
 -4.82830922e-24+8.70190623e-24j  6.76984300e-25+1.26475194e-24j
 -4.61549394e-24-4.35061553e-24j]
19:16 ninjax INFO    : [8.83385322e-49 8.82885595e-49 8.82385867e-49 ... 1.23822108e-48
 1.23823022e-48 1.23823937e-48]
19:16 ninjax INFO    : Signal injected in ifo ET3. Frequencies, data, and PSD:
19:16 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
19:16 ninjax INFO    : [ 7.64920625e-25-3.76037020e-24j  8.13035352e-24-1.93891297e-24j
  4.07452221e-24+7.78059056e-24j ...
 -2.60747417e-24-1.92288748e-24j  2.13853928e-24-5.18224156e-25j
  4.31672230e-24+2.23876085e-24j]
19:16 ninjax INFO    : [8.83385322e-49 8.82885595e-49 8.82385867e-49 ... 1.23822108e-48
 1.23823022e-48 1.23823937e-48]
19:16 ninjax INFO    : SNR for ifo ET1 is 9.797249243003797
19:16 ninjax INFO    : SNR for ifo ET2 is 9.600282072046078
19:16 ninjax INFO    : SNR for ifo ET3 is 3.4566240870478504
19:16 ninjax INFO    : The network SNR is 14.145662185686014
19:16 ninjax INFO    : Network SNR passes threshold
19:16 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
19:16 ninjax INFO    :    mass_1_source: 1.7012549473403396
19:16 ninjax INFO    :    mass_2_source: 1.5596208101269444
19:16 ninjax INFO    :    s1_z: -0.03062129893831658
19:16 ninjax INFO    :    s2_z: 0.030113532480805755
19:16 ninjax INFO    :    cos_iota: -0.29344391738940345
19:16 ninjax INFO    :    d_L: 587.7049741785036
19:16 ninjax INFO    :    t_c: 0.03027540690899838
19:16 ninjax INFO    :    phase_c: 1.5459441304906654
19:16 ninjax INFO    :    psi: 1.7996569113161398
19:16 ninjax INFO    :    ra: 4.870584947992282
19:16 ninjax INFO    :    sin_dec: 0.5099924039434733
19:16 ninjax INFO    :    q: 0.9167472591719312
19:16 ninjax INFO    :    M_c: 1.6060452472908733
19:16 ninjax INFO    :    eta: 0.24952836352243646
19:16 ninjax INFO    :    iota: 1.868623696048418
19:16 ninjax INFO    :    dec: 0.5351759594656701
19:16 ninjax INFO    :    lambda_1: 67.88429409969572
19:16 ninjax INFO    :    lambda_2: 126.35002072779422
19:16 ninjax INFO    :    ET1_SNR: 9.797249243003797
19:16 ninjax INFO    :    ET2_SNR: 9.600282072046078
19:16 ninjax INFO    :    ET3_SNR: 3.4566240870478504
19:16 ninjax INFO    :    network_SNR: 14.145662185686014
19:16 ninjax INFO    :    epoch: 126.0
19:16 ninjax INFO    :    gmst: 2.7288901910520846
19:16 ninjax INFO    :    duration: 128.0
19:16 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
19:16 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
19:16 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
19:19 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 142.50187611579895 seconds = 2.3750312685966493 minutes
19:19 ninjax INFO    : The priors are not modified after their initialization
19:19 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
19:19 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
19:19 ninjax INFO    : sample: {'M_c': Array([1.76250294, 1.28366642, 1.89880785], dtype=float64), 'q': Array([0.45798744, 0.68096146, 0.57851292], dtype=float64), 's1_z': Array([0.02736826, 0.03368727, 0.04148675], dtype=float64), 's2_z': Array([0.04291247, 0.04587732, 0.02754533], dtype=float64), 'lambda_1': Array([3898.28441788,  283.68495284, 2094.00260925], dtype=float64), 'lambda_2': Array([4312.08072846,  428.39657366,  736.22508088], dtype=float64), 'cos_iota': Array([ 0.37368012, -0.34291994, -0.42427169], dtype=float64), 'd_L': Array([ 414.76001011,  538.02308793, 1034.34193949], dtype=float64), 't_c': Array([ 0.07853701, -0.08206535,  0.08983524], dtype=float64), 'phase_c': Array([3.78058481, 1.41868139, 5.89760987], dtype=float64), 'psi': Array([0.41839765, 3.09636325, 0.21454568], dtype=float64), 'ra': Array([4.90958863, 4.01048222, 5.24640624], dtype=float64), 'sin_dec': Array([0.04226089, 0.42436167, 0.71343068], dtype=float64)}
19:19 ninjax INFO    : log_prob: [-548.33223269 -433.66745405  -54.9110653 ]
19:19 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.7012549473403396, 'mass_2_source': 1.5596208101269444, 's1_z': -0.03062129893831658, 's2_z': 0.030113532480805755, 'cos_iota': -0.29344391738940345, 'd_L': 587.7049741785036, 't_c': 0.03027540690899838, 'phase_c': 1.5459441304906654, 'psi': 1.7996569113161398, 'ra': 4.870584947992282, 'sin_dec': 0.5099924039434733, 'q': 0.9167472591719312, 'M_c': 1.6060452472908733, 'eta': 0.24952836352243646, 'iota': Array(1.8686237, dtype=float64, weak_type=True), 'dec': Array(0.53517596, dtype=float64, weak_type=True), 'lambda_1': 67.88429409969572, 'lambda_2': 126.35002072779422, 'ET1_SNR': 9.797249243003797, 'ET2_SNR': 9.600282072046078, 'ET3_SNR': 3.4566240870478504, 'network_SNR': 14.145662185686014, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
19:19 ninjax INFO    : log_prob at the injection parameters is: 77.0976340654233
19:19 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
19:19 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
19:19 ninjax INFO    : Ninjax setup complete.
19:19 ninjax INFO    : Saving output to ./ET/injection_21/
19:19 ninjax INFO    : Using polynomial learning rate scheduler
19:19 ninjax INFO    : Using temperature scheduler
19:19 ninjax INFO    : Using exponential temperature scheduler
19:19 ninjax INFO    : The hyperparameters passed to flowMC and jim are
19:19 ninjax INFO    :    n_loop_training: 75
19:19 ninjax INFO    :    n_loop_production: 30
19:19 ninjax INFO    :    n_local_steps: 500
19:19 ninjax INFO    :    n_global_steps: 1000
19:19 ninjax INFO    :    n_epochs: 50
19:19 ninjax INFO    :    n_chains: 1000
19:19 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x14a5ed736680>
19:19 ninjax INFO    :    max_samples: 50000
19:19 ninjax INFO    :    momentum: 0.9
19:19 ninjax INFO    :    batch_size: 50000
19:19 ninjax INFO    :    use_global: True
19:19 ninjax INFO    :    keep_quantile: 0.0
19:19 ninjax INFO    :    train_thinning: 10
19:19 ninjax INFO    :    output_thinning: 30
19:19 ninjax INFO    :    n_sample_max: 10000
19:19 ninjax INFO    :    num_layers: 10
19:19 ninjax INFO    :    hidden_size: [128, 128]
19:19 ninjax INFO    :    num_bins: 8
19:19 ninjax INFO    :    save_training_chains: False
19:19 ninjax INFO    :    eps_mass_matrix: 1e-05
19:19 ninjax INFO    :    use_scheduler: True
19:19 ninjax INFO    :    use_temperature: True
19:19 ninjax INFO    :    which_temperature_schedule: exponential
19:19 ninjax INFO    :    starting_temperature: 10.0
19:19 ninjax INFO    :    stop_tempering_iteration: 50
19:19 ninjax INFO    :    stopping_criterion_global_acc: 1.0
19:19 ninjax INFO    :    stopping_criterion_loss: -inf
19:19 ninjax INFO    :    nf_model_kwargs: {}
19:19 ninjax INFO    :    local sampler arg not shown (pretty print)
19:19 ninjax INFO    :    temperature_scheduler: <function exponential_decay.<locals>.schedule at 0x14a5ed736710>
19:19 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[-1.69122746e-24  1.35251758e-24  5.87903741e-24  4.38982274e-24
  1.59294125e-24  5.00621392e-24  1.45814940e-24  9.28579674e-24
 -5.16060650e-24  7.99421794e-25]
[ 4.09231585e-24  1.73746972e-24  3.09085197e-24  6.71490288e-25
  5.14253063e-24 -8.21562958e-24  5.00927982e-24 -5.68467938e-24
  1.02478836e-24  2.52960202e-24]
Checking the noise that was generated in inject_signal ifo:
[ 4.03897013e-24 -6.67694497e-25  1.58039781e-24 -5.05969464e-25
  3.08924247e-24 -1.55596658e-24 -4.22560985e-24 -8.51436821e-25
  8.81400561e-25  1.36274153e-24]
[ 3.64286252e-24  6.40860025e-24  2.39065203e-25 -3.04961157e-24
  3.13367227e-24 -4.09798719e-24 -1.12836330e-24  3.60512735e-24
 -1.11504168e-24 -4.69793361e-24]
Checking the noise that was generated in inject_signal ifo:
[ 6.06963805e-25  8.28666231e-24  4.34468238e-24 -2.35384155e-24
  7.06028190e-24 -6.78995997e-24 -1.12122516e-23 -4.25227654e-24
  2.67239860e-24 -3.15104825e-24]
[-3.53164251e-24 -1.70920989e-24  7.71625742e-24 -2.48454051e-24
 -9.43156789e-24  1.41229244e-25 -1.98808340e-24  3.01099925e-24
 -4.34110209e-24 -5.55931327e-24]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.12380385398864746 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.7012549473403396, 'mass_2_source': 1.5596208101269444, 's1_z': -0.03062129893831658, 's2_z': 0.030113532480805755, 'cos_iota': -0.29344391738940345, 'd_L': 587.7049741785036, 't_c': 0.03027540690899838, 'phase_c': 1.5459441304906654, 'psi': 1.7996569113161398, 'ra': 4.870584947992282, 'sin_dec': 0.5099924039434733, 'q': 0.9167472591719312, 'M_c': 1.6060452472908733, 'eta': 0.24952836352243646, 'iota': Array(1.8686237, dtype=float64, weak_type=True), 'dec': Array(0.53517596, dtype=float64, weak_type=True), 'lambda_1': 67.88429409969572, 'lambda_2': 126.35002072779422, 'ET1_SNR': 9.797249243003797, 'ET2_SNR': 9.600282072046078, 'ET3_SNR': 3.4566240870478504, 'network_SNR': 14.145662185686014, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5058977603912354 seconds
Time for h_sky_low and h_sky_center: 5.765105724334717 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 1.2719695568084717
Going to compute coefficients . . .
Time for computing coefficients: 104.98949074745178 seconds
Time for computing coefficients: 14.843154668807983 seconds
Time for computing coefficients: 14.463240385055542 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/75 [00:00<?, ?it/s]Tuning global sampler:   1%|▏         | 1/75 [02:12<2:43:59, 132.96s/it]Tuning global sampler:   3%|▎         | 2/75 [02:28<1:17:25, 63.63s/it] Tuning global sampler:   4%|▍         | 3/75 [02:43<49:45, 41.46s/it]  Tuning global sampler:   5%|▌         | 4/75 [02:58<37:03, 31.32s/it]Tuning global sampler:   7%|▋         | 5/75 [03:13<29:42, 25.47s/it]Tuning global sampler:   8%|▊         | 6/75 [03:29<25:11, 21.91s/it]Tuning global sampler:   9%|▉         | 7/75 [03:44<22:19, 19.70s/it]Tuning global sampler:  11%|█         | 8/75 [03:59<20:22, 18.25s/it]Tuning global sampler:  12%|█▏        | 9/75 [04:14<18:59, 17.27s/it]Tuning global sampler:  13%|█▎        | 10/75 [04:29<17:58, 16.60s/it]Tuning global sampler:  15%|█▍        | 11/75 [04:44<17:10, 16.10s/it]Tuning global sampler:  16%|█▌        | 12/75 [04:59<16:30, 15.72s/it]Tuning global sampler:  17%|█▋        | 13/75 [05:14<15:58, 15.46s/it]Tuning global sampler:  19%|█▊        | 14/75 [05:29<15:48, 15.55s/it]Tuning global sampler:  20%|██        | 15/75 [05:44<15:20, 15.34s/it]Tuning global sampler:  21%|██▏       | 16/75 [05:59<14:56, 15.20s/it]Tuning global sampler:  23%|██▎       | 17/75 [06:14<14:36, 15.11s/it]Tuning global sampler:  24%|██▍       | 18/75 [06:29<14:16, 15.03s/it]Tuning global sampler:  25%|██▌       | 19/75 [06:44<13:59, 14.99s/it]Tuning global sampler:  27%|██▋       | 20/75 [06:59<13:42, 14.96s/it]Tuning global sampler:  28%|██▊       | 21/75 [07:14<13:26, 14.93s/it]Tuning global sampler:  29%|██▉       | 22/75 [07:28<13:10, 14.91s/it]Tuning global sampler:  31%|███       | 23/75 [07:43<12:55, 14.91s/it]Tuning global sampler:  32%|███▏      | 24/75 [07:59<12:52, 15.14s/it]Tuning global sampler:  33%|███▎      | 25/75 [08:14<12:32, 15.06s/it]Tuning global sampler:  35%|███▍      | 26/75 [08:29<12:15, 15.02s/it]Tuning global sampler:  36%|███▌      | 27/75 [08:44<11:58, 14.97s/it]Tuning global sampler:  37%|███▋      | 28/75 [08:59<11:42, 14.94s/it]Tuning global sampler:  39%|███▊      | 29/75 [09:13<11:26, 14.93s/it]Tuning global sampler:  40%|████      | 30/75 [09:28<11:10, 14.91s/it]Tuning global sampler:  41%|████▏     | 31/75 [09:43<10:55, 14.90s/it]Tuning global sampler:  43%|████▎     | 32/75 [09:58<10:40, 14.90s/it]Tuning global sampler:  44%|████▍     | 33/75 [10:13<10:25, 14.89s/it]Tuning global sampler:  45%|████▌     | 34/75 [10:29<10:20, 15.13s/it]Tuning global sampler:  47%|████▋     | 35/75 [10:44<10:02, 15.07s/it]Tuning global sampler:  48%|████▊     | 36/75 [10:58<09:45, 15.01s/it]Tuning global sampler:  49%|████▉     | 37/75 [11:13<09:28, 14.97s/it]Tuning global sampler:  51%|█████     | 38/75 [11:28<09:13, 14.95s/it]Tuning global sampler:  52%|█████▏    | 39/75 [11:43<08:57, 14.92s/it]Tuning global sampler:  53%|█████▎    | 40/75 [11:58<08:41, 14.90s/it]Tuning global sampler:  55%|█████▍    | 41/75 [12:13<08:27, 14.91s/it]Tuning global sampler:  56%|█████▌    | 42/75 [12:28<08:11, 14.90s/it]Tuning global sampler:  57%|█████▋    | 43/75 [12:43<07:56, 14.89s/it]Tuning global sampler:  59%|█████▊    | 44/75 [12:58<07:49, 15.15s/it]Tuning global sampler:  60%|██████    | 45/75 [13:13<07:31, 15.06s/it]Tuning global sampler:  61%|██████▏   | 46/75 [13:28<07:14, 15.00s/it]Tuning global sampler:  63%|██████▎   | 47/75 [13:43<06:59, 14.97s/it]Tuning global sampler:  64%|██████▍   | 48/75 [13:58<06:43, 14.93s/it]Tuning global sampler:  65%|██████▌   | 49/75 [14:13<06:27, 14.91s/it]Tuning global sampler:  67%|██████▋   | 50/75 [14:28<06:12, 14.91s/it]Tuning global sampler:  68%|██████▊   | 51/75 [14:42<05:57, 14.89s/it]Tuning global sampler:  69%|██████▉   | 52/75 [14:57<05:42, 14.88s/it]Tuning global sampler:  71%|███████   | 53/75 [15:12<05:27, 14.89s/it]Tuning global sampler:  72%|███████▏  | 54/75 [15:27<05:12, 14.88s/it]Tuning global sampler:  73%|███████▎  | 55/75 [15:43<05:02, 15.14s/it]Tuning global sampler:  75%|███████▍  | 56/75 [15:58<04:46, 15.07s/it]Tuning global sampler:  76%|███████▌  | 57/75 [16:13<04:30, 15.02s/it]Tuning global sampler:  77%|███████▋  | 58/75 [16:27<04:14, 14.98s/it]Tuning global sampler:  79%|███████▊  | 59/75 [16:42<03:59, 14.96s/it]Tuning global sampler:  80%|████████  | 60/75 [16:57<03:44, 14.94s/it]Tuning global sampler:  81%|████████▏ | 61/75 [17:12<03:28, 14.92s/it]Tuning global sampler:  83%|████████▎ | 62/75 [17:27<03:13, 14.91s/it]Tuning global sampler:  84%|████████▍ | 63/75 [17:42<02:58, 14.89s/it]Tuning global sampler:  85%|████████▌ | 64/75 [17:57<02:43, 14.88s/it]Tuning global sampler:  87%|████████▋ | 65/75 [18:13<02:31, 15.15s/it]Tuning global sampler:  88%|████████▊ | 66/75 [18:27<02:15, 15.06s/it]Tuning global sampler:  89%|████████▉ | 67/75 [18:42<01:59, 15.00s/it]Tuning global sampler:  91%|█████████ | 68/75 [18:57<01:44, 14.97s/it]Tuning global sampler:  92%|█████████▏| 69/75 [19:12<01:29, 14.93s/it]Tuning global sampler:  93%|█████████▎| 70/75 [19:27<01:14, 14.91s/it]Tuning global sampler:  95%|█████████▍| 71/75 [19:42<00:59, 14.90s/it]Tuning global sampler:  96%|█████████▌| 72/75 [19:57<00:44, 14.89s/it]Tuning global sampler:  97%|█████████▋| 73/75 [20:11<00:29, 14.88s/it]Tuning global sampler:  99%|█████████▊| 74/75 [20:26<00:14, 14.88s/it]Tuning global sampler: 100%|██████████| 75/75 [20:42<00:00, 15.15s/it]Tuning global sampler: 100%|██████████| 75/75 [20:42<00:00, 16.57s/it]
Compiling MALA body
Starting Production run
Production run:   0%|          | 0/30 [00:00<?, ?it/s]Production run:   3%|▎         | 1/30 [00:12<06:02, 12.51s/it]Production run:   7%|▋         | 2/30 [00:24<05:49, 12.49s/it]Production run:  10%|█         | 3/30 [00:37<05:36, 12.48s/it]Production run:  13%|█▎        | 4/30 [00:49<05:24, 12.48s/it]Production run:  17%|█▋        | 5/30 [01:02<05:11, 12.47s/it]Production run:  20%|██        | 6/30 [01:14<04:59, 12.47s/it]Production run:  23%|██▎       | 7/30 [01:27<04:46, 12.47s/it]Production run:  27%|██▋       | 8/30 [01:39<04:34, 12.47s/it]Production run:  30%|███       | 9/30 [01:52<04:21, 12.47s/it]Production run:  33%|███▎      | 10/30 [02:04<04:09, 12.47s/it]Production run:  37%|███▋      | 11/30 [02:17<03:56, 12.47s/it]Production run:  40%|████      | 12/30 [02:29<03:44, 12.47s/it]Production run:  43%|████▎     | 13/30 [02:42<03:31, 12.47s/it]Production run:  47%|████▋     | 14/30 [02:54<03:19, 12.47s/it]Production run:  50%|█████     | 15/30 [03:07<03:07, 12.47s/it]Production run:  53%|█████▎    | 16/30 [03:19<02:54, 12.47s/it]Production run:  57%|█████▋    | 17/30 [03:32<02:42, 12.47s/it]Production run:  60%|██████    | 18/30 [03:44<02:29, 12.47s/it]Production run:  63%|██████▎   | 19/30 [03:56<02:17, 12.47s/it]Production run:  67%|██████▋   | 20/30 [04:09<02:04, 12.47s/it]Production run:  70%|███████   | 21/30 [04:21<01:52, 12.47s/it]Production run:  73%|███████▎  | 22/30 [04:34<01:39, 12.47s/it]Production run:  77%|███████▋  | 23/30 [04:46<01:27, 12.47s/it]Production run:  80%|████████  | 24/30 [04:59<01:14, 12.47s/it]Production run:  83%|████████▎ | 25/30 [05:11<01:02, 12.47s/it]Production run:  87%|████████▋ | 26/30 [05:24<00:49, 12.47s/it]Production run:  90%|█████████ | 27/30 [05:36<00:37, 12.47s/it]Production run:  93%|█████████▎| 28/30 [05:49<00:24, 12.47s/it]Production run:  97%|█████████▋| 29/30 [06:01<00:12, 12.47s/it]Production run: 100%|██████████| 30/30 [06:14<00:00, 12.47s/it]Production run: 100%|██████████| 30/30 [06:14<00:00, 12.47s/it]
19:46 ninjax INFO    : Saving samples to ./ET/injection_21/results_training.npz
19:46 ninjax INFO    : Saving the NF
19:46 ninjax INFO    : Time taken: 1623.5645632743835 seconds (27.059409387906392 minutes)
19:46 ninjax INFO    : Creating the final corner plot
19:46 ninjax INFO    : Dumping the final production chains
19:46 ninjax INFO    : Chains shape is: (13, 1530000)
19:46 ninjax INFO    : Key: M_c: ESS = 4076, Rhat = 1.1667779610521865
19:46 ninjax INFO    : Key: q: ESS = 3784, Rhat = 1.1821227051875736
19:46 ninjax INFO    : Key: s1_z: ESS = 3788, Rhat = 1.1815085085868846
19:46 ninjax INFO    : Key: s2_z: ESS = 3692, Rhat = 1.1874982709726494
19:46 ninjax INFO    : Key: lambda_1: ESS = 4056, Rhat = 1.1672269406528084
19:46 ninjax INFO    : Key: lambda_2: ESS = 3868, Rhat = 1.1759687392031923
19:46 ninjax INFO    : Key: cos_iota: ESS = 3259, Rhat = 1.2190020730868882
19:46 ninjax INFO    : Key: d_L: ESS = 3471, Rhat = 1.2011286805068624
19:46 ninjax INFO    : Key: t_c: ESS = 3430, Rhat = 1.2271066322774242
19:46 ninjax INFO    : Key: phase_c: ESS = 3762, Rhat = 1.192492712366498
19:46 ninjax INFO    : Key: psi: ESS = 3615, Rhat = 1.2020990006980485
19:46 ninjax INFO    : Key: ra: ESS = 3316, Rhat = 1.2122582575652825
19:46 ninjax INFO    : Key: sin_dec: ESS = 4107, Rhat = 1.1900500428559035
19:46 ninjax INFO    : Key: eta: ESS = 3784, Rhat = 1.1821227051875736
19:46 ninjax INFO    : Key: iota: ESS = 3259, Rhat = 1.2190020730868882
19:46 ninjax INFO    : Key: dec: ESS = 4107, Rhat = 1.1905393858077506
19:46 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.530 +/- 0.319
q: 0.663 +/- 0.252
s1_z: 0.006 +/- 0.028
s2_z: 0.004 +/- 0.028
lambda_1: 2192.294 +/- 1470.755
lambda_2: 2334.322 +/- 1450.621
cos_iota: 0.009 +/- 0.258
d_L: 1243.838 +/- 199.790
t_c: 0.013 +/- 0.045
phase_c: 3.118 +/- 1.783
psi: 1.602 +/- 0.921
ra: 3.130 +/- 1.660
sin_dec: -0.050 +/- 0.527
Log probability: 5.030 +/- 50.326
Local acceptance: 0.986 +/- 0.117
Global acceptance: 0.161 +/- 0.368
Max loss: 22.841, Min loss: 6.684
Production summary
==========
M_c: 1.606 +/- 0.000
q: 0.858 +/- 0.091
s1_z: 0.018 +/- 0.021
s2_z: 0.012 +/- 0.023
lambda_1: 672.742 +/- 845.719
lambda_2: 986.785 +/- 1056.630
cos_iota: 0.033 +/- 0.537
d_L: 1166.048 +/- 186.289
t_c: 0.030 +/- 0.006
phase_c: 3.021 +/- 1.734
psi: 1.582 +/- 0.854
ra: 3.049 +/- 1.668
sin_dec: 0.007 +/- 0.548
Log probability: 71.880 +/- 2.924
Local acceptance: 0.946 +/- 0.226
Global acceptance: 0.003 +/- 0.057
DONE

JOB STATISTICS
==============
Job ID: 10885686
Cluster: snellius
User/Group: twouters2/twouters2
State: RUNNING
Nodes: 1
Cores per node: 16
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 08:09:04 core-walltime
Job Wall-clock time: 00:30:34
Memory Utilized: 0.00 MB (estimated maximum)
Memory Efficiency: 0.00% of 10.00 GB (10.00 GB/node)
WARNING: Efficiency statistics may be misleading for RUNNING jobs.
