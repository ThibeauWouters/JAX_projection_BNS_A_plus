Sun Mar 30 19:16:33 CEST 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
19:16 ninjax INFO    : Checking and setting outdir
19:16 ninjax INFO    : Found generation prior file ./ET/injection_26/generation_prior.prior
19:16 ninjax INFO    : The outdir is set to ./ET/injection_26
19:16 ninjax INFO    : Loading the given config
19:16 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'ET', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '2000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '75', 'n_loop_production': '30', 'n_local_steps': '500', 'n_global_steps': '1000', 'n_epochs': '50', 'n_chains': '1000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '50000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '30', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'True', 'which_temperature_schedule': 'exponential', 'starting_temperature': '10.0', 'stop_tempering_iteration': '50', 'stopping_criterion_global_acc': '1.0', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
19:16 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/HQC18/ET/injection_26/complete_config.json
19:16 ninjax INFO    : No seed specified. Generating a random seed: 668734
19:16 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 457609
19:16 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 750749
19:16 ninjax INFO    : Loading the priors
19:16 ninjax INFO    : Setting up the prior
19:16 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
19:16 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
19:16 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
19:16 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
19:16 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
19:16 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
19:16 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
19:16 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1500.0, 2.0, naming=["d_L"])
19:16 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
19:16 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
19:16 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
19:16 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
19:16 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
19:16 ninjax INFO    : Setting up the generation prior
19:16 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.0452447532113593, naming=["mass_1_source"])
19:16 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.0452447532113593, naming=["mass_2_source"])
19:16 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
19:16 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
19:16 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
19:16 ninjax INFO    :    dL_prior = PowerLaw(10.0, 800.0, 2.0, naming=["d_L"])
19:16 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
19:16 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
19:16 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
19:16 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
19:16 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
19:16 ninjax INFO    : Finished prior setup
19:16 ninjax INFO    : Setting the transforms
19:16 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
19:16 ninjax INFO    : transforms_str_list has 3 elements
19:16 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
19:16 ninjax INFO    : Setting the likelihood
19:16 ninjax INFO    : GW likelihood provided, setting up the GW pipe
19:16 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz
19:16 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz for BNS injections
19:16 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
19:16 ninjax INFO    : self.is_BNS_run is True
19:16 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
19:16 ninjax INFO    : GW run is an injection
19:16 ninjax INFO    : Setting up GW injection . . . 
19:16 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
19:16 ninjax INFO    : Generating new injection
19:16 ninjax INFO    : Sanity check: generated parameters:
19:16 ninjax INFO    : {'mass_1_source': 1.6301603943656002, 'mass_2_source': 1.0582683100715677, 's1_z': -0.015774924004278955, 's2_z': 0.02426845598217439, 'cos_iota': 0.6681797029027257, 'd_L': 633.2551665969371, 't_c': -0.07490569132940253, 'phase_c': 2.25734560920714, 'psi': 2.8447752338554806, 'ra': 4.529841925575814, 'sin_dec': 0.8981012471087335}
19:16 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz . . . 
19:16 ninjax INFO    : Injected lambda_1: 92.77767709636568
19:16 ninjax INFO    : Injected lambda_2: 1376.7110791993252
19:16 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.3009950386784699 is 256.0
19:16 ninjax INFO    : After transforms, the injection parameters are:
19:16 ninjax INFO    : {'mass_1_source': 1.6301603943656002, 'mass_2_source': 1.0582683100715677, 's1_z': -0.015774924004278955, 's2_z': 0.02426845598217439, 'cos_iota': 0.6681797029027257, 'd_L': 633.2551665969371, 't_c': -0.07490569132940253, 'phase_c': 2.25734560920714, 'psi': 2.8447752338554806, 'ra': 4.529841925575814, 'sin_dec': 0.8981012471087335, 'q': 0.6491804817055488, 'M_c': 1.3009950386784699, 'eta': 0.2386871733583176, 'iota': Array(0.83903687, dtype=float64, weak_type=True), 'dec': Array(1.11543288, dtype=float64, weak_type=True), 'lambda_1': 92.77767709636568, 'lambda_2': 1376.7110791993252}
19:16 ninjax INFO    : The trial injection parameters are {'M_c': 1.3009950386784699, 'eta': 0.2386871733583176, 's1_z': -0.015774924004278955, 's2_z': 0.02426845598217439, 'lambda_1': 92.77767709636568, 'lambda_2': 1376.7110791993252, 'd_L': 633.2551665969371, 'phase_c': 2.25734560920714, 'iota': 0.8390368718550167, 't_c': -0.07490569132940253, 'psi': 2.8447752338554806, 'ra': 4.529841925575814, 'dec': 1.1154328786887802}
19:16 ninjax INFO    : Injecting signals . . .
19:16 ninjax INFO    : self.ifos
19:16 ninjax INFO    : [GroundBased2G(ET1), GroundBased2G(ET2), GroundBased2G(ET3)]
19:16 ninjax INFO    : Signal injected in ifo ET1. Frequencies, data, and PSD:
19:16 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
19:16 ninjax INFO    : [-9.50919777e-26+4.25645059e-25j  8.52683046e-25+3.31594515e-24j
 -1.26810921e-24-3.84698384e-24j ...
 -5.83085982e-25+3.46598233e-24j -5.27235255e-24-7.21358719e-24j
  5.67393177e-24+8.42143963e-24j]
19:16 ninjax INFO    : [8.83385322e-49 8.83135459e-49 8.82885595e-49 ... 1.23823480e-48
 1.23823937e-48 1.23824395e-48]
19:16 ninjax INFO    : Signal injected in ifo ET2. Frequencies, data, and PSD:
19:16 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
19:16 ninjax INFO    : [ 3.79462775e-24-6.89960100e-25j  3.27150859e-24+3.23076013e-24j
  9.25971115e-24-1.47291368e-23j ...
 -6.16865067e-26+4.11874114e-24j  3.83280742e-24-6.48944531e-24j
  4.51242048e-24-3.21253373e-24j]
19:16 ninjax INFO    : [8.83385322e-49 8.83135459e-49 8.82885595e-49 ... 1.23823480e-48
 1.23823937e-48 1.23824395e-48]
19:16 ninjax INFO    : Signal injected in ifo ET3. Frequencies, data, and PSD:
19:16 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
19:16 ninjax INFO    : [ 4.49595536e-24+7.75525788e-25j -2.30977550e-24-8.49943976e-24j
  2.05892693e-24-3.30955832e-24j ...
  3.93881111e-24-7.19688140e-24j  7.23451957e-24+2.86857583e-24j
  7.91436132e-24-3.10910574e-24j]
19:16 ninjax INFO    : [8.83385322e-49 8.83135459e-49 8.82885595e-49 ... 1.23823480e-48
 1.23823937e-48 1.23824395e-48]
19:16 ninjax INFO    : SNR for ifo ET1 is 22.763958597005107
19:16 ninjax INFO    : SNR for ifo ET2 is 21.828419401379826
19:16 ninjax INFO    : SNR for ifo ET3 is 22.21554499059955
19:16 ninjax INFO    : The network SNR is 38.577300887932154
19:16 ninjax INFO    : Network SNR passes threshold
19:16 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
19:16 ninjax INFO    :    mass_1_source: 1.6301603943656002
19:16 ninjax INFO    :    mass_2_source: 1.0582683100715677
19:16 ninjax INFO    :    s1_z: -0.015774924004278955
19:16 ninjax INFO    :    s2_z: 0.02426845598217439
19:16 ninjax INFO    :    cos_iota: 0.6681797029027257
19:16 ninjax INFO    :    d_L: 633.2551665969371
19:16 ninjax INFO    :    t_c: -0.07490569132940253
19:16 ninjax INFO    :    phase_c: 2.25734560920714
19:16 ninjax INFO    :    psi: 2.8447752338554806
19:16 ninjax INFO    :    ra: 4.529841925575814
19:16 ninjax INFO    :    sin_dec: 0.8981012471087335
19:16 ninjax INFO    :    q: 0.6491804817055488
19:16 ninjax INFO    :    M_c: 1.3009950386784699
19:16 ninjax INFO    :    eta: 0.2386871733583176
19:16 ninjax INFO    :    iota: 0.8390368718550167
19:16 ninjax INFO    :    dec: 1.1154328786887802
19:16 ninjax INFO    :    lambda_1: 92.77767709636568
19:16 ninjax INFO    :    lambda_2: 1376.7110791993252
19:16 ninjax INFO    :    ET1_SNR: 22.763958597005107
19:16 ninjax INFO    :    ET2_SNR: 21.828419401379826
19:16 ninjax INFO    :    ET3_SNR: 22.21554499059955
19:16 ninjax INFO    :    network_SNR: 38.577300887932154
19:16 ninjax INFO    :    epoch: 254.0
19:16 ninjax INFO    :    gmst: 2.7288901910520846
19:16 ninjax INFO    :    duration: 256.0
19:16 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
19:16 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
19:16 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
19:20 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 208.7915232181549 seconds = 3.4798587203025817 minutes
19:20 ninjax INFO    : The priors are not modified after their initialization
19:20 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
19:20 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
19:20 ninjax INFO    : sample: {'M_c': Array([2.38933911, 1.97318874, 2.1796836 ], dtype=float64), 'q': Array([0.56907572, 0.63110062, 0.12622376], dtype=float64), 's1_z': Array([-0.046739  , -0.01983485,  0.0151458 ], dtype=float64), 's2_z': Array([-0.00275072, -0.02249837, -0.00190264], dtype=float64), 'lambda_1': Array([3701.26917369, 1468.28942762, 3050.14548825], dtype=float64), 'lambda_2': Array([3517.54744812, 2850.34518392, 4165.75951862], dtype=float64), 'cos_iota': Array([-0.37245489,  0.19249816,  0.72459017], dtype=float64), 'd_L': Array([1354.12315947, 1450.32060572, 1481.03333832], dtype=float64), 't_c': Array([-0.0745234 , -0.08942066, -0.01180107], dtype=float64), 'phase_c': Array([1.05267655, 3.72318335, 3.30646321], dtype=float64), 'psi': Array([1.05682106, 1.85276847, 0.24375647], dtype=float64), 'ra': Array([6.24875785, 4.79018848, 2.72058963], dtype=float64), 'sin_dec': Array([-0.39608884, -0.06034344, -0.39647132], dtype=float64)}
19:20 ninjax INFO    : log_prob: [-381.75805277  -26.81001785 -111.51240854]
19:20 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.6301603943656002, 'mass_2_source': 1.0582683100715677, 's1_z': -0.015774924004278955, 's2_z': 0.02426845598217439, 'cos_iota': 0.6681797029027257, 'd_L': 633.2551665969371, 't_c': -0.07490569132940253, 'phase_c': 2.25734560920714, 'psi': 2.8447752338554806, 'ra': 4.529841925575814, 'sin_dec': 0.8981012471087335, 'q': 0.6491804817055488, 'M_c': 1.3009950386784699, 'eta': 0.2386871733583176, 'iota': Array(0.83903687, dtype=float64, weak_type=True), 'dec': Array(1.11543288, dtype=float64, weak_type=True), 'lambda_1': 92.77767709636568, 'lambda_2': 1376.7110791993252, 'ET1_SNR': 22.763958597005107, 'ET2_SNR': 21.828419401379826, 'ET3_SNR': 22.21554499059955, 'network_SNR': 38.577300887932154, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
19:20 ninjax INFO    : log_prob at the injection parameters is: 683.4476543271089
19:20 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
19:20 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
19:20 ninjax INFO    : Ninjax setup complete.
19:20 ninjax INFO    : Saving output to ./ET/injection_26/
19:20 ninjax INFO    : Using polynomial learning rate scheduler
19:20 ninjax INFO    : Using temperature scheduler
19:20 ninjax INFO    : Using exponential temperature scheduler
19:20 ninjax INFO    : The hyperparameters passed to flowMC and jim are
19:20 ninjax INFO    :    n_loop_training: 75
19:20 ninjax INFO    :    n_loop_production: 30
19:20 ninjax INFO    :    n_local_steps: 500
19:20 ninjax INFO    :    n_global_steps: 1000
19:20 ninjax INFO    :    n_epochs: 50
19:20 ninjax INFO    :    n_chains: 1000
19:20 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x14bc373bf6d0>
19:20 ninjax INFO    :    max_samples: 50000
19:20 ninjax INFO    :    momentum: 0.9
19:20 ninjax INFO    :    batch_size: 50000
19:20 ninjax INFO    :    use_global: True
19:20 ninjax INFO    :    keep_quantile: 0.0
19:20 ninjax INFO    :    train_thinning: 10
19:20 ninjax INFO    :    output_thinning: 30
19:20 ninjax INFO    :    n_sample_max: 10000
19:20 ninjax INFO    :    num_layers: 10
19:20 ninjax INFO    :    hidden_size: [128, 128]
19:20 ninjax INFO    :    num_bins: 8
19:20 ninjax INFO    :    save_training_chains: False
19:20 ninjax INFO    :    eps_mass_matrix: 1e-05
19:20 ninjax INFO    :    use_scheduler: True
19:20 ninjax INFO    :    use_temperature: True
19:20 ninjax INFO    :    which_temperature_schedule: exponential
19:20 ninjax INFO    :    starting_temperature: 10.0
19:20 ninjax INFO    :    stop_tempering_iteration: 50
19:20 ninjax INFO    :    stopping_criterion_global_acc: 1.0
19:20 ninjax INFO    :    stopping_criterion_loss: -inf
19:20 ninjax INFO    :    nf_model_kwargs: {}
19:20 ninjax INFO    :    local sampler arg not shown (pretty print)
19:20 ninjax INFO    :    temperature_scheduler: <function exponential_decay.<locals>.schedule at 0x14bc373bf7f0>
19:20 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[-1.62992215e-25  1.26310445e-25  1.07747593e-25 -2.06891481e-24
 -2.07605477e-24  2.93795475e-24 -2.72309737e-24  2.26487400e-24
 -7.22864952e-24  5.58936224e-24]
[-1.39975548e-24  4.99152051e-24 -5.04725935e-24  1.21272698e-23
 -1.55228884e-25  2.72960393e-24 -4.44963489e-24 -1.83268815e-25
  2.14724182e-24 -1.59294587e-24]
Checking the noise that was generated in inject_signal ifo:
[ 5.33876329e-24  2.23566815e-24  9.58783508e-24  1.67854352e-24
 -4.41538263e-24  6.53552402e-25  3.71943170e-24 -2.56778008e-24
  6.19501917e-24 -7.31850939e-24]
[ 1.36913286e-25  1.81877427e-24 -1.30093692e-23  5.18222000e-24
 -1.56765035e-24  3.01429517e-24  7.42515934e-24 -1.29350412e-23
 -5.00332330e-24 -5.61586403e-24]
Checking the noise that was generated in inject_signal ifo:
[ 3.02298345e-24 -5.48101528e-25  3.52667059e-25  1.55304804e-24
 -5.60404310e-24 -5.82402700e-24 -2.57786513e-25 -1.53589549e-24
  1.08567737e-25  2.55348032e-24]
[ 1.77962592e-24 -8.76946424e-24 -3.82300908e-24 -5.81285538e-24
  3.56285155e-24 -5.78451579e-25 -5.67591985e-24 -3.42384742e-24
  3.94894808e-24 -1.40940366e-24]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.19637084007263184 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.6301603943656002, 'mass_2_source': 1.0582683100715677, 's1_z': -0.015774924004278955, 's2_z': 0.02426845598217439, 'cos_iota': 0.6681797029027257, 'd_L': 633.2551665969371, 't_c': -0.07490569132940253, 'phase_c': 2.25734560920714, 'psi': 2.8447752338554806, 'ra': 4.529841925575814, 'sin_dec': 0.8981012471087335, 'q': 0.6491804817055488, 'M_c': 1.3009950386784699, 'eta': 0.2386871733583176, 'iota': Array(0.83903687, dtype=float64, weak_type=True), 'dec': Array(1.11543288, dtype=float64, weak_type=True), 'lambda_1': 92.77767709636568, 'lambda_2': 1376.7110791993252, 'ET1_SNR': 22.763958597005107, 'ET2_SNR': 21.828419401379826, 'ET3_SNR': 22.21554499059955, 'network_SNR': 38.577300887932154, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5004830360412598 seconds
Time for h_sky_low and h_sky_center: 6.043246030807495 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 1.388150930404663
Going to compute coefficients . . .
Time for computing coefficients: 171.18346405029297 seconds
Time for computing coefficients: 14.543132543563843 seconds
Time for computing coefficients: 14.394078969955444 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/75 [00:00<?, ?it/s]Tuning global sampler:   1%|▏         | 1/75 [02:13<2:44:43, 133.56s/it]Tuning global sampler:   3%|▎         | 2/75 [02:28<1:17:44, 63.90s/it] Tuning global sampler:   4%|▍         | 3/75 [02:43<49:56, 41.62s/it]  Tuning global sampler:   5%|▌         | 4/75 [02:58<36:48, 31.10s/it]Tuning global sampler:   7%|▋         | 5/75 [03:13<29:34, 25.35s/it]Tuning global sampler:   8%|▊         | 6/75 [03:28<25:07, 21.85s/it]Tuning global sampler:   9%|▉         | 7/75 [03:44<22:15, 19.64s/it]Tuning global sampler:  11%|█         | 8/75 [03:59<20:20, 18.21s/it]Tuning global sampler:  12%|█▏        | 9/75 [04:15<19:17, 17.53s/it]Tuning global sampler:  13%|█▎        | 10/75 [04:30<18:11, 16.79s/it]Tuning global sampler:  15%|█▍        | 11/75 [04:45<17:18, 16.22s/it]Tuning global sampler:  16%|█▌        | 12/75 [05:00<16:35, 15.81s/it]Tuning global sampler:  17%|█▋        | 13/75 [05:15<16:02, 15.52s/it]Tuning global sampler:  19%|█▊        | 14/75 [05:29<15:35, 15.33s/it]Tuning global sampler:  20%|██        | 15/75 [05:44<15:11, 15.19s/it]Tuning global sampler:  21%|██▏       | 16/75 [05:59<14:50, 15.09s/it]Tuning global sampler:  23%|██▎       | 17/75 [06:14<14:32, 15.03s/it]Tuning global sampler:  24%|██▍       | 18/75 [06:29<14:14, 14.99s/it]Tuning global sampler:  25%|██▌       | 19/75 [06:44<13:57, 14.95s/it]Tuning global sampler:  27%|██▋       | 20/75 [07:00<13:57, 15.22s/it]Tuning global sampler:  28%|██▊       | 21/75 [07:15<13:35, 15.11s/it]Tuning global sampler:  29%|██▉       | 22/75 [07:29<13:17, 15.04s/it]Tuning global sampler:  31%|███       | 23/75 [07:44<13:00, 15.01s/it]Tuning global sampler:  32%|███▏      | 24/75 [07:59<12:43, 14.98s/it]Tuning global sampler:  33%|███▎      | 25/75 [08:14<12:27, 14.95s/it]Tuning global sampler:  35%|███▍      | 26/75 [08:29<12:12, 14.94s/it]Tuning global sampler:  36%|███▌      | 27/75 [08:44<11:56, 14.92s/it]Tuning global sampler:  37%|███▋      | 28/75 [08:59<11:40, 14.90s/it]Tuning global sampler:  39%|███▊      | 29/75 [09:14<11:25, 14.91s/it]Tuning global sampler:  40%|████      | 30/75 [09:29<11:10, 14.89s/it]Tuning global sampler:  41%|████▏     | 31/75 [09:43<10:54, 14.88s/it]Tuning global sampler:  43%|████▎     | 32/75 [09:59<10:52, 15.18s/it]Tuning global sampler:  44%|████▍     | 33/75 [10:14<10:33, 15.08s/it]Tuning global sampler:  45%|████▌     | 34/75 [10:29<10:15, 15.01s/it]Tuning global sampler:  47%|████▋     | 35/75 [10:44<09:59, 14.98s/it]Tuning global sampler:  48%|████▊     | 36/75 [10:59<09:42, 14.94s/it]Tuning global sampler:  49%|████▉     | 37/75 [11:14<09:26, 14.92s/it]Tuning global sampler:  51%|█████     | 38/75 [11:28<09:11, 14.91s/it]Tuning global sampler:  52%|█████▏    | 39/75 [11:43<08:56, 14.90s/it]Tuning global sampler:  53%|█████▎    | 40/75 [11:58<08:41, 14.89s/it]Tuning global sampler:  55%|█████▍    | 41/75 [12:13<08:26, 14.89s/it]Tuning global sampler:  56%|█████▌    | 42/75 [12:28<08:10, 14.88s/it]Tuning global sampler:  57%|█████▋    | 43/75 [12:44<08:05, 15.16s/it]Tuning global sampler:  59%|█████▊    | 44/75 [12:59<07:47, 15.09s/it]Tuning global sampler:  60%|██████    | 45/75 [13:14<07:30, 15.02s/it]Tuning global sampler:  61%|██████▏   | 46/75 [13:28<07:14, 14.97s/it]Tuning global sampler:  63%|██████▎   | 47/75 [13:43<06:58, 14.95s/it]Tuning global sampler:  64%|██████▍   | 48/75 [13:58<06:42, 14.92s/it]Tuning global sampler:  65%|██████▌   | 49/75 [14:13<06:27, 14.90s/it]Tuning global sampler:  67%|██████▋   | 50/75 [14:28<06:12, 14.90s/it]Tuning global sampler:  68%|██████▊   | 51/75 [14:43<05:57, 14.89s/it]Tuning global sampler:  69%|██████▉   | 52/75 [14:58<05:42, 14.88s/it]Tuning global sampler:  71%|███████   | 53/75 [15:13<05:27, 14.88s/it]Tuning global sampler:  72%|███████▏  | 54/75 [15:27<05:12, 14.88s/it]Tuning global sampler:  73%|███████▎  | 55/75 [15:43<05:03, 15.18s/it]Tuning global sampler:  75%|███████▍  | 56/75 [15:58<04:46, 15.10s/it]Tuning global sampler:  76%|███████▌  | 57/75 [16:13<04:30, 15.02s/it]Tuning global sampler:  77%|███████▋  | 58/75 [16:28<04:14, 14.97s/it]Tuning global sampler:  79%|███████▊  | 59/75 [16:43<03:59, 14.95s/it]Tuning global sampler:  80%|████████  | 60/75 [16:58<03:43, 14.92s/it]Tuning global sampler:  81%|████████▏ | 61/75 [17:12<03:28, 14.89s/it]Tuning global sampler:  83%|████████▎ | 62/75 [17:27<03:13, 14.91s/it]Tuning global sampler:  84%|████████▍ | 63/75 [17:42<02:58, 14.89s/it]Tuning global sampler:  85%|████████▌ | 64/75 [17:57<02:43, 14.88s/it]Tuning global sampler:  87%|████████▋ | 65/75 [18:12<02:28, 14.89s/it]Tuning global sampler:  88%|████████▊ | 66/75 [18:28<02:16, 15.18s/it]Tuning global sampler:  89%|████████▉ | 67/75 [18:43<02:00, 15.08s/it]Tuning global sampler:  91%|█████████ | 68/75 [18:58<01:45, 15.02s/it]Tuning global sampler:  92%|█████████▏| 69/75 [19:12<01:29, 14.96s/it]Tuning global sampler:  93%|█████████▎| 70/75 [19:27<01:14, 14.93s/it]Tuning global sampler:  95%|█████████▍| 71/75 [19:42<00:59, 14.92s/it]Tuning global sampler:  96%|█████████▌| 72/75 [19:57<00:44, 14.89s/it]Tuning global sampler:  97%|█████████▋| 73/75 [20:12<00:29, 14.88s/it]Tuning global sampler:  99%|█████████▊| 74/75 [20:27<00:14, 14.88s/it]Tuning global sampler: 100%|██████████| 75/75 [20:42<00:00, 14.87s/it]Tuning global sampler: 100%|██████████| 75/75 [20:42<00:00, 16.56s/it]
Compiling MALA body
Starting Production run
Production run:   0%|          | 0/30 [00:00<?, ?it/s]Production run:   3%|▎         | 1/30 [00:12<06:02, 12.50s/it]Production run:   7%|▋         | 2/30 [00:24<05:49, 12.47s/it]Production run:  10%|█         | 3/30 [00:37<05:36, 12.46s/it]Production run:  13%|█▎        | 4/30 [00:49<05:23, 12.46s/it]Production run:  17%|█▋        | 5/30 [01:02<05:11, 12.46s/it]Production run:  20%|██        | 6/30 [01:14<04:58, 12.46s/it]Production run:  23%|██▎       | 7/30 [01:27<04:46, 12.46s/it]Production run:  27%|██▋       | 8/30 [01:39<04:34, 12.46s/it]Production run:  30%|███       | 9/30 [01:52<04:21, 12.46s/it]Production run:  33%|███▎      | 10/30 [02:04<04:09, 12.46s/it]Production run:  37%|███▋      | 11/30 [02:17<03:56, 12.46s/it]Production run:  40%|████      | 12/30 [02:29<03:44, 12.45s/it]Production run:  43%|████▎     | 13/30 [02:41<03:31, 12.46s/it]Production run:  47%|████▋     | 14/30 [02:54<03:19, 12.46s/it]Production run:  50%|█████     | 15/30 [03:06<03:06, 12.46s/it]Production run:  53%|█████▎    | 16/30 [03:19<02:54, 12.46s/it]Production run:  57%|█████▋    | 17/30 [03:31<02:41, 12.46s/it]Production run:  60%|██████    | 18/30 [03:44<02:29, 12.46s/it]Production run:  63%|██████▎   | 19/30 [03:56<02:17, 12.46s/it]Production run:  67%|██████▋   | 20/30 [04:09<02:04, 12.46s/it]Production run:  70%|███████   | 21/30 [04:21<01:52, 12.46s/it]Production run:  73%|███████▎  | 22/30 [04:34<01:39, 12.46s/it]Production run:  77%|███████▋  | 23/30 [04:46<01:27, 12.46s/it]Production run:  80%|████████  | 24/30 [04:58<01:14, 12.46s/it]Production run:  83%|████████▎ | 25/30 [05:11<01:02, 12.46s/it]Production run:  87%|████████▋ | 26/30 [05:23<00:49, 12.46s/it]Production run:  90%|█████████ | 27/30 [05:36<00:37, 12.46s/it]Production run:  93%|█████████▎| 28/30 [05:48<00:24, 12.46s/it]Production run:  97%|█████████▋| 29/30 [06:01<00:12, 12.46s/it]Production run: 100%|██████████| 30/30 [06:13<00:00, 12.46s/it]Production run: 100%|██████████| 30/30 [06:13<00:00, 12.46s/it]
19:47 ninjax INFO    : Saving samples to ./ET/injection_26/results_training.npz
19:47 ninjax INFO    : Saving the NF
19:47 ninjax INFO    : Time taken: 1623.4980249404907 seconds (27.058300415674847 minutes)
19:47 ninjax INFO    : Creating the final corner plot
19:47 ninjax INFO    : Dumping the final production chains
19:47 ninjax INFO    : Chains shape is: (13, 1530000)
19:47 ninjax INFO    : Key: M_c: ESS = 14157, Rhat = 1.0410382738403838
19:47 ninjax INFO    : Key: q: ESS = 13388, Rhat = 1.0440527900372625
19:47 ninjax INFO    : Key: s1_z: ESS = 12917, Rhat = 1.0455414162594072
19:47 ninjax INFO    : Key: s2_z: ESS = 13384, Rhat = 1.047233408429159
19:47 ninjax INFO    : Key: lambda_1: ESS = 14201, Rhat = 1.0416648092504492
19:47 ninjax INFO    : Key: lambda_2: ESS = 15190, Rhat = 1.0392680346325527
19:47 ninjax INFO    : Key: cos_iota: ESS = 11782, Rhat = 1.050566085252383
19:47 ninjax INFO    : Key: d_L: ESS = 13510, Rhat = 1.048556553134778
19:47 ninjax INFO    : Key: t_c: ESS = 12062, Rhat = 1.0558158607048322
19:47 ninjax INFO    : Key: phase_c: ESS = 18250, Rhat = 1.0615928159791397
19:47 ninjax INFO    : Key: psi: ESS = 11049, Rhat = 1.0538868552412075
19:47 ninjax INFO    : Key: ra: ESS = 10143, Rhat = 1.0591667642705012
19:47 ninjax INFO    : Key: sin_dec: ESS = 7154, Rhat = 1.0851180099487276
19:47 ninjax INFO    : Key: eta: ESS = 13388, Rhat = 1.0440527900372625
19:48 ninjax INFO    : Key: iota: ESS = 11782, Rhat = 1.0505660852523833
19:48 ninjax INFO    : Key: dec: ESS = 7154, Rhat = 1.0851180099487276
19:48 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.325 +/- 0.168
q: 0.709 +/- 0.177
s1_z: -0.005 +/- 0.027
s2_z: -0.009 +/- 0.027
lambda_1: 1264.259 +/- 1379.638
lambda_2: 1640.011 +/- 1357.606
cos_iota: 0.491 +/- 0.553
d_L: 1089.434 +/- 220.566
t_c: -0.065 +/- 0.034
phase_c: 3.091 +/- 1.756
psi: 1.521 +/- 0.919
ra: 2.977 +/- 1.287
sin_dec: 0.336 +/- 0.455
Log probability: 355.773 +/- 288.130
Local acceptance: 0.412 +/- 0.492
Global acceptance: 0.037 +/- 0.190
Max loss: 22.793, Min loss: 4.834
Production summary
==========
M_c: 1.301 +/- 0.000
q: 0.703 +/- 0.124
s1_z: -0.006 +/- 0.028
s2_z: -0.006 +/- 0.028
lambda_1: 269.861 +/- 203.750
lambda_2: 822.211 +/- 534.811
cos_iota: 0.864 +/- 0.112
d_L: 1116.797 +/- 165.009
t_c: -0.069 +/- 0.002
phase_c: 3.159 +/- 1.789
psi: 1.613 +/- 0.892
ra: 2.949 +/- 0.584
sin_dec: 0.586 +/- 0.247
Log probability: 682.228 +/- 2.050
Local acceptance: 0.072 +/- 0.259
Global acceptance: 0.030 +/- 0.170
DONE

JOB STATISTICS
==============
Job ID: 10885691
Cluster: snellius
User/Group: twouters2/twouters2
State: RUNNING
Nodes: 1
Cores per node: 16
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 08:28:00 core-walltime
Job Wall-clock time: 00:31:45
Memory Utilized: 0.00 MB (estimated maximum)
Memory Efficiency: 0.00% of 10.00 GB (10.00 GB/node)
WARNING: Efficiency statistics may be misleading for RUNNING jobs.
