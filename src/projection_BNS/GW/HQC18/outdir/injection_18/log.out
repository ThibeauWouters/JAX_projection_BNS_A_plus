Fri Mar 28 12:53:02 CET 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
12:53 ninjax INFO    : Checking and setting outdir
12:53 ninjax INFO    : Found generation prior file ./outdir/injection_18/generation_prior.prior
12:53 ninjax INFO    : The outdir is set to ./outdir/injection_18
12:53 ninjax INFO    : Loading the given config
12:53 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
12:53 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
12:53 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/HQC18/outdir/injection_18/complete_config.json
12:53 ninjax INFO    : No seed specified. Generating a random seed: 566819
12:53 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 24190
12:53 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 183284
12:53 ninjax INFO    : Loading the priors
12:53 ninjax INFO    : Setting up the prior
12:53 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
12:53 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
12:53 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
12:53 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
12:53 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
12:53 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
12:53 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
12:53 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
12:53 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
12:53 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
12:53 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
12:53 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
12:53 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
12:53 ninjax INFO    : Setting up the generation prior
12:53 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.0452447532113593, naming=["mass_1_source"])
12:53 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.0452447532113593, naming=["mass_2_source"])
12:53 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
12:53 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
12:53 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
12:53 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
12:53 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
12:53 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
12:53 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
12:53 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
12:53 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
12:53 ninjax INFO    : Finished prior setup
12:53 ninjax INFO    : Setting the transforms
12:53 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
12:53 ninjax INFO    : transforms_str_list has 3 elements
12:53 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
12:53 ninjax INFO    : Setting the likelihood
12:53 ninjax INFO    : GW likelihood provided, setting up the GW pipe
12:53 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz
12:53 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz for BNS injections
12:53 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
12:53 ninjax INFO    : self.is_BNS_run is True
12:53 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
12:53 ninjax INFO    : GW run is an injection
12:53 ninjax INFO    : Setting up GW injection . . . 
12:53 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
12:53 ninjax INFO    : Generating new injection
12:53 ninjax INFO    : Sanity check: generated parameters:
12:53 ninjax INFO    : {'mass_1_source': 1.1680000911170312, 'mass_2_source': 1.5332170136742573, 's1_z': 0.007181240283666623, 's2_z': -0.04016784267172968, 'cos_iota': -0.2237349430143305, 'd_L': 247.38436607783032, 't_c': -0.013492932198403196, 'phase_c': 3.1784657566392536, 'psi': 0.5902544488022101, 'ra': 4.7731107925210905, 'sin_dec': -0.2112797416919978}
12:53 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz . . . 
12:53 ninjax INFO    : Injected lambda_1: 141.89341275914285
12:53 ninjax INFO    : Injected lambda_2: 777.1404258008996
12:53 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.2278293141235657 is 256.0
12:53 ninjax INFO    : After transforms, the injection parameters are:
12:53 ninjax INFO    : {'mass_1_source': 1.5332170136742573, 'mass_2_source': 1.1680000911170312, 's1_z': 0.007181240283666623, 's2_z': -0.04016784267172968, 'cos_iota': -0.2237349430143305, 'd_L': 247.38436607783032, 't_c': -0.013492932198403196, 'phase_c': 3.1784657566392536, 'psi': 0.5902544488022101, 'ra': 4.7731107925210905, 'sin_dec': -0.2112797416919978, 'q': 0.7617969802709096, 'M_c': 1.2278293141235657, 'eta': 0.24542993042642045, 'iota': Array(1.79644121, dtype=float64, weak_type=True), 'dec': Array(-0.21288407, dtype=float64, weak_type=True), 'lambda_1': 141.89341275914285, 'lambda_2': 777.1404258008996}
12:53 ninjax INFO    : The trial injection parameters are {'M_c': 1.2278293141235657, 'eta': 0.24542993042642045, 's1_z': 0.007181240283666623, 's2_z': -0.04016784267172968, 'lambda_1': 141.89341275914285, 'lambda_2': 777.1404258008996, 'd_L': 247.38436607783032, 'phase_c': 3.1784657566392536, 'iota': 1.796441208943394, 't_c': -0.013492932198403196, 'psi': 0.5902544488022101, 'ra': 4.7731107925210905, 'dec': -0.21288407317727684}
12:53 ninjax INFO    : Injecting signals . . .
12:53 ninjax INFO    : self.ifos
12:53 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
12:53 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
12:53 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
12:53 ninjax INFO    : [-7.91329981e-23+1.63664841e-23j  1.63142319e-23+1.82723625e-23j
  1.01321314e-22+1.60823731e-23j ...
 -2.28180698e-23+1.70828043e-23j -5.57821534e-23-7.57418458e-24j
 -9.75641370e-24+3.81553877e-23j]
12:53 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
12:53 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
12:53 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
12:53 ninjax INFO    : [-1.20266558e-22+4.53355368e-23j  1.14216049e-22+1.17256148e-22j
  5.42156598e-23-8.44773297e-23j ...
 -2.29674565e-23-4.73813912e-24j  3.27215726e-23-1.99825390e-23j
  9.51030040e-24+9.13917665e-24j]
12:53 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
12:53 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
12:53 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
12:53 ninjax INFO    : [-1.77798708e-23-2.57801542e-23j  5.51836817e-24-3.79627187e-23j
 -1.18721523e-22+2.25164822e-23j ...
 -3.64486733e-23+7.99761393e-23j  3.66159180e-23+4.88377947e-23j
 -6.22422474e-23+4.18099082e-23j]
12:53 ninjax INFO    : [1.43183556e-46 1.43058540e-46 1.42935095e-46 ... 6.39793039e-47
 6.39795354e-47 6.39797668e-47]
12:53 ninjax INFO    : SNR for ifo H1 is 4.6495539504646155
12:53 ninjax INFO    : SNR for ifo L1 is 7.54009072125882
12:53 ninjax INFO    : SNR for ifo V1 is 4.648865548529313
12:53 ninjax INFO    : The network SNR is 10.004162679174966
12:53 ninjax INFO    : The network SNR does not pass the threshold, trying again
12:53 ninjax INFO    : Generating new injection
12:53 ninjax INFO    : Sanity check: generated parameters:
12:53 ninjax INFO    : {'mass_1_source': 1.397409738358177, 'mass_2_source': 1.312659837464897, 's1_z': -0.01770034599666568, 's2_z': 0.009133012016474006, 'cos_iota': -0.6924889617397274, 'd_L': 226.82839967958392, 't_c': 0.027156962155945902, 'phase_c': 3.2341733660530414, 'psi': 0.884754976892715, 'ra': 5.417325061993775, 'sin_dec': -0.3091761717483523}
12:53 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz . . . 
12:53 ninjax INFO    : Injected lambda_1: 260.23295717861987
12:53 ninjax INFO    : Injected lambda_2: 384.9069801323296
12:53 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.239358261139518 is 256.0
12:53 ninjax INFO    : After transforms, the injection parameters are:
12:53 ninjax INFO    : {'mass_1_source': 1.397409738358177, 'mass_2_source': 1.312659837464897, 's1_z': -0.01770034599666568, 's2_z': 0.009133012016474006, 'cos_iota': -0.6924889617397274, 'd_L': 226.82839967958392, 't_c': 0.027156962155945902, 'phase_c': 3.2341733660530414, 'psi': 0.884754976892715, 'ra': 5.417325061993775, 'sin_dec': -0.3091761717483523, 'q': 0.939352146641791, 'M_c': 1.239358261139518, 'eta': 0.24975551201270177, 'iota': Array(2.33572974, dtype=float64, weak_type=True), 'dec': Array(-0.31432664, dtype=float64, weak_type=True), 'lambda_1': 260.23295717861987, 'lambda_2': 384.9069801323296}
12:53 ninjax INFO    : The trial injection parameters are {'M_c': 1.239358261139518, 'eta': 0.24975551201270177, 's1_z': -0.01770034599666568, 's2_z': 0.009133012016474006, 'lambda_1': 260.23295717861987, 'lambda_2': 384.9069801323296, 'd_L': 226.82839967958392, 'phase_c': 3.2341733660530414, 'iota': 2.3357297389613008, 't_c': 0.027156962155945902, 'psi': 0.884754976892715, 'ra': 5.417325061993775, 'dec': -0.3143266389059841}
12:53 ninjax INFO    : Injecting signals . . .
12:53 ninjax INFO    : self.ifos
12:53 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
12:53 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
12:53 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
12:53 ninjax INFO    : [-8.02929093e-23+1.78673164e-23j  1.82646996e-23+1.78487940e-23j
  9.94664684e-23+1.50923834e-23j ...
 -2.28096427e-23+1.70836568e-23j -5.57737776e-23-7.57292545e-24j
 -9.74810863e-24+3.81570505e-23j]
12:53 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
12:53 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
12:53 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
12:53 ninjax INFO    : [-1.17822894e-22+4.52812502e-23j  1.12411525e-22+1.15853280e-22j
  5.47279870e-23-8.23940606e-23j ...
 -2.29759726e-23-4.74687669e-24j  3.27134878e-23-1.99916769e-23j
  9.50266551e-24+9.12965973e-24j]
12:53 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
12:53 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
12:53 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
12:53 ninjax INFO    : [-2.07516748e-23-1.92875221e-23j  1.22559722e-23-4.07447765e-23j
 -1.25686848e-22+1.99169179e-23j ...
 -3.64428629e-23+7.99621830e-23j  3.66223925e-23+4.88241340e-23j
 -6.22351237e-23+4.17965746e-23j]
12:53 ninjax INFO    : [1.43183556e-46 1.43058540e-46 1.42935095e-46 ... 6.39793039e-47
 6.39795354e-47 6.39797668e-47]
12:53 ninjax INFO    : SNR for ifo H1 is 8.020633913988036
12:53 ninjax INFO    : SNR for ifo L1 is 11.562054859833976
12:53 ninjax INFO    : SNR for ifo V1 is 11.275024019133294
12:53 ninjax INFO    : The network SNR is 18.031579176435386
12:53 ninjax INFO    : Network SNR passes threshold
12:53 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
12:53 ninjax INFO    :    mass_1_source: 1.397409738358177
12:53 ninjax INFO    :    mass_2_source: 1.312659837464897
12:53 ninjax INFO    :    s1_z: -0.01770034599666568
12:53 ninjax INFO    :    s2_z: 0.009133012016474006
12:53 ninjax INFO    :    cos_iota: -0.6924889617397274
12:53 ninjax INFO    :    d_L: 226.82839967958392
12:53 ninjax INFO    :    t_c: 0.027156962155945902
12:53 ninjax INFO    :    phase_c: 3.2341733660530414
12:53 ninjax INFO    :    psi: 0.884754976892715
12:53 ninjax INFO    :    ra: 5.417325061993775
12:53 ninjax INFO    :    sin_dec: -0.3091761717483523
12:53 ninjax INFO    :    q: 0.939352146641791
12:53 ninjax INFO    :    M_c: 1.239358261139518
12:53 ninjax INFO    :    eta: 0.24975551201270177
12:53 ninjax INFO    :    iota: 2.3357297389613008
12:53 ninjax INFO    :    dec: -0.3143266389059841
12:53 ninjax INFO    :    lambda_1: 260.23295717861987
12:53 ninjax INFO    :    lambda_2: 384.9069801323296
12:53 ninjax INFO    :    H1_SNR: 8.020633913988036
12:53 ninjax INFO    :    L1_SNR: 11.562054859833976
12:53 ninjax INFO    :    V1_SNR: 11.275024019133294
12:53 ninjax INFO    :    network_SNR: 18.031579176435386
12:53 ninjax INFO    :    epoch: 254.0
12:53 ninjax INFO    :    gmst: 2.7288901910520846
12:53 ninjax INFO    :    duration: 256.0
12:53 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
12:53 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
12:53 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
12:56 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 189.20772218704224 seconds = 3.153462036450704 minutes
12:56 ninjax INFO    : The priors are not modified after their initialization
12:56 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
12:56 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
12:56 ninjax INFO    : sample: {'M_c': Array([2.04538643, 1.02768183, 1.7240108 ], dtype=float64), 'q': Array([0.48168333, 0.22133728, 0.28651067], dtype=float64), 's1_z': Array([ 0.01522949,  0.03896153, -0.03911775], dtype=float64), 's2_z': Array([-0.04129821,  0.02580644,  0.04708446], dtype=float64), 'lambda_1': Array([4439.16743941,   60.55208593, 4644.76666362], dtype=float64), 'lambda_2': Array([1824.35595543, 2610.78609848, 2111.98079177], dtype=float64), 'cos_iota': Array([ 0.30077699,  0.76471591, -0.34100653], dtype=float64), 'd_L': Array([886.47081993, 765.68078386, 789.3281579 ], dtype=float64), 't_c': Array([ 0.09194375, -0.09326898, -0.0412592 ], dtype=float64), 'phase_c': Array([3.11582784, 1.70729656, 5.79159652], dtype=float64), 'psi': Array([1.50338224, 0.34958025, 0.2195066 ], dtype=float64), 'ra': Array([1.59083278, 4.57550755, 4.98923478], dtype=float64), 'sin_dec': Array([ 0.82123243, -0.17091667,  0.35057136], dtype=float64)}
12:56 ninjax INFO    : log_prob: [-21.03984835 -28.79854696 -10.54412356]
12:56 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.397409738358177, 'mass_2_source': 1.312659837464897, 's1_z': -0.01770034599666568, 's2_z': 0.009133012016474006, 'cos_iota': -0.6924889617397274, 'd_L': 226.82839967958392, 't_c': 0.027156962155945902, 'phase_c': 3.2341733660530414, 'psi': 0.884754976892715, 'ra': 5.417325061993775, 'sin_dec': -0.3091761717483523, 'q': 0.939352146641791, 'M_c': 1.239358261139518, 'eta': 0.24975551201270177, 'iota': Array(2.33572974, dtype=float64, weak_type=True), 'dec': Array(-0.31432664, dtype=float64, weak_type=True), 'lambda_1': 260.23295717861987, 'lambda_2': 384.9069801323296, 'H1_SNR': 8.020633913988036, 'L1_SNR': 11.562054859833976, 'V1_SNR': 11.275024019133294, 'network_SNR': 18.031579176435386, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
12:56 ninjax INFO    : log_prob at the injection parameters is: 141.5931280399404
12:56 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
12:56 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
12:56 ninjax INFO    : Ninjax setup complete.
12:56 ninjax INFO    : Saving output to ./outdir/injection_18/
12:56 ninjax INFO    : Using polynomial learning rate scheduler
12:56 ninjax INFO    : The hyperparameters passed to flowMC and jim are
12:56 ninjax INFO    :    n_loop_training: 200
12:56 ninjax INFO    :    n_loop_production: 10
12:56 ninjax INFO    :    n_local_steps: 100
12:56 ninjax INFO    :    n_global_steps: 1000
12:56 ninjax INFO    :    n_epochs: 25
12:56 ninjax INFO    :    n_chains: 1000
12:56 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x1480bedb3be0>
12:56 ninjax INFO    :    max_samples: 50000
12:56 ninjax INFO    :    momentum: 0.9
12:56 ninjax INFO    :    batch_size: 30000
12:56 ninjax INFO    :    use_global: True
12:56 ninjax INFO    :    keep_quantile: 0.0
12:56 ninjax INFO    :    train_thinning: 10
12:56 ninjax INFO    :    output_thinning: 50
12:56 ninjax INFO    :    n_sample_max: 10000
12:56 ninjax INFO    :    num_layers: 10
12:56 ninjax INFO    :    hidden_size: [128, 128]
12:56 ninjax INFO    :    num_bins: 8
12:56 ninjax INFO    :    save_training_chains: False
12:56 ninjax INFO    :    eps_mass_matrix: 1e-05
12:56 ninjax INFO    :    use_scheduler: True
12:56 ninjax INFO    :    use_temperature: False
12:56 ninjax INFO    :    which_temperature_schedule: exponential
12:56 ninjax INFO    :    starting_temperature: 2.0
12:56 ninjax INFO    :    stop_tempering_iteration: 75
12:56 ninjax INFO    :    stopping_criterion_global_acc: 0.1
12:56 ninjax INFO    :    stopping_criterion_loss: -inf
12:56 ninjax INFO    :    nf_model_kwargs: {}
12:56 ninjax INFO    :    local sampler arg not shown (pretty print)
12:56 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[-7.69948129e-23  1.47018831e-23  1.01432029e-22  6.46461673e-23
 -2.37715897e-23  7.34105064e-23  2.66122412e-23  1.08513873e-22
 -3.86441512e-23  6.10120540e-23]
[ 1.61927955e-23  1.68580680e-23  1.82237593e-23  6.57665462e-23
 -1.48609614e-26 -9.46495386e-23 -6.69290767e-23  8.18780684e-23
  3.21540039e-24 -1.80279200e-24]
Checking the noise that was generated in inject_signal ifo:
[-1.22322660e-22  1.17661286e-22  5.14715888e-23  4.69920808e-24
 -3.42588711e-23  7.89134532e-23  8.87667353e-23  1.06126889e-22
 -5.47154823e-23 -6.26684641e-24]
[ 4.81417822e-23  1.16779315e-22 -8.66131124e-23 -4.05423466e-24
 -1.05081529e-23  2.04080367e-23  6.10232321e-23  3.34818515e-23
 -2.95578261e-23  7.56485465e-23]
Checking the noise that was generated in inject_signal ifo:
[-1.59216529e-23  5.65514747e-24 -1.20765569e-22  1.94626305e-23
 -1.59569386e-23  4.63554835e-23 -4.60655791e-23 -1.24365587e-23
  1.33222504e-22  3.61283206e-23]
[-2.37892625e-23 -4.06820055e-23  2.43141785e-23 -1.38952054e-22
 -8.20449611e-23 -8.04971372e-23  6.26434809e-23 -4.41418850e-24
 -8.87260101e-23 -8.49244346e-23]
Checking the noise that was generated in inject_signal ifo:
[-7.69948129e-23  1.47018831e-23  1.01432029e-22  6.46461673e-23
 -2.37715897e-23  7.34105064e-23  2.66122412e-23  1.08513873e-22
 -3.86441512e-23  6.10120540e-23]
[ 1.61927955e-23  1.68580680e-23  1.82237593e-23  6.57665462e-23
 -1.48609614e-26 -9.46495386e-23 -6.69290767e-23  8.18780684e-23
  3.21540039e-24 -1.80279200e-24]
Checking the noise that was generated in inject_signal ifo:
[-1.22322660e-22  1.17661286e-22  5.14715888e-23  4.69920808e-24
 -3.42588711e-23  7.89134532e-23  8.87667353e-23  1.06126889e-22
 -5.47154823e-23 -6.26684641e-24]
[ 4.81417822e-23  1.16779315e-22 -8.66131124e-23 -4.05423466e-24
 -1.05081529e-23  2.04080367e-23  6.10232321e-23  3.34818515e-23
 -2.95578261e-23  7.56485465e-23]
Checking the noise that was generated in inject_signal ifo:
[-1.59216529e-23  5.65514747e-24 -1.20765569e-22  1.94626305e-23
 -1.59569386e-23  4.63554835e-23 -4.60655791e-23 -1.24365587e-23
  1.33222504e-22  3.61283206e-23]
[-2.37892625e-23 -4.06820055e-23  2.43141785e-23 -1.38952054e-22
 -8.20449611e-23 -8.04971372e-23  6.26434809e-23 -4.41418850e-24
 -8.87260101e-23 -8.49244346e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.18209099769592285 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.397409738358177, 'mass_2_source': 1.312659837464897, 's1_z': -0.01770034599666568, 's2_z': 0.009133012016474006, 'cos_iota': -0.6924889617397274, 'd_L': 226.82839967958392, 't_c': 0.027156962155945902, 'phase_c': 3.2341733660530414, 'psi': 0.884754976892715, 'ra': 5.417325061993775, 'sin_dec': -0.3091761717483523, 'q': 0.939352146641791, 'M_c': 1.239358261139518, 'eta': 0.24975551201270177, 'iota': Array(2.33572974, dtype=float64, weak_type=True), 'dec': Array(-0.31432664, dtype=float64, weak_type=True), 'lambda_1': 260.23295717861987, 'lambda_2': 384.9069801323296, 'H1_SNR': 8.020633913988036, 'L1_SNR': 11.562054859833976, 'V1_SNR': 11.275024019133294, 'network_SNR': 18.031579176435386, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5176575183868408 seconds
Time for h_sky_low and h_sky_center: 5.542625904083252 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.749535322189331
Going to compute coefficients . . .
Time for computing coefficients: 167.23766493797302 seconds
Time for computing coefficients: 7.262859344482422 seconds
Time for computing coefficients: 7.172121047973633 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:02<6:45:15, 122.19s/it]Tuning global sampler:   1%|          | 2/200 [02:06<2:54:57, 53.02s/it] Tuning global sampler:   2%|▏         | 3/200 [02:11<1:41:35, 30.94s/it]Tuning global sampler:   2%|▏         | 4/200 [02:16<1:07:10, 20.56s/it]Tuning global sampler:   2%|▎         | 5/200 [02:20<48:08, 14.81s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:25<36:42, 11.35s/it]Tuning global sampler:   4%|▎         | 7/200 [02:29<29:21,  9.13s/it]Tuning global sampler:   4%|▍         | 8/200 [02:34<24:36,  7.69s/it]Tuning global sampler:   4%|▍         | 9/200 [02:39<21:21,  6.71s/it]Tuning global sampler:   5%|▌         | 10/200 [02:43<19:00,  6.00s/it]Tuning global sampler:   6%|▌         | 11/200 [02:48<17:33,  5.57s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:32,  5.28s/it]Tuning global sampler:   6%|▋         | 13/200 [02:57<15:46,  5.06s/it]Tuning global sampler:   7%|▋         | 14/200 [03:01<15:17,  4.93s/it]Tuning global sampler:   8%|▊         | 15/200 [03:06<14:58,  4.85s/it]Tuning global sampler:   8%|▊         | 16/200 [03:11<14:41,  4.79s/it]Tuning global sampler:   8%|▊         | 17/200 [03:16<15:23,  5.05s/it]Tuning global sampler:   9%|▉         | 18/200 [03:21<14:59,  4.94s/it]Tuning global sampler:  10%|▉         | 19/200 [03:26<14:38,  4.85s/it]Tuning global sampler:  10%|█         | 20/200 [03:30<14:21,  4.79s/it]Tuning global sampler:  10%|█         | 21/200 [03:35<14:09,  4.75s/it]Tuning global sampler:  11%|█         | 22/200 [03:40<13:56,  4.70s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:44<13:47,  4.67s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:49<13:29,  4.60s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:53<13:13,  4.54s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:57<13:01,  4.49s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:02<12:51,  4.46s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:06<12:43,  4.44s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:11<12:37,  4.43s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:15<12:30,  4.42s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:19<12:25,  4.41s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:24<12:19,  4.40s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:28<12:13,  4.39s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:32<12:07,  4.38s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:37<12:03,  4.38s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:42<12:48,  4.69s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:47<12:29,  4.60s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:51<12:16,  4.55s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:55<12:04,  4.50s/it]Tuning global sampler:  20%|██        | 40/200 [05:00<11:54,  4.46s/it]Tuning global sampler:  20%|██        | 41/200 [05:04<11:46,  4.45s/it]Tuning global sampler:  21%|██        | 42/200 [05:09<11:40,  4.43s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:13<11:35,  4.43s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:17<11:28,  4.41s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:22<11:21,  4.39s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:26<11:16,  4.39s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:31<11:12,  4.39s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:35<11:07,  4.39s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:39<11:04,  4.40s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:44<11:00,  4.40s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:48<10:55,  4.40s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:53<10:51,  4.40s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:57<10:46,  4.40s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:01<10:41,  4.40s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:06<10:35,  4.38s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:10<10:30,  4.38s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:16<11:17,  4.73s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:20<10:58,  4.64s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:24<10:43,  4.57s/it]Tuning global sampler:  30%|███       | 60/200 [06:29<10:32,  4.51s/it]Tuning global sampler:  30%|███       | 61/200 [06:33<10:22,  4.48s/it]Tuning global sampler:  31%|███       | 62/200 [06:38<10:15,  4.46s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:42<10:09,  4.45s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:46<10:02,  4.43s/it]Tuning global sampler:  32%|███▎      | 65/200 [06:51<09:56,  4.42s/it]Tuning global sampler:  33%|███▎      | 66/200 [06:55<09:49,  4.40s/it]Tuning global sampler:  34%|███▎      | 67/200 [07:00<09:43,  4.39s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:04<09:40,  4.39s/it]Tuning global sampler:  34%|███▍      | 69/200 [07:08<09:36,  4.40s/it]Tuning global sampler:  35%|███▌      | 70/200 [07:13<09:32,  4.40s/it]Tuning global sampler:  36%|███▌      | 71/200 [07:17<09:28,  4.41s/it]Tuning global sampler:  36%|███▌      | 72/200 [07:22<09:23,  4.40s/it]Tuning global sampler:  36%|███▋      | 73/200 [07:26<09:19,  4.40s/it]Tuning global sampler:  37%|███▋      | 74/200 [07:30<09:14,  4.40s/it]Tuning global sampler:  38%|███▊      | 75/200 [07:35<09:11,  4.41s/it]Tuning global sampler:  38%|███▊      | 76/200 [07:39<09:06,  4.41s/it]Tuning global sampler:  38%|███▊      | 77/200 [07:44<09:00,  4.39s/it]Tuning global sampler:  39%|███▉      | 78/200 [07:49<09:33,  4.70s/it]Tuning global sampler:  40%|███▉      | 79/200 [07:53<09:17,  4.61s/it]Tuning global sampler:  40%|████      | 80/200 [07:58<09:05,  4.54s/it]Tuning global sampler:  40%|████      | 81/200 [08:02<08:55,  4.50s/it]Tuning global sampler:  41%|████      | 82/200 [08:07<08:47,  4.47s/it]Tuning global sampler:  42%|████▏     | 83/200 [08:11<08:41,  4.45s/it]Tuning global sampler:  42%|████▏     | 84/200 [08:15<08:35,  4.44s/it]Tuning global sampler:  42%|████▎     | 85/200 [08:20<08:29,  4.43s/it]Tuning global sampler:  43%|████▎     | 86/200 [08:24<08:24,  4.42s/it]Tuning global sampler:  44%|████▎     | 87/200 [08:29<08:19,  4.42s/it]Tuning global sampler:  44%|████▍     | 88/200 [08:33<08:13,  4.41s/it]Tuning global sampler:  44%|████▍     | 89/200 [08:37<08:07,  4.40s/it]Tuning global sampler:  45%|████▌     | 90/200 [08:42<08:03,  4.40s/it]Tuning global sampler:  46%|████▌     | 91/200 [08:46<07:59,  4.40s/it]Tuning global sampler:  46%|████▌     | 91/200 [08:51<10:36,  5.84s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.22s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.22s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.22s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.22s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.22s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.22s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.22s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.22s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]
13:06 ninjax INFO    : Saving samples to ./outdir/injection_18/results_training.npz
13:06 ninjax INFO    : Saving the NF
13:06 ninjax INFO    : Time taken: 573.4034180641174 seconds (9.556723634401957 minutes)
13:06 ninjax INFO    : Creating the final corner plot
13:06 ninjax INFO    : Dumping the final production chains
13:06 ninjax INFO    : Chains shape is: (13, 220000)
13:06 ninjax INFO    : Key: M_c: ESS = 60176, Rhat = 1.0120234871204266
13:06 ninjax INFO    : Key: q: ESS = 26529, Rhat = 1.0244965210389663
13:06 ninjax INFO    : Key: s1_z: ESS = 34523, Rhat = 1.0182480771799336
13:06 ninjax INFO    : Key: s2_z: ESS = 44092, Rhat = 1.0153796604622722
13:06 ninjax INFO    : Key: lambda_1: ESS = 35283, Rhat = 1.018061319761213
13:06 ninjax INFO    : Key: lambda_2: ESS = 90974, Rhat = 1.012814747083988
13:06 ninjax INFO    : Key: cos_iota: ESS = 41548, Rhat = 1.0168442406262101
13:06 ninjax INFO    : Key: d_L: ESS = 39273, Rhat = 1.0172967051384552
13:06 ninjax INFO    : Key: t_c: ESS = 68894, Rhat = 1.0112456813526005
13:06 ninjax INFO    : Key: phase_c: ESS = 38086, Rhat = 1.017879347541079
13:06 ninjax INFO    : Key: psi: ESS = 54206, Rhat = 1.0125702400840102
13:06 ninjax INFO    : Key: ra: ESS = 67130, Rhat = 1.0104142790915949
13:06 ninjax INFO    : Key: sin_dec: ESS = 78724, Rhat = 1.009692754042461
13:06 ninjax INFO    : Key: eta: ESS = 26529, Rhat = 1.0244965210389663
13:06 ninjax INFO    : Key: iota: ESS = 41548, Rhat = 1.0168442406262101
13:06 ninjax INFO    : Key: dec: ESS = 78724, Rhat = 1.009692754042461
13:06 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.324 +/- 0.274
q: 0.684 +/- 0.224
s1_z: 0.006 +/- 0.027
s2_z: 0.002 +/- 0.028
lambda_1: 1977.626 +/- 1472.745
lambda_2: 2134.470 +/- 1431.662
cos_iota: -0.299 +/- 0.513
d_L: 601.695 +/- 264.090
t_c: 0.022 +/- 0.031
phase_c: 2.944 +/- 1.796
psi: 1.567 +/- 0.869
ra: 4.520 +/- 1.605
sin_dec: -0.148 +/- 0.462
Log probability: 40.117 +/- 62.462
Local acceptance: 0.794 +/- 0.404
Global acceptance: 0.013 +/- 0.113
Max loss: 22.808, Min loss: 7.968
Production summary
==========
M_c: 1.239 +/- 0.000
q: 0.839 +/- 0.103
s1_z: 0.010 +/- 0.025
s2_z: 0.005 +/- 0.027
lambda_1: 473.972 +/- 443.934
lambda_2: 819.092 +/- 723.170
cos_iota: -0.821 +/- 0.136
d_L: 269.478 +/- 41.613
t_c: 0.028 +/- 0.001
phase_c: 3.140 +/- 1.805
psi: 1.565 +/- 0.913
ra: 5.417 +/- 0.005
sin_dec: -0.309 +/- 0.026
Log probability: 137.627 +/- 2.559
Local acceptance: 0.361 +/- 0.480
Global acceptance: 0.120 +/- 0.325
DONE

JOB STATISTICS
==============
Job ID: 10863582
Cluster: snellius
User/Group: twouters2/twouters2
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 00:12:04
CPU Efficiency: 5.54% of 03:37:52 core-walltime
Job Wall-clock time: 00:13:37
Memory Utilized: 4.68 GB
Memory Efficiency: 46.82% of 10.00 GB
