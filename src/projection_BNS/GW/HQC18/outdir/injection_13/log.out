Thu Mar 27 21:29:22 CET 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
21:29 ninjax INFO    : Checking and setting outdir
21:29 ninjax INFO    : The outdir is set to ./outdir/injection_13
21:29 ninjax INFO    : Loading the given config
21:29 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
21:29 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
21:29 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/HQC18/outdir/injection_13/complete_config.json
21:29 ninjax INFO    : No seed specified. Generating a random seed: 868805
21:29 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 662936
21:29 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 644331
21:29 ninjax INFO    : Loading the priors
21:29 ninjax INFO    :    Mc_prior = Uniform(1.0, 2.2, naming=["M_c"])
21:29 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
21:29 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
21:29 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
21:29 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
21:29 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
21:29 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
21:29 ninjax INFO    :    dL_prior = PowerLaw(1.0, 460.0, 2.0, naming=["d_L"])
21:29 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
21:29 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
21:29 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
21:29 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
21:29 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
21:29 ninjax INFO    : Finished prior setup
21:29 ninjax INFO    : Setting the transforms
21:29 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
21:29 ninjax INFO    : transforms_str_list has 3 elements
21:29 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
21:29 ninjax INFO    : Setting the likelihood
21:29 ninjax INFO    : GW likelihood provided, setting up the GW pipe
21:29 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz
21:29 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz for BNS injections
21:29 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
21:29 ninjax INFO    : self.is_BNS_run is True
21:29 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
21:29 ninjax INFO    : GW run is an injection
21:29 ninjax INFO    : Setting up GW injection . . . 
21:29 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
21:29 ninjax INFO    : Generating new injection
21:29 ninjax INFO    : Sanity check: generated parameters:
21:29 ninjax INFO    : {'M_c': 1.4983064152551084, 'q': 0.5644157121757261, 's1_z': 0.04767023569244393, 's2_z': 0.0043507246613178965, 'lambda_1': 4919.378303506648, 'lambda_2': 4667.233691588952, 'cos_iota': 0.4853967164620907, 'd_L': 365.3244046893482, 't_c': 0.07081513705470485, 'phase_c': 2.654997793238133, 'psi': 0.4386498189486842, 'ra': 2.069544948813019, 'sin_dec': -0.8962877619393823}
21:29 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz . . . 
21:29 ninjax INFO    : Injected lambda_1: 7.039733026387287
21:29 ninjax INFO    : Injected lambda_2: 401.85679136010873
21:29 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.4983064152551084 is 128.0
21:29 ninjax INFO    : After transforms, the injection parameters are:
21:29 ninjax INFO    : {'M_c': 1.4983064152551084, 'q': 0.5644157121757261, 's1_z': 0.04767023569244393, 's2_z': 0.0043507246613178965, 'lambda_1': 7.039733026387287, 'lambda_2': 401.85679136010873, 'cos_iota': 0.4853967164620907, 'd_L': 365.3244046893482, 't_c': 0.07081513705470485, 'phase_c': 2.654997793238133, 'psi': 0.4386498189486842, 'ra': 2.069544948813019, 'sin_dec': -0.8962877619393823, 'eta': 0.2306188259432067, 'iota': Array(1.06397946, dtype=float64, weak_type=True), 'dec': Array(-1.11132655, dtype=float64, weak_type=True)}
21:29 ninjax INFO    : The trial injection parameters are {'M_c': 1.4983064152551084, 'eta': 0.2306188259432067, 's1_z': 0.04767023569244393, 's2_z': 0.0043507246613178965, 'lambda_1': 7.039733026387287, 'lambda_2': 401.85679136010873, 'd_L': 365.3244046893482, 'phase_c': 2.654997793238133, 'iota': 1.06397945989046, 't_c': 0.07081513705470485, 'psi': 0.4386498189486842, 'ra': 2.069544948813019, 'dec': -1.1113265472789913}
21:29 ninjax INFO    : Injecting signals . . .
21:29 ninjax INFO    : self.ifos
21:29 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
21:29 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
21:29 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
21:29 ninjax INFO    : [ 2.10781732e-23-3.64073335e-23j -6.25338144e-23-2.23240181e-23j
 -2.48916563e-23-1.17569947e-22j ...
 -1.35877663e-23+3.36617160e-23j  4.12383602e-24-1.24263557e-23j
 -2.03992943e-24-1.09963849e-23j]
21:29 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
21:29 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
21:29 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
21:29 ninjax INFO    : [ 5.06529779e-23+1.61500830e-23j -1.56509856e-23+2.13881623e-23j
 -4.99100832e-23+7.29174763e-23j ...
 -1.85177714e-24-6.19015002e-24j -5.74071055e-24+5.90303854e-24j
 -3.43190394e-23-1.81356084e-23j]
21:29 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
21:29 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
21:29 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
21:29 ninjax INFO    : [ 8.55966916e-23-9.12098853e-24j  4.40012236e-23-2.49853040e-23j
  2.01637626e-23-1.42615317e-24j ...
  2.31211141e-23+2.71554681e-23j -2.86995445e-23-2.19098748e-23j
  2.25289120e-23-1.89649028e-24j]
21:29 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
21:29 ninjax INFO    : SNR for ifo H1 is 8.065510553121257
21:29 ninjax INFO    : SNR for ifo L1 is 5.8181811508859935
21:29 ninjax INFO    : SNR for ifo V1 is 5.311588116565993
21:29 ninjax INFO    : The network SNR is 11.27460246337229
21:29 ninjax INFO    : Network SNR passes threshold
21:29 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
21:29 ninjax INFO    :    M_c: 1.4983064152551084
21:29 ninjax INFO    :    q: 0.5644157121757261
21:29 ninjax INFO    :    s1_z: 0.04767023569244393
21:29 ninjax INFO    :    s2_z: 0.0043507246613178965
21:29 ninjax INFO    :    lambda_1: 7.039733026387287
21:29 ninjax INFO    :    lambda_2: 401.85679136010873
21:29 ninjax INFO    :    cos_iota: 0.4853967164620907
21:29 ninjax INFO    :    d_L: 365.3244046893482
21:29 ninjax INFO    :    t_c: 0.07081513705470485
21:29 ninjax INFO    :    phase_c: 2.654997793238133
21:29 ninjax INFO    :    psi: 0.4386498189486842
21:29 ninjax INFO    :    ra: 2.069544948813019
21:29 ninjax INFO    :    sin_dec: -0.8962877619393823
21:29 ninjax INFO    :    eta: 0.2306188259432067
21:29 ninjax INFO    :    iota: 1.06397945989046
21:29 ninjax INFO    :    dec: -1.1113265472789913
21:29 ninjax INFO    :    H1_SNR: 8.065510553121257
21:29 ninjax INFO    :    L1_SNR: 5.8181811508859935
21:29 ninjax INFO    :    V1_SNR: 5.311588116565993
21:29 ninjax INFO    :    network_SNR: 11.27460246337229
21:29 ninjax INFO    :    epoch: 126.0
21:29 ninjax INFO    :    gmst: 2.7288901910520846
21:29 ninjax INFO    :    duration: 128.0
21:29 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
21:29 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
21:29 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
21:32 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 143.96355724334717 seconds = 2.3993926207224527 minutes
21:32 ninjax INFO    : The priors are not modified after their initialization
21:32 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
21:32 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
21:32 ninjax INFO    : sample: {'M_c': Array([1.41882669, 2.06320793, 2.03045367], dtype=float64), 'q': Array([0.26832165, 0.58088408, 0.79746019], dtype=float64), 's1_z': Array([0.01809252, 0.03181583, 0.02405516], dtype=float64), 's2_z': Array([ 0.01769766,  0.03401067, -0.03436667], dtype=float64), 'lambda_1': Array([4233.43586384, 3567.38649389, 4417.05467555], dtype=float64), 'lambda_2': Array([4140.35577706,  849.99607576, 2851.79262505], dtype=float64), 'cos_iota': Array([ 0.73039394, -0.10094147, -0.05434906], dtype=float64), 'd_L': Array([423.82609222, 447.7560939 , 337.78480234], dtype=float64), 't_c': Array([-0.03454876,  0.007774  , -0.08665834], dtype=float64), 'phase_c': Array([2.08154049, 3.53692587, 4.93295052], dtype=float64), 'psi': Array([1.01948016, 1.44627851, 1.05781956], dtype=float64), 'ra': Array([0.16653603, 1.7896974 , 3.49512389], dtype=float64), 'sin_dec': Array([-0.49855317, -0.11497457,  0.66494467], dtype=float64)}
21:32 ninjax INFO    : log_prob: [-51.56756406 -35.14744841 -18.78206036]
21:32 ninjax INFO    : Checking log_prob at injection parameters: {'M_c': 1.4983064152551084, 'q': 0.5644157121757261, 's1_z': 0.04767023569244393, 's2_z': 0.0043507246613178965, 'lambda_1': 7.039733026387287, 'lambda_2': 401.85679136010873, 'cos_iota': 0.4853967164620907, 'd_L': 365.3244046893482, 't_c': 0.07081513705470485, 'phase_c': 2.654997793238133, 'psi': 0.4386498189486842, 'ra': 2.069544948813019, 'sin_dec': -0.8962877619393823, 'eta': 0.2306188259432067, 'iota': Array(1.06397946, dtype=float64, weak_type=True), 'dec': Array(-1.11132655, dtype=float64, weak_type=True), 'H1_SNR': 8.065510553121257, 'L1_SNR': 5.8181811508859935, 'V1_SNR': 5.311588116565993, 'network_SNR': 11.27460246337229, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
21:32 ninjax INFO    : log_prob at the injection parameters is: 36.09718286853827
21:32 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
21:32 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
21:32 ninjax INFO    : Ninjax setup complete.
21:32 ninjax INFO    : Saving output to ./outdir/injection_13/
21:32 ninjax INFO    : Using polynomial learning rate scheduler
21:32 ninjax INFO    : The hyperparameters passed to flowMC and jim are
21:32 ninjax INFO    :    n_loop_training: 200
21:32 ninjax INFO    :    n_loop_production: 10
21:32 ninjax INFO    :    n_local_steps: 100
21:32 ninjax INFO    :    n_global_steps: 1000
21:32 ninjax INFO    :    n_epochs: 25
21:32 ninjax INFO    :    n_chains: 1000
21:32 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x147d2de5b910>
21:32 ninjax INFO    :    max_samples: 50000
21:32 ninjax INFO    :    momentum: 0.9
21:32 ninjax INFO    :    batch_size: 30000
21:32 ninjax INFO    :    use_global: True
21:32 ninjax INFO    :    keep_quantile: 0.0
21:32 ninjax INFO    :    train_thinning: 10
21:32 ninjax INFO    :    output_thinning: 50
21:32 ninjax INFO    :    n_sample_max: 10000
21:32 ninjax INFO    :    num_layers: 10
21:32 ninjax INFO    :    hidden_size: [128, 128]
21:32 ninjax INFO    :    num_bins: 8
21:32 ninjax INFO    :    save_training_chains: False
21:32 ninjax INFO    :    eps_mass_matrix: 1e-05
21:32 ninjax INFO    :    use_scheduler: True
21:32 ninjax INFO    :    use_temperature: False
21:32 ninjax INFO    :    which_temperature_schedule: exponential
21:32 ninjax INFO    :    starting_temperature: 2.0
21:32 ninjax INFO    :    stop_tempering_iteration: 75
21:32 ninjax INFO    :    stopping_criterion_global_acc: 0.1
21:32 ninjax INFO    :    stopping_criterion_loss: -inf
21:32 ninjax INFO    :    nf_model_kwargs: {}
21:32 ninjax INFO    :    local sampler arg not shown (pretty print)
21:32 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[ 1.87132707e-23 -6.61128914e-23 -2.84474920e-23  6.39438884e-23
  2.90104740e-23  5.23901306e-23 -1.90807876e-23 -8.21277751e-23
 -1.87911661e-23 -1.32882071e-22]
[-3.93014595e-23 -2.33945984e-23 -1.16430128e-22 -5.32732365e-23
  1.94427729e-23 -5.16423447e-23 -1.20227228e-22 -3.86484376e-23
 -1.74553580e-23 -2.58648912e-23]
Checking the noise that was generated in inject_signal ifo:
[ 5.05868625e-23 -1.41964848e-23 -4.74293279e-23 -2.41503521e-24
 -1.26311647e-22  2.96882548e-23  1.30054188e-23 -5.73905017e-24
  3.74812664e-23 -7.48468977e-23]
[ 1.88453588e-23  2.36567857e-23  7.39669660e-23 -3.76248002e-23
 -2.21185742e-23  2.07237715e-23  3.72392169e-23 -7.40123882e-24
 -3.10244924e-23 -2.60312224e-23]
Checking the noise that was generated in inject_signal ifo:
[ 8.64196769e-23  4.63697619e-23  2.32652024e-23  1.16159060e-23
 -1.88921306e-23  3.18369817e-23  3.36944932e-23  5.51862470e-23
  4.00168721e-23  9.95961026e-23]
[-6.10870299e-24 -2.29525071e-23 -1.08793919e-24 -8.40317183e-23
  6.47214636e-23 -4.36007333e-23 -1.09581382e-22 -6.40666885e-23
 -8.54303796e-24 -1.79269266e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.1096196174621582 seconds
Using provided reference parameters:
ref_params for relative binning:
{'M_c': 1.4983064152551084, 'q': 0.5644157121757261, 's1_z': 0.04767023569244393, 's2_z': 0.0043507246613178965, 'lambda_1': 7.039733026387287, 'lambda_2': 401.85679136010873, 'cos_iota': 0.4853967164620907, 'd_L': 365.3244046893482, 't_c': 0.07081513705470485, 'phase_c': 2.654997793238133, 'psi': 0.4386498189486842, 'ra': 2.069544948813019, 'sin_dec': -0.8962877619393823, 'eta': 0.2306188259432067, 'iota': Array(1.06397946, dtype=float64, weak_type=True), 'dec': Array(-1.11132655, dtype=float64, weak_type=True), 'H1_SNR': 8.065510553121257, 'L1_SNR': 5.8181811508859935, 'V1_SNR': 5.311588116565993, 'network_SNR': 11.27460246337229, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5147736072540283 seconds
Time for h_sky_low and h_sky_center: 5.273576259613037 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.7036807537078857
Going to compute coefficients . . .
Time for computing coefficients: 122.03439354896545 seconds
Time for computing coefficients: 7.438272476196289 seconds
Time for computing coefficients: 7.344587087631226 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:01<6:43:53, 121.78s/it]Tuning global sampler:   1%|          | 2/200 [02:06<2:54:25, 52.86s/it] Tuning global sampler:   2%|▏         | 3/200 [02:10<1:41:12, 30.82s/it]Tuning global sampler:   2%|▏         | 4/200 [02:15<1:06:53, 20.48s/it]Tuning global sampler:   2%|▎         | 5/200 [02:21<48:58, 15.07s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:25<37:12, 11.51s/it]Tuning global sampler:   4%|▎         | 7/200 [02:30<29:40,  9.22s/it]Tuning global sampler:   4%|▍         | 8/200 [02:34<24:47,  7.75s/it]Tuning global sampler:   4%|▍         | 9/200 [02:39<21:27,  6.74s/it]Tuning global sampler:   5%|▌         | 10/200 [02:43<19:04,  6.02s/it]Tuning global sampler:   6%|▌         | 11/200 [02:48<17:34,  5.58s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:31,  5.27s/it]Tuning global sampler:   6%|▋         | 13/200 [02:57<15:45,  5.05s/it]Tuning global sampler:   7%|▋         | 14/200 [03:02<15:15,  4.92s/it]Tuning global sampler:   8%|▊         | 15/200 [03:06<14:54,  4.83s/it]Tuning global sampler:   8%|▊         | 16/200 [03:11<14:37,  4.77s/it]Tuning global sampler:   8%|▊         | 17/200 [03:15<14:25,  4.73s/it]Tuning global sampler:   9%|▉         | 18/200 [03:20<14:14,  4.70s/it]Tuning global sampler:  10%|▉         | 19/200 [03:25<14:06,  4.68s/it]Tuning global sampler:  10%|█         | 20/200 [03:29<13:58,  4.66s/it]Tuning global sampler:  10%|█         | 21/200 [03:34<13:52,  4.65s/it]Tuning global sampler:  11%|█         | 22/200 [03:39<13:44,  4.63s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:43<13:37,  4.62s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:48<13:22,  4.56s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:53<13:57,  4.79s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:57<13:31,  4.67s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:02<13:12,  4.58s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:06<12:57,  4.52s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:10<12:45,  4.48s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:15<12:36,  4.45s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:19<12:32,  4.45s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:24<12:24,  4.43s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:28<12:15,  4.40s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:32<12:10,  4.40s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:37<12:07,  4.41s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:41<12:04,  4.42s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:46<11:58,  4.41s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:50<11:53,  4.40s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:54<11:48,  4.40s/it]Tuning global sampler:  20%|██        | 40/200 [04:59<11:44,  4.40s/it]Tuning global sampler:  20%|██        | 41/200 [05:03<11:39,  4.40s/it]Tuning global sampler:  21%|██        | 42/200 [05:08<11:36,  4.41s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:12<11:32,  4.41s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:16<11:25,  4.39s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:22<12:03,  4.66s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:26<11:45,  4.58s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:30<11:32,  4.53s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:35<11:21,  4.49s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:39<11:13,  4.46s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:44<11:05,  4.44s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:48<10:58,  4.42s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:52<10:52,  4.41s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:57<10:47,  4.40s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:01<10:43,  4.41s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:06<10:36,  4.39s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:10<10:30,  4.38s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:14<10:27,  4.39s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:19<10:23,  4.39s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:23<10:18,  4.39s/it]Tuning global sampler:  30%|███       | 60/200 [06:27<10:14,  4.39s/it]Tuning global sampler:  30%|███       | 61/200 [06:32<10:09,  4.39s/it]Tuning global sampler:  31%|███       | 62/200 [06:36<10:05,  4.39s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:41<10:01,  4.39s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:46<10:35,  4.68s/it]Tuning global sampler:  32%|███▎      | 65/200 [06:50<10:19,  4.59s/it]Tuning global sampler:  33%|███▎      | 66/200 [06:55<10:04,  4.51s/it]Tuning global sampler:  34%|███▎      | 67/200 [06:59<09:53,  4.47s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:03<09:45,  4.44s/it]Tuning global sampler:  34%|███▍      | 69/200 [07:08<09:39,  4.42s/it]Tuning global sampler:  35%|███▌      | 70/200 [07:12<09:34,  4.42s/it]Tuning global sampler:  36%|███▌      | 71/200 [07:17<09:28,  4.41s/it]Tuning global sampler:  36%|███▌      | 72/200 [07:21<09:24,  4.41s/it]Tuning global sampler:  36%|███▋      | 73/200 [07:25<09:21,  4.42s/it]Tuning global sampler:  37%|███▋      | 74/200 [07:30<09:15,  4.41s/it]Tuning global sampler:  38%|███▊      | 75/200 [07:34<09:11,  4.41s/it]Tuning global sampler:  38%|███▊      | 76/200 [07:39<09:06,  4.41s/it]Tuning global sampler:  38%|███▊      | 77/200 [07:43<09:00,  4.39s/it]Tuning global sampler:  39%|███▉      | 78/200 [07:47<08:54,  4.38s/it]Tuning global sampler:  40%|███▉      | 79/200 [07:52<08:50,  4.38s/it]Tuning global sampler:  40%|████      | 80/200 [07:56<08:46,  4.39s/it]Tuning global sampler:  40%|████      | 81/200 [08:01<08:42,  4.39s/it]Tuning global sampler:  41%|████      | 82/200 [08:05<08:38,  4.39s/it]Tuning global sampler:  42%|████▏     | 83/200 [08:09<08:33,  4.39s/it]Tuning global sampler:  42%|████▏     | 84/200 [08:15<09:04,  4.69s/it]Tuning global sampler:  42%|████▎     | 85/200 [08:19<08:49,  4.60s/it]Tuning global sampler:  43%|████▎     | 86/200 [08:24<08:43,  4.59s/it]Tuning global sampler:  44%|████▎     | 87/200 [08:28<08:32,  4.53s/it]Tuning global sampler:  44%|████▍     | 88/200 [08:32<08:21,  4.48s/it]Tuning global sampler:  44%|████▍     | 89/200 [08:37<08:14,  4.46s/it]Tuning global sampler:  45%|████▌     | 90/200 [08:41<08:08,  4.44s/it]Tuning global sampler:  46%|████▌     | 91/200 [08:46<08:04,  4.44s/it]Tuning global sampler:  46%|████▌     | 92/200 [08:50<07:59,  4.44s/it]Tuning global sampler:  46%|████▋     | 93/200 [08:55<07:55,  4.45s/it]Tuning global sampler:  47%|████▋     | 94/200 [08:59<07:50,  4.43s/it]Tuning global sampler:  48%|████▊     | 95/200 [09:03<07:44,  4.43s/it]Tuning global sampler:  48%|████▊     | 95/200 [09:08<10:06,  5.77s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.22s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.22s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.22s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.22s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.22s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.22s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.22s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.22s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]
21:41 ninjax INFO    : Saving samples to ./outdir/injection_13/results_training.npz
21:42 ninjax INFO    : Saving the NF
21:42 ninjax INFO    : Time taken: 592.6149318218231 seconds (9.87691553036372 minutes)
21:42 ninjax INFO    : Creating the final corner plot
21:42 ninjax INFO    : Dumping the final production chains
21:42 ninjax INFO    : Chains shape is: (13, 220000)
21:42 ninjax INFO    : Key: M_c: ESS = 21181, Rhat = 1.0314334543209098
21:42 ninjax INFO    : Key: q: ESS = 14425, Rhat = 1.0431796004996368
21:42 ninjax INFO    : Key: s1_z: ESS = 18010, Rhat = 1.03398632960667
21:42 ninjax INFO    : Key: s2_z: ESS = 18393, Rhat = 1.0338639632226159
21:42 ninjax INFO    : Key: lambda_1: ESS = 17606, Rhat = 1.0395465281344571
21:42 ninjax INFO    : Key: lambda_2: ESS = 18203, Rhat = 1.036256653144355
21:42 ninjax INFO    : Key: cos_iota: ESS = 9382, Rhat = 1.0656310325628608
21:42 ninjax INFO    : Key: d_L: ESS = 15231, Rhat = 1.0425133361942973
21:42 ninjax INFO    : Key: t_c: ESS = 16369, Rhat = 1.0387220055507085
21:42 ninjax INFO    : Key: phase_c: ESS = 10086, Rhat = 1.0601291661266943
21:42 ninjax INFO    : Key: psi: ESS = 10368, Rhat = 1.077231633037254
21:42 ninjax INFO    : Key: ra: ESS = 13050, Rhat = 1.0463465790557713
21:42 ninjax INFO    : Key: sin_dec: ESS = 13726, Rhat = 1.044905495314666
21:42 ninjax INFO    : Key: eta: ESS = 14425, Rhat = 1.0431796004996368
21:42 ninjax INFO    : Key: iota: ESS = 9382, Rhat = 1.0656310325628608
21:42 ninjax INFO    : Key: dec: ESS = 13726, Rhat = 1.044905495314666
21:42 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.447 +/- 0.232
q: 0.646 +/- 0.241
s1_z: 0.003 +/- 0.028
s2_z: -0.001 +/- 0.028
lambda_1: 2583.088 +/- 1420.901
lambda_2: 2445.330 +/- 1422.243
cos_iota: 0.068 +/- 0.240
d_L: 394.420 +/- 52.224
t_c: 0.041 +/- 0.054
phase_c: 3.033 +/- 1.764
psi: 1.507 +/- 0.862
ra: 2.552 +/- 1.327
sin_dec: -0.445 +/- 0.566
Log probability: 0.268 +/- 24.688
Local acceptance: 0.982 +/- 0.133
Global acceptance: 0.015 +/- 0.122
Max loss: 22.722, Min loss: 8.578
Production summary
==========
M_c: 1.498 +/- 0.000
q: 0.819 +/- 0.112
s1_z: 0.008 +/- 0.026
s2_z: 0.004 +/- 0.027
lambda_1: 2514.306 +/- 1388.353
lambda_2: 2551.046 +/- 1424.366
cos_iota: 0.162 +/- 0.441
d_L: 379.124 +/- 55.201
t_c: 0.075 +/- 0.002
phase_c: 3.186 +/- 1.800
psi: 1.421 +/- 0.855
ra: 2.100 +/- 0.066
sin_dec: -0.922 +/- 0.031
Log probability: 33.305 +/- 2.114
Local acceptance: 0.955 +/- 0.207
Global acceptance: 0.101 +/- 0.302
DONE

JOB STATISTICS
==============
Job ID: 10848205
Cluster: snellius
User/Group: twouters2/twouters2
State: RUNNING
Nodes: 1
Cores per node: 16
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 03:31:28 core-walltime
Job Wall-clock time: 00:13:13
Memory Utilized: 0.00 MB (estimated maximum)
Memory Efficiency: 0.00% of 10.00 GB (10.00 GB/node)
WARNING: Efficiency statistics may be misleading for RUNNING jobs.
