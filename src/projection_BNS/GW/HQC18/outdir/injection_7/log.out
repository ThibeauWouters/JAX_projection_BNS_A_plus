Wed Mar 26 17:50:23 CET 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
17:50 ninjax INFO    : Checking and setting outdir
17:50 ninjax INFO    : The outdir is set to ./outdir/injection_7
17:50 ninjax INFO    : Loading the given config
17:50 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
17:50 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
17:50 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/HQC18/outdir/injection_7/complete_config.json
17:50 ninjax INFO    : No seed specified. Generating a random seed: 527372
17:50 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 560051
17:50 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 860644
17:50 ninjax INFO    : Loading the priors
17:50 ninjax INFO    :    Mc_prior = Uniform(1.0, 2.2, naming=["M_c"])
17:50 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
17:50 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
17:50 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
17:50 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
17:50 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
17:50 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
17:50 ninjax INFO    :    dL_prior = PowerLaw(1.0, 460.0, 2.0, naming=["d_L"])
17:50 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
17:50 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
17:50 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
17:50 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
17:50 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
17:50 ninjax INFO    : Finished prior setup
17:50 ninjax INFO    : Setting the transforms
17:50 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
17:50 ninjax INFO    : transforms_str_list has 3 elements
17:50 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
17:50 ninjax INFO    : Setting the likelihood
17:50 ninjax INFO    : GW likelihood provided, setting up the GW pipe
17:50 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz
17:50 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz for BNS injections
17:50 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
17:50 ninjax INFO    : self.is_BNS_run is True
17:50 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
17:50 ninjax INFO    : GW run is an injection
17:50 ninjax INFO    : Setting up GW injection . . . 
17:50 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
17:50 ninjax INFO    : Generating new injection
17:50 ninjax INFO    : Sanity check: generated parameters:
17:50 ninjax INFO    : {'M_c': 1.3686507954061615, 'q': 0.7776778478891044, 's1_z': 0.0254300496119636, 's2_z': 0.01776140653706719, 'lambda_1': 2791.017330716786, 'lambda_2': 4091.8223042256964, 'cos_iota': -0.9492917394891718, 'd_L': 459.18535040423143, 't_c': -0.07338375640730775, 'phase_c': 4.248275231128817, 'psi': 1.567903953718906, 'ra': 6.20822938385415, 'sin_dec': 0.5233803000334176}
17:50 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz . . . 
17:50 ninjax INFO    : Injected lambda_1: 46.466962071302326
17:50 ninjax INFO    : Injected lambda_2: 270.86628729300566
17:50 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.3686507954061615 is 256.0
17:50 ninjax INFO    : After transforms, the injection parameters are:
17:50 ninjax INFO    : {'M_c': 1.3686507954061615, 'q': 0.7776778478891044, 's1_z': 0.0254300496119636, 's2_z': 0.01776140653706719, 'lambda_1': 46.466962071302326, 'lambda_2': 270.86628729300566, 'cos_iota': -0.9492917394891718, 'd_L': 459.18535040423143, 't_c': -0.07338375640730775, 'phase_c': 4.248275231128817, 'psi': 1.567903953718906, 'ra': 6.20822938385415, 'sin_dec': 0.5233803000334176, 'eta': 0.24608979647282073, 'iota': Array(2.82177175, dtype=float64, weak_type=True), 'dec': Array(0.55081317, dtype=float64, weak_type=True)}
17:50 ninjax INFO    : The trial injection parameters are {'M_c': 1.3686507954061615, 'eta': 0.24608979647282073, 's1_z': 0.0254300496119636, 's2_z': 0.01776140653706719, 'lambda_1': 46.466962071302326, 'lambda_2': 270.86628729300566, 'd_L': 459.18535040423143, 'phase_c': 4.248275231128817, 'iota': 2.821771746465821, 't_c': -0.07338375640730775, 'psi': 1.567903953718906, 'ra': 6.20822938385415, 'dec': 0.550813166040159}
17:50 ninjax INFO    : Injecting signals . . .
17:50 ninjax INFO    : self.ifos
17:50 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
17:50 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
17:50 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
17:50 ninjax INFO    : [ 9.48931516e-24+1.21585511e-22j  6.68425483e-23+7.88902064e-23j
  1.01221667e-22-7.58938964e-24j ...
 -1.44776166e-23-2.29930436e-23j -2.34547739e-24+3.67033684e-23j
 -2.40605447e-23-4.22236597e-24j]
17:50 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
17:50 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
17:50 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
17:50 ninjax INFO    : [-3.50272990e-24-1.41000016e-22j  3.34921674e-24-5.85266442e-23j
  2.33287983e-23+8.32583773e-23j ...
  2.90652372e-24+3.13362804e-23j  1.94821173e-23+1.23962475e-23j
 -1.53988130e-23+2.90939857e-24j]
17:50 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
17:50 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
17:50 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
17:50 ninjax INFO    : [-2.26180265e-23-2.91920337e-23j  8.75996588e-23+1.21044930e-22j
  8.35685569e-23-3.09343807e-23j ...
 -1.25129952e-24+9.28333970e-24j  4.54484613e-23+5.33565053e-23j
  1.04396623e-23+2.69035806e-23j]
17:50 ninjax INFO    : [1.43183556e-46 1.43058540e-46 1.42935095e-46 ... 6.39793039e-47
 6.39795354e-47 6.39797668e-47]
17:50 ninjax INFO    : SNR for ifo H1 is 11.309693445485806
17:50 ninjax INFO    : SNR for ifo L1 is 7.179395986522171
17:50 ninjax INFO    : SNR for ifo V1 is 3.9765152745074945
17:50 ninjax INFO    : The network SNR is 13.97374560704991
17:50 ninjax INFO    : Network SNR passes threshold
17:50 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
17:50 ninjax INFO    :    M_c: 1.3686507954061615
17:50 ninjax INFO    :    q: 0.7776778478891044
17:50 ninjax INFO    :    s1_z: 0.0254300496119636
17:50 ninjax INFO    :    s2_z: 0.01776140653706719
17:50 ninjax INFO    :    lambda_1: 46.466962071302326
17:50 ninjax INFO    :    lambda_2: 270.86628729300566
17:50 ninjax INFO    :    cos_iota: -0.9492917394891718
17:50 ninjax INFO    :    d_L: 459.18535040423143
17:50 ninjax INFO    :    t_c: -0.07338375640730775
17:50 ninjax INFO    :    phase_c: 4.248275231128817
17:50 ninjax INFO    :    psi: 1.567903953718906
17:50 ninjax INFO    :    ra: 6.20822938385415
17:50 ninjax INFO    :    sin_dec: 0.5233803000334176
17:50 ninjax INFO    :    eta: 0.24608979647282073
17:50 ninjax INFO    :    iota: 2.821771746465821
17:50 ninjax INFO    :    dec: 0.550813166040159
17:50 ninjax INFO    :    H1_SNR: 11.309693445485806
17:50 ninjax INFO    :    L1_SNR: 7.179395986522171
17:50 ninjax INFO    :    V1_SNR: 3.9765152745074945
17:50 ninjax INFO    :    network_SNR: 13.97374560704991
17:50 ninjax INFO    :    epoch: 254.0
17:50 ninjax INFO    :    gmst: 2.7288901910520846
17:50 ninjax INFO    :    duration: 256.0
17:50 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
17:50 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
17:50 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
17:53 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 183.46702218055725 seconds = 3.0577837030092874 minutes
17:53 ninjax INFO    : The priors are not modified after their initialization
17:53 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
17:53 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
17:53 ninjax INFO    : sample: {'M_c': Array([1.67311134, 1.70503863, 1.50928753], dtype=float64), 'q': Array([0.36775124, 0.51286354, 0.80097139], dtype=float64), 's1_z': Array([ 0.03412071,  0.02933297, -0.0113965 ], dtype=float64), 's2_z': Array([-0.02056856, -0.0032237 ,  0.04851434], dtype=float64), 'lambda_1': Array([3493.34466941,  471.43059879, 4691.46121623], dtype=float64), 'lambda_2': Array([ 718.18845556, 3604.64648576, 4187.0738578 ], dtype=float64), 'cos_iota': Array([-0.17079268,  0.70703351, -0.284013  ], dtype=float64), 'd_L': Array([444.39932952, 420.20880007, 225.59960138], dtype=float64), 't_c': Array([ 0.09137067, -0.00477658,  0.04508698], dtype=float64), 'phase_c': Array([1.87114266, 3.92207477, 3.94451462], dtype=float64), 'psi': Array([1.50722301, 1.1802438 , 1.25951941], dtype=float64), 'ra': Array([0.99253009, 1.423513  , 3.85854256], dtype=float64), 'sin_dec': Array([-0.42137276, -0.87222392,  0.39885618], dtype=float64)}
17:53 ninjax INFO    : log_prob: [-15.5886882  -64.91924729 -56.51187076]
17:53 ninjax INFO    : Checking log_prob at injection parameters: {'M_c': 1.3686507954061615, 'q': 0.7776778478891044, 's1_z': 0.0254300496119636, 's2_z': 0.01776140653706719, 'lambda_1': 46.466962071302326, 'lambda_2': 270.86628729300566, 'cos_iota': -0.9492917394891718, 'd_L': 459.18535040423143, 't_c': -0.07338375640730775, 'phase_c': 4.248275231128817, 'psi': 1.567903953718906, 'ra': 6.20822938385415, 'sin_dec': 0.5233803000334176, 'eta': 0.24608979647282073, 'iota': Array(2.82177175, dtype=float64, weak_type=True), 'dec': Array(0.55081317, dtype=float64, weak_type=True), 'H1_SNR': 11.309693445485806, 'L1_SNR': 7.179395986522171, 'V1_SNR': 3.9765152745074945, 'network_SNR': 13.97374560704991, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
17:53 ninjax INFO    : log_prob at the injection parameters is: 68.06787026284745
17:53 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
17:53 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
17:53 ninjax INFO    : Ninjax setup complete.
17:53 ninjax INFO    : Saving output to ./outdir/injection_7/
17:53 ninjax INFO    : Using polynomial learning rate scheduler
17:53 ninjax INFO    : The hyperparameters passed to flowMC and jim are
17:53 ninjax INFO    :    n_loop_training: 200
17:53 ninjax INFO    :    n_loop_production: 10
17:53 ninjax INFO    :    n_local_steps: 100
17:53 ninjax INFO    :    n_global_steps: 1000
17:53 ninjax INFO    :    n_epochs: 25
17:53 ninjax INFO    :    n_chains: 1000
17:53 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x1480f4746440>
17:53 ninjax INFO    :    max_samples: 50000
17:53 ninjax INFO    :    momentum: 0.9
17:53 ninjax INFO    :    batch_size: 30000
17:53 ninjax INFO    :    use_global: True
17:53 ninjax INFO    :    keep_quantile: 0.0
17:53 ninjax INFO    :    train_thinning: 10
17:53 ninjax INFO    :    output_thinning: 50
17:53 ninjax INFO    :    n_sample_max: 10000
17:53 ninjax INFO    :    num_layers: 10
17:53 ninjax INFO    :    hidden_size: [128, 128]
17:53 ninjax INFO    :    num_bins: 8
17:53 ninjax INFO    :    save_training_chains: False
17:53 ninjax INFO    :    eps_mass_matrix: 1e-05
17:53 ninjax INFO    :    use_scheduler: True
17:53 ninjax INFO    :    use_temperature: False
17:53 ninjax INFO    :    which_temperature_schedule: exponential
17:53 ninjax INFO    :    starting_temperature: 2.0
17:53 ninjax INFO    :    stop_tempering_iteration: 75
17:53 ninjax INFO    :    stopping_criterion_global_acc: 0.1
17:53 ninjax INFO    :    stopping_criterion_loss: -inf
17:53 ninjax INFO    :    nf_model_kwargs: {}
17:53 ninjax INFO    :    local sampler arg not shown (pretty print)
17:53 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[ 7.08491431e-24  6.99635523e-23  9.74724589e-23 -5.73523229e-23
  1.34219084e-24 -5.39219040e-23 -2.92124491e-23  4.71200084e-23
 -3.62771639e-23  5.28181395e-24]
[ 1.26222132e-22  7.47037707e-23 -3.95650298e-24  8.62581209e-23
  6.79180211e-23  7.72454175e-24  2.31215868e-23 -4.93411304e-23
  4.94145377e-23  4.58145096e-23]
Checking the noise that was generated in inject_signal ifo:
[-3.82597425e-24  3.13582732e-24  2.40675270e-23  1.18677710e-22
 -5.37207937e-24  4.33654008e-23  3.62182121e-23  5.81602675e-24
  8.30814993e-25 -4.30990629e-23]
[-1.44299763e-22 -5.52187373e-23  8.00277376e-23  2.31420442e-22
 -4.06375841e-23 -3.95445235e-23 -7.53812273e-23  7.10140950e-23
  6.75036140e-23  5.58668722e-23]
Checking the noise that was generated in inject_signal ifo:
[-2.14062367e-23  8.67244709e-23  8.40883167e-23 -5.46858839e-23
 -1.75475389e-22 -1.01167837e-22 -7.41120459e-25  3.51729886e-23
  9.65988458e-23 -9.35098598e-23]
[-2.72002826e-23  1.18884591e-22 -2.86627335e-23 -5.76060908e-23
  1.28379195e-22  5.46478016e-23  3.54298989e-23  1.34230042e-22
 -8.39428132e-24 -5.87076844e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.18240952491760254 seconds
Using provided reference parameters:
ref_params for relative binning:
{'M_c': 1.3686507954061615, 'q': 0.7776778478891044, 's1_z': 0.0254300496119636, 's2_z': 0.01776140653706719, 'lambda_1': 46.466962071302326, 'lambda_2': 270.86628729300566, 'cos_iota': -0.9492917394891718, 'd_L': 459.18535040423143, 't_c': -0.07338375640730775, 'phase_c': 4.248275231128817, 'psi': 1.567903953718906, 'ra': 6.20822938385415, 'sin_dec': 0.5233803000334176, 'eta': 0.24608979647282073, 'iota': Array(2.82177175, dtype=float64, weak_type=True), 'dec': Array(0.55081317, dtype=float64, weak_type=True), 'H1_SNR': 11.309693445485806, 'L1_SNR': 7.179395986522171, 'V1_SNR': 3.9765152745074945, 'network_SNR': 13.97374560704991, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5123214721679688 seconds
Time for h_sky_low and h_sky_center: 5.507946491241455 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.6987218856811523
Going to compute coefficients . . .
Time for computing coefficients: 161.43182396888733 seconds
Time for computing coefficients: 7.31927227973938 seconds
Time for computing coefficients: 7.287553787231445 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:01<6:42:11, 121.26s/it]Tuning global sampler:   1%|          | 2/200 [02:06<2:55:28, 53.17s/it] Tuning global sampler:   2%|▏         | 3/200 [02:11<1:41:47, 31.00s/it]Tuning global sampler:   2%|▏         | 4/200 [02:16<1:07:14, 20.59s/it]Tuning global sampler:   2%|▎         | 5/200 [02:20<48:10, 14.82s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:25<36:41, 11.35s/it]Tuning global sampler:   4%|▎         | 7/200 [02:29<29:20,  9.12s/it]Tuning global sampler:   4%|▍         | 8/200 [02:34<24:34,  7.68s/it]Tuning global sampler:   4%|▍         | 9/200 [02:38<21:18,  6.69s/it]Tuning global sampler:   5%|▌         | 10/200 [02:43<18:58,  5.99s/it]Tuning global sampler:   6%|▌         | 11/200 [02:47<17:30,  5.56s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:29,  5.26s/it]Tuning global sampler:   6%|▋         | 13/200 [02:57<15:43,  5.05s/it]Tuning global sampler:   7%|▋         | 14/200 [03:01<15:15,  4.92s/it]Tuning global sampler:   8%|▊         | 15/200 [03:06<14:54,  4.84s/it]Tuning global sampler:   8%|▊         | 16/200 [03:10<14:38,  4.77s/it]Tuning global sampler:   8%|▊         | 17/200 [03:15<14:25,  4.73s/it]Tuning global sampler:   9%|▉         | 18/200 [03:20<14:14,  4.70s/it]Tuning global sampler:  10%|▉         | 19/200 [03:24<14:06,  4.68s/it]Tuning global sampler:  10%|█         | 20/200 [03:29<13:58,  4.66s/it]Tuning global sampler:  10%|█         | 21/200 [03:34<14:44,  4.94s/it]Tuning global sampler:  11%|█         | 22/200 [03:39<14:20,  4.84s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:44<14:03,  4.76s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:48<13:40,  4.66s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:52<13:21,  4.58s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:57<13:07,  4.53s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:01<12:55,  4.49s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:06<12:45,  4.45s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:10<12:37,  4.43s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:14<12:31,  4.42s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:19<12:25,  4.41s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:23<12:19,  4.40s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:28<12:12,  4.38s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:32<12:06,  4.37s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:36<12:02,  4.38s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:41<11:58,  4.38s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:45<11:54,  4.38s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:49<11:50,  4.39s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:54<11:46,  4.39s/it]Tuning global sampler:  20%|██        | 40/200 [04:58<11:42,  4.39s/it]Tuning global sampler:  20%|██        | 41/200 [05:03<11:39,  4.40s/it]Tuning global sampler:  21%|██        | 42/200 [05:08<12:21,  4.69s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:12<12:02,  4.60s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:17<11:46,  4.53s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:21<11:34,  4.48s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:26<11:25,  4.45s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:30<11:19,  4.44s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:34<11:12,  4.42s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:39<11:06,  4.41s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:43<11:01,  4.41s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:48<10:55,  4.40s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:52<10:51,  4.40s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:56<10:46,  4.40s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:01<10:41,  4.39s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:05<10:34,  4.38s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:09<10:29,  4.37s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:14<10:26,  4.38s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:18<10:22,  4.39s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:23<10:18,  4.39s/it]Tuning global sampler:  30%|███       | 60/200 [06:27<10:15,  4.39s/it]Tuning global sampler:  30%|███       | 61/200 [06:31<10:10,  4.39s/it]Tuning global sampler:  31%|███       | 62/200 [06:36<10:06,  4.40s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:41<10:44,  4.71s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:46<10:29,  4.63s/it]Tuning global sampler:  32%|███▎      | 65/200 [06:50<10:14,  4.55s/it]Tuning global sampler:  33%|███▎      | 66/200 [06:54<10:02,  4.49s/it]Tuning global sampler:  34%|███▎      | 67/200 [06:59<09:51,  4.45s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:03<09:45,  4.43s/it]Tuning global sampler:  34%|███▍      | 69/200 [07:08<09:39,  4.42s/it]Tuning global sampler:  35%|███▌      | 70/200 [07:12<09:34,  4.42s/it]Tuning global sampler:  36%|███▌      | 71/200 [07:16<09:28,  4.41s/it]Tuning global sampler:  36%|███▌      | 72/200 [07:21<09:23,  4.40s/it]Tuning global sampler:  36%|███▋      | 73/200 [07:25<09:18,  4.40s/it]Tuning global sampler:  37%|███▋      | 74/200 [07:29<09:14,  4.40s/it]Tuning global sampler:  38%|███▊      | 75/200 [07:34<09:10,  4.41s/it]Tuning global sampler:  38%|███▊      | 76/200 [07:38<09:06,  4.41s/it]Tuning global sampler:  38%|███▊      | 77/200 [07:43<09:00,  4.39s/it]Tuning global sampler:  39%|███▉      | 78/200 [07:47<08:54,  4.38s/it]Tuning global sampler:  40%|███▉      | 79/200 [07:51<08:49,  4.38s/it]Tuning global sampler:  40%|████      | 80/200 [07:56<08:45,  4.38s/it]Tuning global sampler:  40%|████      | 81/200 [08:00<08:41,  4.38s/it]Tuning global sampler:  41%|████      | 82/200 [08:05<08:37,  4.39s/it]Tuning global sampler:  42%|████▏     | 83/200 [08:09<08:33,  4.39s/it]Tuning global sampler:  42%|████▏     | 84/200 [08:13<08:29,  4.39s/it]Tuning global sampler:  42%|████▏     | 84/200 [08:19<11:29,  5.94s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.22s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.22s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.22s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.22s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.21s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.21s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.21s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.22s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]
18:02 ninjax INFO    : Saving samples to ./outdir/injection_7/results_training.npz
18:02 ninjax INFO    : Saving the NF
18:02 ninjax INFO    : Time taken: 537.8037641048431 seconds (8.963396068414053 minutes)
18:02 ninjax INFO    : Creating the final corner plot
18:02 ninjax INFO    : Dumping the final production chains
18:02 ninjax INFO    : Chains shape is: (13, 220000)
18:02 ninjax INFO    : Key: M_c: ESS = 50694, Rhat = 1.0141272365761806
18:02 ninjax INFO    : Key: q: ESS = 28384, Rhat = 1.0224022510667707
18:02 ninjax INFO    : Key: s1_z: ESS = 42947, Rhat = 1.0161838985031246
18:02 ninjax INFO    : Key: s2_z: ESS = 44205, Rhat = 1.0160335021238922
18:02 ninjax INFO    : Key: lambda_1: ESS = 44912, Rhat = 1.015256829576188
18:02 ninjax INFO    : Key: lambda_2: ESS = 52772, Rhat = 1.0139627359536738
18:02 ninjax INFO    : Key: cos_iota: ESS = 32117, Rhat = 1.0203990320898184
18:02 ninjax INFO    : Key: d_L: ESS = 23041, Rhat = 1.0275084402365486
18:02 ninjax INFO    : Key: t_c: ESS = 49812, Rhat = 1.0133398946153303
18:02 ninjax INFO    : Key: phase_c: ESS = 41046, Rhat = 1.0162185912071073
18:02 ninjax INFO    : Key: psi: ESS = 51893, Rhat = 1.0150654250955649
18:02 ninjax INFO    : Key: ra: ESS = 44673, Rhat = 1.0152885417540933
18:02 ninjax INFO    : Key: sin_dec: ESS = 50807, Rhat = 1.014605582879244
18:02 ninjax INFO    : Key: eta: ESS = 28384, Rhat = 1.0224022510667707
18:02 ninjax INFO    : Key: iota: ESS = 32117, Rhat = 1.0203990320898184
18:02 ninjax INFO    : Key: dec: ESS = 50807, Rhat = 1.014605582879244
18:02 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.380 +/- 0.196
q: 0.720 +/- 0.233
s1_z: 0.007 +/- 0.027
s2_z: 0.003 +/- 0.027
lambda_1: 2043.150 +/- 1485.361
lambda_2: 2195.431 +/- 1475.605
cos_iota: -0.139 +/- 0.354
d_L: 382.456 +/- 59.267
t_c: -0.050 +/- 0.049
phase_c: 3.192 +/- 1.775
psi: 1.595 +/- 0.846
ra: 4.914 +/- 1.799
sin_dec: 0.408 +/- 0.474
Log probability: 16.731 +/- 38.097
Local acceptance: 0.932 +/- 0.251
Global acceptance: 0.013 +/- 0.113
Max loss: 22.802, Min loss: 7.343
Production summary
==========
M_c: 1.369 +/- 0.000
q: 0.857 +/- 0.094
s1_z: 0.018 +/- 0.022
s2_z: 0.013 +/- 0.024
lambda_1: 677.535 +/- 726.200
lambda_2: 1040.017 +/- 995.701
cos_iota: -0.698 +/- 0.154
d_L: 378.559 +/- 60.980
t_c: -0.072 +/- 0.001
phase_c: 3.156 +/- 1.810
psi: 1.574 +/- 0.907
ra: 6.245 +/- 0.028
sin_dec: 0.555 +/- 0.027
Log probability: 65.708 +/- 2.548
Local acceptance: 0.806 +/- 0.396
Global acceptance: 0.113 +/- 0.317
DONE

JOB STATISTICS
==============
Job ID: 10815233
Cluster: snellius
User/Group: twouters2/twouters2
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 00:11:31
CPU Efficiency: 5.58% of 03:26:24 core-walltime
Job Wall-clock time: 00:12:54
Memory Utilized: 4.86 GB
Memory Efficiency: 48.64% of 10.00 GB
