Fri Mar 28 10:45:41 CET 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
10:45 ninjax INFO    : Checking and setting outdir
10:45 ninjax INFO    : Found generation prior file ./outdir/injection_7/generation_prior.prior
10:45 ninjax INFO    : The outdir is set to ./outdir/injection_7
10:45 ninjax INFO    : Loading the given config
10:45 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
10:45 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
10:45 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/HQC18/outdir/injection_7/complete_config.json
10:45 ninjax INFO    : No seed specified. Generating a random seed: 568885
10:45 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 698713
10:45 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 204083
10:45 ninjax INFO    : Loading the priors
10:45 ninjax INFO    : Setting up the prior
10:45 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
10:45 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
10:45 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
10:45 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
10:45 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
10:45 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
10:45 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
10:45 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
10:45 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
10:45 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
10:45 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
10:45 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
10:45 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
10:45 ninjax INFO    : Setting up the generation prior
10:45 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.0452447532113593, naming=["mass_1_source"])
10:45 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.0452447532113593, naming=["mass_2_source"])
10:45 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
10:45 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
10:45 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
10:45 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
10:45 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
10:45 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
10:45 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
10:45 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
10:45 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
10:45 ninjax INFO    : Finished prior setup
10:45 ninjax INFO    : Setting the transforms
10:45 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
10:45 ninjax INFO    : transforms_str_list has 3 elements
10:45 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
10:45 ninjax INFO    : Setting the likelihood
10:45 ninjax INFO    : GW likelihood provided, setting up the GW pipe
10:45 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz
10:45 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz for BNS injections
10:45 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
10:45 ninjax INFO    : self.is_BNS_run is True
10:45 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
10:45 ninjax INFO    : GW run is an injection
10:45 ninjax INFO    : Setting up GW injection . . . 
10:45 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
10:45 ninjax INFO    : Generating new injection
10:45 ninjax INFO    : Sanity check: generated parameters:
10:45 ninjax INFO    : {'mass_1_source': 1.8229418041611756, 'mass_2_source': 1.9740902764780341, 's1_z': -0.024745600848592675, 's2_z': -0.047232210146274725, 'cos_iota': 0.5737605355927293, 'd_L': 389.23110061324707, 't_c': 0.036894357446193904, 'phase_c': 4.812110160134934, 'psi': 1.0750216687502854, 'ra': 5.074696647749717, 'sin_dec': -0.33423589264161224}
10:45 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz . . . 
10:45 ninjax INFO    : Injected lambda_1: 17.046764994067733
10:45 ninjax INFO    : Injected lambda_2: 39.04204216764651
10:45 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.7964025491522915 is 128.0
10:45 ninjax INFO    : After transforms, the injection parameters are:
10:45 ninjax INFO    : {'mass_1_source': 1.9740902764780341, 'mass_2_source': 1.8229418041611756, 's1_z': -0.024745600848592675, 's2_z': -0.047232210146274725, 'cos_iota': 0.5737605355927293, 'd_L': 389.23110061324707, 't_c': 0.036894357446193904, 'phase_c': 4.812110160134934, 'psi': 1.0750216687502854, 'ra': 5.074696647749717, 'sin_dec': -0.33423589264161224, 'q': 0.9234338600833788, 'M_c': 1.7964025491522915, 'eta': 0.2496038506023976, 'iota': Array(0.95970633, dtype=float64, weak_type=True), 'dec': Array(-0.34079438, dtype=float64, weak_type=True), 'lambda_1': 17.046764994067733, 'lambda_2': 39.04204216764651}
10:45 ninjax INFO    : The trial injection parameters are {'M_c': 1.7964025491522915, 'eta': 0.2496038506023976, 's1_z': -0.024745600848592675, 's2_z': -0.047232210146274725, 'lambda_1': 17.046764994067733, 'lambda_2': 39.04204216764651, 'd_L': 389.23110061324707, 'phase_c': 4.812110160134934, 'iota': 0.9597063272325048, 't_c': 0.036894357446193904, 'psi': 1.0750216687502854, 'ra': 5.074696647749717, 'dec': -0.3407943803714978}
10:45 ninjax INFO    : Injecting signals . . .
10:45 ninjax INFO    : self.ifos
10:45 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
10:45 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
10:45 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
10:45 ninjax INFO    : [-5.91054444e-23-4.18502573e-23j -2.32226362e-23+2.70915604e-23j
  4.30644913e-23-8.14953568e-23j ...
  2.31028702e-24-2.03993242e-23j -1.45799301e-23+3.54915039e-24j
  5.15049143e-23-2.18466900e-23j]
10:45 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
10:45 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
10:45 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
10:45 ninjax INFO    : [-6.68368687e-25+2.62772163e-23j -3.00487701e-23-2.98331436e-23j
  2.34293374e-23+3.41985165e-23j ...
  2.44089320e-23-2.15600646e-23j -1.61104860e-23-3.22633805e-23j
 -9.86728847e-25+2.22320655e-23j]
10:45 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
10:45 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
10:45 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
10:45 ninjax INFO    : [ 2.63729105e-23-1.86449124e-24j -3.85149275e-23+1.48865349e-23j
 -6.96602342e-23+7.91290689e-23j ...
  2.13551615e-23+5.22347365e-24j  9.28865910e-24-8.73418495e-23j
 -3.56977300e-23+2.13314413e-23j]
10:45 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
10:45 ninjax INFO    : SNR for ifo H1 is 6.146192210141104
10:45 ninjax INFO    : SNR for ifo L1 is 9.81058034964015
10:45 ninjax INFO    : SNR for ifo V1 is 6.08003357098239
10:45 ninjax INFO    : The network SNR is 13.07631346003213
10:45 ninjax INFO    : Network SNR passes threshold
10:45 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
10:45 ninjax INFO    :    mass_1_source: 1.9740902764780341
10:45 ninjax INFO    :    mass_2_source: 1.8229418041611756
10:45 ninjax INFO    :    s1_z: -0.024745600848592675
10:45 ninjax INFO    :    s2_z: -0.047232210146274725
10:45 ninjax INFO    :    cos_iota: 0.5737605355927293
10:45 ninjax INFO    :    d_L: 389.23110061324707
10:45 ninjax INFO    :    t_c: 0.036894357446193904
10:45 ninjax INFO    :    phase_c: 4.812110160134934
10:45 ninjax INFO    :    psi: 1.0750216687502854
10:45 ninjax INFO    :    ra: 5.074696647749717
10:45 ninjax INFO    :    sin_dec: -0.33423589264161224
10:45 ninjax INFO    :    q: 0.9234338600833788
10:45 ninjax INFO    :    M_c: 1.7964025491522915
10:45 ninjax INFO    :    eta: 0.2496038506023976
10:45 ninjax INFO    :    iota: 0.9597063272325048
10:45 ninjax INFO    :    dec: -0.3407943803714978
10:45 ninjax INFO    :    lambda_1: 17.046764994067733
10:45 ninjax INFO    :    lambda_2: 39.04204216764651
10:45 ninjax INFO    :    H1_SNR: 6.146192210141104
10:45 ninjax INFO    :    L1_SNR: 9.81058034964015
10:45 ninjax INFO    :    V1_SNR: 6.08003357098239
10:45 ninjax INFO    :    network_SNR: 13.07631346003213
10:45 ninjax INFO    :    epoch: 126.0
10:45 ninjax INFO    :    gmst: 2.7288901910520846
10:45 ninjax INFO    :    duration: 128.0
10:45 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
10:45 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
10:45 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
10:48 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 151.39332151412964 seconds = 2.5232220252354938 minutes
10:48 ninjax INFO    : The priors are not modified after their initialization
10:48 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
10:48 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
10:48 ninjax INFO    : sample: {'M_c': Array([2.31312716, 2.05156904, 2.46227769], dtype=float64), 'q': Array([0.66178439, 0.31743105, 0.58940419], dtype=float64), 's1_z': Array([-0.04309401, -0.03959873,  0.04042904], dtype=float64), 's2_z': Array([-0.02323157,  0.04572517,  0.01327365], dtype=float64), 'lambda_1': Array([1113.53177788, 1209.82489225, 4886.37747062], dtype=float64), 'lambda_2': Array([2025.48632231,  978.61146105, 1751.48285795], dtype=float64), 'cos_iota': Array([0.87330525, 0.60168054, 0.82966982], dtype=float64), 'd_L': Array([938.99925451, 191.38340318, 707.34655009], dtype=float64), 't_c': Array([-0.05870256, -0.05557772, -0.08510121], dtype=float64), 'phase_c': Array([3.27180084, 5.85107966, 2.2660496 ], dtype=float64), 'psi': Array([0.83426207, 0.80474548, 0.26923162], dtype=float64), 'ra': Array([4.18684611, 4.05963337, 2.89507701], dtype=float64), 'sin_dec': Array([0.77030326, 0.78917211, 0.2077174 ], dtype=float64)}
10:48 ninjax INFO    : log_prob: [ -30.61412896 -252.43540823  -62.5362652 ]
10:48 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.9740902764780341, 'mass_2_source': 1.8229418041611756, 's1_z': -0.024745600848592675, 's2_z': -0.047232210146274725, 'cos_iota': 0.5737605355927293, 'd_L': 389.23110061324707, 't_c': 0.036894357446193904, 'phase_c': 4.812110160134934, 'psi': 1.0750216687502854, 'ra': 5.074696647749717, 'sin_dec': -0.33423589264161224, 'q': 0.9234338600833788, 'M_c': 1.7964025491522915, 'eta': 0.2496038506023976, 'iota': Array(0.95970633, dtype=float64, weak_type=True), 'dec': Array(-0.34079438, dtype=float64, weak_type=True), 'lambda_1': 17.046764994067733, 'lambda_2': 39.04204216764651, 'H1_SNR': 6.146192210141104, 'L1_SNR': 9.81058034964015, 'V1_SNR': 6.08003357098239, 'network_SNR': 13.07631346003213, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
10:48 ninjax INFO    : log_prob at the injection parameters is: 45.49909168089961
10:48 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
10:48 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
10:48 ninjax INFO    : Ninjax setup complete.
10:48 ninjax INFO    : Saving output to ./outdir/injection_7/
10:48 ninjax INFO    : Using polynomial learning rate scheduler
10:48 ninjax INFO    : The hyperparameters passed to flowMC and jim are
10:48 ninjax INFO    :    n_loop_training: 200
10:48 ninjax INFO    :    n_loop_production: 10
10:48 ninjax INFO    :    n_local_steps: 100
10:48 ninjax INFO    :    n_global_steps: 1000
10:48 ninjax INFO    :    n_epochs: 25
10:48 ninjax INFO    :    n_chains: 1000
10:48 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x14f1acebbbe0>
10:48 ninjax INFO    :    max_samples: 50000
10:48 ninjax INFO    :    momentum: 0.9
10:48 ninjax INFO    :    batch_size: 30000
10:48 ninjax INFO    :    use_global: True
10:48 ninjax INFO    :    keep_quantile: 0.0
10:48 ninjax INFO    :    train_thinning: 10
10:48 ninjax INFO    :    output_thinning: 50
10:48 ninjax INFO    :    n_sample_max: 10000
10:48 ninjax INFO    :    num_layers: 10
10:48 ninjax INFO    :    hidden_size: [128, 128]
10:48 ninjax INFO    :    num_bins: 8
10:48 ninjax INFO    :    save_training_chains: False
10:48 ninjax INFO    :    eps_mass_matrix: 1e-05
10:48 ninjax INFO    :    use_scheduler: True
10:48 ninjax INFO    :    use_temperature: False
10:48 ninjax INFO    :    which_temperature_schedule: exponential
10:48 ninjax INFO    :    starting_temperature: 2.0
10:48 ninjax INFO    :    stop_tempering_iteration: 75
10:48 ninjax INFO    :    stopping_criterion_global_acc: 0.1
10:48 ninjax INFO    :    stopping_criterion_loss: -inf
10:48 ninjax INFO    :    nf_model_kwargs: {}
10:48 ninjax INFO    :    local sampler arg not shown (pretty print)
10:48 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[-5.63717296e-23 -2.37509838e-23  4.08296588e-23  4.67302240e-23
 -3.57794707e-23  1.60818515e-23  1.10435206e-23  1.05576603e-23
  6.32012927e-23  4.92487248e-23]
[-4.10195099e-23  2.42850134e-23 -7.97194319e-23  1.70949959e-23
  7.99887322e-23  2.49221171e-23  2.78059215e-24 -2.19834398e-23
 -3.35942149e-23 -4.88159317e-25]
Checking the noise that was generated in inject_signal ifo:
[-3.46232459e-24 -2.55622402e-23  2.20489947e-23 -4.59547077e-23
 -4.11410265e-23 -1.09590516e-22 -7.20859040e-23  3.49773522e-23
  3.59338369e-23 -2.86610086e-24]
[ 2.98817866e-23 -2.90262322e-23  2.98562043e-23 -1.06202483e-22
  3.50503756e-23  3.37700312e-23  5.86992461e-23  2.85057919e-23
 -8.98956515e-23 -4.51169001e-23]
Checking the noise that was generated in inject_signal ifo:
[ 2.76312991e-23 -4.20701524e-23 -6.76147043e-23 -4.07206713e-23
  1.86797670e-23 -1.49001065e-23  4.48319697e-24  9.70288734e-24
 -4.46298508e-23  9.08828988e-24]
[-5.22000279e-24  1.53242632e-23  8.20676542e-23  2.95365060e-23
 -1.26289734e-23  4.25839979e-23 -3.20335831e-23 -1.09860426e-22
 -1.17947599e-22  5.34603760e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.11146759986877441 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.9740902764780341, 'mass_2_source': 1.8229418041611756, 's1_z': -0.024745600848592675, 's2_z': -0.047232210146274725, 'cos_iota': 0.5737605355927293, 'd_L': 389.23110061324707, 't_c': 0.036894357446193904, 'phase_c': 4.812110160134934, 'psi': 1.0750216687502854, 'ra': 5.074696647749717, 'sin_dec': -0.33423589264161224, 'q': 0.9234338600833788, 'M_c': 1.7964025491522915, 'eta': 0.2496038506023976, 'iota': Array(0.95970633, dtype=float64, weak_type=True), 'dec': Array(-0.34079438, dtype=float64, weak_type=True), 'lambda_1': 17.046764994067733, 'lambda_2': 39.04204216764651, 'H1_SNR': 6.146192210141104, 'L1_SNR': 9.81058034964015, 'V1_SNR': 6.08003357098239, 'network_SNR': 13.07631346003213, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5150501728057861 seconds
Time for h_sky_low and h_sky_center: 5.430895566940308 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.7015917301177979
Going to compute coefficients . . .
Time for computing coefficients: 129.40103125572205 seconds
Time for computing coefficients: 7.341682434082031 seconds
Time for computing coefficients: 7.332592725753784 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:02<6:45:03, 122.13s/it]Tuning global sampler:   1%|          | 2/200 [02:06<2:54:54, 53.00s/it] Tuning global sampler:   2%|▏         | 3/200 [02:11<1:41:29, 30.91s/it]Tuning global sampler:   2%|▏         | 4/200 [02:15<1:07:04, 20.53s/it]Tuning global sampler:   2%|▎         | 5/200 [02:21<49:07, 15.11s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:26<37:20, 11.55s/it]Tuning global sampler:   4%|▎         | 7/200 [02:30<29:50,  9.28s/it]Tuning global sampler:   4%|▍         | 8/200 [02:35<24:57,  7.80s/it]Tuning global sampler:   4%|▍         | 9/200 [02:39<21:35,  6.78s/it]Tuning global sampler:   5%|▌         | 10/200 [02:44<19:11,  6.06s/it]Tuning global sampler:   6%|▌         | 11/200 [02:48<17:42,  5.62s/it]Tuning global sampler:   6%|▌         | 12/200 [02:53<16:38,  5.31s/it]Tuning global sampler:   6%|▋         | 13/200 [02:58<15:51,  5.09s/it]Tuning global sampler:   7%|▋         | 14/200 [03:02<15:21,  4.96s/it]Tuning global sampler:   8%|▊         | 15/200 [03:07<14:59,  4.86s/it]Tuning global sampler:   8%|▊         | 16/200 [03:12<14:42,  4.80s/it]Tuning global sampler:   8%|▊         | 17/200 [03:16<14:29,  4.75s/it]Tuning global sampler:   9%|▉         | 18/200 [03:21<14:18,  4.72s/it]Tuning global sampler:  10%|▉         | 19/200 [03:26<14:09,  4.69s/it]Tuning global sampler:  10%|█         | 20/200 [03:30<14:02,  4.68s/it]Tuning global sampler:  10%|█         | 21/200 [03:35<13:56,  4.67s/it]Tuning global sampler:  11%|█         | 22/200 [03:39<13:47,  4.65s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:44<13:41,  4.64s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:48<13:25,  4.58s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:54<14:00,  4.80s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:58<13:34,  4.68s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:03<13:15,  4.60s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:07<13:00,  4.54s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:11<12:48,  4.50s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:16<12:40,  4.47s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:20<12:31,  4.45s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:25<12:24,  4.43s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:29<12:16,  4.41s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:33<12:09,  4.39s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:38<12:04,  4.39s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:42<12:00,  4.39s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:46<11:55,  4.39s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:51<11:51,  4.39s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:55<11:46,  4.39s/it]Tuning global sampler:  20%|██        | 40/200 [05:00<11:42,  4.39s/it]Tuning global sampler:  20%|██        | 41/200 [05:04<11:38,  4.39s/it]Tuning global sampler:  21%|██        | 42/200 [05:08<11:34,  4.39s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:13<11:30,  4.40s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:18<12:08,  4.67s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:22<11:49,  4.58s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:27<11:36,  4.52s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:31<11:25,  4.48s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:36<11:17,  4.45s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:40<11:10,  4.44s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:44<11:03,  4.42s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:49<10:57,  4.42s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:53<10:52,  4.41s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:58<10:47,  4.40s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:02<10:43,  4.41s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:06<10:36,  4.39s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:11<10:30,  4.38s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:15<10:27,  4.39s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:20<10:30,  4.44s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:24<10:24,  4.43s/it]Tuning global sampler:  30%|███       | 60/200 [06:29<10:19,  4.42s/it]Tuning global sampler:  30%|███       | 61/200 [06:33<10:13,  4.41s/it]Tuning global sampler:  31%|███       | 62/200 [06:37<10:08,  4.41s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:42<10:04,  4.41s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:47<10:37,  4.69s/it]Tuning global sampler:  32%|███▎      | 65/200 [06:51<10:21,  4.60s/it]Tuning global sampler:  33%|███▎      | 66/200 [06:56<10:06,  4.53s/it]Tuning global sampler:  34%|███▎      | 67/200 [07:00<09:56,  4.48s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:05<09:48,  4.46s/it]Tuning global sampler:  34%|███▍      | 69/200 [07:09<09:41,  4.44s/it]Tuning global sampler:  35%|███▌      | 70/200 [07:13<09:35,  4.43s/it]Tuning global sampler:  36%|███▌      | 71/200 [07:18<09:30,  4.43s/it]Tuning global sampler:  36%|███▌      | 72/200 [07:22<09:25,  4.42s/it]Tuning global sampler:  36%|███▋      | 73/200 [07:27<09:20,  4.41s/it]Tuning global sampler:  37%|███▋      | 74/200 [07:31<09:16,  4.42s/it]Tuning global sampler:  38%|███▊      | 75/200 [07:35<09:12,  4.42s/it]Tuning global sampler:  38%|███▊      | 76/200 [07:40<09:07,  4.41s/it]Tuning global sampler:  38%|███▊      | 77/200 [07:44<09:01,  4.40s/it]Tuning global sampler:  39%|███▉      | 78/200 [07:49<08:55,  4.39s/it]Tuning global sampler:  40%|███▉      | 79/200 [07:53<08:51,  4.39s/it]Tuning global sampler:  40%|████      | 80/200 [07:57<08:48,  4.40s/it]Tuning global sampler:  40%|████      | 81/200 [08:02<08:44,  4.40s/it]Tuning global sampler:  41%|████      | 82/200 [08:06<08:39,  4.41s/it]Tuning global sampler:  42%|████▏     | 83/200 [08:11<08:35,  4.40s/it]Tuning global sampler:  42%|████▏     | 84/200 [08:16<09:05,  4.70s/it]Tuning global sampler:  42%|████▎     | 85/200 [08:20<08:50,  4.61s/it]Tuning global sampler:  43%|████▎     | 86/200 [08:25<08:38,  4.55s/it]Tuning global sampler:  44%|████▎     | 87/200 [08:29<08:29,  4.51s/it]Tuning global sampler:  44%|████▍     | 88/200 [08:34<08:20,  4.47s/it]Tuning global sampler:  44%|████▍     | 89/200 [08:38<08:12,  4.44s/it]Tuning global sampler:  45%|████▌     | 90/200 [08:42<08:07,  4.43s/it]Tuning global sampler:  46%|████▌     | 91/200 [08:47<08:01,  4.42s/it]Tuning global sampler:  46%|████▌     | 92/200 [08:51<07:57,  4.42s/it]Tuning global sampler:  46%|████▋     | 93/200 [08:56<07:53,  4.43s/it]Tuning global sampler:  47%|████▋     | 94/200 [09:00<07:49,  4.43s/it]Tuning global sampler:  48%|████▊     | 95/200 [09:05<07:44,  4.43s/it]Tuning global sampler:  48%|████▊     | 96/200 [09:09<07:41,  4.44s/it]Tuning global sampler:  48%|████▊     | 97/200 [09:13<07:37,  4.44s/it]Tuning global sampler:  49%|████▉     | 98/200 [09:18<07:32,  4.43s/it]Tuning global sampler:  50%|████▉     | 99/200 [09:22<07:25,  4.41s/it]Tuning global sampler:  50%|█████     | 100/200 [09:27<07:19,  4.40s/it]Tuning global sampler:  50%|█████     | 100/200 [09:31<09:31,  5.72s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.22s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.22s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.22s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.22s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.22s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.22s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.22s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.22s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]
10:58 ninjax INFO    : Saving samples to ./outdir/injection_7/results_training.npz
10:58 ninjax INFO    : Saving the NF
10:58 ninjax INFO    : Time taken: 617.0287549495697 seconds (10.283812582492828 minutes)
10:58 ninjax INFO    : Creating the final corner plot
10:58 ninjax INFO    : Dumping the final production chains
10:58 ninjax INFO    : Chains shape is: (13, 220000)
10:59 ninjax INFO    : Key: M_c: ESS = 47812, Rhat = 1.01356947652942
10:59 ninjax INFO    : Key: q: ESS = 42627, Rhat = 1.0165064455964083
10:59 ninjax INFO    : Key: s1_z: ESS = 42209, Rhat = 1.015473920016568
10:59 ninjax INFO    : Key: s2_z: ESS = 53346, Rhat = 1.014335661128447
10:59 ninjax INFO    : Key: lambda_1: ESS = 38228, Rhat = 1.0170970483004411
10:59 ninjax INFO    : Key: lambda_2: ESS = 41442, Rhat = 1.015740660180601
10:59 ninjax INFO    : Key: cos_iota: ESS = 45454, Rhat = 1.0152238128661863
10:59 ninjax INFO    : Key: d_L: ESS = 55975, Rhat = 1.0150924324948376
10:59 ninjax INFO    : Key: t_c: ESS = 39153, Rhat = 1.0169874240006758
10:59 ninjax INFO    : Key: phase_c: ESS = 30020, Rhat = 1.0212168324387483
10:59 ninjax INFO    : Key: psi: ESS = 42827, Rhat = 1.0159096677156363
10:59 ninjax INFO    : Key: ra: ESS = 58187, Rhat = 1.0123020989260574
10:59 ninjax INFO    : Key: sin_dec: ESS = 80716, Rhat = 1.011958563013779
10:59 ninjax INFO    : Key: eta: ESS = 42627, Rhat = 1.0165064455964083
10:59 ninjax INFO    : Key: iota: ESS = 45454, Rhat = 1.0152238128661863
10:59 ninjax INFO    : Key: dec: ESS = 80716, Rhat = 1.0119703213822286
10:59 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.687 +/- 0.317
q: 0.668 +/- 0.232
s1_z: 0.001 +/- 0.028
s2_z: -0.001 +/- 0.028
lambda_1: 2207.140 +/- 1420.569
lambda_2: 2441.380 +/- 1419.949
cos_iota: 0.218 +/- 0.455
d_L: 742.567 +/- 170.810
t_c: 0.027 +/- 0.043
phase_c: 3.228 +/- 1.791
psi: 1.519 +/- 0.908
ra: 4.228 +/- 1.474
sin_dec: 0.001 +/- 0.473
Log probability: 2.516 +/- 25.182
Local acceptance: 0.994 +/- 0.080
Global acceptance: 0.029 +/- 0.167
Max loss: 22.823, Min loss: 7.982
Production summary
==========
M_c: 1.797 +/- 0.000
q: 0.806 +/- 0.118
s1_z: -0.001 +/- 0.027
s2_z: -0.002 +/- 0.028
lambda_1: 1160.485 +/- 956.011
lambda_2: 1860.889 +/- 1348.667
cos_iota: 0.773 +/- 0.187
d_L: 609.015 +/- 129.998
t_c: 0.041 +/- 0.002
phase_c: 3.135 +/- 1.809
psi: 1.626 +/- 0.906
ra: 5.079 +/- 0.015
sin_dec: -0.347 +/- 0.030
Log probability: 40.800 +/- 2.294
Local acceptance: 0.986 +/- 0.116
Global acceptance: 0.113 +/- 0.316
DONE

JOB STATISTICS
==============
Job ID: 10858906
Cluster: snellius
User/Group: twouters2/twouters2
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 00:11:57
CPU Efficiency: 5.42% of 03:40:32 core-walltime
Job Wall-clock time: 00:13:47
Memory Utilized: 4.48 GB
Memory Efficiency: 44.77% of 10.00 GB
