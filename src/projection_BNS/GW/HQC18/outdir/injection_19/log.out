Thu Mar 27 21:29:21 CET 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
21:29 ninjax INFO    : Checking and setting outdir
21:29 ninjax INFO    : The outdir is set to ./outdir/injection_19
21:29 ninjax INFO    : Loading the given config
21:29 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
21:29 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
21:29 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/HQC18/outdir/injection_19/complete_config.json
21:29 ninjax INFO    : No seed specified. Generating a random seed: 163580
21:29 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 490278
21:29 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 371924
21:29 ninjax INFO    : Loading the priors
21:29 ninjax INFO    :    Mc_prior = Uniform(1.0, 2.2, naming=["M_c"])
21:29 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
21:29 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
21:29 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
21:29 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
21:29 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
21:29 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
21:29 ninjax INFO    :    dL_prior = PowerLaw(1.0, 460.0, 2.0, naming=["d_L"])
21:29 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
21:29 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
21:29 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
21:29 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
21:29 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
21:29 ninjax INFO    : Finished prior setup
21:29 ninjax INFO    : Setting the transforms
21:29 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
21:29 ninjax INFO    : transforms_str_list has 3 elements
21:29 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
21:29 ninjax INFO    : Setting the likelihood
21:29 ninjax INFO    : GW likelihood provided, setting up the GW pipe
21:29 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz
21:29 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz for BNS injections
21:29 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
21:29 ninjax INFO    : self.is_BNS_run is True
21:29 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
21:29 ninjax INFO    : GW run is an injection
21:29 ninjax INFO    : Setting up GW injection . . . 
21:29 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
21:29 ninjax INFO    : Generating new injection
21:29 ninjax INFO    : Sanity check: generated parameters:
21:29 ninjax INFO    : {'M_c': 1.9514753427601632, 'q': 0.4654417538209198, 's1_z': 0.035873675499391286, 's2_z': -0.004265376327159245, 'lambda_1': 1472.43520825882, 'lambda_2': 356.4360481103568, 'cos_iota': -0.8414446272314304, 'd_L': 187.89418104303687, 't_c': -0.054122421869365715, 'phase_c': 4.797388780026382, 'psi': 0.848818832327029, 'ra': 2.705875347479255, 'sin_dec': -0.38328816411164235}
21:29 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz . . . 
21:29 ninjax INFO    : Injected lambda_1: 7.039733026387287
21:29 ninjax INFO    : Injected lambda_2: 131.03607728930066
21:29 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.9514753427601632 is 128.0
21:29 ninjax INFO    : After transforms, the injection parameters are:
21:29 ninjax INFO    : {'M_c': 1.9514753427601632, 'q': 0.4654417538209198, 's1_z': 0.035873675499391286, 's2_z': -0.004265376327159245, 'lambda_1': 7.039733026387287, 'lambda_2': 131.03607728930066, 'cos_iota': -0.8414446272314304, 'd_L': 187.89418104303687, 't_c': -0.054122421869365715, 'phase_c': 4.797388780026382, 'psi': 0.848818832327029, 'ra': 2.705875347479255, 'sin_dec': -0.38328816411164235, 'eta': 0.2167345844758317, 'iota': Array(2.57074755, dtype=float64, weak_type=True), 'dec': Array(-0.39335373, dtype=float64, weak_type=True)}
21:29 ninjax INFO    : The trial injection parameters are {'M_c': 1.9514753427601632, 'eta': 0.2167345844758317, 's1_z': 0.035873675499391286, 's2_z': -0.004265376327159245, 'lambda_1': 7.039733026387287, 'lambda_2': 131.03607728930066, 'd_L': 187.89418104303687, 'phase_c': 4.797388780026382, 'iota': 2.570747545631079, 't_c': -0.054122421869365715, 'psi': 0.848818832327029, 'ra': 2.705875347479255, 'dec': -0.39335372742911395}
21:29 ninjax INFO    : Injecting signals . . .
21:29 ninjax INFO    : self.ifos
21:29 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
21:29 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
21:29 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
21:29 ninjax INFO    : [ 1.00640288e-22+6.93398819e-23j  9.23845196e-23+2.31990783e-23j
 -7.57292266e-23-4.53113157e-23j ...
 -1.06656338e-23-1.29053180e-23j -3.61481597e-24+3.11842756e-23j
 -5.72215069e-24-2.59410453e-24j]
21:29 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
21:29 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
21:29 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
21:29 ninjax INFO    : [ 3.97597115e-24+1.62216370e-23j  8.33435144e-23-5.65955826e-23j
  6.03795033e-23+5.31698594e-25j ...
  1.11114326e-23-7.71662608e-24j -9.75479446e-24-2.68725347e-23j
  3.03708629e-23+1.41264119e-23j]
21:29 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
21:29 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
21:29 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
21:29 ninjax INFO    : [ 3.65923388e-23+9.01998029e-23j  1.18379842e-23+6.39921256e-23j
  4.01226759e-23+4.35556487e-23j ...
  1.28667905e-23+4.58689532e-23j  5.32087488e-23+1.74277563e-23j
 -2.98455664e-23-2.94385293e-25j]
21:29 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
21:29 ninjax INFO    : SNR for ifo H1 is 23.43500808937418
21:29 ninjax INFO    : SNR for ifo L1 is 8.88912470952635
21:29 ninjax INFO    : SNR for ifo V1 is 17.501610951150607
21:29 ninjax INFO    : The network SNR is 30.56996120599403
21:29 ninjax INFO    : Network SNR passes threshold
21:29 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
21:29 ninjax INFO    :    M_c: 1.9514753427601632
21:29 ninjax INFO    :    q: 0.4654417538209198
21:29 ninjax INFO    :    s1_z: 0.035873675499391286
21:29 ninjax INFO    :    s2_z: -0.004265376327159245
21:29 ninjax INFO    :    lambda_1: 7.039733026387287
21:29 ninjax INFO    :    lambda_2: 131.03607728930066
21:29 ninjax INFO    :    cos_iota: -0.8414446272314304
21:29 ninjax INFO    :    d_L: 187.89418104303687
21:29 ninjax INFO    :    t_c: -0.054122421869365715
21:29 ninjax INFO    :    phase_c: 4.797388780026382
21:29 ninjax INFO    :    psi: 0.848818832327029
21:29 ninjax INFO    :    ra: 2.705875347479255
21:29 ninjax INFO    :    sin_dec: -0.38328816411164235
21:29 ninjax INFO    :    eta: 0.2167345844758317
21:29 ninjax INFO    :    iota: 2.570747545631079
21:29 ninjax INFO    :    dec: -0.39335372742911395
21:29 ninjax INFO    :    H1_SNR: 23.43500808937418
21:29 ninjax INFO    :    L1_SNR: 8.88912470952635
21:29 ninjax INFO    :    V1_SNR: 17.501610951150607
21:29 ninjax INFO    :    network_SNR: 30.56996120599403
21:29 ninjax INFO    :    epoch: 126.0
21:29 ninjax INFO    :    gmst: 2.7288901910520846
21:29 ninjax INFO    :    duration: 128.0
21:29 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
21:29 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
21:29 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
21:31 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 143.5312569141388 seconds = 2.3921876152356467 minutes
21:31 ninjax INFO    : The priors are not modified after their initialization
21:31 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
21:31 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
21:31 ninjax INFO    : sample: {'M_c': Array([1.69368061, 1.09341112, 1.57104456], dtype=float64), 'q': Array([0.17602559, 0.75273396, 0.22642848], dtype=float64), 's1_z': Array([-0.0223812 , -0.00262065,  0.01473019], dtype=float64), 's2_z': Array([0.03591443, 0.01954323, 0.00748363], dtype=float64), 'lambda_1': Array([4055.77861744, 2571.08928563, 4366.18011402], dtype=float64), 'lambda_2': Array([3546.1416948 , 2873.35807064, 1863.37234155], dtype=float64), 'cos_iota': Array([-0.84703288, -0.52590151,  0.75269619], dtype=float64), 'd_L': Array([336.59804066, 323.38031574, 292.43594922], dtype=float64), 't_c': Array([ 0.05526534,  0.0787604 , -0.06143552], dtype=float64), 'phase_c': Array([4.58142265, 5.5381741 , 4.9544205 ], dtype=float64), 'psi': Array([2.74680385, 1.4580008 , 1.70700211], dtype=float64), 'ra': Array([3.63378565, 5.70571764, 1.64523004], dtype=float64), 'sin_dec': Array([ 0.41923843,  0.76110809, -0.51461481], dtype=float64)}
21:32 ninjax INFO    : log_prob: [-109.98234759  -63.96482213  -76.28119415]
21:32 ninjax INFO    : Checking log_prob at injection parameters: {'M_c': 1.9514753427601632, 'q': 0.4654417538209198, 's1_z': 0.035873675499391286, 's2_z': -0.004265376327159245, 'lambda_1': 7.039733026387287, 'lambda_2': 131.03607728930066, 'cos_iota': -0.8414446272314304, 'd_L': 187.89418104303687, 't_c': -0.054122421869365715, 'phase_c': 4.797388780026382, 'psi': 0.848818832327029, 'ra': 2.705875347479255, 'sin_dec': -0.38328816411164235, 'eta': 0.2167345844758317, 'iota': Array(2.57074755, dtype=float64, weak_type=True), 'dec': Array(-0.39335373, dtype=float64, weak_type=True), 'H1_SNR': 23.43500808937418, 'L1_SNR': 8.88912470952635, 'V1_SNR': 17.501610951150607, 'network_SNR': 30.56996120599403, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
21:32 ninjax INFO    : log_prob at the injection parameters is: 424.9407230242291
21:32 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
21:32 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
21:32 ninjax INFO    : Ninjax setup complete.
21:32 ninjax INFO    : Saving output to ./outdir/injection_19/
21:32 ninjax INFO    : Using polynomial learning rate scheduler
21:32 ninjax INFO    : The hyperparameters passed to flowMC and jim are
21:32 ninjax INFO    :    n_loop_training: 200
21:32 ninjax INFO    :    n_loop_production: 10
21:32 ninjax INFO    :    n_local_steps: 100
21:32 ninjax INFO    :    n_global_steps: 1000
21:32 ninjax INFO    :    n_epochs: 25
21:32 ninjax INFO    :    n_chains: 1000
21:32 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x14a934e3b910>
21:32 ninjax INFO    :    max_samples: 50000
21:32 ninjax INFO    :    momentum: 0.9
21:32 ninjax INFO    :    batch_size: 30000
21:32 ninjax INFO    :    use_global: True
21:32 ninjax INFO    :    keep_quantile: 0.0
21:32 ninjax INFO    :    train_thinning: 10
21:32 ninjax INFO    :    output_thinning: 50
21:32 ninjax INFO    :    n_sample_max: 10000
21:32 ninjax INFO    :    num_layers: 10
21:32 ninjax INFO    :    hidden_size: [128, 128]
21:32 ninjax INFO    :    num_bins: 8
21:32 ninjax INFO    :    save_training_chains: False
21:32 ninjax INFO    :    eps_mass_matrix: 1e-05
21:32 ninjax INFO    :    use_scheduler: True
21:32 ninjax INFO    :    use_temperature: False
21:32 ninjax INFO    :    which_temperature_schedule: exponential
21:32 ninjax INFO    :    starting_temperature: 2.0
21:32 ninjax INFO    :    stop_tempering_iteration: 75
21:32 ninjax INFO    :    stopping_criterion_global_acc: 0.1
21:32 ninjax INFO    :    stopping_criterion_loss: -inf
21:32 ninjax INFO    :    nf_model_kwargs: {}
21:32 ninjax INFO    :    local sampler arg not shown (pretty print)
21:32 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[ 8.96813316e-23  1.01688468e-22 -8.05637434e-23  7.22642984e-23
 -8.81925636e-23 -3.90656398e-23 -1.24647711e-23  5.25024732e-23
 -3.07221525e-23 -5.06916099e-23]
[ 6.93965360e-23  2.89807975e-23 -5.51352216e-23  3.04273449e-23
 -9.28684097e-23 -5.74310349e-24 -2.09352480e-23 -4.20742906e-23
 -7.80686797e-24 -7.68427258e-23]
Checking the noise that was generated in inject_signal ifo:
[ 7.71443386e-24  8.11482267e-23  6.03745173e-23  1.33627484e-23
  1.84161684e-23  1.29663755e-24 -1.23858868e-22  3.96489369e-23
  6.18261529e-23  1.67656340e-23]
[ 1.80392340e-23 -6.01232758e-23  4.68477564e-24 -5.29600755e-23
  4.93889759e-23  9.36474943e-24  9.66333942e-23  5.92580165e-23
 -2.90427827e-24 -3.41743380e-23]
Checking the noise that was generated in inject_signal ifo:
[ 2.78443114e-23  1.62742521e-23  4.13207183e-23  3.36793457e-23
  9.10214996e-23  3.20230622e-23  2.25795365e-23  4.92280201e-23
 -4.99322920e-23  1.78763426e-23]
[ 8.46408349e-23  7.33543404e-23  3.32698433e-23  8.90424121e-24
  5.62281520e-24  5.51843905e-23 -4.12859319e-23 -4.15777460e-23
 -2.01413756e-25 -3.57022926e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.11019182205200195 seconds
Using provided reference parameters:
ref_params for relative binning:
{'M_c': 1.9514753427601632, 'q': 0.4654417538209198, 's1_z': 0.035873675499391286, 's2_z': -0.004265376327159245, 'lambda_1': 7.039733026387287, 'lambda_2': 131.03607728930066, 'cos_iota': -0.8414446272314304, 'd_L': 187.89418104303687, 't_c': -0.054122421869365715, 'phase_c': 4.797388780026382, 'psi': 0.848818832327029, 'ra': 2.705875347479255, 'sin_dec': -0.38328816411164235, 'eta': 0.2167345844758317, 'iota': Array(2.57074755, dtype=float64, weak_type=True), 'dec': Array(-0.39335373, dtype=float64, weak_type=True), 'H1_SNR': 23.43500808937418, 'L1_SNR': 8.88912470952635, 'V1_SNR': 17.501610951150607, 'network_SNR': 30.56996120599403, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5160694122314453 seconds
Time for h_sky_low and h_sky_center: 5.249931573867798 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.6783058643341064
Going to compute coefficients . . .
Time for computing coefficients: 121.99608397483826 seconds
Time for computing coefficients: 7.107317924499512 seconds
Time for computing coefficients: 7.336361885070801 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:01<6:42:32, 121.37s/it]Tuning global sampler:   1%|          | 2/200 [02:05<2:53:47, 52.66s/it] Tuning global sampler:   2%|▏         | 3/200 [02:10<1:40:51, 30.72s/it]Tuning global sampler:   2%|▏         | 4/200 [02:15<1:06:39, 20.41s/it]Tuning global sampler:   2%|▎         | 5/200 [02:20<48:48, 15.02s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:25<37:06, 11.48s/it]Tuning global sampler:   4%|▎         | 7/200 [02:29<29:36,  9.21s/it]Tuning global sampler:   4%|▍         | 8/200 [02:34<24:45,  7.74s/it]Tuning global sampler:   4%|▍         | 9/200 [02:38<21:27,  6.74s/it]Tuning global sampler:   5%|▌         | 10/200 [02:43<19:04,  6.02s/it]Tuning global sampler:   6%|▌         | 11/200 [02:47<17:34,  5.58s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:32,  5.28s/it]Tuning global sampler:   6%|▋         | 13/200 [02:57<15:45,  5.05s/it]Tuning global sampler:   7%|▋         | 14/200 [03:01<15:16,  4.93s/it]Tuning global sampler:   8%|▊         | 15/200 [03:06<14:55,  4.84s/it]Tuning global sampler:   8%|▊         | 16/200 [03:10<14:38,  4.77s/it]Tuning global sampler:   8%|▊         | 17/200 [03:15<14:26,  4.73s/it]Tuning global sampler:   9%|▉         | 18/200 [03:20<14:15,  4.70s/it]Tuning global sampler:  10%|▉         | 19/200 [03:24<14:07,  4.68s/it]Tuning global sampler:  10%|█         | 20/200 [03:29<13:59,  4.66s/it]Tuning global sampler:  10%|█         | 21/200 [03:34<13:53,  4.66s/it]Tuning global sampler:  11%|█         | 22/200 [03:39<14:35,  4.92s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:44<14:13,  4.82s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:48<13:47,  4.70s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:52<13:25,  4.60s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:57<13:10,  4.54s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:01<12:57,  4.49s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:06<12:47,  4.46s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:10<12:39,  4.44s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:14<12:32,  4.43s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:19<12:26,  4.42s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:23<12:20,  4.41s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:28<12:12,  4.39s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:32<12:06,  4.37s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:36<12:01,  4.38s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:41<11:57,  4.38s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:45<11:53,  4.38s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:49<11:48,  4.37s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:54<11:44,  4.37s/it]Tuning global sampler:  20%|██        | 40/200 [04:58<11:39,  4.37s/it]Tuning global sampler:  20%|██        | 41/200 [05:03<12:18,  4.65s/it]Tuning global sampler:  21%|██        | 42/200 [05:08<12:01,  4.57s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:12<11:48,  4.51s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:17<11:36,  4.47s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:21<11:26,  4.43s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:25<11:19,  4.41s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:30<11:13,  4.40s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:34<11:07,  4.39s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:38<11:03,  4.39s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:43<10:58,  4.39s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:47<10:53,  4.38s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:52<10:48,  4.38s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:56<10:43,  4.38s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:00<10:39,  4.38s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:05<10:33,  4.37s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:09<10:27,  4.36s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:13<10:24,  4.37s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:18<10:21,  4.37s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:22<10:16,  4.37s/it]Tuning global sampler:  30%|███       | 60/200 [06:27<10:12,  4.38s/it]Tuning global sampler:  30%|███       | 61/200 [06:31<10:08,  4.38s/it]Tuning global sampler:  31%|███       | 62/200 [06:36<10:43,  4.66s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:41<10:27,  4.58s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:45<10:14,  4.52s/it]Tuning global sampler:  32%|███▎      | 65/200 [06:49<10:04,  4.48s/it]Tuning global sampler:  33%|███▎      | 66/200 [06:54<09:54,  4.44s/it]Tuning global sampler:  34%|███▎      | 67/200 [06:58<09:46,  4.41s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:02<09:40,  4.39s/it]Tuning global sampler:  34%|███▍      | 69/200 [07:07<09:35,  4.39s/it]Tuning global sampler:  35%|███▌      | 70/200 [07:11<09:30,  4.39s/it]Tuning global sampler:  36%|███▌      | 71/200 [07:16<09:26,  4.39s/it]Tuning global sampler:  36%|███▌      | 72/200 [07:20<09:21,  4.39s/it]Tuning global sampler:  36%|███▋      | 73/200 [07:24<09:17,  4.39s/it]Tuning global sampler:  37%|███▋      | 74/200 [07:29<09:12,  4.38s/it]Tuning global sampler:  38%|███▊      | 75/200 [07:33<09:08,  4.39s/it]Tuning global sampler:  38%|███▊      | 75/200 [07:37<12:43,  6.11s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.22s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.22s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.22s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.22s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.22s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.22s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.22s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.22s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]
21:40 ninjax INFO    : Saving samples to ./outdir/injection_19/results_training.npz
21:40 ninjax INFO    : Saving the NF
21:40 ninjax INFO    : Time taken: 501.2514660358429 seconds (8.354191100597381 minutes)
21:40 ninjax INFO    : Creating the final corner plot
21:40 ninjax INFO    : Dumping the final production chains
21:40 ninjax INFO    : Chains shape is: (13, 220000)
21:40 ninjax INFO    : Key: M_c: ESS = 52931, Rhat = 1.0125870970334863
21:40 ninjax INFO    : Key: q: ESS = 87834, Rhat = 1.0087686003525647
21:40 ninjax INFO    : Key: s1_z: ESS = 62662, Rhat = 1.0114067103818414
21:40 ninjax INFO    : Key: s2_z: ESS = 59569, Rhat = 1.0125226341391438
21:40 ninjax INFO    : Key: lambda_1: ESS = 81167, Rhat = 1.0096261809185119
21:40 ninjax INFO    : Key: lambda_2: ESS = 82986, Rhat = 1.009765730773271
21:40 ninjax INFO    : Key: cos_iota: ESS = 25336, Rhat = 1.025375300953618
21:40 ninjax INFO    : Key: d_L: ESS = 24315, Rhat = 1.0268146253474733
21:40 ninjax INFO    : Key: t_c: ESS = 21316, Rhat = 1.0287939037839007
21:40 ninjax INFO    : Key: phase_c: ESS = 79850, Rhat = 1.0104870665834427
21:40 ninjax INFO    : Key: psi: ESS = 104203, Rhat = 1.007867329891494
21:40 ninjax INFO    : Key: ra: ESS = 20281, Rhat = 1.030146932010341
21:40 ninjax INFO    : Key: sin_dec: ESS = 18849, Rhat = 1.032163893824252
21:40 ninjax INFO    : Key: eta: ESS = 87834, Rhat = 1.0087686003525647
21:40 ninjax INFO    : Key: iota: ESS = 25336, Rhat = 1.0244856796320496
21:40 ninjax INFO    : Key: dec: ESS = 18849, Rhat = 1.032163893824252
21:40 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.941 +/- 0.086
q: 0.644 +/- 0.152
s1_z: -0.009 +/- 0.027
s2_z: -0.012 +/- 0.028
lambda_1: 1249.593 +/- 1432.152
lambda_2: 1945.752 +/- 1629.583
cos_iota: -0.574 +/- 0.444
d_L: 270.296 +/- 96.705
t_c: -0.049 +/- 0.013
phase_c: 2.785 +/- 1.704
psi: 2.058 +/- 0.894
ra: 2.757 +/- 0.597
sin_dec: -0.401 +/- 0.265
Log probability: 290.671 +/- 154.611
Local acceptance: 0.929 +/- 0.257
Global acceptance: 0.013 +/- 0.111
Max loss: 22.793, Min loss: 4.335
Production summary
==========
M_c: 1.951 +/- 0.000
q: 0.550 +/- 0.055
s1_z: -0.008 +/- 0.028
s2_z: -0.006 +/- 0.028
lambda_1: 32.487 +/- 30.400
lambda_2: 207.170 +/- 175.068
cos_iota: -0.821 +/- 0.135
d_L: 190.295 +/- 27.956
t_c: -0.054 +/- 0.001
phase_c: 3.136 +/- 1.804
psi: 1.621 +/- 0.917
ra: 2.701 +/- 0.018
sin_dec: -0.373 +/- 0.030
Log probability: 421.729 +/- 2.365
Local acceptance: 0.872 +/- 0.334
Global acceptance: 0.136 +/- 0.343
DONE

JOB STATISTICS
==============
Job ID: 10848211
Cluster: snellius
User/Group: twouters2/twouters2
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 00:10:20
CPU Efficiency: 5.53% of 03:06:56 core-walltime
Job Wall-clock time: 00:11:41
Memory Utilized: 4.44 GB
Memory Efficiency: 44.40% of 10.00 GB
