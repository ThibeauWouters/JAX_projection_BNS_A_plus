Thu Mar 27 21:29:30 CET 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
21:29 ninjax INFO    : Checking and setting outdir
21:29 ninjax INFO    : The outdir is set to ./outdir/injection_27
21:29 ninjax INFO    : Loading the given config
21:29 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
21:29 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
21:29 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/HQC18/outdir/injection_27/complete_config.json
21:29 ninjax INFO    : No seed specified. Generating a random seed: 83172
21:29 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 99820
21:29 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 560539
21:29 ninjax INFO    : Loading the priors
21:29 ninjax INFO    :    Mc_prior = Uniform(1.0, 2.2, naming=["M_c"])
21:29 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
21:29 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
21:29 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
21:29 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
21:29 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
21:29 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
21:29 ninjax INFO    :    dL_prior = PowerLaw(1.0, 460.0, 2.0, naming=["d_L"])
21:29 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
21:29 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
21:29 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
21:29 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
21:29 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
21:29 ninjax INFO    : Finished prior setup
21:29 ninjax INFO    : Setting the transforms
21:29 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
21:29 ninjax INFO    : transforms_str_list has 3 elements
21:29 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
21:29 ninjax INFO    : Setting the likelihood
21:29 ninjax INFO    : GW likelihood provided, setting up the GW pipe
21:29 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz
21:29 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz for BNS injections
21:29 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
21:29 ninjax INFO    : self.is_BNS_run is True
21:29 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
21:29 ninjax INFO    : GW run is an injection
21:29 ninjax INFO    : Setting up GW injection . . . 
21:29 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
21:29 ninjax INFO    : Generating new injection
21:29 ninjax INFO    : Sanity check: generated parameters:
21:29 ninjax INFO    : {'M_c': 1.1026240681244464, 'q': 0.3637856264869203, 's1_z': 0.018444265757060305, 's2_z': -0.0018320372907524723, 'lambda_1': 1876.8709581468167, 'lambda_2': 798.4275704594202, 'cos_iota': -0.8608172896461106, 'd_L': 257.6028441570722, 't_c': -0.07958441343202885, 'phase_c': 5.0471791968248345, 'psi': 0.07421390729166943, 'ra': 5.89902315527038, 'sin_dec': 0.028976833308625327}
21:29 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz . . . 
21:29 ninjax INFO    : Injected lambda_1: 7.039733026387287
21:29 ninjax INFO    : Injected lambda_2: 7282.588640497937
21:29 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.1026240681244464 is 256.0
21:29 ninjax INFO    : After transforms, the injection parameters are:
21:29 ninjax INFO    : {'M_c': 1.1026240681244464, 'q': 0.3637856264869203, 's1_z': 0.018444265757060305, 's2_z': -0.0018320372907524723, 'lambda_1': 7.039733026387287, 'lambda_2': 7282.588640497937, 'cos_iota': -0.8608172896461106, 'd_L': 257.6028441570722, 't_c': -0.07958441343202885, 'phase_c': 5.0471791968248345, 'psi': 0.07421390729166943, 'ra': 5.89902315527038, 'sin_dec': 0.028976833308625327, 'eta': 0.19559300446104905, 'iota': Array(2.60766977, dtype=float64, weak_type=True), 'dec': Array(0.02898089, dtype=float64, weak_type=True)}
21:29 ninjax INFO    : The trial injection parameters are {'M_c': 1.1026240681244464, 'eta': 0.19559300446104905, 's1_z': 0.018444265757060305, 's2_z': -0.0018320372907524723, 'lambda_1': 7.039733026387287, 'lambda_2': 7282.588640497937, 'd_L': 257.6028441570722, 'phase_c': 5.0471791968248345, 'iota': 2.6076697726732494, 't_c': -0.07958441343202885, 'psi': 0.07421390729166943, 'ra': 5.89902315527038, 'dec': 0.028980889941112652}
21:29 ninjax INFO    : Injecting signals . . .
21:29 ninjax INFO    : self.ifos
21:29 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
21:29 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
21:29 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
21:29 ninjax INFO    : [-1.19036608e-23-8.02110419e-23j  1.02690170e-22+1.42943981e-22j
 -7.15809331e-23+6.75323394e-24j ...
  4.70863223e-23+1.01365479e-23j -1.03422651e-23-2.46084295e-23j
 -5.66852325e-24+3.82295743e-24j]
21:29 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
21:29 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
21:29 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
21:29 ninjax INFO    : [-4.14197557e-23+1.86682696e-23j -4.63872322e-23-7.56767619e-24j
  1.10655432e-23-6.67675656e-23j ...
 -2.40458404e-23-4.59883757e-24j -9.24266597e-24-9.46090198e-24j
  2.29889646e-23+1.41080508e-25j]
21:29 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
21:29 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
21:29 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
21:29 ninjax INFO    : [-7.86036408e-23+1.21494254e-22j -7.83485617e-23+5.81443363e-23j
 -8.72917715e-23-7.71082267e-23j ...
  1.89466498e-23+2.64657517e-23j -4.77521680e-23-4.05930503e-23j
 -1.73635551e-23+2.77496371e-23j]
21:29 ninjax INFO    : [1.43183556e-46 1.43058540e-46 1.42935095e-46 ... 6.39793039e-47
 6.39795354e-47 6.39797668e-47]
21:29 ninjax INFO    : SNR for ifo H1 is 9.900190185137555
21:29 ninjax INFO    : SNR for ifo L1 is 7.496666748997555
21:29 ninjax INFO    : SNR for ifo V1 is 10.775608607802853
21:29 ninjax INFO    : The network SNR is 16.441639787927922
21:29 ninjax INFO    : Network SNR passes threshold
21:29 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
21:29 ninjax INFO    :    M_c: 1.1026240681244464
21:29 ninjax INFO    :    q: 0.3637856264869203
21:29 ninjax INFO    :    s1_z: 0.018444265757060305
21:29 ninjax INFO    :    s2_z: -0.0018320372907524723
21:29 ninjax INFO    :    lambda_1: 7.039733026387287
21:29 ninjax INFO    :    lambda_2: 7282.588640497937
21:29 ninjax INFO    :    cos_iota: -0.8608172896461106
21:29 ninjax INFO    :    d_L: 257.6028441570722
21:29 ninjax INFO    :    t_c: -0.07958441343202885
21:29 ninjax INFO    :    phase_c: 5.0471791968248345
21:29 ninjax INFO    :    psi: 0.07421390729166943
21:29 ninjax INFO    :    ra: 5.89902315527038
21:29 ninjax INFO    :    sin_dec: 0.028976833308625327
21:29 ninjax INFO    :    eta: 0.19559300446104905
21:29 ninjax INFO    :    iota: 2.6076697726732494
21:29 ninjax INFO    :    dec: 0.028980889941112652
21:29 ninjax INFO    :    H1_SNR: 9.900190185137555
21:29 ninjax INFO    :    L1_SNR: 7.496666748997555
21:29 ninjax INFO    :    V1_SNR: 10.775608607802853
21:29 ninjax INFO    :    network_SNR: 16.441639787927922
21:29 ninjax INFO    :    epoch: 254.0
21:29 ninjax INFO    :    gmst: 2.7288901910520846
21:29 ninjax INFO    :    duration: 256.0
21:29 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
21:29 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
21:29 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
21:32 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 184.92337346076965 seconds = 3.082056224346161 minutes
21:32 ninjax INFO    : The priors are not modified after their initialization
21:32 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
21:32 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
21:32 ninjax INFO    : sample: {'M_c': Array([2.04994532, 1.54793733, 1.55982012], dtype=float64), 'q': Array([0.70355016, 0.82408387, 0.53752814], dtype=float64), 's1_z': Array([ 0.02286262,  0.00938322, -0.01413828], dtype=float64), 's2_z': Array([-0.04115647,  0.00445345, -0.00300473], dtype=float64), 'lambda_1': Array([4295.98566183,  509.6945487 , 2556.80783328], dtype=float64), 'lambda_2': Array([ 909.01999244, 2348.41980678, 2929.33022359], dtype=float64), 'cos_iota': Array([0.80080021, 0.32278746, 0.77387569], dtype=float64), 'd_L': Array([417.37107574, 368.58337436, 400.63090215], dtype=float64), 't_c': Array([-0.08941076, -0.03670814,  0.00873761], dtype=float64), 'phase_c': Array([0.8809638 , 5.2162382 , 5.28475164], dtype=float64), 'psi': Array([1.07675976, 2.14433615, 2.27366635], dtype=float64), 'ra': Array([2.22744782, 6.06559742, 5.76216203], dtype=float64), 'sin_dec': Array([0.82563363, 0.74256602, 0.78109199], dtype=float64)}
21:33 ninjax INFO    : log_prob: [-234.4085894   -55.51314014  -78.2983766 ]
21:33 ninjax INFO    : Checking log_prob at injection parameters: {'M_c': 1.1026240681244464, 'q': 0.3637856264869203, 's1_z': 0.018444265757060305, 's2_z': -0.0018320372907524723, 'lambda_1': 7.039733026387287, 'lambda_2': 7282.588640497937, 'cos_iota': -0.8608172896461106, 'd_L': 257.6028441570722, 't_c': -0.07958441343202885, 'phase_c': 5.0471791968248345, 'psi': 0.07421390729166943, 'ra': 5.89902315527038, 'sin_dec': 0.028976833308625327, 'eta': 0.19559300446104905, 'iota': Array(2.60766977, dtype=float64, weak_type=True), 'dec': Array(0.02898089, dtype=float64, weak_type=True), 'H1_SNR': 9.900190185137555, 'L1_SNR': 7.496666748997555, 'V1_SNR': 10.775608607802853, 'network_SNR': 16.441639787927922, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
21:33 ninjax INFO    : log_prob at the injection parameters is: -inf
21:33 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
21:33 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
21:33 ninjax INFO    : Ninjax setup complete.
21:33 ninjax INFO    : Saving output to ./outdir/injection_27/
21:33 ninjax INFO    : Using polynomial learning rate scheduler
21:33 ninjax INFO    : The hyperparameters passed to flowMC and jim are
21:33 ninjax INFO    :    n_loop_training: 200
21:33 ninjax INFO    :    n_loop_production: 10
21:33 ninjax INFO    :    n_local_steps: 100
21:33 ninjax INFO    :    n_global_steps: 1000
21:33 ninjax INFO    :    n_epochs: 25
21:33 ninjax INFO    :    n_chains: 1000
21:33 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x153be641e440>
21:33 ninjax INFO    :    max_samples: 50000
21:33 ninjax INFO    :    momentum: 0.9
21:33 ninjax INFO    :    batch_size: 30000
21:33 ninjax INFO    :    use_global: True
21:33 ninjax INFO    :    keep_quantile: 0.0
21:33 ninjax INFO    :    train_thinning: 10
21:33 ninjax INFO    :    output_thinning: 50
21:33 ninjax INFO    :    n_sample_max: 10000
21:33 ninjax INFO    :    num_layers: 10
21:33 ninjax INFO    :    hidden_size: [128, 128]
21:33 ninjax INFO    :    num_bins: 8
21:33 ninjax INFO    :    save_training_chains: False
21:33 ninjax INFO    :    eps_mass_matrix: 1e-05
21:33 ninjax INFO    :    use_scheduler: True
21:33 ninjax INFO    :    use_temperature: False
21:33 ninjax INFO    :    which_temperature_schedule: exponential
21:33 ninjax INFO    :    starting_temperature: 2.0
21:33 ninjax INFO    :    stop_tempering_iteration: 75
21:33 ninjax INFO    :    stopping_criterion_global_acc: 0.1
21:33 ninjax INFO    :    stopping_criterion_loss: -inf
21:33 ninjax INFO    :    nf_model_kwargs: {}
21:33 ninjax INFO    :    local sampler arg not shown (pretty print)
21:33 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[-7.32141894e-24  1.02773606e-22 -7.61626966e-23  2.61820574e-23
 -1.54679643e-22  3.52468450e-23 -4.70368397e-23  7.92069092e-23
  8.17241091e-23  6.92783319e-23]
[-8.00854554e-23  1.38361828e-22  6.72301352e-24 -1.12444263e-22
 -3.03973728e-24  2.73944632e-23 -3.35166626e-23  7.65574927e-23
  1.29610378e-23  2.45408055e-23]
Checking the noise that was generated in inject_signal ifo:
[-4.48686883e-23 -4.67464015e-23  1.45204007e-23  5.20941936e-23
 -1.03097085e-22  1.25830142e-23  4.61322963e-23 -5.86915134e-23
  5.24770881e-23 -4.80506942e-23]
[ 1.82767069e-23 -4.11601912e-24 -6.64491582e-23  1.40153011e-23
  1.28697340e-22  1.85512006e-23 -2.38022480e-23  3.22210946e-23
  3.45568108e-23  5.15309097e-23]
Checking the noise that was generated in inject_signal ifo:
[-7.68244792e-23 -8.44387123e-23 -8.89365797e-23  4.47951672e-23
 -5.65462624e-24 -5.27782312e-23  3.03813154e-23  7.00817821e-23
  1.10519053e-22  6.09775107e-23]
[ 1.15419773e-22  5.64249006e-23 -7.09989992e-23  2.21702702e-23
  1.01968962e-22 -6.76207663e-23 -1.22059447e-22  4.08932191e-23
  4.93218129e-23  2.86251529e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.1808624267578125 seconds
Using provided reference parameters:
ref_params for relative binning:
{'M_c': 1.1026240681244464, 'q': 0.3637856264869203, 's1_z': 0.018444265757060305, 's2_z': -0.0018320372907524723, 'lambda_1': 7.039733026387287, 'lambda_2': 7282.588640497937, 'cos_iota': -0.8608172896461106, 'd_L': 257.6028441570722, 't_c': -0.07958441343202885, 'phase_c': 5.0471791968248345, 'psi': 0.07421390729166943, 'ra': 5.89902315527038, 'sin_dec': 0.028976833308625327, 'eta': 0.19559300446104905, 'iota': Array(2.60766977, dtype=float64, weak_type=True), 'dec': Array(0.02898089, dtype=float64, weak_type=True), 'H1_SNR': 9.900190185137555, 'L1_SNR': 7.496666748997555, 'V1_SNR': 10.775608607802853, 'network_SNR': 16.441639787927922, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5113651752471924 seconds
Time for h_sky_low and h_sky_center: 5.385552883148193 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.6847057342529297
Going to compute coefficients . . .
Time for computing coefficients: 163.49632239341736 seconds
Time for computing coefficients: 6.9783852100372314 seconds
Time for computing coefficients: 7.15692663192749 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:01<6:43:03, 121.53s/it]Tuning global sampler:   1%|          | 2/200 [02:07<2:55:46, 53.26s/it] Tuning global sampler:   2%|▏         | 3/200 [02:11<1:41:56, 31.05s/it]Tuning global sampler:   2%|▏         | 4/200 [02:16<1:07:19, 20.61s/it]Tuning global sampler:   2%|▎         | 5/200 [02:20<48:12, 14.83s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:25<36:42, 11.35s/it]Tuning global sampler:   4%|▎         | 7/200 [02:29<29:19,  9.12s/it]Tuning global sampler:   4%|▍         | 8/200 [02:34<24:33,  7.68s/it]Tuning global sampler:   4%|▍         | 9/200 [02:39<21:17,  6.69s/it]Tuning global sampler:   5%|▌         | 10/200 [02:43<18:57,  5.99s/it]Tuning global sampler:   6%|▌         | 11/200 [02:48<17:29,  5.55s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:27,  5.25s/it]Tuning global sampler:   6%|▋         | 13/200 [02:57<15:42,  5.04s/it]Tuning global sampler:   7%|▋         | 14/200 [03:01<15:13,  4.91s/it]Tuning global sampler:   8%|▊         | 15/200 [03:06<14:52,  4.82s/it]Tuning global sampler:   8%|▊         | 16/200 [03:10<14:35,  4.76s/it]Tuning global sampler:   8%|▊         | 17/200 [03:15<14:23,  4.72s/it]Tuning global sampler:   9%|▉         | 18/200 [03:20<14:13,  4.69s/it]Tuning global sampler:  10%|▉         | 19/200 [03:24<14:04,  4.67s/it]Tuning global sampler:  10%|█         | 20/200 [03:29<13:57,  4.66s/it]Tuning global sampler:  10%|█         | 21/200 [03:35<14:44,  4.94s/it]Tuning global sampler:  11%|█         | 22/200 [03:39<14:21,  4.84s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:44<14:04,  4.77s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:48<13:40,  4.66s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:53<13:20,  4.57s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:57<13:04,  4.51s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:01<12:53,  4.47s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:06<12:43,  4.44s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:10<12:35,  4.42s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:14<12:28,  4.41s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:19<12:24,  4.40s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:23<12:19,  4.40s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:28<12:12,  4.39s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:32<12:06,  4.38s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:36<12:03,  4.39s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:41<11:59,  4.39s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:45<11:54,  4.38s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:49<11:51,  4.39s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:54<11:47,  4.39s/it]Tuning global sampler:  20%|██        | 40/200 [04:58<11:42,  4.39s/it]Tuning global sampler:  20%|██        | 41/200 [05:03<11:38,  4.39s/it]Tuning global sampler:  21%|██        | 42/200 [05:08<12:20,  4.68s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:12<12:01,  4.59s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:17<11:45,  4.52s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:21<11:32,  4.47s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:25<11:23,  4.44s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:30<11:15,  4.42s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:34<11:09,  4.41s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:39<11:04,  4.40s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:43<10:59,  4.40s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:47<10:54,  4.39s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:52<10:50,  4.39s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:56<10:45,  4.39s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:01<10:40,  4.39s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:05<10:33,  4.37s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:09<10:27,  4.36s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:14<10:24,  4.37s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:18<10:21,  4.37s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:22<10:18,  4.39s/it]Tuning global sampler:  30%|███       | 60/200 [06:27<10:14,  4.39s/it]Tuning global sampler:  30%|███       | 61/200 [06:31<10:09,  4.38s/it]Tuning global sampler:  31%|███       | 62/200 [06:36<10:05,  4.39s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:41<10:43,  4.70s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:45<10:25,  4.60s/it]Tuning global sampler:  32%|███▎      | 65/200 [06:50<10:11,  4.53s/it]Tuning global sampler:  33%|███▎      | 66/200 [06:54<09:59,  4.47s/it]Tuning global sampler:  34%|███▎      | 67/200 [06:58<09:49,  4.43s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:03<09:42,  4.42s/it]Tuning global sampler:  34%|███▍      | 69/200 [07:07<09:37,  4.41s/it]Tuning global sampler:  35%|███▌      | 70/200 [07:12<09:31,  4.40s/it]Tuning global sampler:  36%|███▌      | 71/200 [07:16<09:28,  4.40s/it]Tuning global sampler:  36%|███▌      | 72/200 [07:20<09:23,  4.40s/it]Tuning global sampler:  36%|███▋      | 73/200 [07:25<09:19,  4.40s/it]Tuning global sampler:  37%|███▋      | 74/200 [07:29<09:15,  4.41s/it]Tuning global sampler:  38%|███▊      | 75/200 [07:34<09:11,  4.41s/it]Tuning global sampler:  38%|███▊      | 76/200 [07:38<09:06,  4.41s/it]Tuning global sampler:  38%|███▊      | 77/200 [07:42<08:59,  4.39s/it]Tuning global sampler:  39%|███▉      | 78/200 [07:47<08:53,  4.37s/it]Tuning global sampler:  40%|███▉      | 79/200 [07:51<08:48,  4.37s/it]Tuning global sampler:  40%|████      | 80/200 [07:55<08:44,  4.37s/it]Tuning global sampler:  40%|████      | 81/200 [08:00<08:41,  4.38s/it]Tuning global sampler:  41%|████      | 82/200 [08:04<08:37,  4.39s/it]Tuning global sampler:  42%|████▏     | 83/200 [08:09<08:34,  4.39s/it]Tuning global sampler:  42%|████▏     | 84/200 [08:13<08:29,  4.40s/it]Tuning global sampler:  42%|████▏     | 84/200 [08:18<11:29,  5.94s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.21s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.21s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.21s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.21s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.21s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.21s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.21s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.21s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]
21:41 ninjax INFO    : Saving samples to ./outdir/injection_27/results_training.npz
21:41 ninjax INFO    : Saving the NF
21:42 ninjax INFO    : Time taken: 546.1883232593536 seconds (9.103138720989227 minutes)
21:42 ninjax INFO    : Creating the final corner plot
21:42 ninjax INFO    : Dumping the final production chains
21:42 ninjax INFO    : Chains shape is: (13, 220000)
21:42 ninjax INFO    : Key: M_c: ESS = 51299, Rhat = 1.013228025332448
21:42 ninjax INFO    : Key: q: ESS = 50333, Rhat = 1.0143390348453654
21:42 ninjax INFO    : Key: s1_z: ESS = 41412, Rhat = 1.0162628232770077
21:42 ninjax INFO    : Key: s2_z: ESS = 32956, Rhat = 1.0202425771546053
21:42 ninjax INFO    : Key: lambda_1: ESS = 39365, Rhat = 1.0172557825174897
21:42 ninjax INFO    : Key: lambda_2: ESS = 41452, Rhat = 1.0183902695058424
21:42 ninjax INFO    : Key: cos_iota: ESS = 23477, Rhat = 1.029092955675118
21:42 ninjax INFO    : Key: d_L: ESS = 24299, Rhat = 1.0276976897238752
21:42 ninjax INFO    : Key: t_c: ESS = 50150, Rhat = 1.014581741842664
21:42 ninjax INFO    : Key: phase_c: ESS = 36601, Rhat = 1.0182093925041642
21:42 ninjax INFO    : Key: psi: ESS = 40412, Rhat = 1.0165395672259305
21:42 ninjax INFO    : Key: ra: ESS = 32515, Rhat = 1.0205896444855957
21:42 ninjax INFO    : Key: sin_dec: ESS = 27315, Rhat = 1.0235723426830496
21:42 ninjax INFO    : Key: eta: ESS = 50333, Rhat = 1.0146788511405251
21:42 ninjax INFO    : Key: iota: ESS = 23477, Rhat = 1.0276815000905106
21:42 ninjax INFO    : Key: dec: ESS = 27315, Rhat = 1.0235723426830496
21:42 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.174 +/- 0.196
q: 0.518 +/- 0.196
s1_z: -0.006 +/- 0.028
s2_z: -0.005 +/- 0.028
lambda_1: 2101.613 +/- 1470.924
lambda_2: 2166.031 +/- 1429.909
cos_iota: -0.348 +/- 0.400
d_L: 343.883 +/- 79.684
t_c: -0.057 +/- 0.041
phase_c: 3.203 +/- 1.758
psi: 1.655 +/- 0.866
ra: 4.920 +/- 1.704
sin_dec: -0.006 +/- 0.387
Log probability: 37.727 +/- 69.549
Local acceptance: 0.659 +/- 0.474
Global acceptance: 0.009 +/- 0.093
Max loss: 22.759, Min loss: 7.855
Production summary
==========
M_c: 1.103 +/- 0.000
q: 0.408 +/- 0.035
s1_z: -0.011 +/- 0.027
s2_z: -0.005 +/- 0.029
lambda_1: 530.012 +/- 371.573
lambda_2: 2438.093 +/- 1437.415
cos_iota: -0.775 +/- 0.171
d_L: 235.692 +/- 46.650
t_c: -0.078 +/- 0.001
phase_c: 3.056 +/- 1.823
psi: 1.709 +/- 0.912
ra: 5.902 +/- 0.013
sin_dec: 0.053 +/- 0.050
Log probability: 116.300 +/- 2.208
Local acceptance: 0.185 +/- 0.388
Global acceptance: 0.110 +/- 0.312
DONE

JOB STATISTICS
==============
Job ID: 10848219
Cluster: snellius
User/Group: twouters2/twouters2
State: RUNNING
Nodes: 1
Cores per node: 16
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 03:30:24 core-walltime
Job Wall-clock time: 00:13:09
Memory Utilized: 0.00 MB (estimated maximum)
Memory Efficiency: 0.00% of 10.00 GB (10.00 GB/node)
WARNING: Efficiency statistics may be misleading for RUNNING jobs.
