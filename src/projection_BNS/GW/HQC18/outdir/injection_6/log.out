Fri Mar 28 10:45:40 CET 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
10:45 ninjax INFO    : Checking and setting outdir
10:45 ninjax INFO    : Found generation prior file ./outdir/injection_6/generation_prior.prior
10:45 ninjax INFO    : The outdir is set to ./outdir/injection_6
10:45 ninjax INFO    : Loading the given config
10:45 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
10:45 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
10:45 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/HQC18/outdir/injection_6/complete_config.json
10:45 ninjax INFO    : No seed specified. Generating a random seed: 914651
10:45 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 893256
10:45 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 372164
10:45 ninjax INFO    : Loading the priors
10:45 ninjax INFO    : Setting up the prior
10:45 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
10:45 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
10:45 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
10:45 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
10:45 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
10:45 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
10:45 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
10:45 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
10:45 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
10:45 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
10:45 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
10:45 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
10:45 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
10:45 ninjax INFO    : Setting up the generation prior
10:45 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.0452447532113593, naming=["mass_1_source"])
10:45 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.0452447532113593, naming=["mass_2_source"])
10:45 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
10:45 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
10:45 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
10:45 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
10:45 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
10:45 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
10:45 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
10:45 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
10:45 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
10:45 ninjax INFO    : Finished prior setup
10:45 ninjax INFO    : Setting the transforms
10:45 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
10:45 ninjax INFO    : transforms_str_list has 3 elements
10:45 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
10:45 ninjax INFO    : Setting the likelihood
10:45 ninjax INFO    : GW likelihood provided, setting up the GW pipe
10:45 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz
10:45 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz for BNS injections
10:45 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
10:45 ninjax INFO    : self.is_BNS_run is True
10:45 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
10:45 ninjax INFO    : GW run is an injection
10:45 ninjax INFO    : Setting up GW injection . . . 
10:45 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
10:45 ninjax INFO    : Generating new injection
10:45 ninjax INFO    : Sanity check: generated parameters:
10:45 ninjax INFO    : {'mass_1_source': 1.0967339712567565, 'mass_2_source': 1.1700082689581641, 's1_z': -0.04195968356242517, 's2_z': -0.005023591132133978, 'cos_iota': 0.9310160633851496, 'd_L': 258.16804703540697, 't_c': 0.09383326203335604, 'phase_c': 3.5699567747870598, 'psi': 0.8777885942045188, 'ra': 4.099469960544009, 'sin_dec': 0.4918600876855912}
10:45 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz . . . 
10:45 ninjax INFO    : Injected lambda_1: 769.3182412831867
10:45 ninjax INFO    : Injected lambda_2: 1121.5795539994203
10:45 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.0435583681271157 is 256.0
10:45 ninjax INFO    : After transforms, the injection parameters are:
10:45 ninjax INFO    : {'mass_1_source': 1.1700082689581641, 'mass_2_source': 1.0967339712567565, 's1_z': -0.04195968356242517, 's2_z': -0.005023591132133978, 'cos_iota': 0.9310160633851496, 'd_L': 258.16804703540697, 't_c': 0.09383326203335604, 'phase_c': 3.5699567747870598, 'psi': 0.8777885942045188, 'ra': 4.099469960544009, 'sin_dec': 0.4918600876855912, 'q': 0.9373728377435702, 'M_c': 1.0435583681271157, 'eta': 0.24973876036844142, 'iota': Array(0.37360939, dtype=float64, weak_type=True), 'dec': Array(0.51422484, dtype=float64, weak_type=True), 'lambda_1': 769.3182412831867, 'lambda_2': 1121.5795539994203}
10:45 ninjax INFO    : The trial injection parameters are {'M_c': 1.0435583681271157, 'eta': 0.24973876036844142, 's1_z': -0.04195968356242517, 's2_z': -0.005023591132133978, 'lambda_1': 769.3182412831867, 'lambda_2': 1121.5795539994203, 'd_L': 258.16804703540697, 'phase_c': 3.5699567747870598, 'iota': 0.37360939246256525, 't_c': 0.09383326203335604, 'psi': 0.8777885942045188, 'ra': 4.099469960544009, 'dec': 0.5142248430596799}
10:45 ninjax INFO    : Injecting signals . . .
10:45 ninjax INFO    : self.ifos
10:45 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
10:45 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
10:45 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
10:45 ninjax INFO    : [-3.54599775e-23-8.31708573e-23j -1.02862463e-22-6.02235244e-23j
  9.74187787e-23+1.15270481e-23j ...
 -7.44347895e-24-3.18621819e-24j -1.12554766e-23+1.50524962e-24j
 -7.24656195e-24+6.63766686e-24j]
10:45 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
10:45 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
10:45 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
10:45 ninjax INFO    : [-1.18182940e-22-5.77954337e-23j  4.57121974e-23+8.66793117e-24j
  9.44901816e-24-4.58180081e-23j ...
 -1.84885820e-23-8.94348914e-24j -2.11728254e-23-4.97446346e-23j
  1.45926355e-24+4.41176529e-24j]
10:45 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
10:45 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
10:45 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
10:45 ninjax INFO    : [ 8.95628058e-23+1.64788877e-23j -6.30275213e-23+4.72681054e-23j
  3.78090049e-23+8.82247065e-23j ...
 -9.44559573e-25+5.58539051e-24j  5.25890658e-23-7.70356828e-23j
  5.91850367e-24+5.50221571e-23j]
10:45 ninjax INFO    : [1.43183556e-46 1.43058540e-46 1.42935095e-46 ... 6.39793039e-47
 6.39795354e-47 6.39797668e-47]
10:45 ninjax INFO    : SNR for ifo H1 is 8.084529433940824
10:45 ninjax INFO    : SNR for ifo L1 is 10.123052227308731
10:45 ninjax INFO    : SNR for ifo V1 is 9.089256072723593
10:45 ninjax INFO    : The network SNR is 15.825624111567244
10:45 ninjax INFO    : Network SNR passes threshold
10:45 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
10:45 ninjax INFO    :    mass_1_source: 1.1700082689581641
10:45 ninjax INFO    :    mass_2_source: 1.0967339712567565
10:45 ninjax INFO    :    s1_z: -0.04195968356242517
10:45 ninjax INFO    :    s2_z: -0.005023591132133978
10:45 ninjax INFO    :    cos_iota: 0.9310160633851496
10:45 ninjax INFO    :    d_L: 258.16804703540697
10:45 ninjax INFO    :    t_c: 0.09383326203335604
10:45 ninjax INFO    :    phase_c: 3.5699567747870598
10:45 ninjax INFO    :    psi: 0.8777885942045188
10:45 ninjax INFO    :    ra: 4.099469960544009
10:45 ninjax INFO    :    sin_dec: 0.4918600876855912
10:45 ninjax INFO    :    q: 0.9373728377435702
10:45 ninjax INFO    :    M_c: 1.0435583681271157
10:45 ninjax INFO    :    eta: 0.24973876036844142
10:45 ninjax INFO    :    iota: 0.37360939246256525
10:45 ninjax INFO    :    dec: 0.5142248430596799
10:45 ninjax INFO    :    lambda_1: 769.3182412831867
10:45 ninjax INFO    :    lambda_2: 1121.5795539994203
10:45 ninjax INFO    :    H1_SNR: 8.084529433940824
10:45 ninjax INFO    :    L1_SNR: 10.123052227308731
10:45 ninjax INFO    :    V1_SNR: 9.089256072723593
10:45 ninjax INFO    :    network_SNR: 15.825624111567244
10:45 ninjax INFO    :    epoch: 254.0
10:45 ninjax INFO    :    gmst: 2.7288901910520846
10:45 ninjax INFO    :    duration: 256.0
10:45 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
10:45 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
10:45 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
10:48 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 182.0845730304718 seconds = 3.0347428838411967 minutes
10:48 ninjax INFO    : The priors are not modified after their initialization
10:48 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
10:48 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
10:48 ninjax INFO    : sample: {'M_c': Array([2.13987914, 1.50671455, 2.0815623 ], dtype=float64), 'q': Array([0.85030586, 0.75296461, 0.38991385], dtype=float64), 's1_z': Array([ 0.00945319, -0.0046738 , -0.00743092], dtype=float64), 's2_z': Array([-0.02624719, -0.04620338, -0.00696063], dtype=float64), 'lambda_1': Array([1415.2804338 ,  187.11353585, 4655.89082315], dtype=float64), 'lambda_2': Array([2688.35192504, 4164.62421032, 2905.08844728], dtype=float64), 'cos_iota': Array([-0.40534176,  0.25111249,  0.54609828], dtype=float64), 'd_L': Array([717.75738941, 788.53266193, 938.10320876], dtype=float64), 't_c': Array([ 0.06457019, -0.05965234,  0.03120766], dtype=float64), 'phase_c': Array([2.08164784, 5.46741347, 3.86687369], dtype=float64), 'psi': Array([2.63994999, 3.04594841, 1.39170175], dtype=float64), 'ra': Array([2.30607924, 1.67774892, 5.37869292], dtype=float64), 'sin_dec': Array([-0.18991177, -0.18324195,  0.31200294], dtype=float64)}
10:49 ninjax INFO    : log_prob: [-3.39813787 -2.48400969 -4.28920618]
10:49 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.1700082689581641, 'mass_2_source': 1.0967339712567565, 's1_z': -0.04195968356242517, 's2_z': -0.005023591132133978, 'cos_iota': 0.9310160633851496, 'd_L': 258.16804703540697, 't_c': 0.09383326203335604, 'phase_c': 3.5699567747870598, 'psi': 0.8777885942045188, 'ra': 4.099469960544009, 'sin_dec': 0.4918600876855912, 'q': 0.9373728377435702, 'M_c': 1.0435583681271157, 'eta': 0.24973876036844142, 'iota': Array(0.37360939, dtype=float64, weak_type=True), 'dec': Array(0.51422484, dtype=float64, weak_type=True), 'lambda_1': 769.3182412831867, 'lambda_2': 1121.5795539994203, 'H1_SNR': 8.084529433940824, 'L1_SNR': 10.123052227308731, 'V1_SNR': 9.089256072723593, 'network_SNR': 15.825624111567244, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
10:49 ninjax INFO    : log_prob at the injection parameters is: 106.92981245095334
10:49 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
10:49 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
10:49 ninjax INFO    : Ninjax setup complete.
10:49 ninjax INFO    : Saving output to ./outdir/injection_6/
10:49 ninjax INFO    : Using polynomial learning rate scheduler
10:49 ninjax INFO    : The hyperparameters passed to flowMC and jim are
10:49 ninjax INFO    :    n_loop_training: 200
10:49 ninjax INFO    :    n_loop_production: 10
10:49 ninjax INFO    :    n_local_steps: 100
10:49 ninjax INFO    :    n_global_steps: 1000
10:49 ninjax INFO    :    n_epochs: 25
10:49 ninjax INFO    :    n_chains: 1000
10:49 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x1468cc0024d0>
10:49 ninjax INFO    :    max_samples: 50000
10:49 ninjax INFO    :    momentum: 0.9
10:49 ninjax INFO    :    batch_size: 30000
10:49 ninjax INFO    :    use_global: True
10:49 ninjax INFO    :    keep_quantile: 0.0
10:49 ninjax INFO    :    train_thinning: 10
10:49 ninjax INFO    :    output_thinning: 50
10:49 ninjax INFO    :    n_sample_max: 10000
10:49 ninjax INFO    :    num_layers: 10
10:49 ninjax INFO    :    hidden_size: [128, 128]
10:49 ninjax INFO    :    num_bins: 8
10:49 ninjax INFO    :    save_training_chains: False
10:49 ninjax INFO    :    eps_mass_matrix: 1e-05
10:49 ninjax INFO    :    use_scheduler: True
10:49 ninjax INFO    :    use_temperature: False
10:49 ninjax INFO    :    which_temperature_schedule: exponential
10:49 ninjax INFO    :    starting_temperature: 2.0
10:49 ninjax INFO    :    stop_tempering_iteration: 75
10:49 ninjax INFO    :    stopping_criterion_global_acc: 0.1
10:49 ninjax INFO    :    stopping_criterion_loss: -inf
10:49 ninjax INFO    :    nf_model_kwargs: {}
10:49 ninjax INFO    :    local sampler arg not shown (pretty print)
10:49 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[-3.75694605e-23 -1.00972329e-22  1.01118796e-22  1.44761757e-22
  4.24417699e-24  1.47083672e-22 -5.75168431e-24 -7.36687541e-23
 -2.57886629e-24 -2.68495805e-23]
[-8.01061019e-23 -5.70198225e-23  1.11530749e-23  3.11360285e-23
 -2.85555458e-24  1.56850955e-23 -3.50356611e-23  7.13921977e-23
 -8.85067158e-23 -3.30881295e-23]
Checking the noise that was generated in inject_signal ifo:
[-1.17540040e-22  4.17990814e-23  5.51713359e-24 -6.70117134e-23
 -1.83448783e-23 -5.48150791e-24  2.38537294e-23 -2.77905384e-23
  5.06293657e-23  5.90713821e-23]
[-6.24095767e-23  6.14182095e-24 -4.33231991e-23 -2.82956591e-23
 -1.30239970e-22  1.18362592e-22  5.58559657e-23  7.26881111e-24
 -8.98327623e-23 -9.56154852e-23]
Checking the noise that was generated in inject_signal ifo:
[ 8.43906119e-23 -6.41055993e-23  4.20781082e-23  8.14355784e-24
 -4.54582957e-23  7.68700925e-25 -7.74969097e-26 -7.04258873e-24
  5.04834773e-23  5.12255067e-23]
[ 1.76953047e-23  5.24696527e-23  9.13838515e-23  1.96930991e-23
 -4.50729301e-23  8.08576541e-23  1.29138135e-23 -4.43989971e-23
 -6.81881657e-23 -7.38140254e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.1836698055267334 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.1700082689581641, 'mass_2_source': 1.0967339712567565, 's1_z': -0.04195968356242517, 's2_z': -0.005023591132133978, 'cos_iota': 0.9310160633851496, 'd_L': 258.16804703540697, 't_c': 0.09383326203335604, 'phase_c': 3.5699567747870598, 'psi': 0.8777885942045188, 'ra': 4.099469960544009, 'sin_dec': 0.4918600876855912, 'q': 0.9373728377435702, 'M_c': 1.0435583681271157, 'eta': 0.24973876036844142, 'iota': Array(0.37360939, dtype=float64, weak_type=True), 'dec': Array(0.51422484, dtype=float64, weak_type=True), 'lambda_1': 769.3182412831867, 'lambda_2': 1121.5795539994203, 'H1_SNR': 8.084529433940824, 'L1_SNR': 10.123052227308731, 'V1_SNR': 9.089256072723593, 'network_SNR': 15.825624111567244, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5091540813446045 seconds
Time for h_sky_low and h_sky_center: 5.5144407749176025 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.7491893768310547
Going to compute coefficients . . .
Time for computing coefficients: 160.58062386512756 seconds
Time for computing coefficients: 6.9713194370269775 seconds
Time for computing coefficients: 7.049715995788574 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:02<6:46:01, 122.42s/it]Tuning global sampler:   1%|          | 2/200 [02:06<2:55:10, 53.08s/it] Tuning global sampler:   2%|▏         | 3/200 [02:11<1:41:36, 30.95s/it]Tuning global sampler:   2%|▏         | 4/200 [02:16<1:07:06, 20.55s/it]Tuning global sampler:   2%|▎         | 5/200 [02:20<48:03, 14.79s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:25<36:36, 11.32s/it]Tuning global sampler:   4%|▎         | 7/200 [02:29<29:15,  9.10s/it]Tuning global sampler:   4%|▍         | 8/200 [02:34<24:30,  7.66s/it]Tuning global sampler:   4%|▍         | 9/200 [02:38<21:15,  6.68s/it]Tuning global sampler:   5%|▌         | 10/200 [02:43<18:55,  5.98s/it]Tuning global sampler:   6%|▌         | 11/200 [02:47<17:28,  5.55s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:27,  5.25s/it]Tuning global sampler:   6%|▋         | 13/200 [02:57<15:42,  5.04s/it]Tuning global sampler:   7%|▋         | 14/200 [03:01<15:14,  4.92s/it]Tuning global sampler:   8%|▊         | 15/200 [03:06<14:53,  4.83s/it]Tuning global sampler:   8%|▊         | 16/200 [03:10<14:36,  4.76s/it]Tuning global sampler:   8%|▊         | 17/200 [03:15<14:23,  4.72s/it]Tuning global sampler:   9%|▉         | 18/200 [03:21<15:05,  4.98s/it]Tuning global sampler:  10%|▉         | 19/200 [03:25<14:41,  4.87s/it]Tuning global sampler:  10%|█         | 20/200 [03:30<14:22,  4.79s/it]Tuning global sampler:  10%|█         | 21/200 [03:34<14:08,  4.74s/it]Tuning global sampler:  11%|█         | 22/200 [03:39<13:55,  4.69s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:44<13:44,  4.66s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:48<13:26,  4.58s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:52<13:10,  4.52s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:57<12:58,  4.47s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:01<12:49,  4.45s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:06<12:41,  4.42s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:10<12:33,  4.41s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:14<12:27,  4.40s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:19<12:21,  4.39s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:23<12:16,  4.38s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:27<12:09,  4.37s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:32<12:04,  4.36s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:36<12:00,  4.37s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:40<11:56,  4.37s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:46<12:41,  4.67s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:50<12:22,  4.58s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:55<12:07,  4.52s/it]Tuning global sampler:  20%|██        | 40/200 [04:59<11:55,  4.47s/it]Tuning global sampler:  20%|██        | 41/200 [05:03<11:46,  4.44s/it]Tuning global sampler:  21%|██        | 42/200 [05:08<11:38,  4.42s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:12<11:31,  4.41s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:16<11:24,  4.39s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:21<11:17,  4.37s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:25<11:13,  4.37s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:29<11:08,  4.37s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:34<11:04,  4.37s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:38<11:00,  4.37s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:43<10:56,  4.38s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:47<10:51,  4.38s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:51<10:47,  4.38s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:56<10:43,  4.38s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:00<10:38,  4.38s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:04<10:32,  4.36s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:09<10:27,  4.35s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:13<10:24,  4.37s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:19<11:04,  4.68s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:23<10:48,  4.60s/it]Tuning global sampler:  30%|███       | 60/200 [06:27<10:34,  4.53s/it]Tuning global sampler:  30%|███       | 61/200 [06:32<10:23,  4.49s/it]Tuning global sampler:  31%|███       | 62/200 [06:36<10:14,  4.46s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:41<10:07,  4.44s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:45<10:00,  4.42s/it]Tuning global sampler:  32%|███▎      | 65/200 [06:49<09:54,  4.40s/it]Tuning global sampler:  33%|███▎      | 66/200 [06:54<09:47,  4.38s/it]Tuning global sampler:  34%|███▎      | 67/200 [06:58<09:41,  4.37s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:02<09:37,  4.37s/it]Tuning global sampler:  34%|███▍      | 69/200 [07:07<09:33,  4.38s/it]Tuning global sampler:  35%|███▌      | 70/200 [07:11<09:29,  4.38s/it]Tuning global sampler:  36%|███▌      | 71/200 [07:16<09:26,  4.39s/it]Tuning global sampler:  36%|███▌      | 72/200 [07:20<09:21,  4.39s/it]Tuning global sampler:  36%|███▋      | 73/200 [07:24<09:17,  4.39s/it]Tuning global sampler:  37%|███▋      | 74/200 [07:29<09:13,  4.39s/it]Tuning global sampler:  38%|███▊      | 75/200 [07:33<09:10,  4.40s/it]Tuning global sampler:  38%|███▊      | 76/200 [07:38<09:05,  4.40s/it]Tuning global sampler:  38%|███▊      | 77/200 [07:42<08:59,  4.38s/it]Tuning global sampler:  39%|███▉      | 78/200 [07:46<08:53,  4.37s/it]Tuning global sampler:  40%|███▉      | 79/200 [07:52<09:26,  4.69s/it]Tuning global sampler:  40%|████      | 80/200 [07:56<09:10,  4.59s/it]Tuning global sampler:  40%|████      | 81/200 [08:00<08:59,  4.53s/it]Tuning global sampler:  41%|████      | 82/200 [08:05<08:49,  4.49s/it]Tuning global sampler:  42%|████▏     | 83/200 [08:09<08:42,  4.46s/it]Tuning global sampler:  42%|████▏     | 84/200 [08:14<08:35,  4.44s/it]Tuning global sampler:  42%|████▎     | 85/200 [08:18<08:28,  4.42s/it]Tuning global sampler:  43%|████▎     | 86/200 [08:22<08:23,  4.41s/it]Tuning global sampler:  44%|████▎     | 87/200 [08:27<08:17,  4.41s/it]Tuning global sampler:  44%|████▍     | 88/200 [08:31<08:12,  4.40s/it]Tuning global sampler:  44%|████▍     | 89/200 [08:35<08:06,  4.38s/it]Tuning global sampler:  45%|████▌     | 90/200 [08:40<08:01,  4.38s/it]Tuning global sampler:  46%|████▌     | 91/200 [08:44<07:57,  4.38s/it]Tuning global sampler:  46%|████▌     | 92/200 [08:49<07:54,  4.39s/it]Tuning global sampler:  46%|████▋     | 93/200 [08:53<07:50,  4.39s/it]Tuning global sampler:  47%|████▋     | 94/200 [08:57<07:46,  4.40s/it]Tuning global sampler:  48%|████▊     | 95/200 [09:02<07:41,  4.40s/it]Tuning global sampler:  48%|████▊     | 96/200 [09:06<07:38,  4.41s/it]Tuning global sampler:  48%|████▊     | 97/200 [09:11<07:34,  4.41s/it]Tuning global sampler:  49%|████▉     | 98/200 [09:15<07:29,  4.41s/it]Tuning global sampler:  50%|████▉     | 99/200 [09:21<07:58,  4.74s/it]Tuning global sampler:  50%|█████     | 100/200 [09:25<07:42,  4.62s/it]Tuning global sampler:  50%|█████     | 101/200 [09:29<07:30,  4.55s/it]Tuning global sampler:  51%|█████     | 102/200 [09:34<07:20,  4.50s/it]Tuning global sampler:  52%|█████▏    | 103/200 [09:38<07:13,  4.47s/it]Tuning global sampler:  52%|█████▏    | 104/200 [09:42<07:06,  4.44s/it]Tuning global sampler:  52%|█████▎    | 105/200 [09:47<06:59,  4.42s/it]Tuning global sampler:  52%|█████▎    | 105/200 [09:51<08:55,  5.64s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.21s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.21s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.21s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.21s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.21s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.21s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.21s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.21s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]
10:59 ninjax INFO    : Saving samples to ./outdir/injection_6/results_training.npz
10:59 ninjax INFO    : Saving the NF
10:59 ninjax INFO    : Time taken: 639.884260892868 seconds (10.6647376815478 minutes)
10:59 ninjax INFO    : Creating the final corner plot
10:59 ninjax INFO    : Dumping the final production chains
10:59 ninjax INFO    : Chains shape is: (13, 220000)
10:59 ninjax INFO    : Key: M_c: ESS = 48991, Rhat = 1.0143768724935462
10:59 ninjax INFO    : Key: q: ESS = 32608, Rhat = 1.0204978047755022
10:59 ninjax INFO    : Key: s1_z: ESS = 43022, Rhat = 1.0163804961817378
10:59 ninjax INFO    : Key: s2_z: ESS = 52044, Rhat = 1.0139455179561883
10:59 ninjax INFO    : Key: lambda_1: ESS = 33754, Rhat = 1.0181210287098235
10:59 ninjax INFO    : Key: lambda_2: ESS = 41764, Rhat = 1.016115965208279
10:59 ninjax INFO    : Key: cos_iota: ESS = 24360, Rhat = 1.025578559836743
10:59 ninjax INFO    : Key: d_L: ESS = 27694, Rhat = 1.0224370472685052
10:59 ninjax INFO    : Key: t_c: ESS = 24493, Rhat = 1.0249274849070804
10:59 ninjax INFO    : Key: phase_c: ESS = 58632, Rhat = 1.0154518049728378
10:59 ninjax INFO    : Key: psi: ESS = 85823, Rhat = 1.0118874484036735
10:59 ninjax INFO    : Key: ra: ESS = 25312, Rhat = 1.0239010499912355
10:59 ninjax INFO    : Key: sin_dec: ESS = 23708, Rhat = 1.0254229349031452
10:59 ninjax INFO    : Key: eta: ESS = 32608, Rhat = 1.0204978047755022
10:59 ninjax INFO    : Key: iota: ESS = 24360, Rhat = 1.025578559836743
10:59 ninjax INFO    : Key: dec: ESS = 23708, Rhat = 1.0254229349031452
10:59 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.198 +/- 0.322
q: 0.642 +/- 0.214
s1_z: -0.001 +/- 0.027
s2_z: -0.001 +/- 0.028
lambda_1: 2128.871 +/- 1463.898
lambda_2: 2393.542 +/- 1394.273
cos_iota: 0.380 +/- 0.490
d_L: 597.754 +/- 272.649
t_c: 0.061 +/- 0.052
phase_c: 3.002 +/- 1.761
psi: 1.568 +/- 0.909
ra: 3.910 +/- 1.165
sin_dec: 0.142 +/- 0.423
Log probability: 29.495 +/- 49.587
Local acceptance: 0.624 +/- 0.484
Global acceptance: 0.020 +/- 0.138
Max loss: 38.699, Min loss: 7.325
Production summary
==========
M_c: 1.044 +/- 0.000
q: 0.773 +/- 0.123
s1_z: -0.008 +/- 0.025
s2_z: -0.006 +/- 0.027
lambda_1: 810.460 +/- 742.956
lambda_2: 1592.137 +/- 1157.039
cos_iota: 0.811 +/- 0.145
d_L: 226.457 +/- 38.360
t_c: 0.094 +/- 0.001
phase_c: 3.127 +/- 1.814
psi: 1.593 +/- 0.899
ra: 4.092 +/- 0.027
sin_dec: 0.501 +/- 0.033
Log probability: 103.390 +/- 2.469
Local acceptance: 0.137 +/- 0.343
Global acceptance: 0.126 +/- 0.331
DONE

JOB STATISTICS
==============
Job ID: 10858905
Cluster: snellius
User/Group: twouters2/twouters2
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 00:12:41
CPU Efficiency: 5.42% of 03:53:52 core-walltime
Job Wall-clock time: 00:14:37
Memory Utilized: 4.75 GB
Memory Efficiency: 47.47% of 10.00 GB
