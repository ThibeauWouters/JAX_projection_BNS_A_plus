Fri Mar 28 10:45:40 CET 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
10:45 ninjax INFO    : Checking and setting outdir
10:45 ninjax INFO    : Found generation prior file ./outdir/injection_5/generation_prior.prior
10:45 ninjax INFO    : The outdir is set to ./outdir/injection_5
10:45 ninjax INFO    : Loading the given config
10:45 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
10:45 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
10:45 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/HQC18/outdir/injection_5/complete_config.json
10:45 ninjax INFO    : No seed specified. Generating a random seed: 48833
10:45 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 155611
10:45 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 344182
10:45 ninjax INFO    : Loading the priors
10:45 ninjax INFO    : Setting up the prior
10:45 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
10:45 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
10:45 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
10:45 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
10:45 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
10:45 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
10:45 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
10:45 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
10:45 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
10:45 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
10:45 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
10:45 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
10:45 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
10:45 ninjax INFO    : Setting up the generation prior
10:45 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.0452447532113593, naming=["mass_1_source"])
10:45 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.0452447532113593, naming=["mass_2_source"])
10:45 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
10:45 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
10:45 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
10:45 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
10:45 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
10:45 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
10:45 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
10:45 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
10:45 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
10:45 ninjax INFO    : Finished prior setup
10:45 ninjax INFO    : Setting the transforms
10:45 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
10:45 ninjax INFO    : transforms_str_list has 3 elements
10:45 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
10:45 ninjax INFO    : Setting the likelihood
10:45 ninjax INFO    : GW likelihood provided, setting up the GW pipe
10:45 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz
10:45 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz for BNS injections
10:45 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
10:45 ninjax INFO    : self.is_BNS_run is True
10:45 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
10:45 ninjax INFO    : GW run is an injection
10:45 ninjax INFO    : Setting up GW injection . . . 
10:45 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
10:45 ninjax INFO    : Generating new injection
10:45 ninjax INFO    : Sanity check: generated parameters:
10:45 ninjax INFO    : {'mass_1_source': 1.0601857829955958, 'mass_2_source': 1.182815401548535, 's1_z': -0.03610504649573596, 's2_z': -0.002990291232289069, 'cos_iota': -0.43253405300028414, 'd_L': 445.2681818243894, 't_c': 0.01554859724821149, 'phase_c': 2.5478035008710145, 'psi': 1.6257003940839967, 'ra': 1.6169436475222914, 'sin_dec': -0.9783703290020047}
10:45 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz . . . 
10:45 ninjax INFO    : Injected lambda_1: 721.4468819222036
10:45 ninjax INFO    : Injected lambda_2: 1362.5487325123654
10:45 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.0726236770425999 is 256.0
10:45 ninjax INFO    : After transforms, the injection parameters are:
10:45 ninjax INFO    : {'mass_1_source': 1.182815401548535, 'mass_2_source': 1.0601857829955958, 's1_z': -0.03610504649573596, 's2_z': -0.002990291232289069, 'cos_iota': -0.43253405300028414, 'd_L': 445.2681818243894, 't_c': 0.01554859724821149, 'phase_c': 2.5478035008710145, 'psi': 1.6257003940839967, 'ra': 1.6169436475222914, 'sin_dec': -0.9783703290020047, 'q': 0.896323958588641, 'M_c': 1.0726236770425999, 'eta': 0.24925273996222855, 'iota': Array(2.01809778, dtype=float64, weak_type=True), 'dec': Array(-1.36243079, dtype=float64, weak_type=True), 'lambda_1': 721.4468819222036, 'lambda_2': 1362.5487325123654}
10:45 ninjax INFO    : The trial injection parameters are {'M_c': 1.0726236770425999, 'eta': 0.24925273996222855, 's1_z': -0.03610504649573596, 's2_z': -0.002990291232289069, 'lambda_1': 721.4468819222036, 'lambda_2': 1362.5487325123654, 'd_L': 445.2681818243894, 'phase_c': 2.5478035008710145, 'iota': 2.018097778141284, 't_c': 0.01554859724821149, 'psi': 1.6257003940839967, 'ra': 1.6169436475222914, 'dec': -1.3624307937867937}
10:45 ninjax INFO    : Injecting signals . . .
10:45 ninjax INFO    : self.ifos
10:45 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
10:45 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
10:45 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
10:45 ninjax INFO    : [-1.76655725e-22-7.75515021e-23j -1.16171780e-23-5.29101302e-23j
  5.46469722e-24+8.95288020e-23j ...
 -2.43444688e-23+1.55769078e-23j  1.88077769e-23+4.15974402e-23j
  1.59742078e-23-9.59272965e-24j]
10:45 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
10:45 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
10:45 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
10:45 ninjax INFO    : [ 7.99708553e-23+1.31387432e-23j  6.75335236e-23-2.77442929e-23j
 -1.07743919e-23-7.50407796e-24j ...
 -3.52120846e-23+2.58345589e-23j -2.26272625e-23+3.68337696e-23j
 -1.07579333e-23-1.98303296e-23j]
10:45 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
10:45 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
10:45 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
10:45 ninjax INFO    : [-3.07155634e-23+2.16782984e-23j -8.66491152e-23-1.36960289e-23j
  2.43400663e-23-7.12084956e-23j ...
  2.47599451e-23-9.52455184e-23j -7.64439586e-23+5.39969695e-23j
 -3.38384590e-23+2.03142453e-23j]
10:45 ninjax INFO    : [1.43183556e-46 1.43058540e-46 1.42935095e-46 ... 6.39793039e-47
 6.39795354e-47 6.39797668e-47]
10:45 ninjax INFO    : SNR for ifo H1 is 3.922062347496763
10:45 ninjax INFO    : SNR for ifo L1 is 3.414587792832393
10:45 ninjax INFO    : SNR for ifo V1 is 3.105173484543832
10:45 ninjax INFO    : The network SNR is 6.0567388272671865
10:45 ninjax INFO    : The network SNR does not pass the threshold, trying again
10:45 ninjax INFO    : Generating new injection
10:45 ninjax INFO    : Sanity check: generated parameters:
10:45 ninjax INFO    : {'mass_1_source': 1.5045398415922508, 'mass_2_source': 1.9378998114981316, 's1_z': 0.032663433350777066, 's2_z': -0.04952262173323496, 'cos_iota': 0.4016965601338378, 'd_L': 186.5383422173057, 't_c': -0.06264717378660553, 'phase_c': 3.3267367407820467, 'psi': 2.4355208773960886, 'ra': 0.7326686593421526, 'sin_dec': -0.27924963020057936}
10:45 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz . . . 
10:45 ninjax INFO    : Injected lambda_1: 21.48660030312804
10:45 ninjax INFO    : Injected lambda_2: 161.03236685947928
10:45 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.546670393735638 is 128.0
10:45 ninjax INFO    : After transforms, the injection parameters are:
10:45 ninjax INFO    : {'mass_1_source': 1.9378998114981316, 'mass_2_source': 1.5045398415922508, 's1_z': 0.032663433350777066, 's2_z': -0.04952262173323496, 'cos_iota': 0.4016965601338378, 'd_L': 186.5383422173057, 't_c': -0.06264717378660553, 'phase_c': 3.3267367407820467, 'psi': 2.4355208773960886, 'ra': 0.7326686593421526, 'sin_dec': -0.27924963020057936, 'q': 0.7763764837920784, 'M_c': 1.546670393735638, 'eta': 0.246038087113785, 'iota': Array(1.15742763, dtype=float64, weak_type=True), 'dec': Array(-0.28301256, dtype=float64, weak_type=True), 'lambda_1': 21.48660030312804, 'lambda_2': 161.03236685947928}
10:45 ninjax INFO    : The trial injection parameters are {'M_c': 1.546670393735638, 'eta': 0.246038087113785, 's1_z': 0.032663433350777066, 's2_z': -0.04952262173323496, 'lambda_1': 21.48660030312804, 'lambda_2': 161.03236685947928, 'd_L': 186.5383422173057, 'phase_c': 3.3267367407820467, 'iota': 1.1574276324600856, 't_c': -0.06264717378660553, 'psi': 2.4355208773960886, 'ra': 0.7326686593421526, 'dec': -0.28301256299814165}
10:45 ninjax INFO    : Injecting signals . . .
10:45 ninjax INFO    : self.ifos
10:45 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
10:45 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
10:45 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
10:45 ninjax INFO    : [-6.82860485e-24-4.27564294e-23j  2.50446800e-23-3.25734546e-23j
  4.47661762e-24+3.37467555e-23j ...
 -3.32740348e-24-6.77888757e-24j -3.98771560e-24+4.42596304e-24j
  4.27362151e-24-1.23435014e-23j]
10:45 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
10:45 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
10:45 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
10:45 ninjax INFO    : [ 2.12546238e-23-4.79911531e-23j -4.08592842e-23-1.82490340e-23j
 -1.54656516e-23+5.44274551e-23j ...
 -1.89641012e-23+1.70834601e-23j  4.01319473e-24+2.51783125e-23j
  1.55572954e-23-1.04942517e-23j]
10:45 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
10:45 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
10:45 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
10:45 ninjax INFO    : [ 2.53322556e-24+5.11170037e-23j -1.89314409e-23-2.92003771e-23j
  1.00938635e-23-2.61921774e-23j ...
 -4.06455469e-23-1.12670550e-24j -1.94506460e-23-5.38518283e-23j
 -9.86279097e-23-1.27107011e-23j]
10:45 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
10:45 ninjax INFO    : SNR for ifo H1 is 10.903294316626747
10:45 ninjax INFO    : SNR for ifo L1 is 12.489369019227924
10:45 ninjax INFO    : SNR for ifo V1 is 11.73201017804476
10:45 ninjax INFO    : The network SNR is 20.310249340448316
10:45 ninjax INFO    : Network SNR passes threshold
10:45 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
10:45 ninjax INFO    :    mass_1_source: 1.9378998114981316
10:45 ninjax INFO    :    mass_2_source: 1.5045398415922508
10:45 ninjax INFO    :    s1_z: 0.032663433350777066
10:45 ninjax INFO    :    s2_z: -0.04952262173323496
10:45 ninjax INFO    :    cos_iota: 0.4016965601338378
10:45 ninjax INFO    :    d_L: 186.5383422173057
10:45 ninjax INFO    :    t_c: -0.06264717378660553
10:45 ninjax INFO    :    phase_c: 3.3267367407820467
10:45 ninjax INFO    :    psi: 2.4355208773960886
10:45 ninjax INFO    :    ra: 0.7326686593421526
10:45 ninjax INFO    :    sin_dec: -0.27924963020057936
10:45 ninjax INFO    :    q: 0.7763764837920784
10:45 ninjax INFO    :    M_c: 1.546670393735638
10:45 ninjax INFO    :    eta: 0.246038087113785
10:45 ninjax INFO    :    iota: 1.1574276324600856
10:45 ninjax INFO    :    dec: -0.28301256299814165
10:45 ninjax INFO    :    lambda_1: 21.48660030312804
10:45 ninjax INFO    :    lambda_2: 161.03236685947928
10:45 ninjax INFO    :    H1_SNR: 10.903294316626747
10:45 ninjax INFO    :    L1_SNR: 12.489369019227924
10:45 ninjax INFO    :    V1_SNR: 11.73201017804476
10:45 ninjax INFO    :    network_SNR: 20.310249340448316
10:45 ninjax INFO    :    epoch: 126.0
10:45 ninjax INFO    :    gmst: 2.7288901910520846
10:45 ninjax INFO    :    duration: 128.0
10:45 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
10:45 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
10:45 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
10:48 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 140.96371698379517 seconds = 2.3493952830632527 minutes
10:48 ninjax INFO    : The priors are not modified after their initialization
10:48 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
10:48 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
10:48 ninjax INFO    : sample: {'M_c': Array([1.88804955, 1.43481391, 1.93785074], dtype=float64), 'q': Array([0.93081093, 0.47879379, 0.90885298], dtype=float64), 's1_z': Array([0.03651735, 0.04158228, 0.0217293 ], dtype=float64), 's2_z': Array([0.01290296, 0.04565975, 0.0218623 ], dtype=float64), 'lambda_1': Array([4449.02756316, 2101.30805138, 3583.77027877], dtype=float64), 'lambda_2': Array([3942.91832985, 3668.4737073 , 3246.22145293], dtype=float64), 'cos_iota': Array([0.42182056, 0.35825268, 0.04117179], dtype=float64), 'd_L': Array([964.38720494, 519.32721503, 676.87362093], dtype=float64), 't_c': Array([0.02068151, 0.05248829, 0.05890276], dtype=float64), 'phase_c': Array([2.65781385, 0.76562465, 0.69361436], dtype=float64), 'psi': Array([3.08684301, 2.15281954, 0.7620173 ], dtype=float64), 'ra': Array([1.8565832 , 0.12648144, 5.83774167], dtype=float64), 'sin_dec': Array([-0.2967205 , -0.06443494, -0.99691014], dtype=float64)}
10:48 ninjax INFO    : log_prob: [ -8.47370803 -24.62787075  -2.89011704]
10:48 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.9378998114981316, 'mass_2_source': 1.5045398415922508, 's1_z': 0.032663433350777066, 's2_z': -0.04952262173323496, 'cos_iota': 0.4016965601338378, 'd_L': 186.5383422173057, 't_c': -0.06264717378660553, 'phase_c': 3.3267367407820467, 'psi': 2.4355208773960886, 'ra': 0.7326686593421526, 'sin_dec': -0.27924963020057936, 'q': 0.7763764837920784, 'M_c': 1.546670393735638, 'eta': 0.246038087113785, 'iota': Array(1.15742763, dtype=float64, weak_type=True), 'dec': Array(-0.28301256, dtype=float64, weak_type=True), 'lambda_1': 21.48660030312804, 'lambda_2': 161.03236685947928, 'H1_SNR': 10.903294316626747, 'L1_SNR': 12.489369019227924, 'V1_SNR': 11.73201017804476, 'network_SNR': 20.310249340448316, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
10:48 ninjax INFO    : log_prob at the injection parameters is: 182.63949347553546
10:48 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
10:48 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
10:48 ninjax INFO    : Ninjax setup complete.
10:48 ninjax INFO    : Saving output to ./outdir/injection_5/
10:48 ninjax INFO    : Using polynomial learning rate scheduler
10:48 ninjax INFO    : The hyperparameters passed to flowMC and jim are
10:48 ninjax INFO    :    n_loop_training: 200
10:48 ninjax INFO    :    n_loop_production: 10
10:48 ninjax INFO    :    n_local_steps: 100
10:48 ninjax INFO    :    n_global_steps: 1000
10:48 ninjax INFO    :    n_epochs: 25
10:48 ninjax INFO    :    n_chains: 1000
10:48 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x14b5684cc310>
10:48 ninjax INFO    :    max_samples: 50000
10:48 ninjax INFO    :    momentum: 0.9
10:48 ninjax INFO    :    batch_size: 30000
10:48 ninjax INFO    :    use_global: True
10:48 ninjax INFO    :    keep_quantile: 0.0
10:48 ninjax INFO    :    train_thinning: 10
10:48 ninjax INFO    :    output_thinning: 50
10:48 ninjax INFO    :    n_sample_max: 10000
10:48 ninjax INFO    :    num_layers: 10
10:48 ninjax INFO    :    hidden_size: [128, 128]
10:48 ninjax INFO    :    num_bins: 8
10:48 ninjax INFO    :    save_training_chains: False
10:48 ninjax INFO    :    eps_mass_matrix: 1e-05
10:48 ninjax INFO    :    use_scheduler: True
10:48 ninjax INFO    :    use_temperature: False
10:48 ninjax INFO    :    which_temperature_schedule: exponential
10:48 ninjax INFO    :    starting_temperature: 2.0
10:48 ninjax INFO    :    stop_tempering_iteration: 75
10:48 ninjax INFO    :    stopping_criterion_global_acc: 0.1
10:48 ninjax INFO    :    stopping_criterion_loss: -inf
10:48 ninjax INFO    :    nf_model_kwargs: {}
10:48 ninjax INFO    :    local sampler arg not shown (pretty print)
10:48 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[-1.77992101e-22 -1.30828318e-23  6.19573850e-24  1.09282669e-22
 -4.52192706e-23 -5.51380939e-24 -1.73848061e-22  9.42642310e-23
  5.92502487e-23 -4.11449362e-23]
[-7.87663410e-23 -5.18555682e-23  9.11793564e-23 -3.43359456e-23
 -3.58010294e-24  4.43538152e-23 -7.27680241e-23  5.04215930e-23
 -4.31065046e-23 -8.72058478e-23]
Checking the noise that was generated in inject_signal ifo:
[ 7.96216479e-23  6.89601632e-23 -9.83541423e-24 -1.14347960e-23
  6.05339739e-23 -8.30963093e-23 -4.36831724e-23  1.19414891e-22
 -7.01948009e-23 -4.61852959e-23]
[ 1.46718204e-23 -2.70841111e-23 -8.76436810e-24  1.59790295e-22
  1.29326100e-23 -1.29100781e-23 -7.73100542e-24  4.87242402e-23
 -4.38873700e-23  1.06867808e-22]
Checking the noise that was generated in inject_signal ifo:
[-2.91589753e-23 -8.54110606e-23  2.32947714e-23 -1.12303526e-22
 -3.22138323e-23 -7.98124918e-23  2.95407645e-24 -1.04864913e-23
  2.03197847e-23 -2.40936767e-23]
[ 2.26136364e-23 -1.50240109e-23 -7.26924653e-23 -6.94965030e-23
 -3.34632679e-24 -8.77623100e-24 -7.97076994e-23 -1.08442281e-23
  5.55218884e-23 -3.91076552e-23]
Checking the noise that was generated in inject_signal ifo:
[-1.18449953e-23  2.22784629e-23  5.97268126e-24 -3.76678027e-23
 -2.53302276e-23  6.83600531e-23  2.08291759e-24 -1.21277255e-23
 -4.40929307e-23  7.66092134e-24]
[-4.21757683e-23 -2.83513663e-23  3.85651013e-23 -4.27004653e-24
 -4.16044471e-23  2.09431028e-23  5.32056924e-23 -9.77767516e-24
 -7.49213444e-24 -1.04135093e-22]
Checking the noise that was generated in inject_signal ifo:
[ 2.70340044e-23 -3.69717730e-23 -1.62920907e-23  3.62680594e-23
  4.36850600e-24 -1.66240793e-23  4.79165769e-23  8.33111399e-23
 -8.24700993e-23  7.56484568e-23]
[-4.77483337e-23 -2.25288488e-23  4.87076690e-23 -5.59542985e-23
 -5.52997966e-25 -2.70953288e-23 -5.86741047e-23 -3.20138617e-23
 -7.98488300e-23 -4.37303167e-23]
Checking the noise that was generated in inject_signal ifo:
[ 7.98044783e-24 -1.22014371e-23  1.32247319e-23  2.58876223e-23
 -1.43241396e-23 -4.42705181e-23 -5.09418105e-23  9.37879724e-23
 -4.34264595e-23 -3.59798052e-23]
[ 5.53432995e-23 -3.06827142e-23 -3.23276858e-23  4.66478251e-23
 -8.89746245e-23  6.86890704e-23  6.75849865e-24  3.67143935e-23
  3.85680401e-23  2.67172528e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.10879349708557129 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.9378998114981316, 'mass_2_source': 1.5045398415922508, 's1_z': 0.032663433350777066, 's2_z': -0.04952262173323496, 'cos_iota': 0.4016965601338378, 'd_L': 186.5383422173057, 't_c': -0.06264717378660553, 'phase_c': 3.3267367407820467, 'psi': 2.4355208773960886, 'ra': 0.7326686593421526, 'sin_dec': -0.27924963020057936, 'q': 0.7763764837920784, 'M_c': 1.546670393735638, 'eta': 0.246038087113785, 'iota': Array(1.15742763, dtype=float64, weak_type=True), 'dec': Array(-0.28301256, dtype=float64, weak_type=True), 'lambda_1': 21.48660030312804, 'lambda_2': 161.03236685947928, 'H1_SNR': 10.903294316626747, 'L1_SNR': 12.489369019227924, 'V1_SNR': 11.73201017804476, 'network_SNR': 20.310249340448316, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5145614147186279 seconds
Time for h_sky_low and h_sky_center: 5.2890400886535645 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.691878080368042
Going to compute coefficients . . .
Time for computing coefficients: 119.9494206905365 seconds
Time for computing coefficients: 6.985342979431152 seconds
Time for computing coefficients: 6.891604661941528 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:01<6:44:03, 121.82s/it]Tuning global sampler:   1%|          | 2/200 [02:06<2:54:20, 52.83s/it] Tuning global sampler:   2%|▏         | 3/200 [02:10<1:41:08, 30.81s/it]Tuning global sampler:   2%|▏         | 4/200 [02:15<1:06:47, 20.45s/it]Tuning global sampler:   2%|▎         | 5/200 [02:21<48:55, 15.05s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:25<37:08, 11.49s/it]Tuning global sampler:   4%|▎         | 7/200 [02:30<29:36,  9.21s/it]Tuning global sampler:   4%|▍         | 8/200 [02:34<24:43,  7.73s/it]Tuning global sampler:   4%|▍         | 9/200 [02:39<21:23,  6.72s/it]Tuning global sampler:   5%|▌         | 10/200 [02:43<19:00,  6.00s/it]Tuning global sampler:   6%|▌         | 11/200 [02:48<17:30,  5.56s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:27,  5.25s/it]Tuning global sampler:   6%|▋         | 13/200 [02:57<15:41,  5.03s/it]Tuning global sampler:   7%|▋         | 14/200 [03:01<15:12,  4.90s/it]Tuning global sampler:   8%|▊         | 15/200 [03:06<14:50,  4.81s/it]Tuning global sampler:   8%|▊         | 16/200 [03:11<14:34,  4.75s/it]Tuning global sampler:   8%|▊         | 17/200 [03:15<14:21,  4.71s/it]Tuning global sampler:   9%|▉         | 18/200 [03:20<14:10,  4.67s/it]Tuning global sampler:  10%|▉         | 19/200 [03:24<14:02,  4.65s/it]Tuning global sampler:  10%|█         | 20/200 [03:29<13:54,  4.64s/it]Tuning global sampler:  10%|█         | 21/200 [03:34<13:48,  4.63s/it]Tuning global sampler:  11%|█         | 22/200 [03:38<13:40,  4.61s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:44<14:25,  4.89s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:48<13:54,  4.74s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:52<13:30,  4.63s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:57<13:11,  4.55s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:01<12:57,  4.49s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:05<12:46,  4.46s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:10<12:37,  4.43s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:14<12:30,  4.41s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:19<12:22,  4.39s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:23<12:16,  4.38s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:27<12:08,  4.36s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:32<12:02,  4.35s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:36<11:58,  4.35s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:40<11:54,  4.35s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:45<11:49,  4.35s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:49<11:45,  4.35s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:53<11:40,  4.35s/it]Tuning global sampler:  20%|██        | 40/200 [04:58<11:36,  4.35s/it]Tuning global sampler:  20%|██        | 41/200 [05:02<11:32,  4.35s/it]Tuning global sampler:  21%|██        | 42/200 [05:07<12:14,  4.65s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:12<11:57,  4.57s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:16<11:41,  4.50s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:20<11:29,  4.45s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:25<11:20,  4.42s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:29<11:13,  4.40s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:33<11:06,  4.39s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:38<11:01,  4.38s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:42<10:55,  4.37s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:47<10:50,  4.37s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:51<10:46,  4.37s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:55<10:41,  4.37s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:00<10:37,  4.37s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:04<10:31,  4.35s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:08<10:25,  4.34s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:13<10:22,  4.35s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:17<10:19,  4.36s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:21<10:14,  4.36s/it]Tuning global sampler:  30%|███       | 60/200 [06:26<10:10,  4.36s/it]Tuning global sampler:  30%|███       | 61/200 [06:30<10:13,  4.41s/it]Tuning global sampler:  31%|███       | 62/200 [06:36<10:48,  4.70s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:40<10:31,  4.61s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:44<10:16,  4.53s/it]Tuning global sampler:  32%|███▎      | 65/200 [06:49<10:04,  4.48s/it]Tuning global sampler:  33%|███▎      | 66/200 [06:53<09:53,  4.43s/it]Tuning global sampler:  34%|███▎      | 67/200 [06:57<09:45,  4.41s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:02<09:39,  4.39s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:06<13:48,  6.27s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.20s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.20s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.20s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.20s/it]Production run:  50%|█████     | 5/10 [00:15<00:15,  3.20s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.20s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.20s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.20s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.20s/it]Production run: 100%|██████████| 10/10 [00:31<00:00,  3.20s/it]Production run: 100%|██████████| 10/10 [00:31<00:00,  3.20s/it]
10:56 ninjax INFO    : Saving samples to ./outdir/injection_5/results_training.npz
10:56 ninjax INFO    : Saving the NF
10:56 ninjax INFO    : Time taken: 465.91251611709595 seconds (7.765208601951599 minutes)
10:56 ninjax INFO    : Creating the final corner plot
10:56 ninjax INFO    : Dumping the final production chains
10:56 ninjax INFO    : Chains shape is: (13, 220000)
10:56 ninjax INFO    : Key: M_c: ESS = 45445, Rhat = 1.0171841701332276
10:56 ninjax INFO    : Key: q: ESS = 26835, Rhat = 1.0239200120371532
10:56 ninjax INFO    : Key: s1_z: ESS = 49741, Rhat = 1.0143008356964405
10:56 ninjax INFO    : Key: s2_z: ESS = 28821, Rhat = 1.0226111356845171
10:56 ninjax INFO    : Key: lambda_1: ESS = 34239, Rhat = 1.019508877761611
10:56 ninjax INFO    : Key: lambda_2: ESS = 43304, Rhat = 1.016293916856678
10:56 ninjax INFO    : Key: cos_iota: ESS = 22651, Rhat = 1.0279066643353654
10:56 ninjax INFO    : Key: d_L: ESS = 22427, Rhat = 1.0275605206036533
10:56 ninjax INFO    : Key: t_c: ESS = 30606, Rhat = 1.0207767767020657
10:56 ninjax INFO    : Key: phase_c: ESS = 19942, Rhat = 1.0313297879853018
10:56 ninjax INFO    : Key: psi: ESS = 26978, Rhat = 1.0241476635443476
10:56 ninjax INFO    : Key: ra: ESS = 28916, Rhat = 1.0220929788042927
10:56 ninjax INFO    : Key: sin_dec: ESS = 28178, Rhat = 1.0228915313260936
10:56 ninjax INFO    : Key: eta: ESS = 26835, Rhat = 1.0239200120371532
10:56 ninjax INFO    : Key: iota: ESS = 22651, Rhat = 1.0279066643353654
10:56 ninjax INFO    : Key: dec: ESS = 28178, Rhat = 1.0228915313260936
10:56 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.560 +/- 0.173
q: 0.718 +/- 0.200
s1_z: 0.001 +/- 0.027
s2_z: 0.004 +/- 0.027
lambda_1: 1674.455 +/- 1478.740
lambda_2: 1772.546 +/- 1416.387
cos_iota: 0.377 +/- 0.522
d_L: 562.022 +/- 262.125
t_c: -0.054 +/- 0.031
phase_c: 2.871 +/- 1.759
psi: 1.677 +/- 0.877
ra: 1.239 +/- 1.255
sin_dec: -0.139 +/- 0.355
Log probability: 79.033 +/- 79.927
Local acceptance: 0.913 +/- 0.281
Global acceptance: 0.012 +/- 0.108
Max loss: 22.756, Min loss: 6.908
Production summary
==========
M_c: 1.547 +/- 0.000
q: 0.825 +/- 0.107
s1_z: 0.003 +/- 0.026
s2_z: -0.000 +/- 0.028
lambda_1: 225.175 +/- 202.578
lambda_2: 408.194 +/- 350.483
cos_iota: 0.777 +/- 0.172
d_L: 274.426 +/- 50.447
t_c: -0.062 +/- 0.001
phase_c: 3.045 +/- 1.813
psi: 1.585 +/- 0.877
ra: 0.714 +/- 0.024
sin_dec: -0.292 +/- 0.037
Log probability: 178.368 +/- 2.254
Local acceptance: 0.774 +/- 0.418
Global acceptance: 0.110 +/- 0.312
DONE

JOB STATISTICS
==============
Job ID: 10858904
Cluster: snellius
User/Group: twouters2/twouters2
State: RUNNING
Nodes: 1
Cores per node: 16
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 02:56:48 core-walltime
Job Wall-clock time: 00:11:03
Memory Utilized: 0.00 MB (estimated maximum)
Memory Efficiency: 0.00% of 10.00 GB (10.00 GB/node)
WARNING: Efficiency statistics may be misleading for RUNNING jobs.
