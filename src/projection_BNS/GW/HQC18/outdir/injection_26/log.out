Thu Mar 27 21:29:32 CET 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
21:29 ninjax INFO    : Checking and setting outdir
21:29 ninjax INFO    : The outdir is set to ./outdir/injection_26
21:29 ninjax INFO    : Loading the given config
21:29 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
21:29 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
21:29 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/HQC18/outdir/injection_26/complete_config.json
21:29 ninjax INFO    : No seed specified. Generating a random seed: 258165
21:29 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 592372
21:29 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 582972
21:29 ninjax INFO    : Loading the priors
21:29 ninjax INFO    :    Mc_prior = Uniform(1.0, 2.2, naming=["M_c"])
21:29 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
21:29 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
21:29 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
21:29 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
21:29 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
21:29 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
21:29 ninjax INFO    :    dL_prior = PowerLaw(1.0, 460.0, 2.0, naming=["d_L"])
21:29 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
21:29 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
21:29 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
21:29 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
21:29 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
21:29 ninjax INFO    : Finished prior setup
21:29 ninjax INFO    : Setting the transforms
21:29 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
21:29 ninjax INFO    : transforms_str_list has 3 elements
21:29 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
21:29 ninjax INFO    : Setting the likelihood
21:29 ninjax INFO    : GW likelihood provided, setting up the GW pipe
21:29 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz
21:29 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz for BNS injections
21:29 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
21:29 ninjax INFO    : self.is_BNS_run is True
21:29 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
21:29 ninjax INFO    : GW run is an injection
21:29 ninjax INFO    : Setting up GW injection . . . 
21:29 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
21:29 ninjax INFO    : Generating new injection
21:29 ninjax INFO    : Sanity check: generated parameters:
21:29 ninjax INFO    : {'M_c': 2.140176469063443, 'q': 0.16696987076053058, 's1_z': 0.02047444356687171, 's2_z': -0.003082674927401309, 'lambda_1': 4390.359961940055, 'lambda_2': 1491.3042985691393, 'cos_iota': -0.8915994637069349, 'd_L': 87.78616827616526, 't_c': -0.07897977523898062, 'phase_c': 1.3953679770679799, 'psi': 0.21121145007215952, 'ra': 0.15105255231116357, 'sin_dec': -0.7293496664835715}
21:29 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz . . . 
21:29 ninjax INFO    : Injected lambda_1: 7.039733026387287
21:29 ninjax INFO    : Injected lambda_2: 1233.6376947170354
21:29 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 2.140176469063443 is 64.0
21:29 ninjax INFO    : After transforms, the injection parameters are:
21:29 ninjax INFO    : {'M_c': 2.140176469063443, 'q': 0.16696987076053058, 's1_z': 0.02047444356687171, 's2_z': -0.003082674927401309, 'lambda_1': 7.039733026387287, 'lambda_2': 1233.6376947170354, 'cos_iota': -0.8915994637069349, 'd_L': 87.78616827616526, 't_c': -0.07897977523898062, 'phase_c': 1.3953679770679799, 'psi': 0.21121145007215952, 'ra': 0.15105255231116357, 'sin_dec': -0.7293496664835715, 'eta': 0.12260800450388237, 'iota': Array(2.6716615, dtype=float64, weak_type=True), 'dec': Array(-0.81737088, dtype=float64, weak_type=True)}
21:29 ninjax INFO    : The trial injection parameters are {'M_c': 2.140176469063443, 'eta': 0.12260800450388237, 's1_z': 0.02047444356687171, 's2_z': -0.003082674927401309, 'lambda_1': 7.039733026387287, 'lambda_2': 1233.6376947170354, 'd_L': 87.78616827616526, 'phase_c': 1.3953679770679799, 'iota': 2.671661495648628, 't_c': -0.07897977523898062, 'psi': 0.21121145007215952, 'ra': 0.15105255231116357, 'dec': -0.817370884456365}
21:29 ninjax INFO    : Injecting signals . . .
21:29 ninjax INFO    : self.ifos
21:29 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
21:29 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
21:29 ninjax INFO    : [  20.         20.015625   20.03125  ... 2047.953125 2047.96875
 2047.984375]
21:29 ninjax INFO    : [ 3.85698062e-23-6.04708919e-23j  2.32432695e-23+9.67161889e-24j
 -6.26363248e-23+1.81348077e-23j ...
  1.13645493e-23+1.53374074e-23j -6.40762924e-25+2.34838944e-24j
 -1.92270850e-23-1.35789757e-23j]
21:29 ninjax INFO    : [1.44906511e-46 1.44435812e-46 1.43973008e-46 ... 2.17771234e-47
 2.17774337e-47 2.17777440e-47]
21:29 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
21:29 ninjax INFO    : [  20.         20.015625   20.03125  ... 2047.953125 2047.96875
 2047.984375]
21:29 ninjax INFO    : [ 9.59016202e-24+2.67218456e-23j  5.56535312e-24-3.32293565e-23j
  3.40604677e-23+9.51983021e-24j ...
 -5.95113628e-24+5.92246177e-24j -1.47488095e-23+8.17053568e-24j
  7.25964560e-26-5.71585854e-25j]
21:29 ninjax INFO    : [1.44906511e-46 1.44435812e-46 1.43973008e-46 ... 2.17771234e-47
 2.17774337e-47 2.17777440e-47]
21:29 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
21:29 ninjax INFO    : [  20.         20.015625   20.03125  ... 2047.953125 2047.96875
 2047.984375]
21:29 ninjax INFO    : [ 2.86822952e-23-6.62299284e-23j  2.59501284e-23+6.25208412e-24j
  3.21291635e-23+2.19225797e-24j ...
 -8.56285273e-24+2.32136103e-23j  2.69068724e-24+1.47213644e-23j
  1.41096474e-23-2.97265624e-23j]
21:29 ninjax INFO    : [1.43183556e-46 1.42688205e-46 1.42194425e-46 ... 6.39772204e-47
 6.39781464e-47 6.39790724e-47]
21:29 ninjax INFO    : SNR for ifo H1 is 18.878177484513262
21:29 ninjax INFO    : SNR for ifo L1 is 13.081956913452684
21:29 ninjax INFO    : SNR for ifo V1 is 70.35997930266211
21:29 ninjax INFO    : The network SNR is 74.01384917225462
21:29 ninjax INFO    : Network SNR passes threshold
21:29 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
21:29 ninjax INFO    :    M_c: 2.140176469063443
21:29 ninjax INFO    :    q: 0.16696987076053058
21:29 ninjax INFO    :    s1_z: 0.02047444356687171
21:29 ninjax INFO    :    s2_z: -0.003082674927401309
21:29 ninjax INFO    :    lambda_1: 7.039733026387287
21:29 ninjax INFO    :    lambda_2: 1233.6376947170354
21:29 ninjax INFO    :    cos_iota: -0.8915994637069349
21:29 ninjax INFO    :    d_L: 87.78616827616526
21:29 ninjax INFO    :    t_c: -0.07897977523898062
21:29 ninjax INFO    :    phase_c: 1.3953679770679799
21:29 ninjax INFO    :    psi: 0.21121145007215952
21:29 ninjax INFO    :    ra: 0.15105255231116357
21:29 ninjax INFO    :    sin_dec: -0.7293496664835715
21:29 ninjax INFO    :    eta: 0.12260800450388237
21:29 ninjax INFO    :    iota: 2.671661495648628
21:29 ninjax INFO    :    dec: -0.817370884456365
21:29 ninjax INFO    :    H1_SNR: 18.878177484513262
21:29 ninjax INFO    :    L1_SNR: 13.081956913452684
21:29 ninjax INFO    :    V1_SNR: 70.35997930266211
21:29 ninjax INFO    :    network_SNR: 74.01384917225462
21:29 ninjax INFO    :    epoch: 62.0
21:29 ninjax INFO    :    gmst: 2.7288901910520846
21:29 ninjax INFO    :    duration: 64.0
21:29 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
21:29 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
21:29 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
21:31 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 106.53270220756531 seconds = 1.7755450367927552 minutes
21:31 ninjax INFO    : The priors are not modified after their initialization
21:31 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
21:31 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
21:31 ninjax INFO    : sample: {'M_c': Array([1.5746262 , 1.57311503, 1.26202699], dtype=float64), 'q': Array([0.40124731, 0.81099631, 0.90560884], dtype=float64), 's1_z': Array([-0.03323494,  0.02571827, -0.04239085], dtype=float64), 's2_z': Array([ 0.01921376,  0.03097657, -0.01725476], dtype=float64), 'lambda_1': Array([1499.25853967,  328.94766827, 1050.52596269], dtype=float64), 'lambda_2': Array([3810.04607257, 3020.64085273, 1386.76083986], dtype=float64), 'cos_iota': Array([-0.9901311 , -0.69175059,  0.84084399], dtype=float64), 'd_L': Array([320.06370855, 404.14888804, 375.12841777], dtype=float64), 't_c': Array([0.09220881, 0.041797  , 0.00539415], dtype=float64), 'phase_c': Array([5.80373329, 2.37192419, 1.31201517], dtype=float64), 'psi': Array([1.90867875, 2.28528467, 2.25329493], dtype=float64), 'ra': Array([3.92199925, 2.09358899, 4.10514226], dtype=float64), 'sin_dec': Array([ 0.16258329, -0.19432951,  0.69250197], dtype=float64)}
21:31 ninjax INFO    : log_prob: [-210.60704131  -30.78433183  -58.85803176]
21:31 ninjax INFO    : Checking log_prob at injection parameters: {'M_c': 2.140176469063443, 'q': 0.16696987076053058, 's1_z': 0.02047444356687171, 's2_z': -0.003082674927401309, 'lambda_1': 7.039733026387287, 'lambda_2': 1233.6376947170354, 'cos_iota': -0.8915994637069349, 'd_L': 87.78616827616526, 't_c': -0.07897977523898062, 'phase_c': 1.3953679770679799, 'psi': 0.21121145007215952, 'ra': 0.15105255231116357, 'sin_dec': -0.7293496664835715, 'eta': 0.12260800450388237, 'iota': Array(2.6716615, dtype=float64, weak_type=True), 'dec': Array(-0.81737088, dtype=float64, weak_type=True), 'H1_SNR': 18.878177484513262, 'L1_SNR': 13.081956913452684, 'V1_SNR': 70.35997930266211, 'network_SNR': 74.01384917225462, 'epoch': 62.0, 'gmst': 2.7288901910520846, 'duration': 64.0}
21:31 ninjax INFO    : log_prob at the injection parameters is: 2775.500705191162
21:31 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
21:31 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
21:31 ninjax INFO    : Ninjax setup complete.
21:31 ninjax INFO    : Saving output to ./outdir/injection_26/
21:31 ninjax INFO    : Using polynomial learning rate scheduler
21:31 ninjax INFO    : The hyperparameters passed to flowMC and jim are
21:31 ninjax INFO    :    n_loop_training: 200
21:31 ninjax INFO    :    n_loop_production: 10
21:31 ninjax INFO    :    n_local_steps: 100
21:31 ninjax INFO    :    n_global_steps: 1000
21:31 ninjax INFO    :    n_epochs: 25
21:31 ninjax INFO    :    n_chains: 1000
21:31 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x14d057ee0310>
21:31 ninjax INFO    :    max_samples: 50000
21:31 ninjax INFO    :    momentum: 0.9
21:31 ninjax INFO    :    batch_size: 30000
21:31 ninjax INFO    :    use_global: True
21:31 ninjax INFO    :    keep_quantile: 0.0
21:31 ninjax INFO    :    train_thinning: 10
21:31 ninjax INFO    :    output_thinning: 50
21:31 ninjax INFO    :    n_sample_max: 10000
21:31 ninjax INFO    :    num_layers: 10
21:31 ninjax INFO    :    hidden_size: [128, 128]
21:31 ninjax INFO    :    num_bins: 8
21:31 ninjax INFO    :    save_training_chains: False
21:31 ninjax INFO    :    eps_mass_matrix: 1e-05
21:31 ninjax INFO    :    use_scheduler: True
21:31 ninjax INFO    :    use_temperature: False
21:31 ninjax INFO    :    which_temperature_schedule: exponential
21:31 ninjax INFO    :    starting_temperature: 2.0
21:31 ninjax INFO    :    stop_tempering_iteration: 75
21:31 ninjax INFO    :    stopping_criterion_global_acc: 0.1
21:31 ninjax INFO    :    stopping_criterion_loss: -inf
21:31 ninjax INFO    :    nf_model_kwargs: {}
21:31 ninjax INFO    :    local sampler arg not shown (pretty print)
21:31 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[ 3.02845699e-23  1.47780468e-23 -7.12199495e-23  2.43903597e-23
  8.12853659e-23  9.71021593e-24 -1.31611602e-23 -3.08674587e-23
 -5.37690533e-23 -1.74347062e-23]
[-5.66279115e-23  1.30774726e-23  2.12052829e-23  3.91829739e-23
  4.24834913e-23 -3.09739267e-23 -2.34490710e-23 -6.78737548e-23
 -6.23158944e-23 -4.85014175e-24]
Checking the noise that was generated in inject_signal ifo:
[ 1.35949052e-23  9.30694244e-24  3.75965766e-23  2.98370487e-23
 -2.86478557e-23 -2.70326336e-23 -2.52729166e-23  3.29064180e-23
  1.58719107e-23  1.41052824e-23]
[ 3.16226161e-23 -2.81320856e-23  1.47547067e-23 -1.44923671e-23
  1.22470797e-23  9.26114417e-24  8.40724387e-23  2.28132869e-24
  7.46382380e-23 -1.52125808e-23]
Checking the noise that was generated in inject_signal ifo:
[ 2.39576293e-24 -1.96505076e-24  3.05587326e-24  1.90386344e-23
 -3.40457520e-24 -8.73424331e-24 -7.60359337e-24 -1.08094749e-23
  5.36301556e-23 -3.74817288e-24]
[-3.24732718e-23  3.86227683e-23  3.34731758e-23 -6.19955599e-24
 -1.51941143e-23 -1.41023711e-23 -1.30650512e-23  7.53397475e-23
  5.74550275e-24 -2.39414306e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.07847118377685547 seconds
Using provided reference parameters:
ref_params for relative binning:
{'M_c': 2.140176469063443, 'q': 0.16696987076053058, 's1_z': 0.02047444356687171, 's2_z': -0.003082674927401309, 'lambda_1': 7.039733026387287, 'lambda_2': 1233.6376947170354, 'cos_iota': -0.8915994637069349, 'd_L': 87.78616827616526, 't_c': -0.07897977523898062, 'phase_c': 1.3953679770679799, 'psi': 0.21121145007215952, 'ra': 0.15105255231116357, 'sin_dec': -0.7293496664835715, 'eta': 0.12260800450388237, 'iota': Array(2.6716615, dtype=float64, weak_type=True), 'dec': Array(-0.81737088, dtype=float64, weak_type=True), 'H1_SNR': 18.878177484513262, 'L1_SNR': 13.081956913452684, 'V1_SNR': 70.35997930266211, 'network_SNR': 74.01384917225462, 'epoch': 62.0, 'gmst': 2.7288901910520846, 'duration': 64.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.49720215797424316 seconds
Time for h_sky_low and h_sky_center: 5.675556659698486 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.643204927444458
Going to compute coefficients . . .
Time for computing coefficients: 84.60148787498474 seconds
Time for computing coefficients: 7.2845139503479 seconds
Time for computing coefficients: 7.203023433685303 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:01<6:44:14, 121.88s/it]Tuning global sampler:   1%|          | 2/200 [02:06<2:54:29, 52.88s/it] Tuning global sampler:   2%|▏         | 3/200 [02:11<1:41:17, 30.85s/it]Tuning global sampler:   2%|▏         | 4/200 [02:16<1:07:56, 20.80s/it]Tuning global sampler:   2%|▎         | 5/200 [02:21<48:38, 14.97s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:25<37:03, 11.46s/it]Tuning global sampler:   4%|▎         | 7/200 [02:30<29:37,  9.21s/it]Tuning global sampler:   4%|▍         | 8/200 [02:34<24:48,  7.75s/it]Tuning global sampler:   4%|▍         | 9/200 [02:39<21:31,  6.76s/it]Tuning global sampler:   5%|▌         | 10/200 [02:43<19:08,  6.05s/it]Tuning global sampler:   6%|▌         | 11/200 [02:48<17:39,  5.61s/it]Tuning global sampler:   6%|▌         | 12/200 [02:53<16:38,  5.31s/it]Tuning global sampler:   6%|▋         | 13/200 [02:57<15:52,  5.10s/it]Tuning global sampler:   7%|▋         | 14/200 [03:02<15:24,  4.97s/it]Tuning global sampler:   8%|▊         | 15/200 [03:07<15:02,  4.88s/it]Tuning global sampler:   8%|▊         | 16/200 [03:11<14:46,  4.82s/it]Tuning global sampler:   8%|▊         | 17/200 [03:16<14:33,  4.77s/it]Tuning global sampler:   9%|▉         | 18/200 [03:21<14:22,  4.74s/it]Tuning global sampler:  10%|▉         | 19/200 [03:25<14:14,  4.72s/it]Tuning global sampler:  10%|█         | 20/200 [03:31<14:51,  4.95s/it]Tuning global sampler:  10%|█         | 21/200 [03:36<14:32,  4.87s/it]Tuning global sampler:  11%|█         | 22/200 [03:40<14:13,  4.80s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:45<14:00,  4.75s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:49<13:40,  4.66s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:54<13:22,  4.59s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:58<13:09,  4.54s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:03<12:58,  4.50s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:07<12:49,  4.48s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:11<12:43,  4.47s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:16<12:36,  4.45s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:20<12:30,  4.44s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:25<12:24,  4.43s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:29<12:17,  4.41s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:33<12:10,  4.40s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:38<12:06,  4.40s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:42<12:02,  4.41s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:47<12:40,  4.67s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:52<12:24,  4.59s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:56<12:10,  4.54s/it]Tuning global sampler:  20%|██        | 40/200 [05:01<12:00,  4.50s/it]Tuning global sampler:  20%|██        | 41/200 [05:05<11:52,  4.48s/it]Tuning global sampler:  21%|██        | 42/200 [05:10<11:46,  4.47s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:14<11:40,  4.46s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:18<11:33,  4.45s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:23<11:28,  4.44s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:27<11:24,  4.45s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:32<11:19,  4.44s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:36<11:15,  4.44s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:41<11:10,  4.44s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:45<11:06,  4.45s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:50<11:02,  4.45s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:54<10:57,  4.44s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:58<10:51,  4.43s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:03<10:46,  4.43s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:08<11:17,  4.67s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:12<11:00,  4.59s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:17<10:48,  4.53s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:21<10:38,  4.50s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:26<10:31,  4.48s/it]Tuning global sampler:  30%|███       | 60/200 [06:30<10:23,  4.46s/it]Tuning global sampler:  30%|███       | 61/200 [06:35<10:17,  4.44s/it]Tuning global sampler:  31%|███       | 62/200 [06:39<10:11,  4.43s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:43<10:06,  4.43s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:48<10:01,  4.43s/it]Tuning global sampler:  32%|███▎      | 65/200 [06:52<09:56,  4.42s/it]Tuning global sampler:  33%|███▎      | 66/200 [06:57<09:51,  4.41s/it]Tuning global sampler:  34%|███▎      | 67/200 [07:01<09:45,  4.40s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:05<09:41,  4.40s/it]Tuning global sampler:  34%|███▍      | 69/200 [07:10<09:37,  4.41s/it]Tuning global sampler:  35%|███▌      | 70/200 [07:14<09:32,  4.40s/it]Tuning global sampler:  36%|███▌      | 71/200 [07:19<09:28,  4.40s/it]Tuning global sampler:  36%|███▌      | 72/200 [07:23<09:23,  4.40s/it]Tuning global sampler:  36%|███▋      | 73/200 [07:27<09:19,  4.40s/it]Tuning global sampler:  37%|███▋      | 74/200 [07:33<09:49,  4.68s/it]Tuning global sampler:  38%|███▊      | 75/200 [07:37<09:34,  4.60s/it]Tuning global sampler:  38%|███▊      | 76/200 [07:42<09:23,  4.54s/it]Tuning global sampler:  38%|███▊      | 77/200 [07:46<09:12,  4.49s/it]Tuning global sampler:  39%|███▉      | 78/200 [07:50<09:03,  4.45s/it]Tuning global sampler:  40%|███▉      | 79/200 [07:55<08:57,  4.44s/it]Tuning global sampler:  40%|████      | 80/200 [07:59<08:51,  4.43s/it]Tuning global sampler:  40%|████      | 81/200 [08:03<08:46,  4.43s/it]Tuning global sampler:  41%|████      | 82/200 [08:08<08:41,  4.42s/it]Tuning global sampler:  42%|████▏     | 83/200 [08:12<08:36,  4.42s/it]Tuning global sampler:  42%|████▏     | 84/200 [08:17<08:32,  4.41s/it]Tuning global sampler:  42%|████▎     | 85/200 [08:21<08:27,  4.41s/it]Tuning global sampler:  43%|████▎     | 86/200 [08:26<08:22,  4.41s/it]Tuning global sampler:  44%|████▎     | 87/200 [08:30<08:18,  4.41s/it]Tuning global sampler:  44%|████▍     | 88/200 [08:34<08:13,  4.40s/it]Tuning global sampler:  44%|████▍     | 89/200 [08:39<08:07,  4.39s/it]Tuning global sampler:  45%|████▌     | 90/200 [08:43<08:03,  4.40s/it]Tuning global sampler:  46%|████▌     | 91/200 [08:48<07:59,  4.40s/it]Tuning global sampler:  46%|████▌     | 92/200 [08:52<07:55,  4.40s/it]Tuning global sampler:  46%|████▋     | 93/200 [08:56<07:52,  4.41s/it]Tuning global sampler:  47%|████▋     | 94/200 [09:02<08:18,  4.70s/it]Tuning global sampler:  48%|████▊     | 95/200 [09:06<08:05,  4.62s/it]Tuning global sampler:  48%|████▊     | 96/200 [09:11<07:54,  4.56s/it]Tuning global sampler:  48%|████▊     | 97/200 [09:15<07:46,  4.53s/it]Tuning global sampler:  49%|████▉     | 98/200 [09:19<07:39,  4.51s/it]Tuning global sampler:  50%|████▉     | 99/200 [09:24<07:31,  4.47s/it]Tuning global sampler:  50%|█████     | 100/200 [09:28<07:23,  4.44s/it]Tuning global sampler:  50%|█████     | 101/200 [09:33<07:18,  4.43s/it]Tuning global sampler:  51%|█████     | 102/200 [09:37<07:13,  4.42s/it]Tuning global sampler:  52%|█████▏    | 103/200 [09:41<07:09,  4.42s/it]Tuning global sampler:  52%|█████▏    | 104/200 [09:46<07:04,  4.43s/it]Tuning global sampler:  52%|█████▎    | 105/200 [09:50<07:00,  4.43s/it]Tuning global sampler:  53%|█████▎    | 106/200 [09:55<06:56,  4.43s/it]Tuning global sampler:  54%|█████▎    | 107/200 [09:59<06:52,  4.43s/it]Tuning global sampler:  54%|█████▍    | 108/200 [10:04<06:47,  4.43s/it]Tuning global sampler:  55%|█████▍    | 109/200 [10:08<06:43,  4.43s/it]Tuning global sampler:  55%|█████▌    | 110/200 [10:12<06:37,  4.42s/it]Tuning global sampler:  56%|█████▌    | 111/200 [10:17<06:32,  4.41s/it]Tuning global sampler:  56%|█████▌    | 112/200 [10:21<06:28,  4.42s/it]Tuning global sampler:  56%|█████▋    | 113/200 [10:26<06:24,  4.42s/it]Tuning global sampler:  57%|█████▋    | 114/200 [10:31<06:45,  4.72s/it]Tuning global sampler:  57%|█████▊    | 115/200 [10:36<06:33,  4.63s/it]Tuning global sampler:  58%|█████▊    | 116/200 [10:40<06:23,  4.57s/it]Tuning global sampler:  58%|█████▊    | 117/200 [10:44<06:15,  4.52s/it]Tuning global sampler:  59%|█████▉    | 118/200 [10:49<06:07,  4.48s/it]Tuning global sampler:  60%|█████▉    | 119/200 [10:53<06:01,  4.47s/it]Tuning global sampler:  60%|██████    | 120/200 [10:58<05:56,  4.45s/it]Tuning global sampler:  60%|██████    | 121/200 [11:02<05:50,  4.43s/it]Tuning global sampler:  61%|██████    | 122/200 [11:06<05:44,  4.42s/it]Tuning global sampler:  62%|██████▏   | 123/200 [11:11<05:40,  4.42s/it]Tuning global sampler:  62%|██████▏   | 124/200 [11:15<05:36,  4.42s/it]Tuning global sampler:  62%|██████▎   | 125/200 [11:20<05:31,  4.42s/it]Tuning global sampler:  63%|██████▎   | 126/200 [11:24<05:27,  4.43s/it]Tuning global sampler:  64%|██████▎   | 127/200 [11:29<05:23,  4.43s/it]Tuning global sampler:  64%|██████▎   | 127/200 [11:33<06:38,  5.46s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.22s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.22s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.22s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.22s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.22s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.22s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.22s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.22s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]
21:43 ninjax INFO    : Saving samples to ./outdir/injection_26/results_training.npz
21:43 ninjax INFO    : Saving the NF
21:43 ninjax INFO    : Time taken: 733.5152010917664 seconds (12.225253351529439 minutes)
21:43 ninjax INFO    : Creating the final corner plot
21:43 ninjax INFO    : Dumping the final production chains
21:43 ninjax INFO    : Chains shape is: (13, 220000)
21:44 ninjax INFO    : Key: M_c: ESS = 42088, Rhat = 1.0162015941376787
21:44 ninjax INFO    : Key: q: ESS = 40189, Rhat = 1.0169045020661762
21:44 ninjax INFO    : Key: s1_z: ESS = 38313, Rhat = 1.0174878481700542
21:44 ninjax INFO    : Key: s2_z: ESS = 46145, Rhat = 1.0141654895721666
21:44 ninjax INFO    : Key: lambda_1: ESS = 43771, Rhat = 1.0152431925168723
21:44 ninjax INFO    : Key: lambda_2: ESS = 61848, Rhat = 1.0114765815396458
21:44 ninjax INFO    : Key: cos_iota: ESS = 27427, Rhat = 1.0243733230037195
21:44 ninjax INFO    : Key: d_L: ESS = 31375, Rhat = 1.020843838281422
21:44 ninjax INFO    : Key: t_c: ESS = 42843, Rhat = 1.0155786321223166
21:44 ninjax INFO    : Key: phase_c: ESS = 41944, Rhat = 1.0161308338874964
21:44 ninjax INFO    : Key: psi: ESS = 46218, Rhat = 1.014915069677072
21:44 ninjax INFO    : Key: ra: ESS = 26932, Rhat = 1.0234076151263214
21:44 ninjax INFO    : Key: sin_dec: ESS = 23076, Rhat = 1.0267881455480468
21:44 ninjax INFO    : Key: eta: ESS = 40189, Rhat = 1.0169045020661762
21:44 ninjax INFO    : Key: iota: ESS = 27427, Rhat = 1.0235305787018294
21:44 ninjax INFO    : Key: dec: ESS = 23076, Rhat = 1.0267881455480468
21:44 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 2.138 +/- 0.056
q: 0.217 +/- 0.103
s1_z: -0.011 +/- 0.023
s2_z: -0.012 +/- 0.027
lambda_1: 1088.858 +/- 1465.424
lambda_2: 2334.512 +/- 1276.935
cos_iota: -0.580 +/- 0.518
d_L: 111.196 +/- 75.784
t_c: -0.056 +/- 0.033
phase_c: 3.238 +/- 1.329
psi: 1.973 +/- 0.852
ra: 0.803 +/- 1.395
sin_dec: -0.483 +/- 0.535
Log probability: 2251.791 +/- 807.485
Local acceptance: 0.526 +/- 0.499
Global acceptance: 0.016 +/- 0.124
Max loss: 413.790, Min loss: 1.197
Production summary
==========
M_c: 2.140 +/- 0.000
q: 0.178 +/- 0.009
s1_z: -0.009 +/- 0.024
s2_z: -0.001 +/- 0.029
lambda_1: 13.140 +/- 8.707
lambda_2: 2295.109 +/- 1389.909
cos_iota: -0.730 +/- 0.174
d_L: 74.609 +/- 13.959
t_c: -0.079 +/- 0.000
phase_c: 2.347 +/- 1.274
psi: 2.098 +/- 0.880
ra: 0.138 +/- 0.013
sin_dec: -0.724 +/- 0.003
Log probability: 2774.970 +/- 2.207
Local acceptance: 0.375 +/- 0.484
Global acceptance: 0.110 +/- 0.313
DONE

JOB STATISTICS
==============
Job ID: 10848218
Cluster: snellius
User/Group: twouters2/twouters2
State: RUNNING
Nodes: 1
Cores per node: 16
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 04:00:00 core-walltime
Job Wall-clock time: 00:15:00
Memory Utilized: 0.00 MB (estimated maximum)
Memory Efficiency: 0.00% of 10.00 GB (10.00 GB/node)
WARNING: Efficiency statistics may be misleading for RUNNING jobs.
