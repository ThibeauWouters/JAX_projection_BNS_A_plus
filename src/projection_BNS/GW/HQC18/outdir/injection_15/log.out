Fri Mar 28 12:52:59 CET 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
12:53 ninjax INFO    : Checking and setting outdir
12:53 ninjax INFO    : Found generation prior file ./outdir/injection_15/generation_prior.prior
12:53 ninjax INFO    : The outdir is set to ./outdir/injection_15
12:53 ninjax INFO    : Loading the given config
12:53 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
12:53 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
12:53 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/HQC18/outdir/injection_15/complete_config.json
12:53 ninjax INFO    : No seed specified. Generating a random seed: 490294
12:53 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 132
12:53 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 649482
12:53 ninjax INFO    : Loading the priors
12:53 ninjax INFO    : Setting up the prior
12:53 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
12:53 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
12:53 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
12:53 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
12:53 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
12:53 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
12:53 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
12:53 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
12:53 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
12:53 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
12:53 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
12:53 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
12:53 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
12:53 ninjax INFO    : Setting up the generation prior
12:53 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.0452447532113593, naming=["mass_1_source"])
12:53 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.0452447532113593, naming=["mass_2_source"])
12:53 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
12:53 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
12:53 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
12:53 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
12:53 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
12:53 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
12:53 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
12:53 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
12:53 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
12:53 ninjax INFO    : Finished prior setup
12:53 ninjax INFO    : Setting the transforms
12:53 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
12:53 ninjax INFO    : transforms_str_list has 3 elements
12:53 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
12:53 ninjax INFO    : Setting the likelihood
12:53 ninjax INFO    : GW likelihood provided, setting up the GW pipe
12:53 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz
12:53 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz for BNS injections
12:53 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
12:53 ninjax INFO    : self.is_BNS_run is True
12:53 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
12:53 ninjax INFO    : GW run is an injection
12:53 ninjax INFO    : Setting up GW injection . . . 
12:53 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
12:53 ninjax INFO    : Generating new injection
12:53 ninjax INFO    : Sanity check: generated parameters:
12:53 ninjax INFO    : {'mass_1_source': 1.9840880035275723, 'mass_2_source': 1.4047790015644688, 's1_z': 0.01734334317461242, 's2_z': -0.007005064197561819, 'cos_iota': -0.8056002167234646, 'd_L': 254.83682256447239, 't_c': 0.07004227699847868, 'phase_c': 3.4390311906312694, 'psi': 2.4279710898819626, 'ra': 3.9642672308145683, 'sin_dec': -0.7054472233040525}
12:53 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz . . . 
12:53 ninjax INFO    : Injected lambda_1: 15.86839717663012
12:53 ninjax INFO    : Injected lambda_2: 251.66353754150288
12:53 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.5325141891654075 is 128.0
12:53 ninjax INFO    : After transforms, the injection parameters are:
12:53 ninjax INFO    : {'mass_1_source': 1.9840880035275723, 'mass_2_source': 1.4047790015644688, 's1_z': 0.01734334317461242, 's2_z': -0.007005064197561819, 'cos_iota': -0.8056002167234646, 'd_L': 254.83682256447239, 't_c': 0.07004227699847868, 'phase_c': 3.4390311906312694, 'psi': 2.4279710898819626, 'ra': 3.9642672308145683, 'sin_dec': -0.7054472233040525, 'q': 0.7080225267563073, 'M_c': 1.5325141891654075, 'eta': 0.24269447364165264, 'iota': Array(2.50748419, dtype=float64, weak_type=True), 'dec': Array(-0.78305394, dtype=float64, weak_type=True), 'lambda_1': 15.86839717663012, 'lambda_2': 251.66353754150288}
12:53 ninjax INFO    : The trial injection parameters are {'M_c': 1.5325141891654075, 'eta': 0.24269447364165264, 's1_z': 0.01734334317461242, 's2_z': -0.007005064197561819, 'lambda_1': 15.86839717663012, 'lambda_2': 251.66353754150288, 'd_L': 254.83682256447239, 'phase_c': 3.4390311906312694, 'iota': 2.507484191550702, 't_c': 0.07004227699847868, 'psi': 2.4279710898819626, 'ra': 3.9642672308145683, 'dec': -0.7830539396765811}
12:53 ninjax INFO    : Injecting signals . . .
12:53 ninjax INFO    : self.ifos
12:53 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
12:53 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
12:53 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
12:53 ninjax INFO    : [-2.00936533e-23+4.86415318e-23j -2.38627265e-23+1.26138976e-22j
 -6.46798208e-23+1.77019171e-23j ...
 -4.64500213e-24-1.41251022e-23j  7.57067755e-24+1.20460159e-23j
 -5.44657547e-23-2.25822988e-23j]
12:53 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
12:53 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
12:53 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
12:53 ninjax INFO    : [-8.97875766e-24+9.23533399e-23j -2.22258996e-23-1.08835975e-23j
  4.72750990e-25+1.84823425e-23j ...
  2.58535598e-24+2.43788940e-23j  8.19859801e-24-2.96270755e-23j
 -6.51699098e-24-1.11045081e-23j]
12:53 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
12:53 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
12:53 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
12:53 ninjax INFO    : [ 6.41554996e-23-2.21771183e-23j  5.31127999e-23-2.83847832e-23j
  8.76186005e-23-1.49250105e-24j ...
  6.51946615e-24-1.75050493e-23j -1.36607315e-23-3.20576151e-23j
 -2.48870291e-23-4.77637478e-24j]
12:53 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
12:53 ninjax INFO    : SNR for ifo H1 is 22.99173790076265
12:53 ninjax INFO    : SNR for ifo L1 is 21.766140342413657
12:53 ninjax INFO    : SNR for ifo V1 is 5.814405972686335
12:53 ninjax INFO    : The network SNR is 32.18993932765676
12:53 ninjax INFO    : Network SNR passes threshold
12:53 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
12:53 ninjax INFO    :    mass_1_source: 1.9840880035275723
12:53 ninjax INFO    :    mass_2_source: 1.4047790015644688
12:53 ninjax INFO    :    s1_z: 0.01734334317461242
12:53 ninjax INFO    :    s2_z: -0.007005064197561819
12:53 ninjax INFO    :    cos_iota: -0.8056002167234646
12:53 ninjax INFO    :    d_L: 254.83682256447239
12:53 ninjax INFO    :    t_c: 0.07004227699847868
12:53 ninjax INFO    :    phase_c: 3.4390311906312694
12:53 ninjax INFO    :    psi: 2.4279710898819626
12:53 ninjax INFO    :    ra: 3.9642672308145683
12:53 ninjax INFO    :    sin_dec: -0.7054472233040525
12:53 ninjax INFO    :    q: 0.7080225267563073
12:53 ninjax INFO    :    M_c: 1.5325141891654075
12:53 ninjax INFO    :    eta: 0.24269447364165264
12:53 ninjax INFO    :    iota: 2.507484191550702
12:53 ninjax INFO    :    dec: -0.7830539396765811
12:53 ninjax INFO    :    lambda_1: 15.86839717663012
12:53 ninjax INFO    :    lambda_2: 251.66353754150288
12:53 ninjax INFO    :    H1_SNR: 22.99173790076265
12:53 ninjax INFO    :    L1_SNR: 21.766140342413657
12:53 ninjax INFO    :    V1_SNR: 5.814405972686335
12:53 ninjax INFO    :    network_SNR: 32.18993932765676
12:53 ninjax INFO    :    epoch: 126.0
12:53 ninjax INFO    :    gmst: 2.7288901910520846
12:53 ninjax INFO    :    duration: 128.0
12:53 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
12:53 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
12:53 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
12:55 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 141.37789726257324 seconds = 2.356298287709554 minutes
12:55 ninjax INFO    : The priors are not modified after their initialization
12:55 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
12:55 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
12:55 ninjax INFO    : sample: {'M_c': Array([2.41843853, 1.2636701 , 1.25676557], dtype=float64), 'q': Array([0.99997885, 0.14479261, 0.52902008], dtype=float64), 's1_z': Array([ 0.00630783,  0.02486575, -0.04948207], dtype=float64), 's2_z': Array([-0.02395579,  0.03101362, -0.00332423], dtype=float64), 'lambda_1': Array([2605.45672127, 1235.75793544, 1102.57174006], dtype=float64), 'lambda_2': Array([2416.52941792, 1233.46187918,  233.25470042], dtype=float64), 'cos_iota': Array([ 0.85951217, -0.07732094,  0.45862092], dtype=float64), 'd_L': Array([846.94559162, 715.24137504, 503.16889093], dtype=float64), 't_c': Array([0.02837176, 0.07102813, 0.09695577], dtype=float64), 'phase_c': Array([4.78910294, 3.14251068, 1.81491254], dtype=float64), 'psi': Array([2.78763078, 1.44599359, 2.26886609], dtype=float64), 'ra': Array([0.71978798, 3.18356005, 1.17963475], dtype=float64), 'sin_dec': Array([ 0.68170561,  0.77084886, -0.99511636], dtype=float64)}
12:55 ninjax INFO    : log_prob: [-101.78079587   -0.16912502  -17.33246501]
12:55 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.9840880035275723, 'mass_2_source': 1.4047790015644688, 's1_z': 0.01734334317461242, 's2_z': -0.007005064197561819, 'cos_iota': -0.8056002167234646, 'd_L': 254.83682256447239, 't_c': 0.07004227699847868, 'phase_c': 3.4390311906312694, 'psi': 2.4279710898819626, 'ra': 3.9642672308145683, 'sin_dec': -0.7054472233040525, 'q': 0.7080225267563073, 'M_c': 1.5325141891654075, 'eta': 0.24269447364165264, 'iota': Array(2.50748419, dtype=float64, weak_type=True), 'dec': Array(-0.78305394, dtype=float64, weak_type=True), 'lambda_1': 15.86839717663012, 'lambda_2': 251.66353754150288, 'H1_SNR': 22.99173790076265, 'L1_SNR': 21.766140342413657, 'V1_SNR': 5.814405972686335, 'network_SNR': 32.18993932765676, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
12:55 ninjax INFO    : log_prob at the injection parameters is: 461.4835068927103
12:55 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
12:55 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
12:55 ninjax INFO    : Ninjax setup complete.
12:55 ninjax INFO    : Saving output to ./outdir/injection_15/
12:55 ninjax INFO    : Using polynomial learning rate scheduler
12:55 ninjax INFO    : The hyperparameters passed to flowMC and jim are
12:55 ninjax INFO    :    n_loop_training: 200
12:55 ninjax INFO    :    n_loop_production: 10
12:55 ninjax INFO    :    n_local_steps: 100
12:55 ninjax INFO    :    n_global_steps: 1000
12:55 ninjax INFO    :    n_epochs: 25
12:55 ninjax INFO    :    n_chains: 1000
12:55 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x14defef7fbe0>
12:55 ninjax INFO    :    max_samples: 50000
12:55 ninjax INFO    :    momentum: 0.9
12:55 ninjax INFO    :    batch_size: 30000
12:55 ninjax INFO    :    use_global: True
12:55 ninjax INFO    :    keep_quantile: 0.0
12:55 ninjax INFO    :    train_thinning: 10
12:55 ninjax INFO    :    output_thinning: 50
12:55 ninjax INFO    :    n_sample_max: 10000
12:55 ninjax INFO    :    num_layers: 10
12:55 ninjax INFO    :    hidden_size: [128, 128]
12:55 ninjax INFO    :    num_bins: 8
12:55 ninjax INFO    :    save_training_chains: False
12:55 ninjax INFO    :    eps_mass_matrix: 1e-05
12:55 ninjax INFO    :    use_scheduler: True
12:55 ninjax INFO    :    use_temperature: False
12:55 ninjax INFO    :    which_temperature_schedule: exponential
12:55 ninjax INFO    :    starting_temperature: 2.0
12:55 ninjax INFO    :    stop_tempering_iteration: 75
12:55 ninjax INFO    :    stopping_criterion_global_acc: 0.1
12:55 ninjax INFO    :    stopping_criterion_loss: -inf
12:55 ninjax INFO    :    nf_model_kwargs: {}
12:55 ninjax INFO    :    local sampler arg not shown (pretty print)
12:55 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[-2.56805995e-23 -3.42576041e-23 -7.35188753e-23  5.77429379e-23
  1.94198762e-23  1.32856036e-23 -1.23813632e-22  5.38584204e-23
 -8.13389822e-23  3.80501087e-23]
[ 3.95755989e-23  1.23848176e-22  2.36237950e-23  7.72271596e-23
 -6.64923571e-23 -2.98342542e-23 -2.11083901e-23 -1.50856706e-23
  1.94581668e-23  5.70027914e-25]
Checking the noise that was generated in inject_signal ifo:
[-5.13866963e-24 -1.28621729e-23  9.63374583e-24  4.51509970e-23
  9.51312116e-23 -2.36809974e-23 -6.23156640e-24 -1.01228910e-24
 -2.23536678e-23  2.93441744e-23]
[ 1.01674860e-22 -7.16008495e-24  1.42958002e-23  1.86146735e-23
 -3.17325723e-23 -4.90638614e-23  1.02934920e-22 -4.64236251e-23
  6.05263425e-23  2.04987389e-23]
Checking the noise that was generated in inject_signal ifo:
[ 6.49788403e-23  5.60654525e-23  9.08997674e-23 -9.23636523e-24
  4.92457412e-23 -7.08887613e-23  5.90544201e-23  9.56199954e-24
  2.04385833e-23 -3.51532560e-23]
[-1.88607773e-23 -2.66680546e-23 -2.43514589e-24  1.23088452e-22
  8.02062624e-23  3.33780125e-23 -2.08498272e-23  7.26991882e-25
 -6.48026498e-23 -6.91404429e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.11167430877685547 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.9840880035275723, 'mass_2_source': 1.4047790015644688, 's1_z': 0.01734334317461242, 's2_z': -0.007005064197561819, 'cos_iota': -0.8056002167234646, 'd_L': 254.83682256447239, 't_c': 0.07004227699847868, 'phase_c': 3.4390311906312694, 'psi': 2.4279710898819626, 'ra': 3.9642672308145683, 'sin_dec': -0.7054472233040525, 'q': 0.7080225267563073, 'M_c': 1.5325141891654075, 'eta': 0.24269447364165264, 'iota': Array(2.50748419, dtype=float64, weak_type=True), 'dec': Array(-0.78305394, dtype=float64, weak_type=True), 'lambda_1': 15.86839717663012, 'lambda_2': 251.66353754150288, 'H1_SNR': 22.99173790076265, 'L1_SNR': 21.766140342413657, 'V1_SNR': 5.814405972686335, 'network_SNR': 32.18993932765676, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5075600147247314 seconds
Time for h_sky_low and h_sky_center: 5.296799898147583 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.6462171077728271
Going to compute coefficients . . .
Time for computing coefficients: 120.54554057121277 seconds
Time for computing coefficients: 7.021330118179321 seconds
Time for computing coefficients: 6.7119245529174805 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:01<6:43:01, 121.52s/it]Tuning global sampler:   1%|          | 2/200 [02:06<2:53:59, 52.73s/it] Tuning global sampler:   2%|▏         | 3/200 [02:10<1:40:58, 30.75s/it]Tuning global sampler:   2%|▏         | 4/200 [02:15<1:06:44, 20.43s/it]Tuning global sampler:   2%|▎         | 5/200 [02:20<48:50, 15.03s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:25<37:06, 11.48s/it]Tuning global sampler:   4%|▎         | 7/200 [02:29<29:35,  9.20s/it]Tuning global sampler:   4%|▍         | 8/200 [02:34<24:43,  7.73s/it]Tuning global sampler:   4%|▍         | 9/200 [02:38<21:23,  6.72s/it]Tuning global sampler:   5%|▌         | 10/200 [02:43<19:02,  6.01s/it]Tuning global sampler:   6%|▌         | 11/200 [02:47<17:32,  5.57s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:29,  5.26s/it]Tuning global sampler:   6%|▋         | 13/200 [02:56<15:42,  5.04s/it]Tuning global sampler:   7%|▋         | 14/200 [03:01<15:13,  4.91s/it]Tuning global sampler:   8%|▊         | 15/200 [03:06<14:51,  4.82s/it]Tuning global sampler:   8%|▊         | 16/200 [03:10<14:34,  4.75s/it]Tuning global sampler:   8%|▊         | 17/200 [03:15<14:21,  4.71s/it]Tuning global sampler:   9%|▉         | 18/200 [03:20<14:11,  4.68s/it]Tuning global sampler:  10%|▉         | 19/200 [03:24<14:03,  4.66s/it]Tuning global sampler:  10%|█         | 20/200 [03:29<13:56,  4.65s/it]Tuning global sampler:  10%|█         | 21/200 [03:33<13:50,  4.64s/it]Tuning global sampler:  11%|█         | 22/200 [03:38<13:42,  4.62s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:43<13:36,  4.62s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:47<13:20,  4.55s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:52<13:54,  4.77s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:57<13:28,  4.65s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:01<13:09,  4.56s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:05<12:54,  4.51s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:10<12:44,  4.47s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:14<12:35,  4.44s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:18<12:26,  4.42s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:23<12:19,  4.40s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:27<12:11,  4.38s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:31<12:04,  4.37s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:36<12:00,  4.37s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:40<11:55,  4.36s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:45<11:51,  4.36s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:49<11:46,  4.36s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:53<11:42,  4.36s/it]Tuning global sampler:  20%|██        | 40/200 [04:58<11:38,  4.36s/it]Tuning global sampler:  20%|██        | 41/200 [05:02<11:33,  4.36s/it]Tuning global sampler:  21%|██        | 42/200 [05:06<11:29,  4.36s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:11<11:25,  4.37s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:16<12:04,  4.64s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:20<11:45,  4.55s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:25<11:32,  4.49s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:29<11:25,  4.48s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:34<11:15,  4.44s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:38<11:07,  4.42s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:42<11:00,  4.40s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:47<10:53,  4.39s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:51<10:48,  4.38s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:55<10:43,  4.38s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:00<10:38,  4.37s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:04<10:32,  4.36s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:08<10:26,  4.35s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:13<10:24,  4.36s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:17<10:20,  4.37s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:22<10:15,  4.37s/it]Tuning global sampler:  30%|███       | 60/200 [06:26<10:16,  4.40s/it]Tuning global sampler:  30%|███       | 61/200 [06:30<10:10,  4.39s/it]Tuning global sampler:  31%|███       | 62/200 [06:35<10:11,  4.43s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:39<10:05,  4.42s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:45<10:37,  4.69s/it]Tuning global sampler:  32%|███▎      | 65/200 [06:49<10:19,  4.59s/it]Tuning global sampler:  33%|███▎      | 66/200 [06:53<10:05,  4.52s/it]Tuning global sampler:  33%|███▎      | 66/200 [06:58<14:09,  6.34s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.20s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.20s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.20s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.20s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.20s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.20s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.20s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.20s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.20s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.20s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.20s/it]
13:03 ninjax INFO    : Saving samples to ./outdir/injection_15/results_training.npz
13:03 ninjax INFO    : Saving the NF
13:03 ninjax INFO    : Time taken: 457.445965051651 seconds (7.624099417527517 minutes)
13:03 ninjax INFO    : Creating the final corner plot
13:03 ninjax INFO    : Dumping the final production chains
13:03 ninjax INFO    : Chains shape is: (13, 220000)
13:03 ninjax INFO    : Key: M_c: ESS = 29721, Rhat = 1.0218780855205336
13:03 ninjax INFO    : Key: q: ESS = 19177, Rhat = 1.0338210797681089
13:03 ninjax INFO    : Key: s1_z: ESS = 29949, Rhat = 1.0229293636246652
13:03 ninjax INFO    : Key: s2_z: ESS = 29099, Rhat = 1.0218171949494241
13:03 ninjax INFO    : Key: lambda_1: ESS = 32989, Rhat = 1.0197048787176015
13:03 ninjax INFO    : Key: lambda_2: ESS = 40142, Rhat = 1.0170249275727983
13:03 ninjax INFO    : Key: cos_iota: ESS = 17013, Rhat = 1.0354769637868806
13:03 ninjax INFO    : Key: d_L: ESS = 17866, Rhat = 1.0337499557302394
13:03 ninjax INFO    : Key: t_c: ESS = 34809, Rhat = 1.0183054060162722
13:03 ninjax INFO    : Key: phase_c: ESS = 26166, Rhat = 1.0236625224807245
13:03 ninjax INFO    : Key: psi: ESS = 60812, Rhat = 1.0118050734705895
13:03 ninjax INFO    : Key: ra: ESS = 57654, Rhat = 1.0146389916108567
13:03 ninjax INFO    : Key: sin_dec: ESS = 39773, Rhat = 1.0166632698853886
13:03 ninjax INFO    : Key: eta: ESS = 19177, Rhat = 1.0338210797681089
13:03 ninjax INFO    : Key: iota: ESS = 17013, Rhat = 1.0354769637868806
13:03 ninjax INFO    : Key: dec: ESS = 39773, Rhat = 1.0166632698853886
13:03 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.535 +/- 0.084
q: 0.755 +/- 0.192
s1_z: 0.003 +/- 0.024
s2_z: -0.000 +/- 0.026
lambda_1: 1337.965 +/- 1470.858
lambda_2: 1648.666 +/- 1538.087
cos_iota: -0.530 +/- 0.505
d_L: 442.558 +/- 227.920
t_c: 0.068 +/- 0.020
phase_c: 2.466 +/- 1.599
psi: 1.260 +/- 0.918
ra: 3.837 +/- 0.661
sin_dec: -0.615 +/- 0.308
Log probability: 294.879 +/- 179.998
Local acceptance: 0.611 +/- 0.488
Global acceptance: 0.011 +/- 0.104
Max loss: 22.764, Min loss: 4.730
Production summary
==========
M_c: 1.532 +/- 0.000
q: 0.813 +/- 0.110
s1_z: -0.002 +/- 0.025
s2_z: -0.003 +/- 0.027
lambda_1: 84.371 +/- 70.756
lambda_2: 161.544 +/- 127.698
cos_iota: -0.809 +/- 0.147
d_L: 267.313 +/- 41.679
t_c: 0.070 +/- 0.000
phase_c: 3.125 +/- 1.819
psi: 1.563 +/- 0.899
ra: 3.955 +/- 0.011
sin_dec: -0.704 +/- 0.007
Log probability: 459.250 +/- 2.272
Local acceptance: 0.340 +/- 0.474
Global acceptance: 0.108 +/- 0.311
DONE

JOB STATISTICS
==============
Job ID: 10863579
Cluster: snellius
User/Group: twouters2/twouters2
State: RUNNING
Nodes: 1
Cores per node: 16
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 02:53:36 core-walltime
Job Wall-clock time: 00:10:51
Memory Utilized: 0.00 MB (estimated maximum)
Memory Efficiency: 0.00% of 10.00 GB (10.00 GB/node)
WARNING: Efficiency statistics may be misleading for RUNNING jobs.
