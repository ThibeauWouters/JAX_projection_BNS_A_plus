Thu Mar 27 21:29:22 CET 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
21:29 ninjax INFO    : Checking and setting outdir
21:29 ninjax INFO    : The outdir is set to ./outdir/injection_16
21:29 ninjax INFO    : Loading the given config
21:29 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
21:29 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
21:29 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/HQC18/outdir/injection_16/complete_config.json
21:29 ninjax INFO    : No seed specified. Generating a random seed: 460279
21:29 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 231143
21:29 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 752836
21:29 ninjax INFO    : Loading the priors
21:29 ninjax INFO    :    Mc_prior = Uniform(1.0, 2.2, naming=["M_c"])
21:29 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
21:29 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
21:29 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
21:29 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
21:29 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
21:29 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
21:29 ninjax INFO    :    dL_prior = PowerLaw(1.0, 460.0, 2.0, naming=["d_L"])
21:29 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
21:29 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
21:29 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
21:29 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
21:29 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
21:29 ninjax INFO    : Finished prior setup
21:29 ninjax INFO    : Setting the transforms
21:29 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
21:29 ninjax INFO    : transforms_str_list has 3 elements
21:29 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
21:29 ninjax INFO    : Setting the likelihood
21:29 ninjax INFO    : GW likelihood provided, setting up the GW pipe
21:29 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz
21:29 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz for BNS injections
21:29 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
21:29 ninjax INFO    : self.is_BNS_run is True
21:29 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
21:29 ninjax INFO    : GW run is an injection
21:29 ninjax INFO    : Setting up GW injection . . . 
21:29 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
21:29 ninjax INFO    : Generating new injection
21:29 ninjax INFO    : Sanity check: generated parameters:
21:29 ninjax INFO    : {'M_c': 2.157129786581211, 'q': 0.8658130043527753, 's1_z': -0.03126237345643819, 's2_z': 0.0009345718179802481, 'lambda_1': 3794.3865954228827, 'lambda_2': 441.836469740372, 'cos_iota': 0.20371335678568636, 'd_L': 297.335385942085, 't_c': -0.008892081987747422, 'phase_c': 1.3337658923546316, 'psi': 2.428254407459453, 'ra': 4.57851658612115, 'sin_dec': -0.5896160108770201}
21:29 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz . . . 
21:29 ninjax INFO    : Injected lambda_1: 7.039733026387287
21:29 ninjax INFO    : Injected lambda_2: 7.039733026387287
21:29 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 2.157129786581211 is 64.0
21:29 ninjax INFO    : After transforms, the injection parameters are:
21:29 ninjax INFO    : {'M_c': 2.157129786581211, 'q': 0.8658130043527753, 's1_z': -0.03126237345643819, 's2_z': 0.0009345718179802481, 'lambda_1': 7.039733026387287, 'lambda_2': 7.039733026387287, 'cos_iota': 0.20371335678568636, 'd_L': 297.335385942085, 't_c': -0.008892081987747422, 'phase_c': 1.3337658923546316, 'psi': 2.428254407459453, 'ra': 4.57851658612115, 'sin_dec': -0.5896160108770201, 'eta': 0.24870692225799151, 'iota': Array(1.365647, dtype=float64, weak_type=True), 'dec': Array(-0.63058334, dtype=float64, weak_type=True)}
21:29 ninjax INFO    : The trial injection parameters are {'M_c': 2.157129786581211, 'eta': 0.24870692225799151, 's1_z': -0.03126237345643819, 's2_z': 0.0009345718179802481, 'lambda_1': 7.039733026387287, 'lambda_2': 7.039733026387287, 'd_L': 297.335385942085, 'phase_c': 1.3337658923546316, 'iota': 1.365647000906769, 't_c': -0.008892081987747422, 'psi': 2.428254407459453, 'ra': 4.57851658612115, 'dec': -0.6305833380605119}
21:29 ninjax INFO    : Injecting signals . . .
21:29 ninjax INFO    : self.ifos
21:29 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
21:29 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
21:29 ninjax INFO    : [  20.         20.015625   20.03125  ... 2047.953125 2047.96875
 2047.984375]
21:29 ninjax INFO    : [-1.05851609e-23+1.56147567e-24j -3.66109406e-23+2.72901019e-23j
  3.04957764e-23+1.43619231e-23j ...
  6.87350476e-24-4.09076504e-24j -2.26766080e-23-1.88241635e-24j
 -2.07048902e-23+6.76259924e-24j]
21:29 ninjax INFO    : [1.44906511e-46 1.44435812e-46 1.43973008e-46 ... 2.17771234e-47
 2.17774337e-47 2.17777440e-47]
21:29 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
21:29 ninjax INFO    : [  20.         20.015625   20.03125  ... 2047.953125 2047.96875
 2047.984375]
21:29 ninjax INFO    : [-2.45218163e-23-5.43271995e-24j -6.40349080e-23+8.33842168e-23j
 -5.17806799e-23-3.14075350e-23j ...
  3.46127793e-24-8.32340306e-24j  1.73623037e-23+2.20050555e-23j
  1.36112276e-23-4.91877168e-24j]
21:29 ninjax INFO    : [1.44906511e-46 1.44435812e-46 1.43973008e-46 ... 2.17771234e-47
 2.17774337e-47 2.17777440e-47]
21:29 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
21:29 ninjax INFO    : [  20.         20.015625   20.03125  ... 2047.953125 2047.96875
 2047.984375]
21:29 ninjax INFO    : [-6.29076669e-24-1.83799095e-23j -2.36193306e-23+4.41224417e-23j
  2.54327429e-23-1.07602855e-23j ...
 -2.52344148e-24+2.97607764e-23j  1.40135104e-23-8.56970407e-24j
  3.02230624e-23+1.51204840e-23j]
21:29 ninjax INFO    : [1.43183556e-46 1.42688205e-46 1.42194425e-46 ... 6.39772204e-47
 6.39781464e-47 6.39790724e-47]
21:29 ninjax INFO    : SNR for ifo H1 is 5.354881684399703
21:29 ninjax INFO    : SNR for ifo L1 is 6.687201689060628
21:29 ninjax INFO    : SNR for ifo V1 is 7.580619680981958
21:29 ninjax INFO    : The network SNR is 11.439371443911844
21:29 ninjax INFO    : Network SNR passes threshold
21:29 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
21:29 ninjax INFO    :    M_c: 2.157129786581211
21:29 ninjax INFO    :    q: 0.8658130043527753
21:29 ninjax INFO    :    s1_z: -0.03126237345643819
21:29 ninjax INFO    :    s2_z: 0.0009345718179802481
21:29 ninjax INFO    :    lambda_1: 7.039733026387287
21:29 ninjax INFO    :    lambda_2: 7.039733026387287
21:29 ninjax INFO    :    cos_iota: 0.20371335678568636
21:29 ninjax INFO    :    d_L: 297.335385942085
21:29 ninjax INFO    :    t_c: -0.008892081987747422
21:29 ninjax INFO    :    phase_c: 1.3337658923546316
21:29 ninjax INFO    :    psi: 2.428254407459453
21:29 ninjax INFO    :    ra: 4.57851658612115
21:29 ninjax INFO    :    sin_dec: -0.5896160108770201
21:29 ninjax INFO    :    eta: 0.24870692225799151
21:29 ninjax INFO    :    iota: 1.365647000906769
21:29 ninjax INFO    :    dec: -0.6305833380605119
21:29 ninjax INFO    :    H1_SNR: 5.354881684399703
21:29 ninjax INFO    :    L1_SNR: 6.687201689060628
21:29 ninjax INFO    :    V1_SNR: 7.580619680981958
21:29 ninjax INFO    :    network_SNR: 11.439371443911844
21:29 ninjax INFO    :    epoch: 62.0
21:29 ninjax INFO    :    gmst: 2.7288901910520846
21:29 ninjax INFO    :    duration: 64.0
21:29 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
21:29 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
21:29 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
21:31 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 101.20663833618164 seconds = 1.6867773056030273 minutes
21:31 ninjax INFO    : The priors are not modified after their initialization
21:31 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
21:31 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
21:31 ninjax INFO    : sample: {'M_c': Array([2.0745305 , 1.15533707, 1.22229067], dtype=float64), 'q': Array([0.56000038, 0.83950921, 0.42938704], dtype=float64), 's1_z': Array([ 0.00673273, -0.04764275, -0.00593793], dtype=float64), 's2_z': Array([ 0.0134501 , -0.01168489,  0.01353447], dtype=float64), 'lambda_1': Array([  28.49129878,  440.60954539, 1985.1241491 ], dtype=float64), 'lambda_2': Array([1806.13313451, 3417.79176649, 3942.96338459], dtype=float64), 'cos_iota': Array([-0.44842388, -0.66156866, -0.5314193 ], dtype=float64), 'd_L': Array([450.83690349, 276.18311227, 446.5443604 ], dtype=float64), 't_c': Array([-0.08662048, -0.00050566, -0.0206108 ], dtype=float64), 'phase_c': Array([0.80694142, 3.30644218, 5.32296936], dtype=float64), 'psi': Array([0.30179484, 0.56539904, 3.13904182], dtype=float64), 'ra': Array([0.84750594, 6.11722488, 6.24988812], dtype=float64), 'sin_dec': Array([-0.86536483,  0.92323126,  0.04801872], dtype=float64)}
21:31 ninjax INFO    : log_prob: [ -54.61757094 -130.22430023  -21.9368296 ]
21:31 ninjax INFO    : Checking log_prob at injection parameters: {'M_c': 2.157129786581211, 'q': 0.8658130043527753, 's1_z': -0.03126237345643819, 's2_z': 0.0009345718179802481, 'lambda_1': 7.039733026387287, 'lambda_2': 7.039733026387287, 'cos_iota': 0.20371335678568636, 'd_L': 297.335385942085, 't_c': -0.008892081987747422, 'phase_c': 1.3337658923546316, 'psi': 2.428254407459453, 'ra': 4.57851658612115, 'sin_dec': -0.5896160108770201, 'eta': 0.24870692225799151, 'iota': Array(1.365647, dtype=float64, weak_type=True), 'dec': Array(-0.63058334, dtype=float64, weak_type=True), 'H1_SNR': 5.354881684399703, 'L1_SNR': 6.687201689060628, 'V1_SNR': 7.580619680981958, 'network_SNR': 11.439371443911844, 'epoch': 62.0, 'gmst': 2.7288901910520846, 'duration': 64.0}
21:31 ninjax INFO    : log_prob at the injection parameters is: 46.46822753631926
21:31 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
21:31 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
21:31 ninjax INFO    : Ninjax setup complete.
21:31 ninjax INFO    : Saving output to ./outdir/injection_16/
21:31 ninjax INFO    : Using polynomial learning rate scheduler
21:31 ninjax INFO    : The hyperparameters passed to flowMC and jim are
21:31 ninjax INFO    :    n_loop_training: 200
21:31 ninjax INFO    :    n_loop_production: 10
21:31 ninjax INFO    :    n_local_steps: 100
21:31 ninjax INFO    :    n_global_steps: 1000
21:31 ninjax INFO    :    n_epochs: 25
21:31 ninjax INFO    :    n_chains: 1000
21:31 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x151cad67c310>
21:31 ninjax INFO    :    max_samples: 50000
21:31 ninjax INFO    :    momentum: 0.9
21:31 ninjax INFO    :    batch_size: 30000
21:31 ninjax INFO    :    use_global: True
21:31 ninjax INFO    :    keep_quantile: 0.0
21:31 ninjax INFO    :    train_thinning: 10
21:31 ninjax INFO    :    output_thinning: 50
21:31 ninjax INFO    :    n_sample_max: 10000
21:31 ninjax INFO    :    num_layers: 10
21:31 ninjax INFO    :    hidden_size: [128, 128]
21:31 ninjax INFO    :    num_bins: 8
21:31 ninjax INFO    :    save_training_chains: False
21:31 ninjax INFO    :    eps_mass_matrix: 1e-05
21:31 ninjax INFO    :    use_scheduler: True
21:31 ninjax INFO    :    use_temperature: False
21:31 ninjax INFO    :    which_temperature_schedule: exponential
21:31 ninjax INFO    :    starting_temperature: 2.0
21:31 ninjax INFO    :    stop_tempering_iteration: 75
21:31 ninjax INFO    :    stopping_criterion_global_acc: 0.1
21:31 ninjax INFO    :    stopping_criterion_loss: -inf
21:31 ninjax INFO    :    nf_model_kwargs: {}
21:31 ninjax INFO    :    local sampler arg not shown (pretty print)
21:31 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[-8.08590300e-24 -3.41133546e-23  3.29910147e-23 -2.69280292e-24
  7.95466084e-25 -9.48909818e-24  6.90233312e-23 -3.81846990e-23
  7.81733529e-24  5.13393862e-24]
[ 1.49237005e-24  2.72492333e-23  1.43176251e-23 -9.61664292e-24
 -3.47719467e-23  1.23784788e-24  1.15421200e-24 -2.56297398e-23
 -1.37080410e-23 -1.68088344e-23]
Checking the noise that was generated in inject_signal ifo:
[-2.68504833e-23 -6.63841006e-23 -5.41242346e-23  2.14405251e-23
  4.25938388e-24  5.46771161e-24  5.40798474e-24  2.80355309e-23
  3.23585429e-23  1.47228785e-23]
[-3.35283304e-24  8.54365430e-23 -2.93531067e-23 -4.69946814e-23
 -1.91904192e-24  1.77866555e-23  3.06536739e-23  2.24021687e-23
  1.23615412e-23  3.63949012e-23]
Checking the noise that was generated in inject_signal ifo:
[-2.25417011e-24 -1.95632637e-23  2.94838655e-23 -7.06146402e-23
  3.01092443e-23  3.25158030e-23  8.38072933e-23 -1.76622346e-23
  3.07765845e-25  3.64195871e-23]
[-2.03328716e-23  4.22199085e-23 -1.26636906e-23 -1.62501971e-23
 -2.99981069e-24 -2.74554839e-23 -3.14583125e-23  6.46830633e-23
 -7.71639223e-24 -5.55126187e-24]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.07628726959228516 seconds
Using provided reference parameters:
ref_params for relative binning:
{'M_c': 2.157129786581211, 'q': 0.8658130043527753, 's1_z': -0.03126237345643819, 's2_z': 0.0009345718179802481, 'lambda_1': 7.039733026387287, 'lambda_2': 7.039733026387287, 'cos_iota': 0.20371335678568636, 'd_L': 297.335385942085, 't_c': -0.008892081987747422, 'phase_c': 1.3337658923546316, 'psi': 2.428254407459453, 'ra': 4.57851658612115, 'sin_dec': -0.5896160108770201, 'eta': 0.24870692225799151, 'iota': Array(1.365647, dtype=float64, weak_type=True), 'dec': Array(-0.63058334, dtype=float64, weak_type=True), 'H1_SNR': 5.354881684399703, 'L1_SNR': 6.687201689060628, 'V1_SNR': 7.580619680981958, 'network_SNR': 11.439371443911844, 'epoch': 62.0, 'gmst': 2.7288901910520846, 'duration': 64.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.4907519817352295 seconds
Time for h_sky_low and h_sky_center: 5.512312889099121 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.605402946472168
Going to compute coefficients . . .
Time for computing coefficients: 80.78401279449463 seconds
Time for computing coefficients: 6.657201766967773 seconds
Time for computing coefficients: 6.554454803466797 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:01<6:41:41, 121.11s/it]Tuning global sampler:   1%|          | 2/200 [02:05<2:53:24, 52.55s/it] Tuning global sampler:   2%|▏         | 3/200 [02:10<1:40:39, 30.66s/it]Tuning global sampler:   2%|▏         | 4/200 [02:14<1:06:31, 20.36s/it]Tuning global sampler:   2%|▎         | 5/200 [02:19<47:41, 14.67s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:24<37:13, 11.51s/it]Tuning global sampler:   4%|▎         | 7/200 [02:29<29:41,  9.23s/it]Tuning global sampler:   4%|▍         | 8/200 [02:33<24:48,  7.75s/it]Tuning global sampler:   4%|▍         | 9/200 [02:38<21:28,  6.75s/it]Tuning global sampler:   5%|▌         | 10/200 [02:42<19:05,  6.03s/it]Tuning global sampler:   6%|▌         | 11/200 [02:47<17:35,  5.58s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:31,  5.28s/it]Tuning global sampler:   6%|▋         | 13/200 [02:56<15:45,  5.06s/it]Tuning global sampler:   7%|▋         | 14/200 [03:01<15:15,  4.92s/it]Tuning global sampler:   8%|▊         | 15/200 [03:05<14:54,  4.83s/it]Tuning global sampler:   8%|▊         | 16/200 [03:10<14:36,  4.77s/it]Tuning global sampler:   8%|▊         | 17/200 [03:15<14:23,  4.72s/it]Tuning global sampler:   9%|▉         | 18/200 [03:19<14:12,  4.68s/it]Tuning global sampler:  10%|▉         | 19/200 [03:24<14:04,  4.66s/it]Tuning global sampler:  10%|█         | 20/200 [03:28<13:56,  4.65s/it]Tuning global sampler:  10%|█         | 21/200 [03:33<13:49,  4.64s/it]Tuning global sampler:  11%|█         | 22/200 [03:38<14:26,  4.87s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:43<14:06,  4.78s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:47<13:41,  4.67s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:52<13:20,  4.58s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:56<13:04,  4.51s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:00<12:52,  4.47s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:05<12:43,  4.44s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:09<12:35,  4.42s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:14<12:28,  4.40s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:18<12:22,  4.39s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:22<12:16,  4.38s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:27<12:09,  4.37s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:31<12:03,  4.36s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:35<11:59,  4.36s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:40<11:55,  4.36s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:44<11:51,  4.37s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:48<11:48,  4.37s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:53<11:43,  4.37s/it]Tuning global sampler:  20%|██        | 40/200 [04:57<11:39,  4.37s/it]Tuning global sampler:  20%|██        | 41/200 [05:02<12:16,  4.63s/it]Tuning global sampler:  21%|██        | 42/200 [05:07<11:59,  4.55s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:11<11:46,  4.50s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:16<11:34,  4.45s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:20<11:26,  4.43s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:24<11:19,  4.41s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:29<11:13,  4.40s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:33<11:07,  4.39s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:37<11:02,  4.39s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:42<10:57,  4.38s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:46<10:52,  4.38s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:51<10:48,  4.38s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:55<10:43,  4.38s/it]Tuning global sampler:  27%|██▋       | 54/200 [05:59<10:38,  4.38s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:04<10:32,  4.36s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:08<10:28,  4.36s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:12<10:24,  4.36s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:17<10:20,  4.37s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:21<10:16,  4.38s/it]Tuning global sampler:  30%|███       | 60/200 [06:26<10:50,  4.64s/it]Tuning global sampler:  30%|███       | 61/200 [06:31<10:34,  4.56s/it]Tuning global sampler:  31%|███       | 62/200 [06:35<10:22,  4.51s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:40<10:12,  4.47s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:44<10:04,  4.44s/it]Tuning global sampler:  32%|███▎      | 65/200 [06:48<09:56,  4.42s/it]Tuning global sampler:  33%|███▎      | 66/200 [06:53<09:49,  4.40s/it]Tuning global sampler:  34%|███▎      | 67/200 [06:57<09:43,  4.38s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:01<09:37,  4.38s/it]Tuning global sampler:  34%|███▍      | 69/200 [07:06<09:32,  4.37s/it]Tuning global sampler:  35%|███▌      | 70/200 [07:10<09:28,  4.37s/it]Tuning global sampler:  36%|███▌      | 71/200 [07:14<09:24,  4.37s/it]Tuning global sampler:  36%|███▌      | 72/200 [07:19<09:19,  4.37s/it]Tuning global sampler:  36%|███▋      | 73/200 [07:23<09:15,  4.37s/it]Tuning global sampler:  37%|███▋      | 74/200 [07:28<09:10,  4.37s/it]Tuning global sampler:  38%|███▊      | 75/200 [07:32<09:06,  4.37s/it]Tuning global sampler:  38%|███▊      | 76/200 [07:36<09:02,  4.37s/it]Tuning global sampler:  38%|███▊      | 77/200 [07:41<08:56,  4.36s/it]Tuning global sampler:  39%|███▉      | 78/200 [07:45<08:50,  4.35s/it]Tuning global sampler:  40%|███▉      | 79/200 [07:50<09:20,  4.63s/it]Tuning global sampler:  40%|████      | 80/200 [07:55<09:06,  4.55s/it]Tuning global sampler:  40%|████      | 81/200 [07:59<08:54,  4.49s/it]Tuning global sampler:  41%|████      | 82/200 [08:03<08:45,  4.46s/it]Tuning global sampler:  42%|████▏     | 83/200 [08:08<08:38,  4.43s/it]Tuning global sampler:  42%|████▏     | 84/200 [08:12<08:31,  4.41s/it]Tuning global sampler:  42%|████▎     | 85/200 [08:16<08:25,  4.40s/it]Tuning global sampler:  43%|████▎     | 86/200 [08:21<08:20,  4.39s/it]Tuning global sampler:  44%|████▎     | 87/200 [08:25<08:14,  4.38s/it]Tuning global sampler:  44%|████▎     | 87/200 [08:29<11:02,  5.86s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.21s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.21s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.21s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.21s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.21s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.21s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.21s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.21s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]
21:40 ninjax INFO    : Saving samples to ./outdir/injection_16/results_training.npz
21:40 ninjax INFO    : Saving the NF
21:40 ninjax INFO    : Time taken: 553.0869019031525 seconds (9.218115031719208 minutes)
21:40 ninjax INFO    : Creating the final corner plot
21:40 ninjax INFO    : Dumping the final production chains
21:40 ninjax INFO    : Chains shape is: (13, 220000)
21:40 ninjax INFO    : Key: M_c: ESS = 17763, Rhat = 1.0338859829489369
21:40 ninjax INFO    : Key: q: ESS = 19693, Rhat = 1.0361465509754593
21:40 ninjax INFO    : Key: s1_z: ESS = 24113, Rhat = 1.0261214965216439
21:40 ninjax INFO    : Key: s2_z: ESS = 24576, Rhat = 1.0256658624290254
21:40 ninjax INFO    : Key: lambda_1: ESS = 19129, Rhat = 1.031882349139284
21:40 ninjax INFO    : Key: lambda_2: ESS = 20974, Rhat = 1.0293805955944564
21:40 ninjax INFO    : Key: cos_iota: ESS = 8252, Rhat = 1.0731739844665023
21:40 ninjax INFO    : Key: d_L: ESS = 19181, Rhat = 1.0312571359411793
21:40 ninjax INFO    : Key: t_c: ESS = 8479, Rhat = 1.0711537784801006
21:40 ninjax INFO    : Key: phase_c: ESS = 19652, Rhat = 1.030970915724897
21:40 ninjax INFO    : Key: psi: ESS = 23240, Rhat = 1.0254606585701762
21:40 ninjax INFO    : Key: ra: ESS = 8371, Rhat = 1.0729479320779856
21:40 ninjax INFO    : Key: sin_dec: ESS = 7700, Rhat = 1.0789134196552483
21:40 ninjax INFO    : Key: eta: ESS = 19693, Rhat = 1.0362009068485436
21:40 ninjax INFO    : Key: iota: ESS = 8252, Rhat = 1.0731739844665023
21:40 ninjax INFO    : Key: dec: ESS = 7700, Rhat = 1.0789134196552483
21:40 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.909 +/- 0.409
q: 0.689 +/- 0.230
s1_z: 0.004 +/- 0.028
s2_z: -0.001 +/- 0.028
lambda_1: 2133.780 +/- 1439.875
lambda_2: 2225.010 +/- 1395.395
cos_iota: -0.113 +/- 0.219
d_L: 388.753 +/- 63.205
t_c: 0.011 +/- 0.035
phase_c: 3.217 +/- 1.784
psi: 1.666 +/- 0.876
ra: 3.359 +/- 1.207
sin_dec: 0.497 +/- 0.564
Log probability: 4.973 +/- 27.261
Local acceptance: 0.995 +/- 0.068
Global acceptance: 0.012 +/- 0.108
Max loss: 22.813, Min loss: 5.966
Production summary
==========
M_c: 2.158 +/- 0.001
q: 0.829 +/- 0.109
s1_z: 0.009 +/- 0.026
s2_z: 0.006 +/- 0.027
lambda_1: 882.222 +/- 917.580
lambda_2: 1359.843 +/- 1142.506
cos_iota: -0.297 +/- 0.125
d_L: 304.362 +/- 76.309
t_c: 0.022 +/- 0.004
phase_c: 2.927 +/- 1.794
psi: 1.938 +/- 0.837
ra: 3.207 +/- 0.220
sin_dec: 0.922 +/- 0.179
Log probability: 37.578 +/- 3.131
Local acceptance: 0.997 +/- 0.055
Global acceptance: 0.114 +/- 0.318
DONE

JOB STATISTICS
==============
Job ID: 10848208
Cluster: snellius
User/Group: twouters2/twouters2
State: RUNNING
Nodes: 1
Cores per node: 16
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 03:09:04 core-walltime
Job Wall-clock time: 00:11:49
Memory Utilized: 0.00 MB (estimated maximum)
Memory Efficiency: 0.00% of 10.00 GB (10.00 GB/node)
WARNING: Efficiency statistics may be misleading for RUNNING jobs.
