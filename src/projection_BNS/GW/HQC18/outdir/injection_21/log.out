Thu Mar 27 21:29:21 CET 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
21:29 ninjax INFO    : Checking and setting outdir
21:29 ninjax INFO    : The outdir is set to ./outdir/injection_21
21:29 ninjax INFO    : Loading the given config
21:29 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
21:29 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
21:29 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/HQC18/outdir/injection_21/complete_config.json
21:29 ninjax INFO    : No seed specified. Generating a random seed: 241363
21:29 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 270888
21:29 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 969112
21:29 ninjax INFO    : Loading the priors
21:29 ninjax INFO    :    Mc_prior = Uniform(1.0, 2.2, naming=["M_c"])
21:29 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
21:29 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
21:29 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
21:29 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
21:29 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
21:29 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
21:29 ninjax INFO    :    dL_prior = PowerLaw(1.0, 460.0, 2.0, naming=["d_L"])
21:29 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
21:29 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
21:29 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
21:29 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
21:29 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
21:29 ninjax INFO    : Finished prior setup
21:29 ninjax INFO    : Setting the transforms
21:29 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
21:29 ninjax INFO    : transforms_str_list has 3 elements
21:29 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
21:29 ninjax INFO    : Setting the likelihood
21:29 ninjax INFO    : GW likelihood provided, setting up the GW pipe
21:29 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz
21:29 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz for BNS injections
21:29 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
21:29 ninjax INFO    : self.is_BNS_run is True
21:29 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
21:29 ninjax INFO    : GW run is an injection
21:29 ninjax INFO    : Setting up GW injection . . . 
21:29 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
21:29 ninjax INFO    : Generating new injection
21:29 ninjax INFO    : Sanity check: generated parameters:
21:29 ninjax INFO    : {'M_c': 1.7868062599212307, 'q': 0.9960221592890037, 's1_z': 0.0010386879200703775, 's2_z': 0.009315042588574497, 'lambda_1': 4300.412115770295, 'lambda_2': 492.8463614099332, 'cos_iota': 0.565024688837596, 'd_L': 310.4791394266319, 't_c': -0.022754561322684497, 'phase_c': 5.800249778006444, 'psi': 0.5858524443192392, 'ra': 1.7206173561614535, 'sin_dec': -0.6562269086841686}
21:29 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz . . . 
21:29 ninjax INFO    : Injected lambda_1: 7.039733026387287
21:29 ninjax INFO    : Injected lambda_2: 7.039733026387287
21:29 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.7868062599212307 is 128.0
21:29 ninjax INFO    : After transforms, the injection parameters are:
21:29 ninjax INFO    : {'M_c': 1.7868062599212307, 'q': 0.9960221592890037, 's1_z': 0.0010386879200703775, 's2_z': 0.009315042588574497, 'lambda_1': 7.039733026387287, 'lambda_2': 7.039733026387287, 'cos_iota': 0.565024688837596, 'd_L': 310.4791394266319, 't_c': -0.022754561322684497, 'phase_c': 5.800249778006444, 'psi': 0.5858524443192392, 'ra': 1.7206173561614535, 'sin_dec': -0.6562269086841686, 'eta': 0.24999900710329764, 'iota': Array(0.97033315, dtype=float64, weak_type=True), 'dec': Array(-0.71580746, dtype=float64, weak_type=True)}
21:29 ninjax INFO    : The trial injection parameters are {'M_c': 1.7868062599212307, 'eta': 0.24999900710329764, 's1_z': 0.0010386879200703775, 's2_z': 0.009315042588574497, 'lambda_1': 7.039733026387287, 'lambda_2': 7.039733026387287, 'd_L': 310.4791394266319, 'phase_c': 5.800249778006444, 'iota': 0.9703331503411214, 't_c': -0.022754561322684497, 'psi': 0.5858524443192392, 'ra': 1.7206173561614535, 'dec': -0.7158074576055871}
21:29 ninjax INFO    : Injecting signals . . .
21:29 ninjax INFO    : self.ifos
21:29 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
21:29 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
21:29 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
21:29 ninjax INFO    : [ 2.43108451e-23+3.02242715e-23j  6.29532487e-23-8.61128386e-23j
  4.36024586e-23+5.93471765e-25j ...
 -4.09116199e-24-3.91462330e-23j -3.29109630e-23-1.26634724e-23j
  8.29470830e-24+3.09762408e-23j]
21:29 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
21:29 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
21:29 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
21:29 ninjax INFO    : [-4.22507905e-23-2.39946449e-23j  5.77892937e-23+1.61952795e-23j
  3.50816778e-23-6.17440016e-24j ...
  6.47501666e-24+3.37350973e-24j  1.08998301e-23-5.88837592e-24j
 -9.78074785e-24+7.67076292e-25j]
21:29 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
21:29 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
21:29 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
21:29 ninjax INFO    : [-7.44882403e-23-9.08967582e-24j -1.48544922e-24+2.56074004e-23j
 -2.28606983e-23-5.48190831e-23j ...
  1.79386247e-24+5.17643251e-23j  5.66627740e-24+5.00562451e-24j
  2.08393923e-23-1.47891186e-23j]
21:29 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
21:29 ninjax INFO    : SNR for ifo H1 is 8.649633507617594
21:29 ninjax INFO    : SNR for ifo L1 is 7.9000137863237185
21:29 ninjax INFO    : SNR for ifo V1 is 4.6548027269227665
21:29 ninjax INFO    : The network SNR is 12.605299126429863
21:29 ninjax INFO    : Network SNR passes threshold
21:29 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
21:29 ninjax INFO    :    M_c: 1.7868062599212307
21:29 ninjax INFO    :    q: 0.9960221592890037
21:29 ninjax INFO    :    s1_z: 0.0010386879200703775
21:29 ninjax INFO    :    s2_z: 0.009315042588574497
21:29 ninjax INFO    :    lambda_1: 7.039733026387287
21:29 ninjax INFO    :    lambda_2: 7.039733026387287
21:29 ninjax INFO    :    cos_iota: 0.565024688837596
21:29 ninjax INFO    :    d_L: 310.4791394266319
21:29 ninjax INFO    :    t_c: -0.022754561322684497
21:29 ninjax INFO    :    phase_c: 5.800249778006444
21:29 ninjax INFO    :    psi: 0.5858524443192392
21:29 ninjax INFO    :    ra: 1.7206173561614535
21:29 ninjax INFO    :    sin_dec: -0.6562269086841686
21:29 ninjax INFO    :    eta: 0.24999900710329764
21:29 ninjax INFO    :    iota: 0.9703331503411214
21:29 ninjax INFO    :    dec: -0.7158074576055871
21:29 ninjax INFO    :    H1_SNR: 8.649633507617594
21:29 ninjax INFO    :    L1_SNR: 7.9000137863237185
21:29 ninjax INFO    :    V1_SNR: 4.6548027269227665
21:29 ninjax INFO    :    network_SNR: 12.605299126429863
21:29 ninjax INFO    :    epoch: 126.0
21:29 ninjax INFO    :    gmst: 2.7288901910520846
21:29 ninjax INFO    :    duration: 128.0
21:29 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
21:29 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
21:29 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
21:32 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 148.8379247188568 seconds = 2.4806320786476137 minutes
21:32 ninjax INFO    : The priors are not modified after their initialization
21:32 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
21:32 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
21:32 ninjax INFO    : sample: {'M_c': Array([1.14003894, 1.02242406, 1.05935943], dtype=float64), 'q': Array([0.8056006 , 0.88209428, 0.89166407], dtype=float64), 's1_z': Array([-0.01245034,  0.04068496, -0.04232379], dtype=float64), 's2_z': Array([-0.03258154,  0.02924302, -0.01647075], dtype=float64), 'lambda_1': Array([4947.5242698 , 2305.31539544,  403.56772095], dtype=float64), 'lambda_2': Array([1177.61621204, 4085.44703631, 3562.19008304], dtype=float64), 'cos_iota': Array([-0.40344494, -0.59737308,  0.29936357], dtype=float64), 'd_L': Array([353.84764443, 250.51098392, 356.02972481], dtype=float64), 't_c': Array([ 0.0427542 , -0.00426053,  0.0848599 ], dtype=float64), 'phase_c': Array([2.0845254 , 5.75599375, 2.79901279], dtype=float64), 'psi': Array([2.93253784, 1.39640893, 0.15025156], dtype=float64), 'ra': Array([4.53397523, 2.4053359 , 3.76925164], dtype=float64), 'sin_dec': Array([-0.26579212,  0.64849935, -0.67328092], dtype=float64)}
21:32 ninjax INFO    : log_prob: [ -36.14111463 -115.69952751  -30.3535765 ]
21:32 ninjax INFO    : Checking log_prob at injection parameters: {'M_c': 1.7868062599212307, 'q': 0.9960221592890037, 's1_z': 0.0010386879200703775, 's2_z': 0.009315042588574497, 'lambda_1': 7.039733026387287, 'lambda_2': 7.039733026387287, 'cos_iota': 0.565024688837596, 'd_L': 310.4791394266319, 't_c': -0.022754561322684497, 'phase_c': 5.800249778006444, 'psi': 0.5858524443192392, 'ra': 1.7206173561614535, 'sin_dec': -0.6562269086841686, 'eta': 0.24999900710329764, 'iota': Array(0.97033315, dtype=float64, weak_type=True), 'dec': Array(-0.71580746, dtype=float64, weak_type=True), 'H1_SNR': 8.649633507617594, 'L1_SNR': 7.9000137863237185, 'V1_SNR': 4.6548027269227665, 'network_SNR': 12.605299126429863, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
21:32 ninjax INFO    : log_prob at the injection parameters is: 58.60636714574464
21:32 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
21:32 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
21:32 ninjax INFO    : Ninjax setup complete.
21:32 ninjax INFO    : Saving output to ./outdir/injection_21/
21:32 ninjax INFO    : Using polynomial learning rate scheduler
21:32 ninjax INFO    : The hyperparameters passed to flowMC and jim are
21:32 ninjax INFO    :    n_loop_training: 200
21:32 ninjax INFO    :    n_loop_production: 10
21:32 ninjax INFO    :    n_local_steps: 100
21:32 ninjax INFO    :    n_global_steps: 1000
21:32 ninjax INFO    :    n_epochs: 25
21:32 ninjax INFO    :    n_chains: 1000
21:32 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x14695df27910>
21:32 ninjax INFO    :    max_samples: 50000
21:32 ninjax INFO    :    momentum: 0.9
21:32 ninjax INFO    :    batch_size: 30000
21:32 ninjax INFO    :    use_global: True
21:32 ninjax INFO    :    keep_quantile: 0.0
21:32 ninjax INFO    :    train_thinning: 10
21:32 ninjax INFO    :    output_thinning: 50
21:32 ninjax INFO    :    n_sample_max: 10000
21:32 ninjax INFO    :    num_layers: 10
21:32 ninjax INFO    :    hidden_size: [128, 128]
21:32 ninjax INFO    :    num_bins: 8
21:32 ninjax INFO    :    save_training_chains: False
21:32 ninjax INFO    :    eps_mass_matrix: 1e-05
21:32 ninjax INFO    :    use_scheduler: True
21:32 ninjax INFO    :    use_temperature: False
21:32 ninjax INFO    :    which_temperature_schedule: exponential
21:32 ninjax INFO    :    starting_temperature: 2.0
21:32 ninjax INFO    :    stop_tempering_iteration: 75
21:32 ninjax INFO    :    stopping_criterion_global_acc: 0.1
21:32 ninjax INFO    :    stopping_criterion_loss: -inf
21:32 ninjax INFO    :    nf_model_kwargs: {}
21:32 ninjax INFO    :    local sampler arg not shown (pretty print)
21:32 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[ 2.16210037e-23  6.13945487e-23  4.76105708e-23  1.74240634e-23
 -1.39465346e-23  9.09148002e-24  6.03864208e-23  9.00047752e-23
  6.73374617e-23  3.94121467e-24]
[ 2.72427226e-23 -8.24141144e-23  4.19151143e-25 -8.56049582e-23
  1.42879981e-23  6.53272716e-23  3.36503934e-23  8.06826459e-23
  3.23102606e-23  7.06578516e-23]
Checking the noise that was generated in inject_signal ifo:
[-4.18506572e-23  6.09206392e-23  3.20210154e-23 -3.08691360e-23
 -4.25362835e-23 -1.02588727e-23  9.72904096e-24 -1.72824506e-23
  9.35950857e-24  7.09390657e-23]
[-2.03489677e-23  1.42891263e-23 -8.18904195e-24  8.48474063e-24
 -1.03038967e-22 -1.30659900e-22 -5.71940748e-23  5.45088340e-23
  2.16495044e-23 -1.27103271e-24]
Checking the noise that was generated in inject_signal ifo:
[-7.19311080e-23 -1.67647209e-24 -2.52477340e-23 -5.47396843e-23
 -2.19783293e-23 -6.70849069e-23  5.06513832e-23  3.96605765e-23
  4.00042596e-23  6.78735935e-23]
[-8.10316095e-24  2.28744964e-23 -5.34772781e-23 -1.18925626e-23
 -5.18200117e-24  5.08461493e-23  5.45590505e-23 -6.31775137e-23
  5.23373386e-23  2.22617108e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.11280608177185059 seconds
Using provided reference parameters:
ref_params for relative binning:
{'M_c': 1.7868062599212307, 'q': 0.9960221592890037, 's1_z': 0.0010386879200703775, 's2_z': 0.009315042588574497, 'lambda_1': 7.039733026387287, 'lambda_2': 7.039733026387287, 'cos_iota': 0.565024688837596, 'd_L': 310.4791394266319, 't_c': -0.022754561322684497, 'phase_c': 5.800249778006444, 'psi': 0.5858524443192392, 'ra': 1.7206173561614535, 'sin_dec': -0.6562269086841686, 'eta': 0.24999900710329764, 'iota': Array(0.97033315, dtype=float64, weak_type=True), 'dec': Array(-0.71580746, dtype=float64, weak_type=True), 'H1_SNR': 8.649633507617594, 'L1_SNR': 7.9000137863237185, 'V1_SNR': 4.6548027269227665, 'network_SNR': 12.605299126429863, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.520986795425415 seconds
Time for h_sky_low and h_sky_center: 5.419169902801514 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.6888782978057861
Going to compute coefficients . . .
Time for computing coefficients: 127.51657605171204 seconds
Time for computing coefficients: 7.003795385360718 seconds
Time for computing coefficients: 7.026803255081177 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:01<6:42:38, 121.40s/it]Tuning global sampler:   1%|          | 2/200 [02:05<2:53:51, 52.69s/it] Tuning global sampler:   2%|▏         | 3/200 [02:10<1:40:54, 30.74s/it]Tuning global sampler:   2%|▏         | 4/200 [02:15<1:06:43, 20.43s/it]Tuning global sampler:   2%|▎         | 5/200 [02:20<48:52, 15.04s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:25<37:09, 11.49s/it]Tuning global sampler:   4%|▎         | 7/200 [02:29<29:40,  9.23s/it]Tuning global sampler:   4%|▍         | 8/200 [02:34<24:50,  7.76s/it]Tuning global sampler:   4%|▍         | 9/200 [02:39<21:31,  6.76s/it]Tuning global sampler:   5%|▌         | 10/200 [02:43<19:09,  6.05s/it]Tuning global sampler:   6%|▌         | 11/200 [02:48<17:41,  5.62s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:38,  5.31s/it]Tuning global sampler:   6%|▋         | 13/200 [02:57<15:52,  5.10s/it]Tuning global sampler:   7%|▋         | 14/200 [03:02<15:22,  4.96s/it]Tuning global sampler:   8%|▊         | 15/200 [03:06<15:00,  4.87s/it]Tuning global sampler:   8%|▊         | 16/200 [03:11<14:43,  4.80s/it]Tuning global sampler:   8%|▊         | 17/200 [03:15<14:31,  4.76s/it]Tuning global sampler:   9%|▉         | 18/200 [03:20<14:21,  4.73s/it]Tuning global sampler:  10%|▉         | 19/200 [03:25<14:11,  4.70s/it]Tuning global sampler:  10%|█         | 20/200 [03:29<14:03,  4.69s/it]Tuning global sampler:  10%|█         | 21/200 [03:34<13:56,  4.68s/it]Tuning global sampler:  11%|█         | 22/200 [03:39<13:50,  4.66s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:44<14:30,  4.92s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:49<14:00,  4.77s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:53<13:36,  4.67s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:57<13:18,  4.59s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:02<13:07,  4.55s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:06<12:56,  4.51s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:11<12:47,  4.49s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:15<12:40,  4.48s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:20<12:34,  4.46s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:24<12:27,  4.45s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:29<12:20,  4.43s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:33<12:13,  4.42s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:37<12:09,  4.42s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:42<12:05,  4.42s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:46<12:00,  4.42s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:51<11:56,  4.42s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:55<11:52,  4.42s/it]Tuning global sampler:  20%|██        | 40/200 [04:59<11:46,  4.42s/it]Tuning global sampler:  20%|██        | 41/200 [05:04<11:41,  4.41s/it]Tuning global sampler:  21%|██        | 42/200 [05:08<11:36,  4.41s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:14<12:16,  4.69s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:18<11:57,  4.60s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:22<11:43,  4.54s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:27<11:32,  4.49s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:31<11:23,  4.47s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:36<11:15,  4.44s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:40<11:09,  4.44s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:44<11:03,  4.43s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:49<10:59,  4.42s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:53<10:54,  4.42s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:58<10:49,  4.42s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:02<10:45,  4.42s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:06<10:38,  4.40s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:11<10:32,  4.39s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:15<10:28,  4.40s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:20<10:24,  4.40s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:24<10:20,  4.40s/it]Tuning global sampler:  30%|███       | 60/200 [06:28<10:16,  4.40s/it]Tuning global sampler:  30%|███       | 61/200 [06:33<10:11,  4.40s/it]Tuning global sampler:  31%|███       | 62/200 [06:37<10:07,  4.40s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:43<10:42,  4.69s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:47<10:25,  4.60s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:51<14:35,  6.43s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.22s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.22s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.22s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.22s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.22s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.22s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.22s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.22s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]
21:39 ninjax INFO    : Saving samples to ./outdir/injection_21/results_training.npz
21:39 ninjax INFO    : Saving the NF
21:39 ninjax INFO    : Time taken: 454.8363561630249 seconds (7.580605936050415 minutes)
21:39 ninjax INFO    : Creating the final corner plot
21:39 ninjax INFO    : Dumping the final production chains
21:39 ninjax INFO    : Chains shape is: (13, 220000)
21:40 ninjax INFO    : Key: M_c: ESS = 31689, Rhat = 1.0211270923919196
21:40 ninjax INFO    : Key: q: ESS = 27004, Rhat = 1.0230699862750743
21:40 ninjax INFO    : Key: s1_z: ESS = 34641, Rhat = 1.0199656110033306
21:40 ninjax INFO    : Key: s2_z: ESS = 26350, Rhat = 1.0246075112983553
21:40 ninjax INFO    : Key: lambda_1: ESS = 32866, Rhat = 1.020936228072157
21:40 ninjax INFO    : Key: lambda_2: ESS = 33105, Rhat = 1.0195351173189227
21:40 ninjax INFO    : Key: cos_iota: ESS = 28990, Rhat = 1.022081598154808
21:40 ninjax INFO    : Key: d_L: ESS = 27871, Rhat = 1.0226290761326995
21:40 ninjax INFO    : Key: t_c: ESS = 36224, Rhat = 1.0184012244919096
21:40 ninjax INFO    : Key: phase_c: ESS = 15509, Rhat = 1.0415494848475069
21:40 ninjax INFO    : Key: psi: ESS = 17441, Rhat = 1.0351816884318208
21:40 ninjax INFO    : Key: ra: ESS = 45739, Rhat = 1.0187981784973075
21:40 ninjax INFO    : Key: sin_dec: ESS = 39945, Rhat = 1.0167711327187654
21:40 ninjax INFO    : Key: eta: ESS = 27004, Rhat = 1.0230699862750743
21:40 ninjax INFO    : Key: iota: ESS = 28990, Rhat = 1.022081598154808
21:40 ninjax INFO    : Key: dec: ESS = 39945, Rhat = 1.0167711327187654
21:40 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.668 +/- 0.238
q: 0.709 +/- 0.229
s1_z: 0.010 +/- 0.028
s2_z: 0.008 +/- 0.028
lambda_1: 1875.045 +/- 1476.971
lambda_2: 1996.047 +/- 1469.379
cos_iota: 0.207 +/- 0.327
d_L: 385.031 +/- 58.076
t_c: -0.017 +/- 0.031
phase_c: 3.070 +/- 1.762
psi: 1.705 +/- 0.858
ra: 2.172 +/- 1.177
sin_dec: -0.419 +/- 0.422
Log probability: 14.949 +/- 32.632
Local acceptance: 0.990 +/- 0.101
Global acceptance: 0.011 +/- 0.104
Max loss: 22.801, Min loss: 8.920
Production summary
==========
M_c: 1.787 +/- 0.000
q: 0.869 +/- 0.086
s1_z: 0.024 +/- 0.019
s2_z: 0.020 +/- 0.021
lambda_1: 414.879 +/- 477.026
lambda_2: 626.485 +/- 643.138
cos_iota: 0.679 +/- 0.196
d_L: 360.720 +/- 71.645
t_c: -0.020 +/- 0.002
phase_c: 3.212 +/- 1.811
psi: 1.544 +/- 0.873
ra: 1.710 +/- 0.021
sin_dec: -0.597 +/- 0.063
Log probability: 54.703 +/- 2.673
Local acceptance: 0.979 +/- 0.142
Global acceptance: 0.101 +/- 0.301
DONE

JOB STATISTICS
==============
Job ID: 10848213
Cluster: snellius
User/Group: twouters2/twouters2
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 00:09:55
CPU Efficiency: 5.63% of 02:56:00 core-walltime
Job Wall-clock time: 00:11:00
Memory Utilized: 4.18 GB
Memory Efficiency: 41.79% of 10.00 GB
