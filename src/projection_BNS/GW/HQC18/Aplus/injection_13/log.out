Fri Mar 28 12:53:02 CET 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
12:53 ninjax INFO    : Checking and setting outdir
12:53 ninjax INFO    : Found generation prior file ./outdir/injection_13/generation_prior.prior
12:53 ninjax INFO    : The outdir is set to ./outdir/injection_13
12:53 ninjax INFO    : Loading the given config
12:53 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
12:53 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
12:53 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/HQC18/outdir/injection_13/complete_config.json
12:53 ninjax INFO    : No seed specified. Generating a random seed: 630291
12:53 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 253380
12:53 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 82710
12:53 ninjax INFO    : Loading the priors
12:53 ninjax INFO    : Setting up the prior
12:53 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
12:53 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
12:53 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
12:53 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
12:53 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
12:53 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
12:53 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
12:53 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
12:53 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
12:53 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
12:53 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
12:53 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
12:53 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
12:53 ninjax INFO    : Setting up the generation prior
12:53 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.0452447532113593, naming=["mass_1_source"])
12:53 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.0452447532113593, naming=["mass_2_source"])
12:53 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
12:53 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
12:53 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
12:53 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
12:53 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
12:53 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
12:53 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
12:53 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
12:53 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
12:53 ninjax INFO    : Finished prior setup
12:53 ninjax INFO    : Setting the transforms
12:53 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
12:53 ninjax INFO    : transforms_str_list has 3 elements
12:53 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
12:53 ninjax INFO    : Setting the likelihood
12:53 ninjax INFO    : GW likelihood provided, setting up the GW pipe
12:53 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz
12:53 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz for BNS injections
12:53 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
12:53 ninjax INFO    : self.is_BNS_run is True
12:53 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
12:53 ninjax INFO    : GW run is an injection
12:53 ninjax INFO    : Setting up GW injection . . . 
12:53 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
12:53 ninjax INFO    : Generating new injection
12:53 ninjax INFO    : Sanity check: generated parameters:
12:53 ninjax INFO    : {'mass_1_source': 1.5407462753894234, 'mass_2_source': 1.8109286211848783, 's1_z': 0.011890727483924321, 's2_z': -0.0011147089669185858, 'cos_iota': 0.9903359166468619, 'd_L': 381.6890125424876, 't_c': 0.06767918033495465, 'phase_c': 4.7489698565722875, 'psi': 2.0896731389990215, 'ra': 0.9323121461071512, 'sin_dec': 0.8767629627240239}
12:53 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz . . . 
12:53 ninjax INFO    : Injected lambda_1: 41.31579452289827
12:53 ninjax INFO    : Injected lambda_2: 137.27086934978894
12:53 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.5785375096209944 is 128.0
12:53 ninjax INFO    : After transforms, the injection parameters are:
12:53 ninjax INFO    : {'mass_1_source': 1.8109286211848783, 'mass_2_source': 1.5407462753894234, 's1_z': 0.011890727483924321, 's2_z': -0.0011147089669185858, 'cos_iota': 0.9903359166468619, 'd_L': 381.6890125424876, 't_c': 0.06767918033495465, 'phase_c': 4.7489698565722875, 'psi': 2.0896731389990215, 'ra': 0.9323121461071512, 'sin_dec': 0.8767629627240239, 'q': 0.8508045305404272, 'M_c': 1.5785375096209944, 'eta': 0.24837546088900386, 'iota': Array(0.13913798, dtype=float64, weak_type=True), 'dec': Array(1.06908945, dtype=float64, weak_type=True), 'lambda_1': 41.31579452289827, 'lambda_2': 137.27086934978894}
12:53 ninjax INFO    : The trial injection parameters are {'M_c': 1.5785375096209944, 'eta': 0.24837546088900386, 's1_z': 0.011890727483924321, 's2_z': -0.0011147089669185858, 'lambda_1': 41.31579452289827, 'lambda_2': 137.27086934978894, 'd_L': 381.6890125424876, 'phase_c': 4.7489698565722875, 'iota': 0.1391379843441467, 't_c': 0.06767918033495465, 'psi': 2.0896731389990215, 'ra': 0.9323121461071512, 'dec': 1.069089448231917}
12:53 ninjax INFO    : Injecting signals . . .
12:53 ninjax INFO    : self.ifos
12:53 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
12:53 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
12:53 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
12:53 ninjax INFO    : [-3.22988548e-23-4.65517138e-23j  3.51843835e-24+1.99892390e-23j
 -6.55746936e-23-4.95431557e-23j ...
  1.18076245e-23-1.02819156e-24j -2.37432505e-23+1.14682654e-23j
  2.15413861e-23+1.01016347e-23j]
12:53 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
12:53 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
12:53 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
12:53 ninjax INFO    : [ 7.63245689e-23+5.07221254e-23j  1.54488364e-23+5.09453985e-23j
 -5.74043361e-23+4.01892568e-23j ...
 -9.17640113e-24-2.00148676e-23j -2.12952631e-23-3.23730723e-23j
  1.89526958e-23-3.26565699e-23j]
12:53 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
12:53 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
12:53 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
12:53 ninjax INFO    : [ 5.08113804e-23-3.65747610e-25j -1.05019779e-22+3.44371777e-23j
 -7.28081880e-25+6.12975201e-23j ...
  5.39107949e-23+2.68380142e-23j -6.34728594e-24+2.48370184e-23j
  8.61522480e-23+3.19188934e-23j]
12:53 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
12:53 ninjax INFO    : SNR for ifo H1 is 18.351103040541712
12:53 ninjax INFO    : SNR for ifo L1 is 16.571611578639178
12:53 ninjax INFO    : SNR for ifo V1 is 7.131834885566672
12:53 ninjax INFO    : The network SNR is 25.734108920902102
12:53 ninjax INFO    : Network SNR passes threshold
12:53 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
12:53 ninjax INFO    :    mass_1_source: 1.8109286211848783
12:53 ninjax INFO    :    mass_2_source: 1.5407462753894234
12:53 ninjax INFO    :    s1_z: 0.011890727483924321
12:53 ninjax INFO    :    s2_z: -0.0011147089669185858
12:53 ninjax INFO    :    cos_iota: 0.9903359166468619
12:53 ninjax INFO    :    d_L: 381.6890125424876
12:53 ninjax INFO    :    t_c: 0.06767918033495465
12:53 ninjax INFO    :    phase_c: 4.7489698565722875
12:53 ninjax INFO    :    psi: 2.0896731389990215
12:53 ninjax INFO    :    ra: 0.9323121461071512
12:53 ninjax INFO    :    sin_dec: 0.8767629627240239
12:53 ninjax INFO    :    q: 0.8508045305404272
12:53 ninjax INFO    :    M_c: 1.5785375096209944
12:53 ninjax INFO    :    eta: 0.24837546088900386
12:53 ninjax INFO    :    iota: 0.1391379843441467
12:53 ninjax INFO    :    dec: 1.069089448231917
12:53 ninjax INFO    :    lambda_1: 41.31579452289827
12:53 ninjax INFO    :    lambda_2: 137.27086934978894
12:53 ninjax INFO    :    H1_SNR: 18.351103040541712
12:53 ninjax INFO    :    L1_SNR: 16.571611578639178
12:53 ninjax INFO    :    V1_SNR: 7.131834885566672
12:53 ninjax INFO    :    network_SNR: 25.734108920902102
12:53 ninjax INFO    :    epoch: 126.0
12:53 ninjax INFO    :    gmst: 2.7288901910520846
12:53 ninjax INFO    :    duration: 128.0
12:53 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
12:53 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
12:53 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
12:55 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 144.68676161766052 seconds = 2.4114460269610087 minutes
12:55 ninjax INFO    : The priors are not modified after their initialization
12:55 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
12:55 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
12:55 ninjax INFO    : sample: {'M_c': Array([1.93957365, 1.34831685, 1.97690048], dtype=float64), 'q': Array([0.39058156, 0.66814256, 0.61148025], dtype=float64), 's1_z': Array([-0.02249701,  0.01021763, -0.04355835], dtype=float64), 's2_z': Array([-0.00386841,  0.04003559,  0.04667644], dtype=float64), 'lambda_1': Array([3273.60580322, 3222.89690565, 3953.49715631], dtype=float64), 'lambda_2': Array([2132.09675761, 3719.77015845, 2409.86205255], dtype=float64), 'cos_iota': Array([ 0.72365595, -0.9063732 ,  0.40583494], dtype=float64), 'd_L': Array([770.41061121, 959.01525981, 526.89480222], dtype=float64), 't_c': Array([0.04666437, 0.06585179, 0.06400055], dtype=float64), 'phase_c': Array([2.71001954, 0.11095788, 3.62270757], dtype=float64), 'psi': Array([2.22623711, 1.97495027, 0.95896608], dtype=float64), 'ra': Array([0.18359739, 1.0709989 , 4.65356559], dtype=float64), 'sin_dec': Array([-0.13669847,  0.98147235,  0.72742279], dtype=float64)}
12:55 ninjax INFO    : log_prob: [-26.58242174 -19.65136597 -18.25160617]
12:55 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.8109286211848783, 'mass_2_source': 1.5407462753894234, 's1_z': 0.011890727483924321, 's2_z': -0.0011147089669185858, 'cos_iota': 0.9903359166468619, 'd_L': 381.6890125424876, 't_c': 0.06767918033495465, 'phase_c': 4.7489698565722875, 'psi': 2.0896731389990215, 'ra': 0.9323121461071512, 'sin_dec': 0.8767629627240239, 'q': 0.8508045305404272, 'M_c': 1.5785375096209944, 'eta': 0.24837546088900386, 'iota': Array(0.13913798, dtype=float64, weak_type=True), 'dec': Array(1.06908945, dtype=float64, weak_type=True), 'lambda_1': 41.31579452289827, 'lambda_2': 137.27086934978894, 'H1_SNR': 18.351103040541712, 'L1_SNR': 16.571611578639178, 'V1_SNR': 7.131834885566672, 'network_SNR': 25.734108920902102, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
12:55 ninjax INFO    : log_prob at the injection parameters is: 326.290859393974
12:55 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
12:55 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
12:55 ninjax INFO    : Ninjax setup complete.
12:55 ninjax INFO    : Saving output to ./outdir/injection_13/
12:55 ninjax INFO    : Using polynomial learning rate scheduler
12:55 ninjax INFO    : The hyperparameters passed to flowMC and jim are
12:55 ninjax INFO    :    n_loop_training: 200
12:55 ninjax INFO    :    n_loop_production: 10
12:55 ninjax INFO    :    n_local_steps: 100
12:55 ninjax INFO    :    n_global_steps: 1000
12:55 ninjax INFO    :    n_epochs: 25
12:55 ninjax INFO    :    n_chains: 1000
12:55 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x14c12c6f3be0>
12:55 ninjax INFO    :    max_samples: 50000
12:55 ninjax INFO    :    momentum: 0.9
12:55 ninjax INFO    :    batch_size: 30000
12:55 ninjax INFO    :    use_global: True
12:55 ninjax INFO    :    keep_quantile: 0.0
12:55 ninjax INFO    :    train_thinning: 10
12:55 ninjax INFO    :    output_thinning: 50
12:55 ninjax INFO    :    n_sample_max: 10000
12:55 ninjax INFO    :    num_layers: 10
12:55 ninjax INFO    :    hidden_size: [128, 128]
12:55 ninjax INFO    :    num_bins: 8
12:55 ninjax INFO    :    save_training_chains: False
12:55 ninjax INFO    :    eps_mass_matrix: 1e-05
12:55 ninjax INFO    :    use_scheduler: True
12:55 ninjax INFO    :    use_temperature: False
12:55 ninjax INFO    :    which_temperature_schedule: exponential
12:55 ninjax INFO    :    starting_temperature: 2.0
12:55 ninjax INFO    :    stop_tempering_iteration: 75
12:55 ninjax INFO    :    stopping_criterion_global_acc: 0.1
12:55 ninjax INFO    :    stopping_criterion_loss: -inf
12:55 ninjax INFO    :    nf_model_kwargs: {}
12:55 ninjax INFO    :    local sampler arg not shown (pretty print)
12:55 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[-3.74593823e-23  6.86414301e-24 -5.71282124e-23 -1.35866245e-23
 -5.60283283e-23  2.88942810e-23  4.55173393e-23  1.81292429e-23
 -8.18183151e-24 -1.43672023e-23]
[-3.97979402e-23  2.77985028e-23 -4.86661048e-23  3.00698209e-23
 -1.55462526e-23 -3.53209264e-23 -1.22897140e-23  6.96095571e-23
 -5.01165994e-23  9.99266362e-24]
Checking the noise that was generated in inject_signal ifo:
[ 8.01619580e-23  1.15453366e-23 -6.50702531e-23  1.58112085e-23
  3.28631501e-23 -3.05795466e-23 -2.53467144e-23  2.29673332e-23
 -5.99573296e-23 -2.76935513e-23]
[ 4.40747739e-23  4.43407354e-23  4.03860286e-23 -7.44378426e-24
  8.14972672e-23 -5.43327594e-23  2.36737213e-23  5.80939482e-23
  5.24941401e-23  2.42058883e-23]
Checking the noise that was generated in inject_signal ifo:
[ 4.66977714e-23 -1.06338822e-22  2.10394779e-24 -4.49177034e-23
  3.07524101e-23 -1.27912546e-23  2.38997611e-23  9.15942947e-24
 -4.28332608e-23  5.45772819e-25]
[ 4.37104351e-25  3.84134057e-23  6.43819655e-23 -5.54650982e-23
 -4.98061658e-23  2.77790609e-23  1.53134602e-23 -1.21517722e-23
 -1.06413207e-22 -8.07412754e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.11177587509155273 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.8109286211848783, 'mass_2_source': 1.5407462753894234, 's1_z': 0.011890727483924321, 's2_z': -0.0011147089669185858, 'cos_iota': 0.9903359166468619, 'd_L': 381.6890125424876, 't_c': 0.06767918033495465, 'phase_c': 4.7489698565722875, 'psi': 2.0896731389990215, 'ra': 0.9323121461071512, 'sin_dec': 0.8767629627240239, 'q': 0.8508045305404272, 'M_c': 1.5785375096209944, 'eta': 0.24837546088900386, 'iota': Array(0.13913798, dtype=float64, weak_type=True), 'dec': Array(1.06908945, dtype=float64, weak_type=True), 'lambda_1': 41.31579452289827, 'lambda_2': 137.27086934978894, 'H1_SNR': 18.351103040541712, 'L1_SNR': 16.571611578639178, 'V1_SNR': 7.131834885566672, 'network_SNR': 25.734108920902102, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5123660564422607 seconds
Time for h_sky_low and h_sky_center: 5.3887410163879395 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.6928977966308594
Going to compute coefficients . . .
Time for computing coefficients: 123.92046213150024 seconds
Time for computing coefficients: 6.769343376159668 seconds
Time for computing coefficients: 6.7564167976379395 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:01<6:42:40, 121.41s/it]Tuning global sampler:   1%|          | 2/200 [02:06<2:53:53, 52.70s/it] Tuning global sampler:   2%|▏         | 3/200 [02:10<1:40:56, 30.74s/it]Tuning global sampler:   2%|▏         | 4/200 [02:15<1:06:44, 20.43s/it]Tuning global sampler:   2%|▎         | 5/200 [02:20<48:54, 15.05s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:25<37:10, 11.50s/it]Tuning global sampler:   4%|▎         | 7/200 [02:29<29:41,  9.23s/it]Tuning global sampler:   4%|▍         | 8/200 [02:34<24:50,  7.76s/it]Tuning global sampler:   4%|▍         | 9/200 [02:39<21:29,  6.75s/it]Tuning global sampler:   5%|▌         | 10/200 [02:43<19:06,  6.03s/it]Tuning global sampler:   6%|▌         | 11/200 [02:48<17:36,  5.59s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:33,  5.28s/it]Tuning global sampler:   6%|▋         | 13/200 [02:57<15:46,  5.06s/it]Tuning global sampler:   7%|▋         | 14/200 [03:02<15:28,  4.99s/it]Tuning global sampler:   8%|▊         | 15/200 [03:06<15:05,  4.89s/it]Tuning global sampler:   8%|▊         | 16/200 [03:11<15:17,  4.99s/it]Tuning global sampler:   8%|▊         | 17/200 [03:16<14:55,  4.89s/it]Tuning global sampler:   9%|▉         | 18/200 [03:21<14:36,  4.82s/it]Tuning global sampler:  10%|▉         | 19/200 [03:25<14:22,  4.77s/it]Tuning global sampler:  10%|█         | 20/200 [03:30<14:11,  4.73s/it]Tuning global sampler:  10%|█         | 21/200 [03:35<14:02,  4.71s/it]Tuning global sampler:  11%|█         | 22/200 [03:39<13:52,  4.68s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:44<13:44,  4.66s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:48<13:27,  4.59s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:54<14:00,  4.80s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:58<13:33,  4.68s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:02<13:14,  4.59s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:07<13:00,  4.54s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:11<12:47,  4.49s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:16<12:38,  4.46s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:20<12:30,  4.44s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:24<12:23,  4.42s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:29<12:14,  4.40s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:33<12:08,  4.39s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:37<12:04,  4.39s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:42<12:04,  4.42s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:46<11:58,  4.41s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:51<11:52,  4.40s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:55<11:47,  4.39s/it]Tuning global sampler:  20%|██        | 40/200 [04:59<11:42,  4.39s/it]Tuning global sampler:  20%|██        | 41/200 [05:04<11:37,  4.39s/it]Tuning global sampler:  21%|██        | 42/200 [05:08<11:33,  4.39s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:13<11:29,  4.39s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:18<12:07,  4.67s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:22<11:48,  4.57s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:27<11:34,  4.51s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:31<11:25,  4.48s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:35<11:16,  4.45s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:40<11:09,  4.43s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:44<11:02,  4.42s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:49<10:56,  4.41s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:53<10:51,  4.40s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:57<10:46,  4.39s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:02<10:41,  4.39s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:06<10:35,  4.38s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:10<10:29,  4.37s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:15<10:26,  4.38s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:19<10:23,  4.39s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:24<10:18,  4.39s/it]Tuning global sampler:  30%|███       | 60/200 [06:28<10:14,  4.39s/it]Tuning global sampler:  30%|███       | 61/200 [06:32<10:09,  4.39s/it]Tuning global sampler:  31%|███       | 62/200 [06:37<10:06,  4.40s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:41<10:02,  4.40s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:47<10:37,  4.69s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:51<14:34,  6.43s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.21s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.21s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.21s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.21s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.21s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.21s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.21s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.21s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]
13:03 ninjax INFO    : Saving samples to ./outdir/injection_13/results_training.npz
13:03 ninjax INFO    : Saving the NF
13:03 ninjax INFO    : Time taken: 453.7954840660095 seconds (7.563258067766825 minutes)
13:03 ninjax INFO    : Creating the final corner plot
13:03 ninjax INFO    : Dumping the final production chains
13:03 ninjax INFO    : Chains shape is: (13, 220000)
13:03 ninjax INFO    : Key: M_c: ESS = 46840, Rhat = 1.0148897781294197
13:03 ninjax INFO    : Key: q: ESS = 25232, Rhat = 1.0242339701559422
13:03 ninjax INFO    : Key: s1_z: ESS = 30722, Rhat = 1.0221487270809577
13:03 ninjax INFO    : Key: s2_z: ESS = 25983, Rhat = 1.0241358595182146
13:03 ninjax INFO    : Key: lambda_1: ESS = 40178, Rhat = 1.0163185186183705
13:03 ninjax INFO    : Key: lambda_2: ESS = 55406, Rhat = 1.0129535741319444
13:03 ninjax INFO    : Key: cos_iota: ESS = 22689, Rhat = 1.0274381963263715
13:03 ninjax INFO    : Key: d_L: ESS = 21416, Rhat = 1.0312937388322543
13:03 ninjax INFO    : Key: t_c: ESS = 37810, Rhat = 1.0168997632162986
13:03 ninjax INFO    : Key: phase_c: ESS = 52073, Rhat = 1.016352526490199
13:03 ninjax INFO    : Key: psi: ESS = 28783, Rhat = 1.0215594072754248
13:03 ninjax INFO    : Key: ra: ESS = 54887, Rhat = 1.0134636168789917
13:03 ninjax INFO    : Key: sin_dec: ESS = 33842, Rhat = 1.0187890077586643
13:03 ninjax INFO    : Key: eta: ESS = 25232, Rhat = 1.0242339701559422
13:03 ninjax INFO    : Key: iota: ESS = 22689, Rhat = 1.0274381963263715
13:03 ninjax INFO    : Key: dec: ESS = 33842, Rhat = 1.0187890077586643
13:03 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.580 +/- 0.098
q: 0.730 +/- 0.205
s1_z: 0.012 +/- 0.026
s2_z: 0.002 +/- 0.027
lambda_1: 1545.757 +/- 1522.411
lambda_2: 1319.172 +/- 1383.958
cos_iota: 0.487 +/- 0.529
d_L: 501.494 +/- 222.927
t_c: 0.059 +/- 0.024
phase_c: 2.933 +/- 1.692
psi: 1.960 +/- 0.861
ra: 1.324 +/- 1.296
sin_dec: 0.599 +/- 0.467
Log probability: 190.332 +/- 129.495
Local acceptance: 0.797 +/- 0.403
Global acceptance: 0.010 +/- 0.099
Max loss: 22.756, Min loss: 4.620
Production summary
==========
M_c: 1.579 +/- 0.000
q: 0.856 +/- 0.095
s1_z: 0.011 +/- 0.025
s2_z: 0.004 +/- 0.027
lambda_1: 97.648 +/- 80.418
lambda_2: 160.629 +/- 129.084
cos_iota: 0.810 +/- 0.148
d_L: 312.037 +/- 47.939
t_c: 0.068 +/- 0.000
phase_c: 3.347 +/- 1.680
psi: 1.731 +/- 0.862
ra: 0.927 +/- 0.016
sin_dec: 0.879 +/- 0.003
Log probability: 323.820 +/- 2.202
Local acceptance: 0.577 +/- 0.494
Global acceptance: 0.108 +/- 0.310
DONE

JOB STATISTICS
==============
Job ID: 10863577
Cluster: snellius
User/Group: twouters2/twouters2
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 00:09:48
CPU Efficiency: 5.62% of 02:54:24 core-walltime
Job Wall-clock time: 00:10:54
Memory Utilized: 4.31 GB
Memory Efficiency: 43.06% of 10.00 GB
