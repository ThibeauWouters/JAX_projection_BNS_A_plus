Fri Mar 28 12:53:06 CET 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
12:53 ninjax INFO    : Checking and setting outdir
12:53 ninjax INFO    : Found generation prior file ./outdir/injection_28/generation_prior.prior
12:53 ninjax INFO    : The outdir is set to ./outdir/injection_28
12:53 ninjax INFO    : Loading the given config
12:53 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
12:53 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
12:53 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/HQC18/outdir/injection_28/complete_config.json
12:53 ninjax INFO    : No seed specified. Generating a random seed: 629806
12:53 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 83864
12:53 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 281617
12:53 ninjax INFO    : Loading the priors
12:53 ninjax INFO    : Setting up the prior
12:53 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
12:53 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
12:53 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
12:53 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
12:53 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
12:53 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
12:53 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
12:53 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
12:53 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
12:53 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
12:53 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
12:53 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
12:53 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
12:53 ninjax INFO    : Setting up the generation prior
12:53 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.0452447532113593, naming=["mass_1_source"])
12:53 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.0452447532113593, naming=["mass_2_source"])
12:53 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
12:53 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
12:53 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
12:53 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
12:53 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
12:53 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
12:53 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
12:53 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
12:53 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
12:53 ninjax INFO    : Finished prior setup
12:53 ninjax INFO    : Setting the transforms
12:53 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
12:53 ninjax INFO    : transforms_str_list has 3 elements
12:53 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
12:53 ninjax INFO    : Setting the likelihood
12:53 ninjax INFO    : GW likelihood provided, setting up the GW pipe
12:53 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz
12:53 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz for BNS injections
12:53 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
12:53 ninjax INFO    : self.is_BNS_run is True
12:53 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
12:53 ninjax INFO    : GW run is an injection
12:53 ninjax INFO    : Setting up GW injection . . . 
12:53 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
12:53 ninjax INFO    : Generating new injection
12:53 ninjax INFO    : Sanity check: generated parameters:
12:53 ninjax INFO    : {'mass_1_source': 1.5209227538163719, 'mass_2_source': 1.9832796177836127, 's1_z': 0.018927887022806608, 's2_z': 0.018850772191077447, 'cos_iota': -0.5162248593665533, 'd_L': 406.2120206304589, 't_c': -0.07324952950683242, 'phase_c': 1.3542110255419582, 'psi': 0.09489213215833338, 'ra': 4.654699873033425, 'sin_dec': -0.9405567191295887}
12:53 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz . . . 
12:53 ninjax INFO    : Injected lambda_1: 15.963391384430135
12:53 ninjax INFO    : Injected lambda_2: 149.79144851136357
12:53 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.6478376344451795 is 128.0
12:53 ninjax INFO    : After transforms, the injection parameters are:
12:53 ninjax INFO    : {'mass_1_source': 1.9832796177836127, 'mass_2_source': 1.5209227538163719, 's1_z': 0.018927887022806608, 's2_z': 0.018850772191077447, 'cos_iota': -0.5162248593665533, 'd_L': 406.2120206304589, 't_c': -0.07324952950683242, 'phase_c': 1.3542110255419582, 'psi': 0.09489213215833338, 'ra': 4.654699873033425, 'sin_dec': -0.9405567191295887, 'q': 0.7668725782177193, 'M_c': 1.6478376344451795, 'eta': 0.2456477255972947, 'iota': Array(2.11323351, dtype=float64, weak_type=True), 'dec': Array(-1.22426576, dtype=float64, weak_type=True), 'lambda_1': 15.963391384430135, 'lambda_2': 149.79144851136357}
12:53 ninjax INFO    : The trial injection parameters are {'M_c': 1.6478376344451795, 'eta': 0.2456477255972947, 's1_z': 0.018927887022806608, 's2_z': 0.018850772191077447, 'lambda_1': 15.963391384430135, 'lambda_2': 149.79144851136357, 'd_L': 406.2120206304589, 'phase_c': 1.3542110255419582, 'iota': 2.1132335141303455, 't_c': -0.07324952950683242, 'psi': 0.09489213215833338, 'ra': 4.654699873033425, 'dec': -1.224265763601225}
12:53 ninjax INFO    : Injecting signals . . .
12:53 ninjax INFO    : self.ifos
12:53 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
12:53 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
12:53 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
12:53 ninjax INFO    : [ 5.48906986e-24-7.64532533e-24j -1.20940331e-23+2.14771293e-23j
 -2.13912326e-23-4.17890337e-23j ...
  1.60971351e-23-2.59761728e-24j  3.95769990e-24+2.89620453e-24j
  6.36275394e-24+2.95025462e-23j]
12:53 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
12:53 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
12:53 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
12:53 ninjax INFO    : [ 9.98370851e-23+1.44478813e-23j -4.61363536e-25-8.04112964e-25j
  4.15215955e-23+6.00135971e-23j ...
 -1.18204680e-23+2.13945488e-24j -1.22894960e-23-3.07980972e-23j
 -1.40749656e-23+2.42094040e-23j]
12:53 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
12:53 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
12:53 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
12:53 ninjax INFO    : [-4.57470527e-23+9.04739155e-23j -1.63653843e-23+1.37659852e-23j
 -8.49613448e-24-3.02202709e-23j ...
  1.86941825e-23-2.60298028e-23j  9.38659943e-23+2.02557045e-24j
 -5.77556990e-23-8.08423080e-24j]
12:53 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
12:53 ninjax INFO    : SNR for ifo H1 is 9.698479246652925
12:53 ninjax INFO    : SNR for ifo L1 is 9.043140971197605
12:53 ninjax INFO    : SNR for ifo V1 is 5.320994916946266
12:53 ninjax INFO    : The network SNR is 14.288172914297974
12:53 ninjax INFO    : Network SNR passes threshold
12:53 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
12:53 ninjax INFO    :    mass_1_source: 1.9832796177836127
12:53 ninjax INFO    :    mass_2_source: 1.5209227538163719
12:53 ninjax INFO    :    s1_z: 0.018927887022806608
12:53 ninjax INFO    :    s2_z: 0.018850772191077447
12:53 ninjax INFO    :    cos_iota: -0.5162248593665533
12:53 ninjax INFO    :    d_L: 406.2120206304589
12:53 ninjax INFO    :    t_c: -0.07324952950683242
12:53 ninjax INFO    :    phase_c: 1.3542110255419582
12:53 ninjax INFO    :    psi: 0.09489213215833338
12:53 ninjax INFO    :    ra: 4.654699873033425
12:53 ninjax INFO    :    sin_dec: -0.9405567191295887
12:53 ninjax INFO    :    q: 0.7668725782177193
12:53 ninjax INFO    :    M_c: 1.6478376344451795
12:53 ninjax INFO    :    eta: 0.2456477255972947
12:53 ninjax INFO    :    iota: 2.1132335141303455
12:53 ninjax INFO    :    dec: -1.224265763601225
12:53 ninjax INFO    :    lambda_1: 15.963391384430135
12:53 ninjax INFO    :    lambda_2: 149.79144851136357
12:53 ninjax INFO    :    H1_SNR: 9.698479246652925
12:53 ninjax INFO    :    L1_SNR: 9.043140971197605
12:53 ninjax INFO    :    V1_SNR: 5.320994916946266
12:53 ninjax INFO    :    network_SNR: 14.288172914297974
12:53 ninjax INFO    :    epoch: 126.0
12:53 ninjax INFO    :    gmst: 2.7288901910520846
12:53 ninjax INFO    :    duration: 128.0
12:53 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
12:53 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
12:53 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
12:55 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 143.15159964561462 seconds = 2.385859994093577 minutes
12:55 ninjax INFO    : The priors are not modified after their initialization
12:55 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
12:55 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
12:55 ninjax INFO    : sample: {'M_c': Array([1.67397028, 1.42585144, 1.48638171], dtype=float64), 'q': Array([0.27215945, 0.81424842, 0.3437664 ], dtype=float64), 's1_z': Array([ 0.03839506, -0.01948626, -0.03004636], dtype=float64), 's2_z': Array([-0.02131533, -0.03343183, -0.00932926], dtype=float64), 'lambda_1': Array([3834.87729327, 2700.76533502, 1267.18963483], dtype=float64), 'lambda_2': Array([ 152.91154965,  973.75843121, 2883.83876534], dtype=float64), 'cos_iota': Array([ 0.32904874,  0.8519984 , -0.03617371], dtype=float64), 'd_L': Array([337.45398184, 864.56817017, 987.13205732], dtype=float64), 't_c': Array([ 0.03471799, -0.02113561, -0.07797593], dtype=float64), 'phase_c': Array([2.83794927, 3.02866872, 2.30823748], dtype=float64), 'psi': Array([2.6496429 , 2.04210469, 2.040294  ], dtype=float64), 'ra': Array([3.62298146, 1.29074987, 6.13508633], dtype=float64), 'sin_dec': Array([ 0.37956414, -0.84766382,  0.93842836], dtype=float64)}
12:55 ninjax INFO    : log_prob: [-42.76362539  -4.27242593 -10.66219987]
12:55 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.9832796177836127, 'mass_2_source': 1.5209227538163719, 's1_z': 0.018927887022806608, 's2_z': 0.018850772191077447, 'cos_iota': -0.5162248593665533, 'd_L': 406.2120206304589, 't_c': -0.07324952950683242, 'phase_c': 1.3542110255419582, 'psi': 0.09489213215833338, 'ra': 4.654699873033425, 'sin_dec': -0.9405567191295887, 'q': 0.7668725782177193, 'M_c': 1.6478376344451795, 'eta': 0.2456477255972947, 'iota': Array(2.11323351, dtype=float64, weak_type=True), 'dec': Array(-1.22426576, dtype=float64, weak_type=True), 'lambda_1': 15.963391384430135, 'lambda_2': 149.79144851136357, 'H1_SNR': 9.698479246652925, 'L1_SNR': 9.043140971197605, 'V1_SNR': 5.320994916946266, 'network_SNR': 14.288172914297974, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
12:55 ninjax INFO    : log_prob at the injection parameters is: 81.68662374935813
12:55 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
12:55 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
12:55 ninjax INFO    : Ninjax setup complete.
12:55 ninjax INFO    : Saving output to ./outdir/injection_28/
12:55 ninjax INFO    : Using polynomial learning rate scheduler
12:55 ninjax INFO    : The hyperparameters passed to flowMC and jim are
12:55 ninjax INFO    :    n_loop_training: 200
12:55 ninjax INFO    :    n_loop_production: 10
12:55 ninjax INFO    :    n_local_steps: 100
12:55 ninjax INFO    :    n_global_steps: 1000
12:55 ninjax INFO    :    n_epochs: 25
12:55 ninjax INFO    :    n_chains: 1000
12:55 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x1530fb48bbe0>
12:55 ninjax INFO    :    max_samples: 50000
12:55 ninjax INFO    :    momentum: 0.9
12:55 ninjax INFO    :    batch_size: 30000
12:55 ninjax INFO    :    use_global: True
12:55 ninjax INFO    :    keep_quantile: 0.0
12:55 ninjax INFO    :    train_thinning: 10
12:55 ninjax INFO    :    output_thinning: 50
12:55 ninjax INFO    :    n_sample_max: 10000
12:55 ninjax INFO    :    num_layers: 10
12:55 ninjax INFO    :    hidden_size: [128, 128]
12:55 ninjax INFO    :    num_bins: 8
12:55 ninjax INFO    :    save_training_chains: False
12:55 ninjax INFO    :    eps_mass_matrix: 1e-05
12:55 ninjax INFO    :    use_scheduler: True
12:55 ninjax INFO    :    use_temperature: False
12:55 ninjax INFO    :    which_temperature_schedule: exponential
12:55 ninjax INFO    :    starting_temperature: 2.0
12:55 ninjax INFO    :    stop_tempering_iteration: 75
12:55 ninjax INFO    :    stopping_criterion_global_acc: 0.1
12:55 ninjax INFO    :    stopping_criterion_loss: -inf
12:55 ninjax INFO    :    nf_model_kwargs: {}
12:55 ninjax INFO    :    local sampler arg not shown (pretty print)
12:55 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[ 1.01439531e-24 -1.23978229e-23 -1.70157259e-23  4.35661165e-23
  1.67596422e-24  5.96888168e-23 -8.10252624e-23 -2.20053497e-24
  2.89309205e-23  1.09984063e-24]
[-7.20515309e-24  2.59610626e-23 -4.07719823e-23 -3.22414157e-23
  2.94788350e-23  7.05502720e-24 -2.48548738e-23 -6.28334558e-23
 -9.31271817e-23 -5.42302091e-23]
Checking the noise that was generated in inject_signal ifo:
[ 1.03787476e-22  1.57433138e-24  3.82334919e-23  4.21115821e-23
 -2.84980140e-23  4.87005426e-23  3.10847399e-23  2.68992148e-23
 -1.83712396e-23  5.70393709e-23]
[ 1.58518336e-23 -4.46696878e-24  5.74188212e-23 -2.55642984e-23
  5.90868727e-23  3.73681074e-23 -1.18821104e-23  3.07412730e-23
  7.20119003e-23  1.94921282e-23]
Checking the noise that was generated in inject_signal ifo:
[-4.36332461e-23 -1.82915222e-23 -1.12362504e-23  3.98978996e-23
  8.47374050e-23 -7.54199610e-23 -3.04499060e-23 -1.45334662e-23
 -6.24235191e-23 -4.36345413e-23]
[ 8.81662603e-23  1.13013406e-23 -2.87145199e-23  5.28277971e-23
 -3.93738019e-24 -2.11071856e-23  1.65078529e-23  8.47310096e-23
  9.00964500e-23  5.98332598e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.11185097694396973 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.9832796177836127, 'mass_2_source': 1.5209227538163719, 's1_z': 0.018927887022806608, 's2_z': 0.018850772191077447, 'cos_iota': -0.5162248593665533, 'd_L': 406.2120206304589, 't_c': -0.07324952950683242, 'phase_c': 1.3542110255419582, 'psi': 0.09489213215833338, 'ra': 4.654699873033425, 'sin_dec': -0.9405567191295887, 'q': 0.7668725782177193, 'M_c': 1.6478376344451795, 'eta': 0.2456477255972947, 'iota': Array(2.11323351, dtype=float64, weak_type=True), 'dec': Array(-1.22426576, dtype=float64, weak_type=True), 'lambda_1': 15.963391384430135, 'lambda_2': 149.79144851136357, 'H1_SNR': 9.698479246652925, 'L1_SNR': 9.043140971197605, 'V1_SNR': 5.320994916946266, 'network_SNR': 14.288172914297974, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5191760063171387 seconds
Time for h_sky_low and h_sky_center: 5.268526077270508 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.6843671798706055
Going to compute coefficients . . .
Time for computing coefficients: 122.05507946014404 seconds
Time for computing coefficients: 6.912212371826172 seconds
Time for computing coefficients: 7.067662239074707 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:01<6:43:13, 121.58s/it]Tuning global sampler:   1%|          | 2/200 [02:06<2:54:03, 52.74s/it] Tuning global sampler:   2%|▏         | 3/200 [02:10<1:41:00, 30.77s/it]Tuning global sampler:   2%|▏         | 4/200 [02:15<1:06:45, 20.44s/it]Tuning global sampler:   2%|▎         | 5/200 [02:19<47:51, 14.72s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:24<36:28, 11.28s/it]Tuning global sampler:   4%|▎         | 7/200 [02:29<30:06,  9.36s/it]Tuning global sampler:   4%|▍         | 8/200 [02:34<25:05,  7.84s/it]Tuning global sampler:   4%|▍         | 9/200 [02:39<21:39,  6.80s/it]Tuning global sampler:   5%|▌         | 10/200 [02:43<19:13,  6.07s/it]Tuning global sampler:   6%|▌         | 11/200 [02:48<17:42,  5.62s/it]Tuning global sampler:   6%|▌         | 12/200 [02:52<16:36,  5.30s/it]Tuning global sampler:   6%|▋         | 13/200 [02:57<15:49,  5.08s/it]Tuning global sampler:   7%|▋         | 14/200 [03:01<15:19,  4.94s/it]Tuning global sampler:   8%|▊         | 15/200 [03:06<14:56,  4.85s/it]Tuning global sampler:   8%|▊         | 16/200 [03:11<14:41,  4.79s/it]Tuning global sampler:   8%|▊         | 17/200 [03:15<14:27,  4.74s/it]Tuning global sampler:   9%|▉         | 18/200 [03:20<14:16,  4.71s/it]Tuning global sampler:  10%|▉         | 19/200 [03:25<14:08,  4.69s/it]Tuning global sampler:  10%|█         | 20/200 [03:29<14:00,  4.67s/it]Tuning global sampler:  10%|█         | 21/200 [03:34<13:53,  4.66s/it]Tuning global sampler:  11%|█         | 22/200 [03:39<14:33,  4.91s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:44<14:12,  4.82s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:48<13:46,  4.70s/it]Tuning global sampler:  12%|█▎        | 25/200 [03:53<13:46,  4.72s/it]Tuning global sampler:  13%|█▎        | 26/200 [03:57<13:23,  4.62s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:02<13:06,  4.55s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:06<12:53,  4.50s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:11<12:43,  4.47s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:15<12:35,  4.44s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:19<12:28,  4.43s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:24<12:21,  4.41s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:28<12:13,  4.39s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:32<12:06,  4.38s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:37<12:02,  4.38s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:41<11:58,  4.38s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:46<11:54,  4.38s/it]Tuning global sampler:  19%|█▉        | 38/200 [04:50<11:50,  4.38s/it]Tuning global sampler:  20%|█▉        | 39/200 [04:54<11:45,  4.38s/it]Tuning global sampler:  20%|██        | 40/200 [04:59<11:41,  4.38s/it]Tuning global sampler:  20%|██        | 41/200 [05:04<12:20,  4.66s/it]Tuning global sampler:  21%|██        | 42/200 [05:08<12:03,  4.58s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:13<11:49,  4.52s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:17<11:37,  4.47s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:22<11:27,  4.44s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:26<11:20,  4.42s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:30<11:14,  4.41s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:35<11:09,  4.40s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:39<11:04,  4.40s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:43<10:59,  4.39s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:48<10:54,  4.39s/it]Tuning global sampler:  26%|██▌       | 52/200 [05:52<10:49,  4.39s/it]Tuning global sampler:  26%|██▋       | 53/200 [05:57<10:44,  4.39s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:01<10:40,  4.39s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:05<10:34,  4.38s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:10<10:28,  4.37s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:14<10:25,  4.37s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:19<10:22,  4.38s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:23<10:17,  4.38s/it]Tuning global sampler:  30%|███       | 60/200 [06:27<10:17,  4.41s/it]Tuning global sampler:  30%|███       | 61/200 [06:33<10:51,  4.69s/it]Tuning global sampler:  31%|███       | 62/200 [06:37<10:34,  4.60s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:42<10:22,  4.55s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:46<10:11,  4.49s/it]Tuning global sampler:  32%|███▎      | 65/200 [06:50<10:02,  4.46s/it]Tuning global sampler:  33%|███▎      | 66/200 [06:55<09:53,  4.43s/it]Tuning global sampler:  34%|███▎      | 67/200 [06:59<09:45,  4.40s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:03<09:40,  4.40s/it]Tuning global sampler:  34%|███▍      | 69/200 [07:08<09:35,  4.39s/it]Tuning global sampler:  35%|███▌      | 70/200 [07:12<09:31,  4.39s/it]Tuning global sampler:  36%|███▌      | 71/200 [07:17<09:27,  4.40s/it]Tuning global sampler:  36%|███▌      | 72/200 [07:21<09:22,  4.40s/it]Tuning global sampler:  36%|███▋      | 73/200 [07:25<09:18,  4.39s/it]Tuning global sampler:  37%|███▋      | 74/200 [07:30<09:13,  4.39s/it]Tuning global sampler:  38%|███▊      | 75/200 [07:34<09:09,  4.40s/it]Tuning global sampler:  38%|███▊      | 76/200 [07:39<09:04,  4.39s/it]Tuning global sampler:  38%|███▊      | 77/200 [07:43<08:59,  4.38s/it]Tuning global sampler:  39%|███▉      | 78/200 [07:47<08:53,  4.37s/it]Tuning global sampler:  40%|███▉      | 79/200 [07:52<08:49,  4.38s/it]Tuning global sampler:  40%|████      | 80/200 [07:56<08:49,  4.41s/it]Tuning global sampler:  40%|████      | 81/200 [08:01<09:18,  4.70s/it]Tuning global sampler:  41%|████      | 82/200 [08:06<09:03,  4.61s/it]Tuning global sampler:  42%|████▏     | 83/200 [08:10<08:50,  4.54s/it]Tuning global sampler:  42%|████▏     | 84/200 [08:15<08:41,  4.50s/it]Tuning global sampler:  42%|████▎     | 85/200 [08:19<08:33,  4.46s/it]Tuning global sampler:  43%|████▎     | 86/200 [08:23<08:26,  4.44s/it]Tuning global sampler:  44%|████▎     | 87/200 [08:28<08:20,  4.43s/it]Tuning global sampler:  44%|████▍     | 88/200 [08:32<08:13,  4.41s/it]Tuning global sampler:  44%|████▍     | 89/200 [08:37<08:07,  4.39s/it]Tuning global sampler:  45%|████▌     | 90/200 [08:41<08:04,  4.40s/it]Tuning global sampler:  46%|████▌     | 91/200 [08:45<07:59,  4.39s/it]Tuning global sampler:  46%|████▌     | 92/200 [08:50<07:54,  4.40s/it]Tuning global sampler:  46%|████▋     | 93/200 [08:54<07:51,  4.41s/it]Tuning global sampler:  47%|████▋     | 94/200 [08:59<07:47,  4.41s/it]Tuning global sampler:  48%|████▊     | 95/200 [09:03<07:42,  4.41s/it]Tuning global sampler:  48%|████▊     | 96/200 [09:07<07:41,  4.44s/it]Tuning global sampler:  48%|████▊     | 97/200 [09:12<07:36,  4.43s/it]Tuning global sampler:  49%|████▉     | 98/200 [09:16<07:34,  4.45s/it]Tuning global sampler:  50%|████▉     | 99/200 [09:21<07:26,  4.42s/it]Tuning global sampler:  50%|█████     | 100/200 [09:25<07:19,  4.40s/it]Tuning global sampler:  50%|█████     | 101/200 [09:31<07:46,  4.71s/it]Tuning global sampler:  51%|█████     | 102/200 [09:35<07:32,  4.61s/it]Tuning global sampler:  52%|█████▏    | 103/200 [09:39<07:20,  4.54s/it]Tuning global sampler:  52%|█████▏    | 104/200 [09:44<07:11,  4.49s/it]Tuning global sampler:  52%|█████▎    | 105/200 [09:48<07:03,  4.46s/it]Tuning global sampler:  53%|█████▎    | 106/200 [09:52<06:57,  4.44s/it]Tuning global sampler:  54%|█████▎    | 107/200 [09:57<06:50,  4.42s/it]Tuning global sampler:  54%|█████▍    | 108/200 [10:01<06:45,  4.40s/it]Tuning global sampler:  55%|█████▍    | 109/200 [10:06<06:40,  4.40s/it]Tuning global sampler:  55%|█████▌    | 110/200 [10:11<07:07,  4.76s/it]Tuning global sampler:  56%|█████▌    | 111/200 [10:16<06:52,  4.63s/it]Tuning global sampler:  56%|█████▌    | 111/200 [10:20<08:17,  5.59s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.22s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.22s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.22s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.22s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.22s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.22s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.22s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.22s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]
13:06 ninjax INFO    : Saving samples to ./outdir/injection_28/results_training.npz
13:06 ninjax INFO    : Saving the NF
13:06 ninjax INFO    : Time taken: 659.1059617996216 seconds (10.985099363327027 minutes)
13:06 ninjax INFO    : Creating the final corner plot
13:06 ninjax INFO    : Dumping the final production chains
13:06 ninjax INFO    : Chains shape is: (13, 220000)
13:07 ninjax INFO    : Key: M_c: ESS = 35639, Rhat = 1.0184709369447957
13:07 ninjax INFO    : Key: q: ESS = 47170, Rhat = 1.0140322779612614
13:07 ninjax INFO    : Key: s1_z: ESS = 41248, Rhat = 1.0163449736432484
13:07 ninjax INFO    : Key: s2_z: ESS = 39910, Rhat = 1.016401136784558
13:07 ninjax INFO    : Key: lambda_1: ESS = 20429, Rhat = 1.0296643396322456
13:07 ninjax INFO    : Key: lambda_2: ESS = 41914, Rhat = 1.015254143853815
13:07 ninjax INFO    : Key: cos_iota: ESS = 25455, Rhat = 1.025208104733503
13:07 ninjax INFO    : Key: d_L: ESS = 34543, Rhat = 1.0187818241952988
13:07 ninjax INFO    : Key: t_c: ESS = 29955, Rhat = 1.0217269108056635
13:07 ninjax INFO    : Key: phase_c: ESS = 39607, Rhat = 1.0169245794292834
13:07 ninjax INFO    : Key: psi: ESS = 55843, Rhat = 1.0168153294346949
13:07 ninjax INFO    : Key: ra: ESS = 28986, Rhat = 1.0228167196900744
13:07 ninjax INFO    : Key: sin_dec: ESS = 28250, Rhat = 1.0233734852644254
13:07 ninjax INFO    : Key: eta: ESS = 47170, Rhat = 1.0140322779612614
13:07 ninjax INFO    : Key: iota: ESS = 25455, Rhat = 1.025208104733503
13:07 ninjax INFO    : Key: dec: ESS = 28250, Rhat = 1.0233734852644254
13:07 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.641 +/- 0.221
q: 0.751 +/- 0.212
s1_z: 0.014 +/- 0.026
s2_z: 0.010 +/- 0.026
lambda_1: 1572.318 +/- 1437.158
lambda_2: 1724.258 +/- 1437.343
cos_iota: -0.076 +/- 0.567
d_L: 680.862 +/- 181.129
t_c: -0.050 +/- 0.039
phase_c: 3.291 +/- 1.773
psi: 1.560 +/- 0.885
ra: 3.300 +/- 1.505
sin_dec: -0.285 +/- 0.646
Log probability: 32.354 +/- 39.589
Local acceptance: 0.974 +/- 0.160
Global acceptance: 0.018 +/- 0.134
Max loss: 22.799, Min loss: -0.684
Production summary
==========
M_c: 1.648 +/- 0.000
q: 0.862 +/- 0.090
s1_z: 0.021 +/- 0.020
s2_z: 0.016 +/- 0.022
lambda_1: 387.181 +/- 483.610
lambda_2: 582.522 +/- 630.383
cos_iota: -0.709 +/- 0.396
d_L: 560.068 +/- 102.159
t_c: -0.070 +/- 0.008
phase_c: 3.172 +/- 1.810
psi: 1.544 +/- 0.914
ra: 4.487 +/- 0.658
sin_dec: -0.829 +/- 0.430
Log probability: 77.564 +/- 2.864
Local acceptance: 0.944 +/- 0.230
Global acceptance: 0.116 +/- 0.320
DONE

JOB STATISTICS
==============
Job ID: 10863595
Cluster: snellius
User/Group: twouters2/twouters2
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 00:12:21
CPU Efficiency: 5.40% of 03:48:32 core-walltime
Job Wall-clock time: 00:14:17
Memory Utilized: 4.57 GB
Memory Efficiency: 45.69% of 10.00 GB
