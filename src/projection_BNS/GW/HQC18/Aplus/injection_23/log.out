Fri Mar 28 12:53:02 CET 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
12:53 ninjax INFO    : Checking and setting outdir
12:53 ninjax INFO    : Found generation prior file ./outdir/injection_23/generation_prior.prior
12:53 ninjax INFO    : The outdir is set to ./outdir/injection_23
12:53 ninjax INFO    : Loading the given config
12:53 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
12:53 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '200', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
12:53 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/HQC18/outdir/injection_23/complete_config.json
12:53 ninjax INFO    : No seed specified. Generating a random seed: 14804
12:53 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 336472
12:53 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 244917
12:53 ninjax INFO    : Loading the priors
12:53 ninjax INFO    : Setting up the prior
12:53 ninjax INFO    :    Mc_prior = Uniform(0.98, 2.6, naming=["M_c"])
12:53 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
12:53 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
12:53 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
12:53 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
12:53 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
12:53 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
12:53 ninjax INFO    :    dL_prior = PowerLaw(1.0, 1000.0, 2.0, naming=["d_L"])
12:53 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
12:53 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
12:53 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
12:53 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
12:53 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
12:53 ninjax INFO    : Setting up the generation prior
12:53 ninjax INFO    :    mass_1_source_prior = Uniform(1.0, 2.0452447532113593, naming=["mass_1_source"])
12:53 ninjax INFO    :    mass_2_source_prior = Uniform(1.0, 2.0452447532113593, naming=["mass_2_source"])
12:53 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
12:53 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
12:53 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
12:53 ninjax INFO    :    dL_prior = PowerLaw(10.0, 460.0, 2.0, naming=["d_L"])
12:53 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
12:53 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
12:53 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
12:53 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
12:53 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
12:53 ninjax INFO    : Finished prior setup
12:53 ninjax INFO    : Setting the transforms
12:53 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
12:53 ninjax INFO    : transforms_str_list has 3 elements
12:53 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
12:53 ninjax INFO    : Setting the likelihood
12:53 ninjax INFO    : GW likelihood provided, setting up the GW pipe
12:53 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz
12:53 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz for BNS injections
12:53 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
12:53 ninjax INFO    : self.is_BNS_run is True
12:53 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
12:53 ninjax INFO    : GW run is an injection
12:53 ninjax INFO    : Setting up GW injection . . . 
12:53 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
12:53 ninjax INFO    : Generating new injection
12:53 ninjax INFO    : Sanity check: generated parameters:
12:53 ninjax INFO    : {'mass_1_source': 1.6523656877699253, 'mass_2_source': 1.4364987247468424, 's1_z': -0.026895665097385724, 's2_z': -0.0492122057752985, 'cos_iota': -0.18647463837170752, 'd_L': 329.09713935788653, 't_c': -0.0678522094841778, 'phase_c': 4.810118521217371, 'psi': 1.793258469056091, 'ra': 5.223567944364061, 'sin_dec': -0.0858338017037088}
12:53 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz . . . 
12:53 ninjax INFO    : Injected lambda_1: 84.17875305042692
12:53 ninjax INFO    : Injected lambda_2: 218.07702767292812
12:53 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.4402488829437885 is 128.0
12:53 ninjax INFO    : After transforms, the injection parameters are:
12:53 ninjax INFO    : {'mass_1_source': 1.6523656877699253, 'mass_2_source': 1.4364987247468424, 's1_z': -0.026895665097385724, 's2_z': -0.0492122057752985, 'cos_iota': -0.18647463837170752, 'd_L': 329.09713935788653, 't_c': -0.0678522094841778, 'phase_c': 4.810118521217371, 'psi': 1.793258469056091, 'ra': 5.223567944364061, 'sin_dec': -0.0858338017037088, 'q': 0.869358844340067, 'M_c': 1.4402488829437885, 'eta': 0.248779002761744, 'iota': Array(1.75836894, dtype=float64, weak_type=True), 'dec': Array(-0.08593955, dtype=float64, weak_type=True), 'lambda_1': 84.17875305042692, 'lambda_2': 218.07702767292812}
12:53 ninjax INFO    : The trial injection parameters are {'M_c': 1.4402488829437885, 'eta': 0.248779002761744, 's1_z': -0.026895665097385724, 's2_z': -0.0492122057752985, 'lambda_1': 84.17875305042692, 'lambda_2': 218.07702767292812, 'd_L': 329.09713935788653, 'phase_c': 4.810118521217371, 'iota': 1.7583689415926653, 't_c': -0.0678522094841778, 'psi': 1.793258469056091, 'ra': 5.223567944364061, 'dec': -0.08593954858702278}
12:53 ninjax INFO    : Injecting signals . . .
12:53 ninjax INFO    : self.ifos
12:53 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
12:53 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
12:53 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
12:53 ninjax INFO    : [ 2.31610235e-23-6.54001221e-23j -3.69684081e-23+9.59023889e-25j
  9.30450166e-23+3.93208620e-23j ...
 -9.65098692e-24+1.87582499e-23j -2.32605154e-23+2.30998638e-23j
  6.28954905e-24-1.95779058e-24j]
12:53 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
12:53 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
12:53 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
12:53 ninjax INFO    : [-2.19150458e-23-3.10954245e-23j  2.25598952e-23+1.13425547e-23j
 -3.60507972e-23-3.33254857e-23j ...
  2.95233527e-23-4.54353231e-24j -9.74829782e-25-1.60622554e-23j
  8.66910515e-24-2.49839999e-23j]
12:53 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
12:53 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
12:53 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
12:53 ninjax INFO    : [ 6.68146175e-23-3.13074459e-24j -6.98963684e-23-6.91307499e-23j
 -1.67286880e-23-6.87887287e-23j ...
 -2.95052915e-24+2.30600947e-23j  4.69259863e-25-1.21376346e-23j
  1.59829729e-23-6.37667345e-24j]
12:53 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
12:53 ninjax INFO    : SNR for ifo H1 is 1.059000745319487
12:53 ninjax INFO    : SNR for ifo L1 is 5.4497403193667004
12:53 ninjax INFO    : SNR for ifo V1 is 4.368578126657575
12:53 ninjax INFO    : The network SNR is 7.064391479513951
12:53 ninjax INFO    : The network SNR does not pass the threshold, trying again
12:53 ninjax INFO    : Generating new injection
12:53 ninjax INFO    : Sanity check: generated parameters:
12:53 ninjax INFO    : {'mass_1_source': 1.1765419072236416, 'mass_2_source': 1.6127767261529702, 's1_z': -0.0012452366032708953, 's2_z': 0.005879026782536864, 'cos_iota': -0.9983353462243159, 'd_L': 398.39761509922954, 't_c': 0.06276938204380281, 'phase_c': 5.543242987527994, 'psi': 2.914588457622995, 'ra': 2.3584507799493046, 'sin_dec': 0.9277651431672864}
12:53 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/HQC18.npz . . . 
12:53 ninjax INFO    : Injected lambda_1: 100.11130368598842
12:53 ninjax INFO    : Injected lambda_2: 744.4702658726488
12:53 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.303899181230727 is 256.0
12:53 ninjax INFO    : After transforms, the injection parameters are:
12:53 ninjax INFO    : {'mass_1_source': 1.6127767261529702, 'mass_2_source': 1.1765419072236416, 's1_z': -0.0012452366032708953, 's2_z': 0.005879026782536864, 'cos_iota': -0.9983353462243159, 'd_L': 398.39761509922954, 't_c': 0.06276938204380281, 'phase_c': 5.543242987527994, 'psi': 2.914588457622995, 'ra': 2.3584507799493046, 'sin_dec': 0.9277651431672864, 'q': 0.7295131980420505, 'M_c': 1.303899181230727, 'eta': 0.24388516974154317, 'iota': Array(3.08388449, dtype=float64, weak_type=True), 'dec': Array(1.18837861, dtype=float64, weak_type=True), 'lambda_1': 100.11130368598842, 'lambda_2': 744.4702658726488}
12:53 ninjax INFO    : The trial injection parameters are {'M_c': 1.303899181230727, 'eta': 0.24388516974154317, 's1_z': -0.0012452366032708953, 's2_z': 0.005879026782536864, 'lambda_1': 100.11130368598842, 'lambda_2': 744.4702658726488, 'd_L': 398.39761509922954, 'phase_c': 5.543242987527994, 'iota': 3.0838844942676293, 't_c': 0.06276938204380281, 'psi': 2.914588457622995, 'ra': 2.3584507799493046, 'dec': 1.1883786141570436}
12:53 ninjax INFO    : Injecting signals . . .
12:53 ninjax INFO    : self.ifos
12:53 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
12:53 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
12:53 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
12:53 ninjax INFO    : [-2.31823774e-23+6.22064928e-23j  8.98520616e-23+4.69733336e-23j
  5.01759673e-23-1.10229366e-22j ...
 -3.49543743e-23-1.34803724e-23j -1.95625386e-23-2.33352820e-23j
 -3.14158805e-23+1.04023328e-23j]
12:53 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
12:53 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
12:53 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
12:53 ninjax INFO    : [-1.21658226e-22+6.14117306e-23j -2.79411980e-23-5.51691328e-23j
 -6.64213759e-23-1.52984069e-23j ...
  2.53687845e-23-2.65525385e-23j  3.67838630e-23+1.46651643e-23j
 -5.82140258e-23+2.21733471e-23j]
12:53 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
12:53 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
12:53 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
12:53 ninjax INFO    : [ 3.69018468e-23+2.29833800e-23j  1.43321428e-22+4.32882757e-23j
 -7.25072225e-23+1.88469967e-23j ...
  2.15024640e-23+4.22129967e-23j  4.90317429e-23+7.25283220e-24j
  3.83245885e-23-3.49627042e-23j]
12:53 ninjax INFO    : [1.43183556e-46 1.43058540e-46 1.42935095e-46 ... 6.39793039e-47
 6.39795354e-47 6.39797668e-47]
12:53 ninjax INFO    : SNR for ifo H1 is 10.552746218502847
12:53 ninjax INFO    : SNR for ifo L1 is 9.295927862696491
12:53 ninjax INFO    : SNR for ifo V1 is 10.901569484533189
12:53 ninjax INFO    : The network SNR is 17.793789501022214
12:53 ninjax INFO    : Network SNR passes threshold
12:53 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
12:53 ninjax INFO    :    mass_1_source: 1.6127767261529702
12:53 ninjax INFO    :    mass_2_source: 1.1765419072236416
12:53 ninjax INFO    :    s1_z: -0.0012452366032708953
12:53 ninjax INFO    :    s2_z: 0.005879026782536864
12:53 ninjax INFO    :    cos_iota: -0.9983353462243159
12:53 ninjax INFO    :    d_L: 398.39761509922954
12:53 ninjax INFO    :    t_c: 0.06276938204380281
12:53 ninjax INFO    :    phase_c: 5.543242987527994
12:53 ninjax INFO    :    psi: 2.914588457622995
12:53 ninjax INFO    :    ra: 2.3584507799493046
12:53 ninjax INFO    :    sin_dec: 0.9277651431672864
12:53 ninjax INFO    :    q: 0.7295131980420505
12:53 ninjax INFO    :    M_c: 1.303899181230727
12:53 ninjax INFO    :    eta: 0.24388516974154317
12:53 ninjax INFO    :    iota: 3.0838844942676293
12:53 ninjax INFO    :    dec: 1.1883786141570436
12:53 ninjax INFO    :    lambda_1: 100.11130368598842
12:53 ninjax INFO    :    lambda_2: 744.4702658726488
12:53 ninjax INFO    :    H1_SNR: 10.552746218502847
12:53 ninjax INFO    :    L1_SNR: 9.295927862696491
12:53 ninjax INFO    :    V1_SNR: 10.901569484533189
12:53 ninjax INFO    :    network_SNR: 17.793789501022214
12:53 ninjax INFO    :    epoch: 254.0
12:53 ninjax INFO    :    gmst: 2.7288901910520846
12:53 ninjax INFO    :    duration: 256.0
12:53 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
12:53 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
12:53 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
12:56 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 199.41032671928406 seconds = 3.323505445321401 minutes
12:56 ninjax INFO    : The priors are not modified after their initialization
12:56 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
12:56 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
12:56 ninjax INFO    : sample: {'M_c': Array([1.06171812, 1.43523157, 1.20179968], dtype=float64), 'q': Array([0.83282842, 0.87429413, 0.65606012], dtype=float64), 's1_z': Array([0.019561  , 0.00071598, 0.00103895], dtype=float64), 's2_z': Array([-0.04260358, -0.02863423, -0.03936793], dtype=float64), 'lambda_1': Array([1123.06868106, 2793.09805078, 2255.09780969], dtype=float64), 'lambda_2': Array([2321.23498272, 3566.90072286, 4591.36410539], dtype=float64), 'cos_iota': Array([-0.2268637 ,  0.84543326, -0.80087797], dtype=float64), 'd_L': Array([784.45355056, 565.64947022, 791.41039976], dtype=float64), 't_c': Array([ 0.07961014, -0.0500172 ,  0.08721698], dtype=float64), 'phase_c': Array([1.60193851, 1.16536255, 0.87393862], dtype=float64), 'psi': Array([2.77602966, 0.91227165, 2.54799321], dtype=float64), 'ra': Array([0.10640097, 0.54551484, 1.46972803], dtype=float64), 'sin_dec': Array([-0.33770658, -0.62063983, -0.77204297], dtype=float64)}
12:56 ninjax INFO    : log_prob: [ -1.89448522 -40.90199876  -5.68990181]
12:56 ninjax INFO    : Checking log_prob at injection parameters: {'mass_1_source': 1.6127767261529702, 'mass_2_source': 1.1765419072236416, 's1_z': -0.0012452366032708953, 's2_z': 0.005879026782536864, 'cos_iota': -0.9983353462243159, 'd_L': 398.39761509922954, 't_c': 0.06276938204380281, 'phase_c': 5.543242987527994, 'psi': 2.914588457622995, 'ra': 2.3584507799493046, 'sin_dec': 0.9277651431672864, 'q': 0.7295131980420505, 'M_c': 1.303899181230727, 'eta': 0.24388516974154317, 'iota': Array(3.08388449, dtype=float64, weak_type=True), 'dec': Array(1.18837861, dtype=float64, weak_type=True), 'lambda_1': 100.11130368598842, 'lambda_2': 744.4702658726488, 'H1_SNR': 10.552746218502847, 'L1_SNR': 9.295927862696491, 'V1_SNR': 10.901569484533189, 'network_SNR': 17.793789501022214, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
12:56 ninjax INFO    : log_prob at the injection parameters is: 137.36842858698245
12:56 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
12:56 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
12:56 ninjax INFO    : Ninjax setup complete.
12:56 ninjax INFO    : Saving output to ./outdir/injection_23/
12:56 ninjax INFO    : Using polynomial learning rate scheduler
12:56 ninjax INFO    : The hyperparameters passed to flowMC and jim are
12:56 ninjax INFO    :    n_loop_training: 200
12:56 ninjax INFO    :    n_loop_production: 10
12:56 ninjax INFO    :    n_local_steps: 100
12:56 ninjax INFO    :    n_global_steps: 1000
12:56 ninjax INFO    :    n_epochs: 25
12:56 ninjax INFO    :    n_chains: 1000
12:56 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x150e11b45f30>
12:56 ninjax INFO    :    max_samples: 50000
12:56 ninjax INFO    :    momentum: 0.9
12:56 ninjax INFO    :    batch_size: 30000
12:56 ninjax INFO    :    use_global: True
12:56 ninjax INFO    :    keep_quantile: 0.0
12:56 ninjax INFO    :    train_thinning: 10
12:56 ninjax INFO    :    output_thinning: 50
12:56 ninjax INFO    :    n_sample_max: 10000
12:56 ninjax INFO    :    num_layers: 10
12:56 ninjax INFO    :    hidden_size: [128, 128]
12:56 ninjax INFO    :    num_bins: 8
12:56 ninjax INFO    :    save_training_chains: False
12:56 ninjax INFO    :    eps_mass_matrix: 1e-05
12:56 ninjax INFO    :    use_scheduler: True
12:56 ninjax INFO    :    use_temperature: False
12:56 ninjax INFO    :    which_temperature_schedule: exponential
12:56 ninjax INFO    :    starting_temperature: 2.0
12:56 ninjax INFO    :    stop_tempering_iteration: 75
12:56 ninjax INFO    :    stopping_criterion_global_acc: 0.1
12:56 ninjax INFO    :    stopping_criterion_loss: -inf
12:56 ninjax INFO    :    nf_model_kwargs: {}
12:56 ninjax INFO    :    local sampler arg not shown (pretty print)
12:56 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[ 2.32360310e-23 -3.67936476e-23  9.33142198e-23  2.97476878e-23
  4.09330194e-24  3.98049735e-23 -6.07708389e-23 -2.34484532e-23
  4.84631451e-24 -3.29733630e-23]
[-6.49158755e-23  1.41658241e-24  3.97297766e-23 -2.81621944e-23
  2.54333770e-25 -8.58925304e-24  9.96596209e-25  3.60789368e-23
  4.92052402e-23  8.36164961e-23]
Checking the noise that was generated in inject_signal ifo:
[-2.35603025e-23  2.05509106e-23 -3.83401823e-23  9.12462925e-23
  3.85705281e-24 -3.13410847e-24 -4.94118459e-23  5.57426140e-23
  2.10590334e-23 -2.40071065e-23]
[-3.30064801e-23  9.82033209e-24 -3.43771900e-23 -2.76080331e-23
  4.81049730e-23  2.74421951e-23 -5.46961170e-23 -4.38399240e-23
 -9.72638653e-24  1.82458672e-23]
Checking the noise that was generated in inject_signal ifo:
[ 6.83433618e-23 -6.79700078e-23 -1.44832429e-23 -1.70397971e-24
 -2.56521681e-23 -6.56029516e-23  7.04268269e-23  1.88819413e-23
  1.20947371e-23  4.87226952e-23]
[-1.07082967e-24 -6.74385860e-23 -6.75533165e-23 -7.82974568e-24
 -9.14661399e-23 -8.84726373e-23 -4.41705011e-23 -1.16524844e-22
  8.57945069e-23 -2.31176057e-23]
Checking the noise that was generated in inject_signal ifo:
[-2.00785883e-23  8.85992497e-23  4.93590402e-23 -3.97087230e-23
  3.18129302e-23  6.07036096e-23 -1.68630518e-22 -6.46848575e-23
 -4.64143144e-23 -4.67471758e-23]
[ 6.59643450e-23  4.22643478e-23 -1.05426674e-22  5.01833320e-24
  1.95475609e-23  1.75981707e-23  3.37372066e-24  4.64460765e-23
  3.30090128e-23  5.30214941e-23]
Checking the noise that was generated in inject_signal ifo:
[-1.25689296e-22 -2.48948079e-23 -6.79355712e-23  2.56875203e-23
  1.09072044e-22  4.58014188e-23 -1.07699261e-22  1.61678206e-23
  1.72100715e-23  1.35501454e-22]
[ 5.99338874e-23 -5.21451270e-23 -1.93138624e-23 -6.14579967e-24
 -2.39671012e-23  8.48356589e-23  6.78039471e-23  1.19760327e-22
 -2.60224149e-23 -1.83257748e-23]
Checking the noise that was generated in inject_signal ifo:
[ 4.22722031e-23  1.36996239e-22 -6.63781214e-23 -1.62803684e-22
 -4.16515063e-23 -1.08401302e-23 -5.88351512e-23  2.01915041e-23
  3.37067465e-23 -3.16892894e-23]
[ 1.95176873e-23  4.41965945e-23  2.06493515e-23 -1.84399033e-22
  2.59452295e-23 -1.05928594e-22  4.74191922e-23  9.84856032e-23
 -1.20455383e-22 -2.83825420e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.1854557991027832 seconds
Using provided reference parameters:
ref_params for relative binning:
{'mass_1_source': 1.6127767261529702, 'mass_2_source': 1.1765419072236416, 's1_z': -0.0012452366032708953, 's2_z': 0.005879026782536864, 'cos_iota': -0.9983353462243159, 'd_L': 398.39761509922954, 't_c': 0.06276938204380281, 'phase_c': 5.543242987527994, 'psi': 2.914588457622995, 'ra': 2.3584507799493046, 'sin_dec': 0.9277651431672864, 'q': 0.7295131980420505, 'M_c': 1.303899181230727, 'eta': 0.24388516974154317, 'iota': Array(3.08388449, dtype=float64, weak_type=True), 'dec': Array(1.18837861, dtype=float64, weak_type=True), 'lambda_1': 100.11130368598842, 'lambda_2': 744.4702658726488, 'H1_SNR': 10.552746218502847, 'L1_SNR': 9.295927862696491, 'V1_SNR': 10.901569484533189, 'network_SNR': 17.793789501022214, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5228526592254639 seconds
Time for h_sky_low and h_sky_center: 6.14782977104187 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.7410364151000977
Going to compute coefficients . . .
Time for computing coefficients: 176.41035866737366 seconds
Time for computing coefficients: 7.477455377578735 seconds
Time for computing coefficients: 7.3651511669158936 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/200 [00:00<?, ?it/s]Tuning global sampler:   0%|          | 1/200 [02:02<6:47:55, 122.99s/it]Tuning global sampler:   1%|          | 2/200 [02:07<2:56:04, 53.36s/it] Tuning global sampler:   2%|▏         | 3/200 [02:13<1:43:24, 31.50s/it]Tuning global sampler:   2%|▏         | 4/200 [02:17<1:08:16, 20.90s/it]Tuning global sampler:   2%|▎         | 5/200 [02:22<48:51, 15.03s/it]  Tuning global sampler:   3%|▎         | 6/200 [02:27<37:13, 11.51s/it]Tuning global sampler:   4%|▎         | 7/200 [02:31<29:44,  9.25s/it]Tuning global sampler:   4%|▍         | 8/200 [02:36<24:53,  7.78s/it]Tuning global sampler:   4%|▍         | 9/200 [02:43<24:03,  7.56s/it]Tuning global sampler:   5%|▌         | 10/200 [02:47<20:54,  6.60s/it]Tuning global sampler:   6%|▌         | 11/200 [02:52<19:21,  6.15s/it]Tuning global sampler:   6%|▌         | 12/200 [02:58<18:50,  6.01s/it]Tuning global sampler:   6%|▋         | 13/200 [03:03<17:42,  5.68s/it]Tuning global sampler:   7%|▋         | 14/200 [03:08<16:40,  5.38s/it]Tuning global sampler:   8%|▊         | 15/200 [03:13<16:15,  5.27s/it]Tuning global sampler:   8%|▊         | 16/200 [03:17<15:38,  5.10s/it]Tuning global sampler:   8%|▊         | 17/200 [03:23<16:04,  5.27s/it]Tuning global sampler:   9%|▉         | 18/200 [03:28<15:35,  5.14s/it]Tuning global sampler:  10%|▉         | 19/200 [03:33<15:09,  5.02s/it]Tuning global sampler:  10%|█         | 20/200 [03:37<14:45,  4.92s/it]Tuning global sampler:  10%|█         | 21/200 [03:42<14:32,  4.88s/it]Tuning global sampler:  11%|█         | 22/200 [03:47<14:15,  4.80s/it]Tuning global sampler:  12%|█▏        | 23/200 [03:51<14:02,  4.76s/it]Tuning global sampler:  12%|█▏        | 24/200 [03:56<14:02,  4.79s/it]Tuning global sampler:  12%|█▎        | 25/200 [04:01<14:01,  4.81s/it]Tuning global sampler:  13%|█▎        | 26/200 [04:06<13:38,  4.70s/it]Tuning global sampler:  14%|█▎        | 27/200 [04:10<13:25,  4.65s/it]Tuning global sampler:  14%|█▍        | 28/200 [04:15<13:08,  4.58s/it]Tuning global sampler:  14%|█▍        | 29/200 [04:19<13:06,  4.60s/it]Tuning global sampler:  15%|█▌        | 30/200 [04:24<12:55,  4.56s/it]Tuning global sampler:  16%|█▌        | 31/200 [04:28<12:43,  4.52s/it]Tuning global sampler:  16%|█▌        | 32/200 [04:33<12:34,  4.49s/it]Tuning global sampler:  16%|█▋        | 33/200 [04:37<12:23,  4.45s/it]Tuning global sampler:  17%|█▋        | 34/200 [04:41<12:16,  4.43s/it]Tuning global sampler:  18%|█▊        | 35/200 [04:46<12:22,  4.50s/it]Tuning global sampler:  18%|█▊        | 36/200 [04:50<12:13,  4.48s/it]Tuning global sampler:  18%|█▊        | 37/200 [04:55<12:16,  4.52s/it]Tuning global sampler:  19%|█▉        | 38/200 [05:00<13:00,  4.82s/it]Tuning global sampler:  20%|█▉        | 39/200 [05:05<12:35,  4.70s/it]Tuning global sampler:  20%|██        | 40/200 [05:09<12:19,  4.62s/it]Tuning global sampler:  20%|██        | 41/200 [05:14<12:04,  4.56s/it]Tuning global sampler:  21%|██        | 42/200 [05:18<11:53,  4.51s/it]Tuning global sampler:  22%|██▏       | 43/200 [05:23<11:44,  4.49s/it]Tuning global sampler:  22%|██▏       | 44/200 [05:27<11:35,  4.46s/it]Tuning global sampler:  22%|██▎       | 45/200 [05:32<11:35,  4.49s/it]Tuning global sampler:  23%|██▎       | 46/200 [05:36<11:30,  4.48s/it]Tuning global sampler:  24%|██▎       | 47/200 [05:40<11:22,  4.46s/it]Tuning global sampler:  24%|██▍       | 48/200 [05:45<11:27,  4.53s/it]Tuning global sampler:  24%|██▍       | 49/200 [05:50<11:18,  4.50s/it]Tuning global sampler:  25%|██▌       | 50/200 [05:54<11:11,  4.47s/it]Tuning global sampler:  26%|██▌       | 51/200 [05:58<11:04,  4.46s/it]Tuning global sampler:  26%|██▌       | 52/200 [06:03<10:58,  4.45s/it]Tuning global sampler:  26%|██▋       | 53/200 [06:07<10:52,  4.44s/it]Tuning global sampler:  27%|██▋       | 54/200 [06:12<10:46,  4.43s/it]Tuning global sampler:  28%|██▊       | 55/200 [06:16<10:39,  4.41s/it]Tuning global sampler:  28%|██▊       | 56/200 [06:20<10:33,  4.40s/it]Tuning global sampler:  28%|██▊       | 57/200 [06:25<10:30,  4.41s/it]Tuning global sampler:  29%|██▉       | 58/200 [06:30<11:10,  4.72s/it]Tuning global sampler:  30%|██▉       | 59/200 [06:35<10:53,  4.63s/it]Tuning global sampler:  30%|███       | 60/200 [06:39<10:40,  4.57s/it]Tuning global sampler:  30%|███       | 61/200 [06:44<10:29,  4.53s/it]Tuning global sampler:  31%|███       | 62/200 [06:48<10:25,  4.53s/it]Tuning global sampler:  32%|███▏      | 63/200 [06:52<10:16,  4.50s/it]Tuning global sampler:  32%|███▏      | 64/200 [06:57<10:08,  4.47s/it]Tuning global sampler:  32%|███▎      | 65/200 [07:01<10:03,  4.47s/it]Tuning global sampler:  33%|███▎      | 66/200 [07:06<09:55,  4.44s/it]Tuning global sampler:  34%|███▎      | 67/200 [07:10<09:48,  4.42s/it]Tuning global sampler:  34%|███▍      | 68/200 [07:15<09:44,  4.43s/it]Tuning global sampler:  34%|███▍      | 69/200 [07:19<09:40,  4.43s/it]Tuning global sampler:  35%|███▌      | 70/200 [07:23<09:35,  4.43s/it]Tuning global sampler:  36%|███▌      | 71/200 [07:28<09:31,  4.43s/it]Tuning global sampler:  36%|███▌      | 72/200 [07:32<09:26,  4.42s/it]Tuning global sampler:  36%|███▋      | 73/200 [07:37<09:41,  4.58s/it]Tuning global sampler:  37%|███▋      | 74/200 [07:42<09:31,  4.53s/it]Tuning global sampler:  38%|███▊      | 75/200 [07:46<09:23,  4.51s/it]Tuning global sampler:  38%|███▊      | 76/200 [07:51<09:16,  4.49s/it]Tuning global sampler:  38%|███▊      | 77/200 [07:55<09:07,  4.45s/it]Tuning global sampler:  39%|███▉      | 78/200 [07:59<09:00,  4.43s/it]Tuning global sampler:  40%|███▉      | 79/200 [08:04<08:55,  4.43s/it]Tuning global sampler:  40%|████      | 80/200 [08:09<09:33,  4.78s/it]Tuning global sampler:  40%|████      | 81/200 [08:14<09:16,  4.68s/it]Tuning global sampler:  41%|████      | 82/200 [08:18<09:07,  4.64s/it]Tuning global sampler:  42%|████▏     | 83/200 [08:24<09:24,  4.83s/it]Tuning global sampler:  42%|████▏     | 84/200 [08:28<09:06,  4.71s/it]Tuning global sampler:  42%|████▎     | 85/200 [08:32<08:54,  4.65s/it]Tuning global sampler:  43%|████▎     | 86/200 [08:37<08:42,  4.58s/it]Tuning global sampler:  44%|████▎     | 87/200 [08:41<08:32,  4.54s/it]Tuning global sampler:  44%|████▍     | 88/200 [08:46<08:29,  4.55s/it]Tuning global sampler:  44%|████▍     | 89/200 [08:50<08:19,  4.50s/it]Tuning global sampler:  45%|████▌     | 90/200 [08:55<08:18,  4.53s/it]Tuning global sampler:  45%|████▌     | 90/200 [08:59<10:59,  6.00s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.22s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.22s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.22s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.22s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.22s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.22s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.22s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.22s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]
13:06 ninjax INFO    : Saving samples to ./outdir/injection_23/results_training.npz
13:06 ninjax INFO    : Saving the NF
13:06 ninjax INFO    : Time taken: 582.5742545127869 seconds (9.709570908546448 minutes)
13:06 ninjax INFO    : Creating the final corner plot
13:06 ninjax INFO    : Dumping the final production chains
13:06 ninjax INFO    : Chains shape is: (13, 220000)
13:06 ninjax INFO    : Key: M_c: ESS = 29879, Rhat = 1.0208427723650875
13:06 ninjax INFO    : Key: q: ESS = 18900, Rhat = 1.0327046638384485
13:06 ninjax INFO    : Key: s1_z: ESS = 25832, Rhat = 1.0250708943853788
13:06 ninjax INFO    : Key: s2_z: ESS = 31149, Rhat = 1.0208310526708224
13:06 ninjax INFO    : Key: lambda_1: ESS = 28922, Rhat = 1.0223737704497053
13:06 ninjax INFO    : Key: lambda_2: ESS = 34822, Rhat = 1.018428056295232
13:06 ninjax INFO    : Key: cos_iota: ESS = 28803, Rhat = 1.024073605099427
13:06 ninjax INFO    : Key: d_L: ESS = 27495, Rhat = 1.0224148494637735
13:06 ninjax INFO    : Key: t_c: ESS = 25362, Rhat = 1.0244821059574103
13:06 ninjax INFO    : Key: phase_c: ESS = 16471, Rhat = 1.0371365699139699
13:06 ninjax INFO    : Key: psi: ESS = 21505, Rhat = 1.0286665108792676
13:06 ninjax INFO    : Key: ra: ESS = 37198, Rhat = 1.017702384987603
13:06 ninjax INFO    : Key: sin_dec: ESS = 32408, Rhat = 1.0195230372869084
13:06 ninjax INFO    : Key: eta: ESS = 18900, Rhat = 1.0327046638384485
13:06 ninjax INFO    : Key: iota: ESS = 28803, Rhat = 1.0217996109621665
13:06 ninjax INFO    : Key: dec: ESS = 32408, Rhat = 1.0195230372869084
13:06 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.355 +/- 0.221
q: 0.698 +/- 0.227
s1_z: 0.001 +/- 0.027
s2_z: 0.003 +/- 0.027
lambda_1: 2136.623 +/- 1509.057
lambda_2: 2212.200 +/- 1486.237
cos_iota: -0.317 +/- 0.529
d_L: 623.729 +/- 238.114
t_c: 0.045 +/- 0.039
phase_c: 2.942 +/- 1.674
psi: 1.644 +/- 0.885
ra: 2.609 +/- 1.381
sin_dec: 0.497 +/- 0.598
Log probability: 46.635 +/- 62.927
Local acceptance: 0.827 +/- 0.378
Global acceptance: 0.015 +/- 0.120
Max loss: 22.794, Min loss: 5.316
Production summary
==========
M_c: 1.304 +/- 0.000
q: 0.813 +/- 0.112
s1_z: 0.002 +/- 0.026
s2_z: -0.001 +/- 0.027
lambda_1: 411.536 +/- 541.508
lambda_2: 710.415 +/- 754.599
cos_iota: -0.827 +/- 0.129
d_L: 338.277 +/- 50.024
t_c: 0.063 +/- 0.001
phase_c: 3.118 +/- 1.793
psi: 1.580 +/- 0.902
ra: 2.352 +/- 0.024
sin_dec: 0.926 +/- 0.005
Log probability: 134.855 +/- 2.867
Local acceptance: 0.504 +/- 0.500
Global acceptance: 0.138 +/- 0.345
DONE

JOB STATISTICS
==============
Job ID: 10863590
Cluster: snellius
User/Group: twouters2/twouters2
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 00:12:07
CPU Efficiency: 5.37% of 03:45:36 core-walltime
Job Wall-clock time: 00:14:06
Memory Utilized: 4.64 GB
Memory Efficiency: 46.39% of 10.00 GB
