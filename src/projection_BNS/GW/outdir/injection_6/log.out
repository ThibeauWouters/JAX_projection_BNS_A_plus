Wed Mar 26 16:53:23 CET 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
16:53 ninjax INFO    : Checking and setting outdir
16:53 ninjax INFO    : The outdir is set to ./outdir/injection_6
16:53 ninjax INFO    : Loading the given config
16:53 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
16:53 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/target_eos.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '100', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '10', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '100', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
16:53 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/outdir/injection_6/complete_config.json
16:53 ninjax INFO    : No seed specified. Generating a random seed: 459755
16:53 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 350375
16:53 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 183012
16:53 ninjax INFO    : Loading the priors
16:53 ninjax INFO    :    Mc_prior = Uniform(1.0, 2.2, naming=["M_c"])
16:53 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
16:53 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
16:53 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
16:53 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
16:53 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
16:53 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
16:53 ninjax INFO    :    dL_prior = PowerLaw(1.0, 500.0, 2.0, naming=["d_L"])
16:53 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
16:53 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
16:53 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
16:53 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
16:53 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
16:53 ninjax INFO    : Finished prior setup
16:53 ninjax INFO    : Setting the transforms
16:53 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
16:53 ninjax INFO    : transforms_str_list has 3 elements
16:53 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
16:53 ninjax INFO    : Setting the likelihood
16:53 ninjax INFO    : GW likelihood provided, setting up the GW pipe
16:53 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/target_eos.npz
16:53 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/target_eos.npz for BNS injections
16:53 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
16:53 ninjax INFO    : self.is_BNS_run is True
16:53 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
16:53 ninjax INFO    : GW run is an injection
16:53 ninjax INFO    : Setting up GW injection . . . 
16:53 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
16:53 ninjax INFO    : Generating new injection
16:53 ninjax INFO    : Sanity check: generated parameters:
16:53 ninjax INFO    : {'M_c': 1.9339760124078538, 'q': 0.8076238323355703, 's1_z': -0.0035250284664976247, 's2_z': 0.042880943808503186, 'lambda_1': 4389.706770673799, 'lambda_2': 1290.2382458342242, 'cos_iota': -0.8963865165636733, 'd_L': 384.5271807884623, 't_c': 0.03504946360447109, 'phase_c': 1.0644359384202973, 'psi': 2.820376469577464, 'ra': 2.8530109455021186, 'sin_dec': -0.8279133572830655}
16:53 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/target_eos.npz . . . 
16:53 ninjax INFO    : Injected lambda_1: 5.2203813963268075
16:53 ninjax INFO    : Injected lambda_2: 45.11552242666369
16:53 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.9339760124078538 is 128.0
16:53 ninjax INFO    : After transforms, the injection parameters are:
16:53 ninjax INFO    : {'M_c': 1.9339760124078538, 'q': 0.8076238323355703, 's1_z': -0.0035250284664976247, 's2_z': 0.042880943808503186, 'lambda_1': 5.2203813963268075, 'lambda_2': 45.11552242666369, 'cos_iota': -0.8963865165636733, 'd_L': 384.5271807884623, 't_c': 0.03504946360447109, 'phase_c': 1.0644359384202973, 'psi': 2.820376469577464, 'ra': 2.8530109455021186, 'sin_dec': -0.8279133572830655, 'eta': 0.24716843569280236, 'iota': Array(2.68234561, dtype=float64, weak_type=True), 'dec': Array(-0.97537694, dtype=float64, weak_type=True)}
16:53 ninjax INFO    : The trial injection parameters are {'M_c': 1.9339760124078538, 'eta': 0.24716843569280236, 's1_z': -0.0035250284664976247, 's2_z': 0.042880943808503186, 'lambda_1': 5.2203813963268075, 'lambda_2': 45.11552242666369, 'd_L': 384.5271807884623, 'phase_c': 1.0644359384202973, 'iota': 2.6823456088771884, 't_c': 0.03504946360447109, 'psi': 2.820376469577464, 'ra': 2.8530109455021186, 'dec': -0.9753769422041504}
16:53 ninjax INFO    : Injecting signals . . .
16:53 ninjax INFO    : self.ifos
16:53 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
16:53 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
16:53 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
16:53 ninjax INFO    : [-9.39493108e-23+4.05342170e-23j -1.14364551e-23+2.82174080e-23j
  7.59668506e-23+8.33839593e-25j ...
 -3.38546797e-23+6.03101150e-24j  6.50641135e-24+2.03454778e-23j
 -1.14989108e-23-2.06979212e-23j]
16:53 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
16:53 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
16:53 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
16:53 ninjax INFO    : [ 9.10204799e-23+6.32959933e-23j -1.10837158e-23-8.60654600e-23j
 -3.58543031e-24+1.01397045e-24j ...
  2.82921341e-23-1.16459325e-23j -7.64615690e-24+3.71997283e-24j
 -1.42739059e-24+1.83907921e-23j]
16:53 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
16:53 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
16:53 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
16:53 ninjax INFO    : [-1.16958371e-23-8.49664060e-24j  1.00312729e-23-5.97112718e-23j
 -6.76988446e-23+4.57496025e-23j ...
  4.01422914e-23-1.32316256e-23j -4.57140466e-23-1.51591671e-23j
 -1.98616249e-23+7.04489209e-23j]
16:53 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
16:53 ninjax INFO    : SNR for ifo H1 is 17.191316566321433
16:53 ninjax INFO    : SNR for ifo L1 is 11.457611739393437
16:53 ninjax INFO    : SNR for ifo V1 is 6.959736449995948
16:53 ninjax INFO    : The network SNR is 21.80037071949847
16:53 ninjax INFO    : Network SNR passes threshold
16:53 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
16:53 ninjax INFO    :    M_c: 1.9339760124078538
16:53 ninjax INFO    :    q: 0.8076238323355703
16:53 ninjax INFO    :    s1_z: -0.0035250284664976247
16:53 ninjax INFO    :    s2_z: 0.042880943808503186
16:53 ninjax INFO    :    lambda_1: 5.2203813963268075
16:53 ninjax INFO    :    lambda_2: 45.11552242666369
16:53 ninjax INFO    :    cos_iota: -0.8963865165636733
16:53 ninjax INFO    :    d_L: 384.5271807884623
16:53 ninjax INFO    :    t_c: 0.03504946360447109
16:53 ninjax INFO    :    phase_c: 1.0644359384202973
16:53 ninjax INFO    :    psi: 2.820376469577464
16:53 ninjax INFO    :    ra: 2.8530109455021186
16:53 ninjax INFO    :    sin_dec: -0.8279133572830655
16:53 ninjax INFO    :    eta: 0.24716843569280236
16:53 ninjax INFO    :    iota: 2.6823456088771884
16:53 ninjax INFO    :    dec: -0.9753769422041504
16:53 ninjax INFO    :    H1_SNR: 17.191316566321433
16:53 ninjax INFO    :    L1_SNR: 11.457611739393437
16:53 ninjax INFO    :    V1_SNR: 6.959736449995948
16:53 ninjax INFO    :    network_SNR: 21.80037071949847
16:53 ninjax INFO    :    epoch: 126.0
16:53 ninjax INFO    :    gmst: 2.7288901910520846
16:53 ninjax INFO    :    duration: 128.0
16:53 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
16:53 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
16:53 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
16:56 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 142.2618923187256 seconds = 2.3710315386454264 minutes
16:56 ninjax INFO    : The priors are not modified after their initialization
16:56 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
16:56 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
16:56 ninjax INFO    : sample: {'M_c': Array([1.22716428, 1.63606753, 2.04856528], dtype=float64), 'q': Array([0.6347693 , 0.97902012, 0.48715967], dtype=float64), 's1_z': Array([0.04539153, 0.04861202, 0.0361684 ], dtype=float64), 's2_z': Array([-0.02120447,  0.00983452, -0.01869575], dtype=float64), 'lambda_1': Array([ 308.86088599, 4696.30043594, 1650.02612102], dtype=float64), 'lambda_2': Array([3330.8149219 ,  167.41084802, 3138.6178132 ], dtype=float64), 'cos_iota': Array([ 0.25573857,  0.18680031, -0.13007636], dtype=float64), 'd_L': Array([238.06016514, 452.07618477, 233.54701884], dtype=float64), 't_c': Array([ 0.00931232, -0.08165073, -0.00865897], dtype=float64), 'phase_c': Array([1.70140682, 5.08111334, 5.92392578], dtype=float64), 'psi': Array([0.05561915, 0.32069193, 2.4837692 ], dtype=float64), 'ra': Array([2.78721025, 0.695824  , 3.36955222], dtype=float64), 'sin_dec': Array([0.12518742, 0.05871608, 0.87309869], dtype=float64)}
16:56 ninjax INFO    : log_prob: [ -43.98270056   -8.87995511 -103.81939721]
16:56 ninjax INFO    : Checking log_prob at injection parameters: {'M_c': 1.9339760124078538, 'q': 0.8076238323355703, 's1_z': -0.0035250284664976247, 's2_z': 0.042880943808503186, 'lambda_1': 5.2203813963268075, 'lambda_2': 45.11552242666369, 'cos_iota': -0.8963865165636733, 'd_L': 384.5271807884623, 't_c': 0.03504946360447109, 'phase_c': 1.0644359384202973, 'psi': 2.820376469577464, 'ra': 2.8530109455021186, 'sin_dec': -0.8279133572830655, 'eta': 0.24716843569280236, 'iota': Array(2.68234561, dtype=float64, weak_type=True), 'dec': Array(-0.97537694, dtype=float64, weak_type=True), 'H1_SNR': 17.191316566321433, 'L1_SNR': 11.457611739393437, 'V1_SNR': 6.959736449995948, 'network_SNR': 21.80037071949847, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
16:56 ninjax INFO    : log_prob at the injection parameters is: 203.6415549811887
16:56 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
16:56 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
16:56 ninjax INFO    : Ninjax setup complete.
16:56 ninjax INFO    : Saving output to ./outdir/injection_6/
16:56 ninjax INFO    : Using polynomial learning rate scheduler
16:56 ninjax INFO    : The hyperparameters passed to flowMC and jim are
16:56 ninjax INFO    :    n_loop_training: 100
16:56 ninjax INFO    :    n_loop_production: 10
16:56 ninjax INFO    :    n_local_steps: 100
16:56 ninjax INFO    :    n_global_steps: 1000
16:56 ninjax INFO    :    n_epochs: 10
16:56 ninjax INFO    :    n_chains: 1000
16:56 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x14c64bd077f0>
16:56 ninjax INFO    :    max_samples: 50000
16:56 ninjax INFO    :    momentum: 0.9
16:56 ninjax INFO    :    batch_size: 30000
16:56 ninjax INFO    :    use_global: True
16:56 ninjax INFO    :    keep_quantile: 0.0
16:56 ninjax INFO    :    train_thinning: 10
16:56 ninjax INFO    :    output_thinning: 100
16:56 ninjax INFO    :    n_sample_max: 10000
16:56 ninjax INFO    :    num_layers: 10
16:56 ninjax INFO    :    hidden_size: [128, 128]
16:56 ninjax INFO    :    num_bins: 8
16:56 ninjax INFO    :    save_training_chains: False
16:56 ninjax INFO    :    eps_mass_matrix: 1e-05
16:56 ninjax INFO    :    use_scheduler: True
16:56 ninjax INFO    :    use_temperature: False
16:56 ninjax INFO    :    which_temperature_schedule: exponential
16:56 ninjax INFO    :    starting_temperature: 2.0
16:56 ninjax INFO    :    stop_tempering_iteration: 75
16:56 ninjax INFO    :    stopping_criterion_global_acc: 0.1
16:56 ninjax INFO    :    stopping_criterion_loss: -inf
16:56 ninjax INFO    :    nf_model_kwargs: {}
16:56 ninjax INFO    :    local sampler arg not shown (pretty print)
16:56 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[-9.00173747e-23 -1.86629873e-23  8.38433557e-23  7.89163810e-23
 -6.73935017e-23  1.43307053e-23  2.28565217e-24  1.38591446e-23
 -5.06708734e-24  6.15313032e-23]
[ 3.35693782e-23  3.16361356e-23  2.18015860e-24  6.95278136e-23
 -4.41003536e-24 -1.35515281e-23  5.09504011e-23  5.13434082e-23
  1.97213345e-23 -3.77692580e-23]
Checking the noise that was generated in inject_signal ifo:
[ 8.56914721e-23 -6.80755283e-24 -5.26100804e-24  5.16576272e-23
  1.16900094e-22 -1.77859012e-23  1.71159804e-23 -1.60754979e-23
  4.79287299e-24 -1.41215552e-23]
[ 6.31687701e-23 -8.28869548e-23 -4.04121433e-24 -5.11306166e-24
  1.88303229e-23 -2.15434771e-23  6.80543119e-23  5.20866834e-23
 -4.62398951e-25 -1.57228092e-23]
Checking the noise that was generated in inject_signal ifo:
[-1.40487944e-23  1.00096036e-23 -6.53253859e-23 -9.87491231e-24
  2.37436650e-23 -5.97992760e-24 -1.20839334e-22  1.40403286e-23
  3.90360386e-23  7.97267934e-23]
[-1.18604085e-23 -5.56081721e-23  4.24048807e-23  8.06643449e-23
 -1.93118106e-23  3.04357007e-23  1.45970233e-23  4.79890206e-23
  9.48204307e-23  4.48343432e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.10909366607666016 seconds
Using provided reference parameters:
ref_params for relative binning:
{'M_c': 1.9339760124078538, 'q': 0.8076238323355703, 's1_z': -0.0035250284664976247, 's2_z': 0.042880943808503186, 'lambda_1': 5.2203813963268075, 'lambda_2': 45.11552242666369, 'cos_iota': -0.8963865165636733, 'd_L': 384.5271807884623, 't_c': 0.03504946360447109, 'phase_c': 1.0644359384202973, 'psi': 2.820376469577464, 'ra': 2.8530109455021186, 'sin_dec': -0.8279133572830655, 'eta': 0.24716843569280236, 'iota': Array(2.68234561, dtype=float64, weak_type=True), 'dec': Array(-0.97537694, dtype=float64, weak_type=True), 'H1_SNR': 17.191316566321433, 'L1_SNR': 11.457611739393437, 'V1_SNR': 6.959736449995948, 'network_SNR': 21.80037071949847, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5073168277740479 seconds
Time for h_sky_low and h_sky_center: 5.232344627380371 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.6635186672210693
Going to compute coefficients . . .
Time for computing coefficients: 121.02833437919617 seconds
Time for computing coefficients: 6.932038307189941 seconds
Time for computing coefficients: 7.2602434158325195 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/100 [00:00<?, ?it/s]Tuning global sampler:   1%|          | 1/100 [02:00<3:19:07, 120.68s/it]Tuning global sampler:   2%|▏         | 2/100 [02:04<1:25:15, 52.20s/it] Tuning global sampler:   3%|▎         | 3/100 [02:09<48:57, 30.28s/it]  Tuning global sampler:   4%|▍         | 4/100 [02:13<31:56, 19.96s/it]Tuning global sampler:   5%|▌         | 5/100 [02:17<22:37, 14.29s/it]Tuning global sampler:   6%|▌         | 6/100 [02:21<17:01, 10.86s/it]Tuning global sampler:   7%|▋         | 7/100 [02:25<13:28,  8.69s/it]Tuning global sampler:   8%|▊         | 8/100 [02:30<11:06,  7.24s/it]Tuning global sampler:   9%|▉         | 9/100 [02:34<09:31,  6.28s/it]Tuning global sampler:  10%|█         | 10/100 [02:39<08:48,  5.88s/it]Tuning global sampler:  11%|█         | 11/100 [02:43<07:55,  5.34s/it]Tuning global sampler:  12%|█▏        | 12/100 [02:47<07:17,  4.97s/it]Tuning global sampler:  13%|█▎        | 13/100 [02:51<06:51,  4.73s/it]Tuning global sampler:  14%|█▍        | 14/100 [02:55<06:31,  4.56s/it]Tuning global sampler:  15%|█▌        | 15/100 [03:00<06:18,  4.45s/it]Tuning global sampler:  16%|█▌        | 16/100 [03:04<06:06,  4.37s/it]Tuning global sampler:  17%|█▋        | 17/100 [03:08<05:57,  4.31s/it]Tuning global sampler:  18%|█▊        | 18/100 [03:12<05:51,  4.29s/it]Tuning global sampler:  19%|█▉        | 19/100 [03:16<05:44,  4.25s/it]Tuning global sampler:  20%|██        | 20/100 [03:20<05:39,  4.24s/it]Tuning global sampler:  21%|██        | 21/100 [03:25<05:34,  4.24s/it]Tuning global sampler:  22%|██▏       | 22/100 [03:29<05:29,  4.23s/it]Tuning global sampler:  23%|██▎       | 23/100 [03:33<05:24,  4.22s/it]Tuning global sampler:  24%|██▍       | 24/100 [03:37<05:19,  4.20s/it]Tuning global sampler:  25%|██▌       | 25/100 [03:41<05:14,  4.19s/it]Tuning global sampler:  26%|██▌       | 26/100 [03:46<05:09,  4.19s/it]Tuning global sampler:  27%|██▋       | 27/100 [03:50<05:06,  4.20s/it]Tuning global sampler:  28%|██▊       | 28/100 [03:54<05:02,  4.20s/it]Tuning global sampler:  29%|██▉       | 29/100 [03:58<04:59,  4.21s/it]Tuning global sampler:  30%|███       | 30/100 [04:02<04:54,  4.21s/it]Tuning global sampler:  31%|███       | 31/100 [04:07<04:51,  4.22s/it]Tuning global sampler:  32%|███▏      | 32/100 [04:11<04:47,  4.23s/it]Tuning global sampler:  33%|███▎      | 33/100 [04:15<04:41,  4.20s/it]Tuning global sampler:  34%|███▍      | 34/100 [04:19<04:37,  4.20s/it]Tuning global sampler:  35%|███▌      | 35/100 [04:24<04:34,  4.22s/it]Tuning global sampler:  36%|███▌      | 36/100 [04:28<04:30,  4.22s/it]Tuning global sampler:  37%|███▋      | 37/100 [04:32<04:26,  4.23s/it]Tuning global sampler:  38%|███▊      | 38/100 [04:36<04:22,  4.23s/it]Tuning global sampler:  39%|███▉      | 39/100 [04:41<04:20,  4.27s/it]Tuning global sampler:  40%|████      | 40/100 [04:45<04:15,  4.26s/it]Tuning global sampler:  41%|████      | 41/100 [04:49<04:11,  4.26s/it]Tuning global sampler:  42%|████▏     | 42/100 [04:53<04:06,  4.25s/it]Tuning global sampler:  43%|████▎     | 43/100 [04:58<04:02,  4.25s/it]Tuning global sampler:  44%|████▍     | 44/100 [05:02<03:57,  4.24s/it]Tuning global sampler:  45%|████▌     | 45/100 [05:07<04:08,  4.51s/it]Tuning global sampler:  46%|████▌     | 46/100 [05:11<03:54,  4.35s/it]Tuning global sampler:  47%|████▋     | 47/100 [05:15<03:44,  4.24s/it]Tuning global sampler:  48%|████▊     | 48/100 [05:19<03:36,  4.17s/it]Tuning global sampler:  49%|████▉     | 49/100 [05:23<03:30,  4.12s/it]Tuning global sampler:  50%|█████     | 50/100 [05:27<03:24,  4.08s/it]Tuning global sampler:  51%|█████     | 51/100 [05:31<03:18,  4.06s/it]Tuning global sampler:  52%|█████▏    | 52/100 [05:35<03:13,  4.04s/it]Tuning global sampler:  53%|█████▎    | 53/100 [05:39<03:09,  4.03s/it]Tuning global sampler:  54%|█████▍    | 54/100 [05:43<03:05,  4.02s/it]Tuning global sampler:  55%|█████▌    | 55/100 [05:47<03:00,  4.01s/it]Tuning global sampler:  56%|█████▌    | 56/100 [05:51<02:55,  4.00s/it]Tuning global sampler:  57%|█████▋    | 57/100 [05:55<02:51,  4.00s/it]Tuning global sampler:  58%|█████▊    | 58/100 [05:59<02:47,  4.00s/it]Tuning global sampler:  59%|█████▉    | 59/100 [06:03<02:44,  4.01s/it]Tuning global sampler:  60%|██████    | 60/100 [06:07<02:40,  4.01s/it]Tuning global sampler:  61%|██████    | 61/100 [06:11<02:36,  4.01s/it]Tuning global sampler:  62%|██████▏   | 62/100 [06:15<02:32,  4.01s/it]Tuning global sampler:  63%|██████▎   | 63/100 [06:19<02:28,  4.01s/it]Tuning global sampler:  64%|██████▍   | 64/100 [06:23<02:24,  4.01s/it]Tuning global sampler:  65%|██████▌   | 65/100 [06:27<02:20,  4.01s/it]Tuning global sampler:  66%|██████▌   | 66/100 [06:31<02:15,  3.99s/it]Tuning global sampler:  67%|██████▋   | 67/100 [06:35<02:11,  3.99s/it]Tuning global sampler:  68%|██████▊   | 68/100 [06:39<02:07,  4.00s/it]Tuning global sampler:  69%|██████▉   | 69/100 [06:43<02:03,  4.00s/it]Tuning global sampler:  70%|███████   | 70/100 [06:47<02:00,  4.00s/it]Tuning global sampler:  71%|███████   | 71/100 [06:51<01:56,  4.00s/it]Tuning global sampler:  72%|███████▏  | 72/100 [06:55<01:52,  4.00s/it]Tuning global sampler:  73%|███████▎  | 73/100 [06:59<01:48,  4.00s/it]Tuning global sampler:  74%|███████▍  | 74/100 [07:03<01:44,  4.00s/it]Tuning global sampler:  75%|███████▌  | 75/100 [07:07<01:40,  4.00s/it]Tuning global sampler:  76%|███████▌  | 76/100 [07:11<01:36,  4.00s/it]Tuning global sampler:  77%|███████▋  | 77/100 [07:15<01:31,  3.99s/it]Tuning global sampler:  78%|███████▊  | 78/100 [07:19<01:27,  3.99s/it]Tuning global sampler:  79%|███████▉  | 79/100 [07:23<01:24,  4.00s/it]Tuning global sampler:  80%|████████  | 80/100 [07:27<01:20,  4.00s/it]Tuning global sampler:  81%|████████  | 81/100 [07:31<01:16,  4.02s/it]Tuning global sampler:  82%|████████▏ | 82/100 [07:35<01:12,  4.02s/it]Tuning global sampler:  83%|████████▎ | 83/100 [07:39<01:08,  4.02s/it]Tuning global sampler:  84%|████████▍ | 84/100 [07:43<01:04,  4.02s/it]Tuning global sampler:  85%|████████▌ | 85/100 [07:47<01:00,  4.02s/it]Tuning global sampler:  86%|████████▌ | 86/100 [07:51<00:56,  4.01s/it]Tuning global sampler:  87%|████████▋ | 87/100 [07:56<00:56,  4.33s/it]Tuning global sampler:  88%|████████▊ | 88/100 [08:00<00:50,  4.22s/it]Tuning global sampler:  89%|████████▉ | 89/100 [08:04<00:45,  4.15s/it]Tuning global sampler:  90%|█████████ | 90/100 [08:08<00:41,  4.11s/it]Tuning global sampler:  91%|█████████ | 91/100 [08:12<00:36,  4.08s/it]Tuning global sampler:  92%|█████████▏| 92/100 [08:16<00:32,  4.06s/it]Tuning global sampler:  93%|█████████▎| 93/100 [08:20<00:28,  4.04s/it]Tuning global sampler:  94%|█████████▍| 94/100 [08:24<00:24,  4.03s/it]Tuning global sampler:  95%|█████████▌| 95/100 [08:28<00:20,  4.03s/it]Tuning global sampler:  96%|█████████▌| 96/100 [08:32<00:16,  4.02s/it]Tuning global sampler:  97%|█████████▋| 97/100 [08:36<00:12,  4.02s/it]Tuning global sampler:  98%|█████████▊| 98/100 [08:40<00:08,  4.02s/it]Tuning global sampler:  99%|█████████▉| 99/100 [08:44<00:04,  4.01s/it]Tuning global sampler: 100%|██████████| 100/100 [08:48<00:00,  4.00s/it]Tuning global sampler: 100%|██████████| 100/100 [08:48<00:00,  5.29s/it]
Compiling MALA body
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.21s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.21s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.21s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.21s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.21s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.21s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.21s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.21s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.21s/it]
17:05 ninjax INFO    : Saving samples to ./outdir/injection_6/results_training.npz
17:05 ninjax INFO    : Saving the NF
17:05 ninjax INFO    : Time taken: 567.26486992836 seconds (9.454414498805999 minutes)
17:05 ninjax INFO    : Creating the final corner plot
17:05 ninjax INFO    : Dumping the final production chains
17:05 ninjax INFO    : Chains shape is: (13, 110000)
17:05 ninjax INFO    : Key: M_c: ESS = 1892, Rhat = 1.5284749109837135
17:05 ninjax INFO    : Key: q: ESS = 1851, Rhat = 1.5534618513274085
17:05 ninjax INFO    : Key: s1_z: ESS = 1914, Rhat = 1.5160398978709893
17:05 ninjax INFO    : Key: s2_z: ESS = 1832, Rhat = 1.5583333512712139
17:05 ninjax INFO    : Key: lambda_1: ESS = 1995, Rhat = 1.4825539299483357
17:05 ninjax INFO    : Key: lambda_2: ESS = 1941, Rhat = 1.5023357606586507
17:05 ninjax INFO    : Key: cos_iota: ESS = 1989, Rhat = 1.4816899121390423
17:05 ninjax INFO    : Key: d_L: ESS = 1897, Rhat = 1.5294729251881003
17:05 ninjax INFO    : Key: t_c: ESS = 1860, Rhat = 1.5460288712743828
17:05 ninjax INFO    : Key: phase_c: ESS = 1839, Rhat = 1.5579563269579881
17:05 ninjax INFO    : Key: psi: ESS = 1873, Rhat = 1.7261778204811635
17:05 ninjax INFO    : Key: ra: ESS = 1994, Rhat = 1.4858443002346684
17:05 ninjax INFO    : Key: sin_dec: ESS = 2144, Rhat = 1.456227659722235
17:05 ninjax INFO    : Key: eta: ESS = 1851, Rhat = 1.5534618513274085
17:05 ninjax INFO    : Key: iota: ESS = 1989, Rhat = 1.4816899121390426
17:05 ninjax INFO    : Key: dec: ESS = 2144, Rhat = 1.4576682960479892
17:05 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.915 +/- 0.112
q: 0.788 +/- 0.178
s1_z: 0.020 +/- 0.025
s2_z: 0.017 +/- 0.024
lambda_1: 1596.137 +/- 1346.191
lambda_2: 2196.035 +/- 1474.207
cos_iota: 0.210 +/- 0.516
d_L: 376.079 +/- 73.344
t_c: 0.039 +/- 0.016
phase_c: 3.125 +/- 1.608
psi: 1.902 +/- 0.871
ra: 2.712 +/- 0.742
sin_dec: -0.667 +/- 0.325
Log probability: 114.860 +/- 74.302
Local acceptance: 0.978 +/- 0.148
Global acceptance: 0.001 +/- 0.035
Max loss: 22.763, Min loss: 10.001
Production summary
==========
M_c: 1.934 +/- 0.000
q: 0.875 +/- 0.066
s1_z: 0.030 +/- 0.013
s2_z: 0.025 +/- 0.015
lambda_1: 317.749 +/- 300.158
lambda_2: 535.490 +/- 397.383
cos_iota: -0.697 +/- 0.234
d_L: 340.184 +/- 65.997
t_c: 0.037 +/- 0.001
phase_c: 3.091 +/- 1.690
psi: 2.149 +/- 0.819
ra: 2.853 +/- 0.029
sin_dec: -0.828 +/- 0.008
Log probability: 198.437 +/- 2.759
Local acceptance: 0.947 +/- 0.223
Global acceptance: 0.001 +/- 0.037
DONE

JOB STATISTICS
==============
Job ID: 10813889
Cluster: snellius
User/Group: twouters2/twouters2
State: RUNNING
Nodes: 1
Cores per node: 16
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 03:23:28 core-walltime
Job Wall-clock time: 00:12:43
Memory Utilized: 0.00 MB (estimated maximum)
Memory Efficiency: 0.00% of 10.00 GB (10.00 GB/node)
WARNING: Efficiency statistics may be misleading for RUNNING jobs.
