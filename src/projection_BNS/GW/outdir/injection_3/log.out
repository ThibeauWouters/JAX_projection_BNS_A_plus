Wed Mar 26 16:11:33 CET 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
16:11 ninjax INFO    : Checking and setting outdir
16:11 ninjax INFO    : The outdir is set to ./outdir/injection_3
16:11 ninjax INFO    : Loading the given config
16:11 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
16:11 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/target_eos.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '100', 'n_loop_production': '20', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '50', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '10', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
16:11 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/outdir/injection_3/complete_config.json
16:11 ninjax INFO    : No seed specified. Generating a random seed: 764901
16:11 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 519752
16:11 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 178425
16:11 ninjax INFO    : Loading the priors
16:11 ninjax INFO    :    Mc_prior = Uniform(1.0, 2.2, naming=["M_c"])
16:11 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
16:11 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
16:11 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
16:11 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
16:11 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
16:11 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
16:11 ninjax INFO    :    dL_prior = PowerLaw(1.0, 500.0, 2.0, naming=["d_L"])
16:11 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
16:11 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
16:11 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
16:11 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
16:11 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
16:11 ninjax INFO    : Finished prior setup
16:11 ninjax INFO    : Setting the transforms
16:11 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
16:11 ninjax INFO    : transforms_str_list has 3 elements
16:11 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
16:11 ninjax INFO    : Setting the likelihood
16:11 ninjax INFO    : GW likelihood provided, setting up the GW pipe
16:11 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/target_eos.npz
16:11 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/target_eos.npz for BNS injections
16:11 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
16:11 ninjax INFO    : self.is_BNS_run is True
16:11 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
16:11 ninjax INFO    : GW run is an injection
16:11 ninjax INFO    : Setting up GW injection . . . 
16:11 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
16:11 ninjax INFO    : Generating new injection
16:11 ninjax INFO    : Sanity check: generated parameters:
16:11 ninjax INFO    : {'M_c': 1.2328368907321186, 'q': 0.7634762414881322, 's1_z': 0.015542844789311033, 's2_z': -0.02219705850891649, 'lambda_1': 1752.597471549201, 'lambda_2': 4090.336250437733, 'cos_iota': -0.11353897472930985, 'd_L': 114.00536808948145, 't_c': 0.028071301668437354, 'phase_c': 4.30061381864493, 'psi': 1.124076224657553, 'ra': 5.480891086382955, 'sin_dec': 0.23535002664783766}
16:11 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/target_eos.npz . . . 
16:11 ninjax INFO    : Injected lambda_1: 207.11998501961403
16:11 ninjax INFO    : Injected lambda_2: 1029.1629615667066
16:11 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.2328368907321186 is 256.0
16:11 ninjax INFO    : After transforms, the injection parameters are:
16:11 ninjax INFO    : {'M_c': 1.2328368907321186, 'q': 0.7634762414881322, 's1_z': 0.015542844789311033, 's2_z': -0.02219705850891649, 'lambda_1': 207.11998501961403, 'lambda_2': 1029.1629615667066, 'cos_iota': -0.11353897472930985, 'd_L': 114.00536808948145, 't_c': 0.028071301668437354, 'phase_c': 4.30061381864493, 'psi': 1.124076224657553, 'ra': 5.480891086382955, 'sin_dec': 0.23535002664783766, 'eta': 0.2455027158748402, 'iota': Array(1.68458067, dtype=float64, weak_type=True), 'dec': Array(0.2375787, dtype=float64, weak_type=True)}
16:11 ninjax INFO    : The trial injection parameters are {'M_c': 1.2328368907321186, 'eta': 0.2455027158748402, 's1_z': 0.015542844789311033, 's2_z': -0.02219705850891649, 'lambda_1': 207.11998501961403, 'lambda_2': 1029.1629615667066, 'd_L': 114.00536808948145, 'phase_c': 4.30061381864493, 'iota': 1.6845806679319444, 't_c': 0.028071301668437354, 'psi': 1.124076224657553, 'ra': 5.480891086382955, 'dec': 0.23757869521523697}
16:11 ninjax INFO    : Injecting signals . . .
16:11 ninjax INFO    : self.ifos
16:11 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
16:11 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
16:11 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
16:11 ninjax INFO    : [ 4.94629837e-23+6.98155047e-23j  2.19744302e-23-3.69285223e-23j
  9.11687834e-24-4.85861191e-23j ...
 -5.01667673e-24+4.78704124e-23j  4.64712930e-23+1.29732701e-23j
 -3.87422163e-24+4.00761722e-23j]
16:11 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
16:11 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
16:11 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
16:11 ninjax INFO    : [-2.97785153e-23-7.11071289e-23j  1.48078691e-23-7.41137092e-23j
 -3.87943648e-23-9.93626562e-23j ...
  2.21139224e-23+3.82387247e-23j  2.00818223e-23-1.49322100e-23j
 -2.18407591e-23-3.16681669e-23j]
16:11 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
16:11 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
16:11 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
16:11 ninjax INFO    : [-9.71186576e-23+2.04842980e-23j -1.08370188e-22+8.44497294e-23j
 -5.25413441e-23-2.43115985e-23j ...
 -1.89495801e-23+3.45779710e-23j -4.56404580e-23-8.35347357e-24j
  4.20038789e-23-9.08040543e-23j]
16:11 ninjax INFO    : [1.43183556e-46 1.43058540e-46 1.42935095e-46 ... 6.39793039e-47
 6.39795354e-47 6.39797668e-47]
16:11 ninjax INFO    : SNR for ifo H1 is 2.8936066140194097
16:11 ninjax INFO    : SNR for ifo L1 is 3.7323116849672417
16:11 ninjax INFO    : SNR for ifo V1 is 10.677632042428055
16:11 ninjax INFO    : The network SNR is 11.675398741967069
16:11 ninjax INFO    : Network SNR passes threshold
16:11 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
16:11 ninjax INFO    :    M_c: 1.2328368907321186
16:11 ninjax INFO    :    q: 0.7634762414881322
16:11 ninjax INFO    :    s1_z: 0.015542844789311033
16:11 ninjax INFO    :    s2_z: -0.02219705850891649
16:11 ninjax INFO    :    lambda_1: 207.11998501961403
16:11 ninjax INFO    :    lambda_2: 1029.1629615667066
16:11 ninjax INFO    :    cos_iota: -0.11353897472930985
16:11 ninjax INFO    :    d_L: 114.00536808948145
16:11 ninjax INFO    :    t_c: 0.028071301668437354
16:11 ninjax INFO    :    phase_c: 4.30061381864493
16:11 ninjax INFO    :    psi: 1.124076224657553
16:11 ninjax INFO    :    ra: 5.480891086382955
16:11 ninjax INFO    :    sin_dec: 0.23535002664783766
16:11 ninjax INFO    :    eta: 0.2455027158748402
16:11 ninjax INFO    :    iota: 1.6845806679319444
16:11 ninjax INFO    :    dec: 0.23757869521523697
16:11 ninjax INFO    :    H1_SNR: 2.8936066140194097
16:11 ninjax INFO    :    L1_SNR: 3.7323116849672417
16:11 ninjax INFO    :    V1_SNR: 10.677632042428055
16:11 ninjax INFO    :    network_SNR: 11.675398741967069
16:11 ninjax INFO    :    epoch: 254.0
16:11 ninjax INFO    :    gmst: 2.7288901910520846
16:11 ninjax INFO    :    duration: 256.0
16:11 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
16:11 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
16:11 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
16:14 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 187.67381238937378 seconds = 3.1278968731562298 minutes
16:14 ninjax INFO    : The priors are not modified after their initialization
16:14 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
16:14 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
16:14 ninjax INFO    : sample: {'M_c': Array([1.94407803, 1.02203076, 1.83095905], dtype=float64), 'q': Array([0.85538291, 0.80122741, 0.61406453], dtype=float64), 's1_z': Array([ 0.04519112,  0.03438724, -0.04263379], dtype=float64), 's2_z': Array([ 0.00820768,  0.03258595, -0.04441997], dtype=float64), 'lambda_1': Array([4550.54526435, 4150.45971305,   37.95593778], dtype=float64), 'lambda_2': Array([2362.92274999,   49.41720657,  182.35513748], dtype=float64), 'cos_iota': Array([-0.68936175, -0.01550968, -0.34931857], dtype=float64), 'd_L': Array([253.49077546, 423.80104675, 469.3748599 ], dtype=float64), 't_c': Array([ 0.05103496, -0.03767548,  0.08619714], dtype=float64), 'phase_c': Array([3.10875525, 5.66279255, 1.14018736], dtype=float64), 'psi': Array([2.55093891, 1.9118242 , 2.62967669], dtype=float64), 'ra': Array([5.19723262, 5.56163154, 0.01935335], dtype=float64), 'sin_dec': Array([-0.73539137,  0.58530248,  0.99774917], dtype=float64)}
16:15 ninjax INFO    : log_prob: [-464.89741887   -1.08917538  -34.94389   ]
16:15 ninjax INFO    : Checking log_prob at injection parameters: {'M_c': 1.2328368907321186, 'q': 0.7634762414881322, 's1_z': 0.015542844789311033, 's2_z': -0.02219705850891649, 'lambda_1': 207.11998501961403, 'lambda_2': 1029.1629615667066, 'cos_iota': -0.11353897472930985, 'd_L': 114.00536808948145, 't_c': 0.028071301668437354, 'phase_c': 4.30061381864493, 'psi': 1.124076224657553, 'ra': 5.480891086382955, 'sin_dec': 0.23535002664783766, 'eta': 0.2455027158748402, 'iota': Array(1.68458067, dtype=float64, weak_type=True), 'dec': Array(0.2375787, dtype=float64, weak_type=True), 'H1_SNR': 2.8936066140194097, 'L1_SNR': 3.7323116849672417, 'V1_SNR': 10.677632042428055, 'network_SNR': 11.675398741967069, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
16:15 ninjax INFO    : log_prob at the injection parameters is: 46.72365115167578
16:15 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
16:15 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
16:15 ninjax INFO    : Ninjax setup complete.
16:15 ninjax INFO    : Saving output to ./outdir/injection_3/
16:15 ninjax INFO    : Using polynomial learning rate scheduler
16:15 ninjax INFO    : The hyperparameters passed to flowMC and jim are
16:15 ninjax INFO    :    n_loop_training: 100
16:15 ninjax INFO    :    n_loop_production: 20
16:15 ninjax INFO    :    n_local_steps: 100
16:15 ninjax INFO    :    n_global_steps: 1000
16:15 ninjax INFO    :    n_epochs: 50
16:15 ninjax INFO    :    n_chains: 1000
16:15 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x147ff0a8e320>
16:15 ninjax INFO    :    max_samples: 50000
16:15 ninjax INFO    :    momentum: 0.9
16:15 ninjax INFO    :    batch_size: 30000
16:15 ninjax INFO    :    use_global: True
16:15 ninjax INFO    :    keep_quantile: 0.0
16:15 ninjax INFO    :    train_thinning: 10
16:15 ninjax INFO    :    output_thinning: 10
16:15 ninjax INFO    :    n_sample_max: 10000
16:15 ninjax INFO    :    num_layers: 10
16:15 ninjax INFO    :    hidden_size: [128, 128]
16:15 ninjax INFO    :    num_bins: 8
16:15 ninjax INFO    :    save_training_chains: False
16:15 ninjax INFO    :    eps_mass_matrix: 1e-05
16:15 ninjax INFO    :    use_scheduler: True
16:15 ninjax INFO    :    use_temperature: False
16:15 ninjax INFO    :    which_temperature_schedule: exponential
16:15 ninjax INFO    :    starting_temperature: 2.0
16:15 ninjax INFO    :    stop_tempering_iteration: 75
16:15 ninjax INFO    :    stopping_criterion_global_acc: 0.1
16:15 ninjax INFO    :    stopping_criterion_loss: -inf
16:15 ninjax INFO    :    nf_model_kwargs: {}
16:15 ninjax INFO    :    local sampler arg not shown (pretty print)
16:15 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[ 5.07962610e-23  2.10724345e-23  9.07560988e-24  1.34311336e-22
 -7.62725218e-23  5.29548685e-23  2.31782432e-23 -1.00825706e-22
  9.63132100e-23 -9.72540897e-23]
[ 6.98876456e-23 -3.79126058e-23 -4.72521408e-23 -1.27059684e-23
 -7.76226623e-25  2.87663788e-23 -1.09640535e-23  1.82276154e-23
  4.46490404e-23 -3.89542632e-23]
Checking the noise that was generated in inject_signal ifo:
[-2.95278112e-23  1.34372403e-23 -3.70858125e-23 -1.03661741e-22
  6.43076429e-23 -9.18823554e-23 -2.69467329e-23 -4.96027101e-23
 -9.39514816e-23  5.26929544e-24]
[-7.28110240e-23 -7.30715336e-23 -9.91523085e-23 -1.12105302e-22
 -5.88409081e-23 -4.03537210e-23 -5.66246013e-23 -5.86613824e-23
  3.75378626e-23  1.09580482e-22]
Checking the noise that was generated in inject_signal ifo:
[-9.33687440e-23 -1.07549277e-22 -5.74550617e-23  5.39974357e-23
 -2.06198597e-23 -9.49317943e-24 -1.62902371e-22  9.44149198e-23
  4.80803797e-23 -9.22382558e-23]
[ 2.54910854e-23  7.82498933e-23 -2.04451601e-23  1.05609839e-22
 -3.78242908e-23 -1.29747254e-23 -1.63462530e-23  8.45957982e-23
  7.08265280e-23  1.77789173e-24]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.1842036247253418 seconds
Using provided reference parameters:
ref_params for relative binning:
{'M_c': 1.2328368907321186, 'q': 0.7634762414881322, 's1_z': 0.015542844789311033, 's2_z': -0.02219705850891649, 'lambda_1': 207.11998501961403, 'lambda_2': 1029.1629615667066, 'cos_iota': -0.11353897472930985, 'd_L': 114.00536808948145, 't_c': 0.028071301668437354, 'phase_c': 4.30061381864493, 'psi': 1.124076224657553, 'ra': 5.480891086382955, 'sin_dec': 0.23535002664783766, 'eta': 0.2455027158748402, 'iota': Array(1.68458067, dtype=float64, weak_type=True), 'dec': Array(0.2375787, dtype=float64, weak_type=True), 'H1_SNR': 2.8936066140194097, 'L1_SNR': 3.7323116849672417, 'V1_SNR': 10.677632042428055, 'network_SNR': 11.675398741967069, 'epoch': 254.0, 'gmst': 2.7288901910520846, 'duration': 256.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5214979648590088 seconds
Time for h_sky_low and h_sky_center: 5.571974754333496 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.7493486404418945
Going to compute coefficients . . .
Time for computing coefficients: 165.31303024291992 seconds
Time for computing coefficients: 7.416611194610596 seconds
Time for computing coefficients: 7.3701677322387695 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/100 [00:00<?, ?it/s]Tuning global sampler:   1%|          | 1/100 [02:01<3:20:41, 121.64s/it]Tuning global sampler:   2%|▏         | 2/100 [02:07<1:27:44, 53.72s/it] Tuning global sampler:   3%|▎         | 3/100 [02:13<51:03, 31.58s/it]  Tuning global sampler:   4%|▍         | 4/100 [02:18<33:56, 21.21s/it]Tuning global sampler:   5%|▌         | 5/100 [02:23<24:28, 15.45s/it]Tuning global sampler:   6%|▌         | 6/100 [02:28<18:39, 11.91s/it]Tuning global sampler:   7%|▋         | 7/100 [02:33<14:57,  9.65s/it]Tuning global sampler:   8%|▊         | 8/100 [02:38<12:31,  8.17s/it]Tuning global sampler:   9%|▉         | 9/100 [02:43<10:53,  7.18s/it]Tuning global sampler:  10%|█         | 10/100 [02:48<09:39,  6.44s/it]Tuning global sampler:  11%|█         | 11/100 [02:53<08:53,  5.99s/it]Tuning global sampler:  12%|█▏        | 12/100 [02:58<08:20,  5.68s/it]Tuning global sampler:  13%|█▎        | 13/100 [03:04<08:21,  5.76s/it]Tuning global sampler:  14%|█▍        | 14/100 [03:09<07:55,  5.53s/it]Tuning global sampler:  15%|█▌        | 15/100 [03:14<07:36,  5.38s/it]Tuning global sampler:  16%|█▌        | 16/100 [03:19<07:21,  5.26s/it]Tuning global sampler:  17%|█▋        | 17/100 [03:24<07:10,  5.18s/it]Tuning global sampler:  18%|█▊        | 18/100 [03:29<07:00,  5.13s/it]Tuning global sampler:  19%|█▉        | 19/100 [03:34<06:52,  5.10s/it]Tuning global sampler:  20%|██        | 20/100 [03:39<06:45,  5.07s/it]Tuning global sampler:  21%|██        | 21/100 [03:44<06:38,  5.05s/it]Tuning global sampler:  22%|██▏       | 22/100 [03:49<06:31,  5.02s/it]Tuning global sampler:  23%|██▎       | 23/100 [03:54<06:25,  5.00s/it]Tuning global sampler:  24%|██▍       | 24/100 [04:00<06:42,  5.29s/it]Tuning global sampler:  25%|██▌       | 25/100 [04:05<06:30,  5.21s/it]Tuning global sampler:  26%|██▌       | 26/100 [04:10<06:21,  5.15s/it]Tuning global sampler:  27%|██▋       | 27/100 [04:15<06:12,  5.11s/it]Tuning global sampler:  28%|██▊       | 28/100 [04:20<06:05,  5.08s/it]Tuning global sampler:  29%|██▉       | 29/100 [04:25<05:59,  5.06s/it]Tuning global sampler:  30%|███       | 30/100 [04:30<05:53,  5.05s/it]Tuning global sampler:  31%|███       | 31/100 [04:35<05:47,  5.04s/it]Tuning global sampler:  32%|███▏      | 32/100 [04:40<05:42,  5.04s/it]Tuning global sampler:  33%|███▎      | 33/100 [04:45<05:36,  5.02s/it]Tuning global sampler:  34%|███▍      | 34/100 [04:51<05:50,  5.31s/it]Tuning global sampler:  35%|███▌      | 35/100 [04:56<05:39,  5.23s/it]Tuning global sampler:  36%|███▌      | 36/100 [05:01<05:30,  5.16s/it]Tuning global sampler:  37%|███▋      | 37/100 [05:06<05:22,  5.12s/it]Tuning global sampler:  38%|███▊      | 38/100 [05:11<05:15,  5.09s/it]Tuning global sampler:  39%|███▉      | 39/100 [05:16<05:09,  5.07s/it]Tuning global sampler:  40%|████      | 40/100 [05:21<05:03,  5.06s/it]Tuning global sampler:  41%|████      | 41/100 [05:26<04:57,  5.04s/it]Tuning global sampler:  42%|████▏     | 42/100 [05:31<04:52,  5.04s/it]Tuning global sampler:  43%|████▎     | 43/100 [05:36<04:47,  5.04s/it]Tuning global sampler:  44%|████▍     | 44/100 [05:41<04:41,  5.02s/it]Tuning global sampler:  45%|████▌     | 45/100 [05:46<04:35,  5.01s/it]Tuning global sampler:  46%|████▌     | 46/100 [05:52<04:46,  5.30s/it]Tuning global sampler:  47%|████▋     | 47/100 [05:57<04:37,  5.23s/it]Tuning global sampler:  48%|████▊     | 48/100 [06:02<04:28,  5.17s/it]Tuning global sampler:  49%|████▉     | 49/100 [06:07<04:21,  5.12s/it]Tuning global sampler:  49%|████▉     | 49/100 [06:12<06:27,  7.60s/it]
Compiling MALA body
Early stopping: global acceptance target rate achieved
Starting Production run
Production run:   0%|          | 0/20 [00:00<?, ?it/s]Production run:   5%|▌         | 1/20 [00:03<01:01,  3.21s/it]Production run:  10%|█         | 2/20 [00:06<00:57,  3.21s/it]Production run:  15%|█▌        | 3/20 [00:09<00:54,  3.21s/it]Production run:  20%|██        | 4/20 [00:12<00:51,  3.21s/it]Production run:  25%|██▌       | 5/20 [00:16<00:48,  3.21s/it]Production run:  30%|███       | 6/20 [00:19<00:44,  3.21s/it]Production run:  35%|███▌      | 7/20 [00:22<00:41,  3.21s/it]Production run:  40%|████      | 8/20 [00:25<00:38,  3.21s/it]Production run:  45%|████▌     | 9/20 [00:28<00:35,  3.21s/it]Production run:  50%|█████     | 10/20 [00:32<00:32,  3.21s/it]Production run:  55%|█████▌    | 11/20 [00:35<00:28,  3.21s/it]Production run:  60%|██████    | 12/20 [00:38<00:25,  3.21s/it]Production run:  65%|██████▌   | 13/20 [00:41<00:22,  3.21s/it]Production run:  70%|███████   | 14/20 [00:44<00:19,  3.21s/it]Production run:  75%|███████▌  | 15/20 [00:48<00:16,  3.21s/it]Production run:  80%|████████  | 16/20 [00:51<00:12,  3.21s/it]Production run:  85%|████████▌ | 17/20 [00:54<00:09,  3.21s/it]Production run:  90%|█████████ | 18/20 [00:57<00:06,  3.21s/it]Production run:  95%|█████████▌| 19/20 [01:01<00:03,  3.21s/it]Production run: 100%|██████████| 20/20 [01:04<00:00,  3.21s/it]Production run: 100%|██████████| 20/20 [01:04<00:00,  3.21s/it]
16:22 ninjax INFO    : Saving samples to ./outdir/injection_3/results_training.npz
16:22 ninjax INFO    : Saving the NF
16:22 ninjax INFO    : Time taken: 443.87158584594727 seconds (7.397859764099121 minutes)
16:22 ninjax INFO    : Creating the final corner plot
16:22 ninjax INFO    : Dumping the final production chains
16:22 ninjax INFO    : Chains shape is: (13, 2200000)
16:22 ninjax INFO    : Key: M_c: ESS = 33368, Rhat = 1.018234070241458
16:22 ninjax INFO    : Key: q: ESS = 32841, Rhat = 1.0180655163880978
16:22 ninjax INFO    : Key: s1_z: ESS = 31508, Rhat = 1.0189782621953682
16:22 ninjax INFO    : Key: s2_z: ESS = 36237, Rhat = 1.0166318701551529
16:22 ninjax INFO    : Key: lambda_1: ESS = 35929, Rhat = 1.0172519909277367
16:23 ninjax INFO    : Key: lambda_2: ESS = 38724, Rhat = 1.0156379759150047
16:23 ninjax INFO    : Key: cos_iota: ESS = 36606, Rhat = 1.0165745254963805
16:23 ninjax INFO    : Key: d_L: ESS = 29213, Rhat = 1.0206104831779645
16:23 ninjax INFO    : Key: t_c: ESS = 22168, Rhat = 1.026757741694283
16:23 ninjax INFO    : Key: phase_c: ESS = 45538, Rhat = 1.0139229264435399
16:23 ninjax INFO    : Key: psi: ESS = 42530, Rhat = 1.0339807604102664
16:23 ninjax INFO    : Key: ra: ESS = 24530, Rhat = 1.0240998949395832
16:23 ninjax INFO    : Key: sin_dec: ESS = 21167, Rhat = 1.0281443465328666
16:23 ninjax INFO    : Key: eta: ESS = 32841, Rhat = 1.0180655163880978
16:23 ninjax INFO    : Key: iota: ESS = 36606, Rhat = 1.0165745254963805
16:23 ninjax INFO    : Key: dec: ESS = 21167, Rhat = 1.0281443465328666
16:23 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.333 +/- 0.271
q: 0.669 +/- 0.251
s1_z: 0.003 +/- 0.028
s2_z: 0.003 +/- 0.028
lambda_1: 2398.077 +/- 1407.721
lambda_2: 2521.683 +/- 1430.451
cos_iota: -0.010 +/- 0.357
d_L: 376.423 +/- 94.025
t_c: 0.018 +/- 0.044
phase_c: 3.152 +/- 1.763
psi: 1.592 +/- 0.863
ra: 2.382 +/- 1.833
sin_dec: -0.108 +/- 0.652
Log probability: 3.481 +/- 28.933
Local acceptance: 0.925 +/- 0.264
Global acceptance: 0.022 +/- 0.146
Max loss: 22.803, Min loss: 4.286
Production summary
==========
M_c: 1.233 +/- 0.000
q: 0.838 +/- 0.104
s1_z: 0.013 +/- 0.025
s2_z: 0.007 +/- 0.026
lambda_1: 1889.021 +/- 1350.004
lambda_2: 2184.221 +/- 1408.288
cos_iota: -0.010 +/- 0.734
d_L: 310.133 +/- 78.136
t_c: 0.023 +/- 0.009
phase_c: 3.129 +/- 1.822
psi: 1.558 +/- 0.887
ra: 0.587 +/- 0.702
sin_dec: -0.714 +/- 0.349
Log probability: 39.970 +/- 2.353
Local acceptance: 0.782 +/- 0.413
Global acceptance: 0.104 +/- 0.305
DONE

JOB STATISTICS
==============
Job ID: 10811219
Cluster: snellius
User/Group: twouters2/twouters2
State: RUNNING
Nodes: 1
Cores per node: 16
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 03:11:28 core-walltime
Job Wall-clock time: 00:11:58
Memory Utilized: 0.00 MB (estimated maximum)
Memory Efficiency: 0.00% of 10.00 GB (10.00 GB/node)
WARNING: Efficiency statistics may be misleading for RUNNING jobs.
