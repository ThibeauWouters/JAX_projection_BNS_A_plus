Wed Mar 26 17:15:55 CET 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
17:16 ninjax INFO    : Checking and setting outdir
17:16 ninjax INFO    : The outdir is set to ./outdir/injection_11
17:16 ninjax INFO    : Loading the given config
17:16 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
17:16 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/target_eos.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '100', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '25', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '50', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
17:16 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/outdir/injection_11/complete_config.json
17:16 ninjax INFO    : No seed specified. Generating a random seed: 85411
17:16 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 837187
17:16 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 464131
17:16 ninjax INFO    : Loading the priors
17:16 ninjax INFO    :    Mc_prior = Uniform(1.0, 2.2, naming=["M_c"])
17:16 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
17:16 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
17:16 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
17:16 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
17:16 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
17:16 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
17:16 ninjax INFO    :    dL_prior = PowerLaw(1.0, 500.0, 2.0, naming=["d_L"])
17:16 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
17:16 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
17:16 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
17:16 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
17:16 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
17:16 ninjax INFO    : Finished prior setup
17:16 ninjax INFO    : Setting the transforms
17:16 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
17:16 ninjax INFO    : transforms_str_list has 3 elements
17:16 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
17:16 ninjax INFO    : Setting the likelihood
17:16 ninjax INFO    : GW likelihood provided, setting up the GW pipe
17:16 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/target_eos.npz
17:16 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/target_eos.npz for BNS injections
17:16 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
17:16 ninjax INFO    : self.is_BNS_run is True
17:16 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
17:16 ninjax INFO    : GW run is an injection
17:16 ninjax INFO    : Setting up GW injection . . . 
17:16 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
17:16 ninjax INFO    : Generating new injection
17:16 ninjax INFO    : Sanity check: generated parameters:
17:16 ninjax INFO    : {'M_c': 1.0754334778386112, 'q': 0.21125875846881847, 's1_z': 0.02572616168892726, 's2_z': -0.035192085302111424, 'lambda_1': 3523.682702910408, 'lambda_2': 218.3780356620324, 'cos_iota': 0.9816911153717225, 'd_L': 488.44056800921334, 't_c': 0.07398881572426852, 'phase_c': 1.1469038420021436, 'psi': 0.3009100787110789, 'ra': 3.3605463212981492, 'sin_dec': 0.5043206614246314}
17:16 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/target_eos.npz . . . 
17:16 ninjax INFO    : Injected lambda_1: 5.2203813963268075
17:16 ninjax INFO    : Injected lambda_2: 34429.161915422395
17:16 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.0754334778386112 is 256.0
17:16 ninjax INFO    : After transforms, the injection parameters are:
17:16 ninjax INFO    : {'M_c': 1.0754334778386112, 'q': 0.21125875846881847, 's1_z': 0.02572616168892726, 's2_z': -0.035192085302111424, 'lambda_1': 5.2203813963268075, 'lambda_2': 34429.161915422395, 'cos_iota': 0.9816911153717225, 'd_L': 488.44056800921334, 't_c': 0.07398881572426852, 'phase_c': 1.1469038420021436, 'psi': 0.3009100787110789, 'ra': 3.3605463212981492, 'sin_dec': 0.5043206614246314, 'eta': 0.14399282836628038, 'iota': Array(0.19165087, dtype=float64, weak_type=True), 'dec': Array(0.52859507, dtype=float64, weak_type=True)}
17:16 ninjax INFO    : The trial injection parameters are {'M_c': 1.0754334778386112, 'eta': 0.14399282836628038, 's1_z': 0.02572616168892726, 's2_z': -0.035192085302111424, 'lambda_1': 5.2203813963268075, 'lambda_2': 34429.161915422395, 'd_L': 488.44056800921334, 'phase_c': 1.1469038420021436, 'iota': 0.1916508712611214, 't_c': 0.07398881572426852, 'psi': 0.3009100787110789, 'ra': 3.3605463212981492, 'dec': 0.5285950726363319}
17:16 ninjax INFO    : Injecting signals . . .
17:16 ninjax INFO    : self.ifos
17:16 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
17:16 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
17:16 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
17:16 ninjax INFO    : [ 1.32903312e-22+7.86944379e-23j -4.74602771e-23+2.19556277e-23j
 -1.25047111e-22-5.65948374e-23j ...
  5.35987097e-23+1.72633793e-23j  1.11771991e-23+1.36572196e-23j
 -1.59257533e-23-3.30276972e-23j]
17:16 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
17:16 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
17:16 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
17:16 ninjax INFO    : [-5.44479978e-23-2.87295407e-23j -3.69544835e-23-5.25231280e-23j
 -8.87606729e-23+5.32259841e-23j ...
  7.88696384e-24-2.88221391e-23j -1.86872440e-23+2.26342597e-23j
 -9.29123910e-24+5.26337500e-24j]
17:16 ninjax INFO    : [1.44906511e-46 1.44785671e-46 1.44667215e-46 ... 2.17778216e-47
 2.17778992e-47 2.17779767e-47]
17:16 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
17:16 ninjax INFO    : [  20.           20.00390625   20.0078125  ... 2047.98828125
 2047.9921875  2047.99609375]
17:16 ninjax INFO    : [-2.52270828e-23+4.53565677e-23j  6.85209535e-23-6.22504105e-23j
 -5.12992248e-23-1.01268157e-23j ...
 -1.31755894e-23+9.08024332e-23j  4.50048644e-23+5.78748070e-24j
  1.09120045e-23+1.13038922e-22j]
17:16 ninjax INFO    : [1.43183556e-46 1.43058540e-46 1.42935095e-46 ... 6.39793039e-47
 6.39795354e-47 6.39797668e-47]
17:16 ninjax INFO    : SNR for ifo H1 is 2.857986556417331
17:16 ninjax INFO    : SNR for ifo L1 is 3.579730048541307
17:16 ninjax INFO    : SNR for ifo V1 is 7.739637041358396
17:16 ninjax INFO    : The network SNR is 8.99358304064952
17:16 ninjax INFO    : The network SNR does not pass the threshold, trying again
17:16 ninjax INFO    : Generating new injection
17:16 ninjax INFO    : Sanity check: generated parameters:
17:16 ninjax INFO    : {'M_c': 1.8114019836867703, 'q': 0.667676489933805, 's1_z': 0.037450988294667115, 's2_z': -0.03084604541566043, 'lambda_1': 3907.619528918226, 'lambda_2': 3813.3746759109845, 'cos_iota': 0.2847454401504086, 'd_L': 257.0971630765872, 't_c': 0.013060715597943681, 'phase_c': 0.37642045604327873, 'psi': 2.0527863944443694, 'ra': 0.23127676986970144, 'sin_dec': 0.6858273084385793}
17:16 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/target_eos.npz . . . 
17:16 ninjax INFO    : Injected lambda_1: 5.2203813963268075
17:16 ninjax INFO    : Injected lambda_2: 150.35353673230662
17:16 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.8114019836867703 is 128.0
17:16 ninjax INFO    : After transforms, the injection parameters are:
17:16 ninjax INFO    : {'M_c': 1.8114019836867703, 'q': 0.667676489933805, 's1_z': 0.037450988294667115, 's2_z': -0.03084604541566043, 'lambda_1': 5.2203813963268075, 'lambda_2': 150.35353673230662, 'cos_iota': 0.2847454401504086, 'd_L': 257.0971630765872, 't_c': 0.013060715597943681, 'phase_c': 0.37642045604327873, 'psi': 2.0527863944443694, 'ra': 0.23127676986970144, 'sin_dec': 0.6858273084385793, 'eta': 0.24007253125031633, 'iota': Array(1.28205546, dtype=float64, weak_type=True), 'dec': Array(0.75573987, dtype=float64, weak_type=True)}
17:16 ninjax INFO    : The trial injection parameters are {'M_c': 1.8114019836867703, 'eta': 0.24007253125031633, 's1_z': 0.037450988294667115, 's2_z': -0.03084604541566043, 'lambda_1': 5.2203813963268075, 'lambda_2': 150.35353673230662, 'd_L': 257.0971630765872, 'phase_c': 0.37642045604327873, 'iota': 1.2820554619970204, 't_c': 0.013060715597943681, 'psi': 2.0527863944443694, 'ra': 0.23127676986970144, 'dec': 0.7557398715523423}
17:16 ninjax INFO    : Injecting signals . . .
17:16 ninjax INFO    : self.ifos
17:16 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
17:16 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
17:16 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
17:16 ninjax INFO    : [ 3.34764031e-23-3.35400197e-23j -1.42370256e-23-1.01585292e-23j
 -3.29315761e-23-1.65269558e-24j ...
  2.02372031e-24-1.50332288e-23j  1.15974414e-23+1.35587113e-23j
 -1.14422744e-23+1.11014945e-23j]
17:16 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
17:16 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
17:16 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
17:16 ninjax INFO    : [ 4.11518271e-23-1.19303513e-23j -2.87720968e-23-2.97666755e-23j
  3.60390527e-23-3.68121274e-23j ...
  7.66108937e-24+8.42837683e-24j  2.23270575e-23-1.43318092e-23j
 -7.87594523e-24-2.04105873e-24j]
17:16 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
17:16 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
17:16 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
17:16 ninjax INFO    : [ 1.26430001e-23+2.93861235e-23j -1.97923009e-23-5.67226537e-23j
 -7.22673477e-23+5.51961257e-23j ...
  2.38138795e-23+1.97998854e-23j -4.56123167e-23-1.35857948e-24j
 -1.65324778e-23-4.83292497e-23j]
17:16 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
17:16 ninjax INFO    : SNR for ifo H1 is 15.979132051625227
17:16 ninjax INFO    : SNR for ifo L1 is 12.041541819473826
17:16 ninjax INFO    : SNR for ifo V1 is 1.5378995517150322
17:16 ninjax INFO    : The network SNR is 20.067299906678503
17:16 ninjax INFO    : Network SNR passes threshold
17:16 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
17:16 ninjax INFO    :    M_c: 1.8114019836867703
17:16 ninjax INFO    :    q: 0.667676489933805
17:16 ninjax INFO    :    s1_z: 0.037450988294667115
17:16 ninjax INFO    :    s2_z: -0.03084604541566043
17:16 ninjax INFO    :    lambda_1: 5.2203813963268075
17:16 ninjax INFO    :    lambda_2: 150.35353673230662
17:16 ninjax INFO    :    cos_iota: 0.2847454401504086
17:16 ninjax INFO    :    d_L: 257.0971630765872
17:16 ninjax INFO    :    t_c: 0.013060715597943681
17:16 ninjax INFO    :    phase_c: 0.37642045604327873
17:16 ninjax INFO    :    psi: 2.0527863944443694
17:16 ninjax INFO    :    ra: 0.23127676986970144
17:16 ninjax INFO    :    sin_dec: 0.6858273084385793
17:16 ninjax INFO    :    eta: 0.24007253125031633
17:16 ninjax INFO    :    iota: 1.2820554619970204
17:16 ninjax INFO    :    dec: 0.7557398715523423
17:16 ninjax INFO    :    H1_SNR: 15.979132051625227
17:16 ninjax INFO    :    L1_SNR: 12.041541819473826
17:16 ninjax INFO    :    V1_SNR: 1.5378995517150322
17:16 ninjax INFO    :    network_SNR: 20.067299906678503
17:16 ninjax INFO    :    epoch: 126.0
17:16 ninjax INFO    :    gmst: 2.7288901910520846
17:16 ninjax INFO    :    duration: 128.0
17:16 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
17:16 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
17:16 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
17:18 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 148.42858362197876 seconds = 2.4738097270329793 minutes
17:18 ninjax INFO    : The priors are not modified after their initialization
17:18 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
17:18 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
17:18 ninjax INFO    : sample: {'M_c': Array([1.76174661, 1.39016658, 1.51823483], dtype=float64), 'q': Array([0.86154884, 0.25910642, 0.37444018], dtype=float64), 's1_z': Array([0.04305409, 0.00660569, 0.03734701], dtype=float64), 's2_z': Array([-0.02656691,  0.02782679,  0.00558642], dtype=float64), 'lambda_1': Array([1457.71940925, 3389.5468102 ,  256.91378615], dtype=float64), 'lambda_2': Array([2265.42796741, 3485.13314756, 3347.45111683], dtype=float64), 'cos_iota': Array([ 0.6090891 , -0.24579048, -0.41493731], dtype=float64), 'd_L': Array([499.17234085, 173.19738006, 146.63948584], dtype=float64), 't_c': Array([ 0.06977132, -0.03322013,  0.01759132], dtype=float64), 'phase_c': Array([2.71091348, 3.85978897, 1.09337779], dtype=float64), 'psi': Array([1.15994011, 2.4835937 , 3.10108692], dtype=float64), 'ra': Array([3.77409831, 0.42397648, 1.87416829], dtype=float64), 'sin_dec': Array([ 0.34954191, -0.9269981 , -0.64325896], dtype=float64)}
17:18 ninjax INFO    : log_prob: [ -52.92343321 -132.72546086 -116.41261988]
17:18 ninjax INFO    : Checking log_prob at injection parameters: {'M_c': 1.8114019836867703, 'q': 0.667676489933805, 's1_z': 0.037450988294667115, 's2_z': -0.03084604541566043, 'lambda_1': 5.2203813963268075, 'lambda_2': 150.35353673230662, 'cos_iota': 0.2847454401504086, 'd_L': 257.0971630765872, 't_c': 0.013060715597943681, 'phase_c': 0.37642045604327873, 'psi': 2.0527863944443694, 'ra': 0.23127676986970144, 'sin_dec': 0.6858273084385793, 'eta': 0.24007253125031633, 'iota': Array(1.28205546, dtype=float64, weak_type=True), 'dec': Array(0.75573987, dtype=float64, weak_type=True), 'H1_SNR': 15.979132051625227, 'L1_SNR': 12.041541819473826, 'V1_SNR': 1.5378995517150322, 'network_SNR': 20.067299906678503, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
17:18 ninjax INFO    : log_prob at the injection parameters is: 182.60741636160907
17:18 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
17:18 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
17:18 ninjax INFO    : Ninjax setup complete.
17:18 ninjax INFO    : Saving output to ./outdir/injection_11/
17:18 ninjax INFO    : Using polynomial learning rate scheduler
17:18 ninjax INFO    : The hyperparameters passed to flowMC and jim are
17:18 ninjax INFO    :    n_loop_training: 100
17:18 ninjax INFO    :    n_loop_production: 10
17:18 ninjax INFO    :    n_local_steps: 100
17:18 ninjax INFO    :    n_global_steps: 1000
17:18 ninjax INFO    :    n_epochs: 25
17:18 ninjax INFO    :    n_chains: 1000
17:18 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x153ab81f8160>
17:18 ninjax INFO    :    max_samples: 50000
17:18 ninjax INFO    :    momentum: 0.9
17:18 ninjax INFO    :    batch_size: 30000
17:18 ninjax INFO    :    use_global: True
17:18 ninjax INFO    :    keep_quantile: 0.0
17:18 ninjax INFO    :    train_thinning: 10
17:18 ninjax INFO    :    output_thinning: 50
17:18 ninjax INFO    :    n_sample_max: 10000
17:18 ninjax INFO    :    num_layers: 10
17:18 ninjax INFO    :    hidden_size: [128, 128]
17:18 ninjax INFO    :    num_bins: 8
17:18 ninjax INFO    :    save_training_chains: False
17:18 ninjax INFO    :    eps_mass_matrix: 1e-05
17:18 ninjax INFO    :    use_scheduler: True
17:18 ninjax INFO    :    use_temperature: False
17:18 ninjax INFO    :    which_temperature_schedule: exponential
17:18 ninjax INFO    :    starting_temperature: 2.0
17:18 ninjax INFO    :    stop_tempering_iteration: 75
17:18 ninjax INFO    :    stopping_criterion_global_acc: 0.1
17:18 ninjax INFO    :    stopping_criterion_loss: -inf
17:18 ninjax INFO    :    nf_model_kwargs: {}
17:18 ninjax INFO    :    local sampler arg not shown (pretty print)
17:18 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[ 1.31894980e-22 -4.84998043e-23 -1.24404332e-22  5.90186696e-23
  1.33235661e-22 -5.84228731e-23  1.07129705e-23 -4.24771622e-24
  4.70700998e-23  1.55377696e-22]
[ 7.78193841e-23  2.27928960e-23 -5.54253702e-23  2.63858282e-23
  1.98473649e-23  8.87677485e-23  2.87482873e-23 -1.37085582e-22
  8.16320287e-23 -6.60222790e-24]
Checking the noise that was generated in inject_signal ifo:
[-5.43144465e-23 -3.52906545e-23 -8.83091692e-23 -4.10667555e-23
  2.70248744e-24 -2.20752559e-24  8.28308341e-23  1.34649070e-22
 -6.53899758e-23  9.56768223e-24]
[-2.70626404e-23 -5.23594723e-23  5.16166449e-23  3.26536032e-23
 -1.26960537e-22  8.91703780e-23  1.07109934e-22  2.36115015e-23
  9.10720492e-23  4.34218731e-23]
Checking the noise that was generated in inject_signal ifo:
[-2.34450998e-23  7.29852966e-23 -5.15063301e-23 -1.34083651e-22
  4.72625840e-23  6.27320763e-23  4.62986949e-23  4.54567044e-23
  2.23951019e-23  9.70094288e-24]
[ 4.95724526e-23 -6.32549903e-23 -1.46970503e-23  3.90642599e-23
  9.84348866e-23  2.47036229e-23 -7.28693223e-23  9.55065577e-23
  1.79955412e-23  6.17600240e-23]
Checking the noise that was generated in inject_signal ifo:
[ 3.39029261e-23 -8.06760288e-24 -3.96411513e-23 -5.32266966e-23
 -2.40750777e-23  6.18932363e-24 -2.96191707e-23  7.09616297e-23
  7.15638729e-23  6.50047800e-23]
[-2.61206428e-23 -1.42957601e-23 -4.83223996e-24 -6.11310520e-24
  2.67878588e-23  1.67670286e-23  9.87457669e-24  2.27827509e-24
 -3.46093264e-23 -1.66731093e-23]
Checking the noise that was generated in inject_signal ifo:
[ 3.75687974e-23 -3.06549013e-23  4.15284861e-23 -5.49420168e-23
 -3.96602889e-23  7.57695559e-23 -7.83046814e-24 -5.19818842e-24
 -1.85475087e-23 -1.14151118e-24]
[-1.62344745e-23 -2.44950648e-23 -3.78948297e-23 -1.47772131e-23
 -9.10553381e-23 -4.70266041e-24  5.07455613e-23  3.21294090e-23
  2.16147404e-23  4.03561321e-23]
Checking the noise that was generated in inject_signal ifo:
[ 1.19513340e-23 -1.89357800e-23 -7.24520208e-23  4.33475109e-23
 -5.82318912e-23 -2.36128479e-23  4.83228429e-23  7.43653756e-24
  8.33237124e-23  5.03673723e-23]
[ 2.99725476e-23 -5.64261515e-23  5.43091732e-23  1.55263849e-23
 -3.53502673e-23 -4.30244758e-23 -8.26341794e-24 -3.19914660e-23
 -9.66263904e-23  9.99237414e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.11217117309570312 seconds
Using provided reference parameters:
ref_params for relative binning:
{'M_c': 1.8114019836867703, 'q': 0.667676489933805, 's1_z': 0.037450988294667115, 's2_z': -0.03084604541566043, 'lambda_1': 5.2203813963268075, 'lambda_2': 150.35353673230662, 'cos_iota': 0.2847454401504086, 'd_L': 257.0971630765872, 't_c': 0.013060715597943681, 'phase_c': 0.37642045604327873, 'psi': 2.0527863944443694, 'ra': 0.23127676986970144, 'sin_dec': 0.6858273084385793, 'eta': 0.24007253125031633, 'iota': Array(1.28205546, dtype=float64, weak_type=True), 'dec': Array(0.75573987, dtype=float64, weak_type=True), 'H1_SNR': 15.979132051625227, 'L1_SNR': 12.041541819473826, 'V1_SNR': 1.5378995517150322, 'network_SNR': 20.067299906678503, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5142152309417725 seconds
Time for h_sky_low and h_sky_center: 5.454275608062744 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.6884758472442627
Going to compute coefficients . . .
Time for computing coefficients: 126.6772723197937 seconds
Time for computing coefficients: 7.15204930305481 seconds
Time for computing coefficients: 7.267606735229492 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/100 [00:00<?, ?it/s]Tuning global sampler:   1%|          | 1/100 [02:01<3:20:48, 121.71s/it]Tuning global sampler:   2%|▏         | 2/100 [02:06<1:26:17, 52.83s/it] Tuning global sampler:   3%|▎         | 3/100 [02:10<49:51, 30.84s/it]  Tuning global sampler:   4%|▍         | 4/100 [02:15<32:48, 20.50s/it]Tuning global sampler:   5%|▌         | 5/100 [02:20<23:25, 14.79s/it]Tuning global sampler:   6%|▌         | 6/100 [02:24<17:46, 11.35s/it]Tuning global sampler:   7%|▋         | 7/100 [02:30<14:37,  9.43s/it]Tuning global sampler:   8%|▊         | 8/100 [02:35<12:07,  7.91s/it]Tuning global sampler:   9%|▉         | 9/100 [02:39<10:25,  6.87s/it]Tuning global sampler:  10%|█         | 10/100 [02:44<09:11,  6.13s/it]Tuning global sampler:  11%|█         | 11/100 [02:48<08:24,  5.67s/it]Tuning global sampler:  12%|█▏        | 12/100 [02:53<07:51,  5.36s/it]Tuning global sampler:  13%|█▎        | 13/100 [02:58<07:25,  5.13s/it]Tuning global sampler:  14%|█▍        | 14/100 [03:02<07:08,  4.98s/it]Tuning global sampler:  15%|█▌        | 15/100 [03:07<06:55,  4.89s/it]Tuning global sampler:  16%|█▌        | 16/100 [03:12<06:44,  4.82s/it]Tuning global sampler:  17%|█▋        | 17/100 [03:16<06:36,  4.77s/it]Tuning global sampler:  18%|█▊        | 18/100 [03:21<06:28,  4.74s/it]Tuning global sampler:  19%|█▉        | 19/100 [03:25<06:21,  4.71s/it]Tuning global sampler:  20%|██        | 20/100 [03:30<06:15,  4.70s/it]Tuning global sampler:  21%|██        | 21/100 [03:35<06:11,  4.70s/it]Tuning global sampler:  22%|██▏       | 22/100 [03:39<06:04,  4.67s/it]Tuning global sampler:  23%|██▎       | 23/100 [03:45<06:19,  4.94s/it]Tuning global sampler:  24%|██▍       | 24/100 [03:49<06:03,  4.78s/it]Tuning global sampler:  25%|██▌       | 25/100 [03:54<05:50,  4.67s/it]Tuning global sampler:  26%|██▌       | 26/100 [03:58<05:39,  4.59s/it]Tuning global sampler:  27%|██▋       | 27/100 [04:03<05:31,  4.54s/it]Tuning global sampler:  28%|██▊       | 28/100 [04:07<05:24,  4.50s/it]Tuning global sampler:  29%|██▉       | 29/100 [04:12<05:18,  4.48s/it]Tuning global sampler:  30%|███       | 30/100 [04:16<05:12,  4.47s/it]Tuning global sampler:  31%|███       | 31/100 [04:20<05:07,  4.45s/it]Tuning global sampler:  32%|███▏      | 32/100 [04:25<05:01,  4.44s/it]Tuning global sampler:  33%|███▎      | 33/100 [04:29<04:55,  4.42s/it]Tuning global sampler:  34%|███▍      | 34/100 [04:34<04:50,  4.41s/it]Tuning global sampler:  35%|███▌      | 35/100 [04:38<04:46,  4.41s/it]Tuning global sampler:  36%|███▌      | 36/100 [04:42<04:42,  4.41s/it]Tuning global sampler:  37%|███▋      | 37/100 [04:47<04:38,  4.41s/it]Tuning global sampler:  38%|███▊      | 38/100 [04:51<04:33,  4.41s/it]Tuning global sampler:  39%|███▉      | 39/100 [04:56<04:28,  4.41s/it]Tuning global sampler:  40%|████      | 40/100 [05:00<04:24,  4.41s/it]Tuning global sampler:  41%|████      | 41/100 [05:04<04:20,  4.41s/it]Tuning global sampler:  42%|████▏     | 42/100 [05:09<04:15,  4.41s/it]Tuning global sampler:  43%|████▎     | 43/100 [05:14<04:27,  4.70s/it]Tuning global sampler:  44%|████▍     | 44/100 [05:19<04:17,  4.60s/it]Tuning global sampler:  45%|████▌     | 45/100 [05:23<04:09,  4.53s/it]Tuning global sampler:  46%|████▌     | 46/100 [05:27<04:02,  4.49s/it]Tuning global sampler:  47%|████▋     | 47/100 [05:32<03:56,  4.47s/it]Tuning global sampler:  48%|████▊     | 48/100 [05:36<03:51,  4.45s/it]Tuning global sampler:  49%|████▉     | 49/100 [05:41<03:46,  4.45s/it]Tuning global sampler:  50%|█████     | 50/100 [05:45<03:41,  4.43s/it]Tuning global sampler:  51%|█████     | 51/100 [05:49<03:37,  4.43s/it]Tuning global sampler:  52%|█████▏    | 52/100 [05:54<03:32,  4.43s/it]Tuning global sampler:  53%|█████▎    | 53/100 [05:58<03:27,  4.42s/it]Tuning global sampler:  54%|█████▍    | 54/100 [06:03<03:23,  4.42s/it]Tuning global sampler:  55%|█████▌    | 55/100 [06:07<03:18,  4.40s/it]Tuning global sampler:  56%|█████▌    | 56/100 [06:11<03:13,  4.39s/it]Tuning global sampler:  57%|█████▋    | 57/100 [06:16<03:09,  4.40s/it]Tuning global sampler:  58%|█████▊    | 58/100 [06:20<03:05,  4.41s/it]Tuning global sampler:  59%|█████▉    | 59/100 [06:25<03:00,  4.41s/it]Tuning global sampler:  60%|██████    | 60/100 [06:29<02:56,  4.41s/it]Tuning global sampler:  61%|██████    | 61/100 [06:33<02:52,  4.41s/it]Tuning global sampler:  62%|██████▏   | 62/100 [06:38<02:48,  4.42s/it]Tuning global sampler:  63%|██████▎   | 63/100 [06:42<02:43,  4.43s/it]Tuning global sampler:  64%|██████▍   | 64/100 [06:48<02:49,  4.72s/it]Tuning global sampler:  65%|██████▌   | 65/100 [06:52<02:42,  4.63s/it]Tuning global sampler:  66%|██████▌   | 66/100 [06:57<02:34,  4.55s/it]Tuning global sampler:  67%|██████▋   | 67/100 [07:01<02:28,  4.50s/it]Tuning global sampler:  68%|██████▊   | 68/100 [07:05<02:22,  4.47s/it]Tuning global sampler:  69%|██████▉   | 69/100 [07:10<02:17,  4.45s/it]Tuning global sampler:  70%|███████   | 70/100 [07:14<02:13,  4.44s/it]Tuning global sampler:  71%|███████   | 71/100 [07:19<02:08,  4.43s/it]Tuning global sampler:  72%|███████▏  | 72/100 [07:23<02:04,  4.43s/it]Tuning global sampler:  73%|███████▎  | 73/100 [07:27<01:59,  4.43s/it]Tuning global sampler:  74%|███████▍  | 74/100 [07:32<01:54,  4.42s/it]Tuning global sampler:  75%|███████▌  | 75/100 [07:36<01:50,  4.43s/it]Tuning global sampler:  76%|███████▌  | 76/100 [07:41<01:46,  4.42s/it]Tuning global sampler:  77%|███████▋  | 77/100 [07:45<01:41,  4.42s/it]Tuning global sampler:  78%|███████▊  | 78/100 [07:49<01:36,  4.40s/it]Tuning global sampler:  79%|███████▉  | 79/100 [07:54<01:32,  4.41s/it]Tuning global sampler:  80%|████████  | 80/100 [07:58<01:28,  4.41s/it]Tuning global sampler:  81%|████████  | 81/100 [08:03<01:24,  4.42s/it]Tuning global sampler:  82%|████████▏ | 82/100 [08:07<01:19,  4.43s/it]Tuning global sampler:  83%|████████▎ | 83/100 [08:12<01:15,  4.42s/it]Tuning global sampler:  84%|████████▍ | 84/100 [08:17<01:15,  4.73s/it]Tuning global sampler:  85%|████████▌ | 85/100 [08:21<01:09,  4.64s/it]Tuning global sampler:  86%|████████▌ | 86/100 [08:26<01:04,  4.57s/it]Tuning global sampler:  87%|████████▋ | 87/100 [08:30<00:58,  4.53s/it]Tuning global sampler:  88%|████████▊ | 88/100 [08:35<00:53,  4.49s/it]Tuning global sampler:  89%|████████▉ | 89/100 [08:39<00:49,  4.46s/it]Tuning global sampler:  90%|█████████ | 90/100 [08:44<00:44,  4.46s/it]Tuning global sampler:  91%|█████████ | 91/100 [08:48<00:39,  4.44s/it]Tuning global sampler:  92%|█████████▏| 92/100 [08:52<00:35,  4.44s/it]Tuning global sampler:  93%|█████████▎| 93/100 [08:57<00:31,  4.45s/it]Tuning global sampler:  94%|█████████▍| 94/100 [09:01<00:26,  4.44s/it]Tuning global sampler:  95%|█████████▌| 95/100 [09:06<00:22,  4.44s/it]Tuning global sampler:  96%|█████████▌| 96/100 [09:10<00:17,  4.45s/it]Tuning global sampler:  97%|█████████▋| 97/100 [09:15<00:13,  4.45s/it]Tuning global sampler:  98%|█████████▊| 98/100 [09:19<00:08,  4.44s/it]Tuning global sampler:  99%|█████████▉| 99/100 [09:23<00:04,  4.42s/it]Tuning global sampler: 100%|██████████| 100/100 [09:28<00:00,  4.40s/it]Tuning global sampler: 100%|██████████| 100/100 [09:28<00:00,  5.68s/it]
Compiling MALA body
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:28,  3.22s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.22s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.22s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.22s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.22s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.22s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.22s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.22s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]
17:28 ninjax INFO    : Saving samples to ./outdir/injection_11/results_training.npz
17:28 ninjax INFO    : Saving the NF
17:28 ninjax INFO    : Time taken: 606.8358964920044 seconds (10.113931608200073 minutes)
17:28 ninjax INFO    : Creating the final corner plot
17:28 ninjax INFO    : Dumping the final production chains
17:28 ninjax INFO    : Chains shape is: (13, 220000)
17:29 ninjax INFO    : Key: M_c: ESS = 13035, Rhat = 1.0471849578499872
17:29 ninjax INFO    : Key: q: ESS = 9830, Rhat = 1.0635116257877613
17:29 ninjax INFO    : Key: s1_z: ESS = 12855, Rhat = 1.0474522256591545
17:29 ninjax INFO    : Key: s2_z: ESS = 12825, Rhat = 1.047974879678971
17:29 ninjax INFO    : Key: lambda_1: ESS = 12615, Rhat = 1.0491403257391048
17:29 ninjax INFO    : Key: lambda_2: ESS = 9689, Rhat = 1.063052625780072
17:29 ninjax INFO    : Key: cos_iota: ESS = 5648, Rhat = 1.1123381997222965
17:29 ninjax INFO    : Key: d_L: ESS = 9065, Rhat = 1.0675531752457152
17:29 ninjax INFO    : Key: t_c: ESS = 11111, Rhat = 1.056093178914932
17:29 ninjax INFO    : Key: phase_c: ESS = 8749, Rhat = 1.0713247072970356
17:29 ninjax INFO    : Key: psi: ESS = 10292, Rhat = 1.0601950827742654
17:29 ninjax INFO    : Key: ra: ESS = 8153, Rhat = 1.0760163612174356
17:29 ninjax INFO    : Key: sin_dec: ESS = 7975, Rhat = 1.077834654988267
17:29 ninjax INFO    : Key: eta: ESS = 9830, Rhat = 1.0635116257877613
17:29 ninjax INFO    : Key: iota: ESS = 5648, Rhat = 1.1123381997222965
17:29 ninjax INFO    : Key: dec: ESS = 7975, Rhat = 1.077834654988267
17:29 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.789 +/- 0.118
q: 0.765 +/- 0.172
s1_z: 0.003 +/- 0.026
s2_z: 0.003 +/- 0.026
lambda_1: 1040.731 +/- 1377.913
lambda_2: 1202.251 +/- 1419.347
cos_iota: 0.257 +/- 0.390
d_L: 357.844 +/- 87.018
t_c: 0.000 +/- 0.021
phase_c: 3.145 +/- 1.661
psi: 1.160 +/- 0.846
ra: 2.202 +/- 2.164
sin_dec: 0.315 +/- 0.461
Log probability: 123.037 +/- 79.193
Local acceptance: 0.953 +/- 0.211
Global acceptance: 0.014 +/- 0.115
Max loss: 22.774, Min loss: 2.322
Production summary
==========
M_c: 1.811 +/- 0.000
q: 0.808 +/- 0.111
s1_z: 0.001 +/- 0.026
s2_z: -0.001 +/- 0.027
lambda_1: 93.501 +/- 77.765
lambda_2: 182.812 +/- 144.916
cos_iota: 0.613 +/- 0.464
d_L: 384.291 +/- 74.978
t_c: 0.013 +/- 0.000
phase_c: 3.105 +/- 1.819
psi: 1.541 +/- 0.892
ra: 0.221 +/- 0.024
sin_dec: 0.651 +/- 0.059
Log probability: 181.373 +/- 2.417
Local acceptance: 0.921 +/- 0.270
Global acceptance: 0.063 +/- 0.243
DONE

JOB STATISTICS
==============
Job ID: 10814699
Cluster: snellius
User/Group: twouters2/twouters2
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 00:11:55
CPU Efficiency: 5.52% of 03:36:00 core-walltime
Job Wall-clock time: 00:13:30
Memory Utilized: 4.34 GB
Memory Efficiency: 43.44% of 10.00 GB
