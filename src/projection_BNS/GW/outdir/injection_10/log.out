Wed Mar 26 16:53:25 CET 2025
NVIDIA H100
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:263: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/prior.py:377: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/ninjax_dev/jim/src/jimgw/single_event/detector.py:496: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
16:53 ninjax INFO    : Checking and setting outdir
16:53 ninjax INFO    : The outdir is set to ./outdir/injection_10
16:53 ninjax INFO    : Loading the given config
16:53 ninjax WARNING : Unrecognized keys given: {'n_max_examples'}. These will be ignored
16:53 ninjax INFO    : Arguments loaded into the config: {'likelihood': 'HeterodynedTransientLikelihoodFD', 'gw_injection': 'True', 'gw_load_existing_injection': 'False', 'gw_dump_injection_data': 'False', 'gw_SNR_threshold_low': '11.2', 'gw_SNR_threshold_high': '100', 'waveform_approximant': 'IMRPhenomD_NRTidalv2', 'waveform_approximant_1': 'None', 'waveform_approximant_2': 'None', 'gw_overlapping_tight_priors': 'False', 'ifos': 'H1,L1,V1', 'eos_file': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/target_eos.npz', 'fmin': '20.0', 'fref': '20.0', 'fmax': '2048.0', 'duration': 'None', 'post_trigger_duration': '2.0', 'trigger_time': '1187008882.4', 'psd_file_H1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_L1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/AplusDesign_PSD.txt', 'psd_file_V1': '/home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/avirgo_O5high_NEW_PSD.txt', 'psd_file_ET1': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET2': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_ET3': '/home/twouters2/psds/ET_D_psd.txt', 'psd_file_CE': '/home/twouters2/psds/CE_psd.txt', 'data_file_H1': 'None', 'data_file_L1': 'None', 'data_file_V1': 'None', 'data_file_ET1': 'None', 'data_file_ET2': 'None', 'data_file_ET3': 'None', 'relative_binning_binsize': '1000', 'relative_binning_ref_params_equal_true_params': 'True', 'relative_binning_ref_params': 'None', 'transforms': 'q_to_eta,cos_iota_to_iota,sin_dec_to_dec', 'gw_kwargs': 'None', 'filters': 'None', 'tmin': '0.05', 'tmax': '15.0', 'em_injection': 'False', 'em_trigger_time': '0.0', 'em_data_path': 'None', 'KN_model_name': 'None', 'KN_class_name': 'None', 'KN_model_dir': 'None', 'GRB_model_name': 'None', 'GRB_class_name': 'None', 'GRB_model_dir': 'None', 'detection_limit': 'None', 'n_loop_training': '100', 'n_loop_production': '10', 'n_local_steps': '100', 'n_global_steps': '1_000', 'n_epochs': '10', 'n_chains': '1_000', 'learning_rate': '0.001', 'max_samples': '50000', 'momentum': '0.9', 'batch_size': '30000', 'use_global': 'True', 'keep_quantile': '0.0', 'train_thinning': '10', 'output_thinning': '100', 'n_sample_max': '10000', 'verbose': 'False', 'save_training_chains': 'False', 'eps_mass_matrix': '1e-5', 'use_scheduler': 'True', 'use_temperature': 'False', 'which_temperature_schedule': 'exponential', 'starting_temperature': '2.0', 'stop_tempering_iteration': '75', 'stopping_criterion_global_acc': '0.10', 'stopping_criterion_loss': '-inf', 'seed': 'None', 'sampling_seed': 'None', 'injection_generation_seed': 'None', 'num_layers': '10', 'hidden_size': '128,128', 'num_bins': '8', 'nf_model_kwargs': 'None', 'run_sampler': 'True', 'keys_to_plot': 'M_c, q, s1_z, s2_z, lambda_1, lambda_2, d_L, t_c, phase_c, iota, psi, ra, dec'}
16:53 ninjax INFO    : Complete config file written to /gpfs/home6/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/GW/outdir/injection_10/complete_config.json
16:53 ninjax INFO    : No seed specified. Generating a random seed: 758111
16:53 ninjax INFO    : No sampling_seed specified. Generating a random sampling_seed: 332023
16:53 ninjax INFO    : No injection_generation_seed specified. Generating a random injection_generation_seed: 567609
16:53 ninjax INFO    : Loading the priors
16:53 ninjax INFO    :    Mc_prior = Uniform(1.0, 2.2, naming=["M_c"])
16:53 ninjax INFO    :    q_prior = Uniform(0.125, 1.0, naming=["q"])
16:53 ninjax INFO    :    s1_z_prior = Uniform(-0.05, 0.05, naming=["s1_z"])
16:53 ninjax INFO    :    s2_z_prior = Uniform(-0.05, 0.05, naming=["s2_z"])
16:53 ninjax INFO    :    lambda1_prior = Uniform(0.0, 5000.0, naming=["lambda_1"])
16:53 ninjax INFO    :    lambda2_prior = Uniform(0.0, 5000.0, naming=["lambda_2"])
16:53 ninjax INFO    :    cos_iota_prior = Uniform(-1.0, 1.0, naming=["cos_iota"])
16:53 ninjax INFO    :    dL_prior = PowerLaw(1.0, 500.0, 2.0, naming=["d_L"])
16:53 ninjax INFO    :    t_c_prior = Uniform(-0.1, 0.1, naming=["t_c"])
16:53 ninjax INFO    :    phase_c_prior = Uniform(0.0, 2 * jnp.pi, naming=["phase_c"])
16:53 ninjax INFO    :    psi_prior = Uniform(0.0, jnp.pi, naming=["psi"])
16:53 ninjax INFO    :    ra_prior = Uniform(0.0, 2 * jnp.pi, naming=["ra"])
16:53 ninjax INFO    :    sin_dec_prior = Uniform(-1.0, 1.0, naming=["sin_dec"])
16:53 ninjax INFO    : Finished prior setup
16:53 ninjax INFO    : Setting the transforms
16:53 ninjax INFO    : Raw transforms list is q_to_eta,cos_iota_to_iota,sin_dec_to_dec
16:53 ninjax INFO    : transforms_str_list has 3 elements
16:53 ninjax INFO    : DEBUG: Checking that all_transforms is OK: the list is ['binary_Love', 'binary_love_fit', 'cos_iota1_to_iota1', 'cos_iota2_to_iota2', 'cos_iota_to_iota', 'log_lambda_to_lambda', 'm1_m2_to_Mc_q', 'q1_to_eta1', 'q2_to_eta2', 'q_to_eta', 'sin_dec1_to_dec1', 'sin_dec2_to_dec2', 'sin_dec_to_dec', 'spin_sphere_to_cartesian_s1', 'spin_sphere_to_cartesian_s2', 'swap_lambdas_eos', 't_c_dt_to_tcs']
16:53 ninjax INFO    : Setting the likelihood
16:53 ninjax INFO    : GW likelihood provided, setting up the GW pipe
16:53 ninjax INFO    : eos_file is /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/target_eos.npz
16:53 ninjax INFO    : Using eos_file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/target_eos.npz for BNS injections
16:53 ninjax INFO    : Note: No specific waveform approximant 1 so defaulting to IMRPhenomD_NRTidalv2
16:53 ninjax INFO    : self.is_BNS_run is True
16:53 ninjax INFO    : Using IMRPhenomD_NRTidalv2 waveform. Therefore, we will use no taper as the reference waveform for the likelihood if relative binning is used
16:53 ninjax INFO    : GW run is an injection
16:53 ninjax INFO    : Setting up GW injection . . . 
16:53 ninjax INFO    : The SNR thresholds are: 11.2 - 100.0
16:53 ninjax INFO    : Generating new injection
16:53 ninjax INFO    : Sanity check: generated parameters:
16:53 ninjax INFO    : {'M_c': 1.4877430268818668, 'q': 0.4444313912883595, 's1_z': -0.015469140945119066, 's2_z': -0.03404770412531269, 'lambda_1': 3430.8387107486415, 'lambda_2': 557.8299577507639, 'cos_iota': 0.879890626112966, 'd_L': 494.8179751068057, 't_c': 0.04186134661145777, 'phase_c': 1.256864086784757, 'psi': 1.675328086930478, 'ra': 3.6766336974524796, 'sin_dec': 0.18164591217704462}
16:53 ninjax INFO    : Computing lambdas from EOS file /home/twouters2/projects/projection_BNS_A_plus/src/projection_BNS/data/target_eos.npz . . . 
16:53 ninjax INFO    : Injected lambda_1: 5.2203813963268075
16:53 ninjax INFO    : Injected lambda_2: 1454.6557681473626
16:53 ninjax INFO    : Duration is not specified in the config. Computed chirp time: for fmin = 20.0 and M_c = 1.4877430268818668 is 128.0
16:53 ninjax INFO    : After transforms, the injection parameters are:
16:53 ninjax INFO    : {'M_c': 1.4877430268818668, 'q': 0.4444313912883595, 's1_z': -0.015469140945119066, 's2_z': -0.03404770412531269, 'lambda_1': 5.2203813963268075, 'lambda_2': 1454.6557681473626, 'cos_iota': 0.879890626112966, 'd_L': 494.8179751068057, 't_c': 0.04186134661145777, 'phase_c': 1.256864086784757, 'psi': 1.675328086930478, 'ra': 3.6766336974524796, 'sin_dec': 0.18164591217704462, 'eta': 0.21301534516978532, 'iota': Array(0.49516435, dtype=float64, weak_type=True), 'dec': Array(0.18265995, dtype=float64, weak_type=True)}
16:53 ninjax INFO    : The trial injection parameters are {'M_c': 1.4877430268818668, 'eta': 0.21301534516978532, 's1_z': -0.015469140945119066, 's2_z': -0.03404770412531269, 'lambda_1': 5.2203813963268075, 'lambda_2': 1454.6557681473626, 'd_L': 494.8179751068057, 'phase_c': 1.256864086784757, 'iota': 0.4951643508151082, 't_c': 0.04186134661145777, 'psi': 1.675328086930478, 'ra': 3.6766336974524796, 'dec': 0.18265995015581588}
16:53 ninjax INFO    : Injecting signals . . .
16:53 ninjax INFO    : self.ifos
16:53 ninjax INFO    : [GroundBased2G(H1), GroundBased2G(L1), GroundBased2G(V1)]
16:53 ninjax INFO    : Signal injected in ifo H1. Frequencies, data, and PSD:
16:53 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
16:53 ninjax INFO    : [ 6.16977096e-24-3.11035914e-24j -3.16276958e-23-3.07738601e-23j
  3.48666689e-23+8.71619645e-23j ...
  2.40235512e-23-1.75929301e-23j  7.83232963e-24-3.89234206e-24j
  3.46579792e-23-7.84271634e-25j]
16:53 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
16:53 ninjax INFO    : Signal injected in ifo L1. Frequencies, data, and PSD:
16:53 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
16:53 ninjax INFO    : [-6.80256700e-24-4.41243908e-23j  5.39750293e-23+6.27173241e-23j
 -5.29403044e-23-5.40719759e-23j ...
  2.40497447e-23+6.50004700e-24j  8.39481564e-24+2.44641825e-23j
 -1.50218649e-24-2.80648509e-23j]
16:53 ninjax INFO    : [1.44906511e-46 1.44667215e-46 1.44435812e-46 ... 2.17775889e-47
 2.17777440e-47 2.17778992e-47]
16:53 ninjax INFO    : Signal injected in ifo V1. Frequencies, data, and PSD:
16:53 ninjax INFO    : [  20.          20.0078125   20.015625  ... 2047.9765625
 2047.984375  2047.9921875]
16:53 ninjax INFO    : [-4.15068664e-23-5.39435738e-23j  4.87158409e-23-4.96818087e-24j
  1.78488729e-25-8.02398145e-23j ...
  9.58715547e-25-1.94663405e-23j  5.84207463e-23+2.19230654e-23j
 -2.52709256e-24-9.98673307e-24j]
16:53 ninjax INFO    : [1.43183556e-46 1.42935095e-46 1.42688205e-46 ... 6.39786094e-47
 6.39790724e-47 6.39795354e-47]
16:53 ninjax INFO    : SNR for ifo H1 is 6.771147653579113
16:53 ninjax INFO    : SNR for ifo L1 is 7.889394316988149
16:53 ninjax INFO    : SNR for ifo V1 is 6.888623276028411
16:53 ninjax INFO    : The network SNR is 12.471732593129763
16:53 ninjax INFO    : Network SNR passes threshold
16:53 ninjax INFO    : Sanity checking the GW injection for ArrayImpl
16:53 ninjax INFO    :    M_c: 1.4877430268818668
16:53 ninjax INFO    :    q: 0.4444313912883595
16:53 ninjax INFO    :    s1_z: -0.015469140945119066
16:53 ninjax INFO    :    s2_z: -0.03404770412531269
16:53 ninjax INFO    :    lambda_1: 5.2203813963268075
16:53 ninjax INFO    :    lambda_2: 1454.6557681473626
16:53 ninjax INFO    :    cos_iota: 0.879890626112966
16:53 ninjax INFO    :    d_L: 494.8179751068057
16:53 ninjax INFO    :    t_c: 0.04186134661145777
16:53 ninjax INFO    :    phase_c: 1.256864086784757
16:53 ninjax INFO    :    psi: 1.675328086930478
16:53 ninjax INFO    :    ra: 3.6766336974524796
16:53 ninjax INFO    :    sin_dec: 0.18164591217704462
16:53 ninjax INFO    :    eta: 0.21301534516978532
16:53 ninjax INFO    :    iota: 0.4951643508151082
16:53 ninjax INFO    :    dec: 0.18265995015581588
16:53 ninjax INFO    :    H1_SNR: 6.771147653579113
16:53 ninjax INFO    :    L1_SNR: 7.889394316988149
16:53 ninjax INFO    :    V1_SNR: 6.888623276028411
16:53 ninjax INFO    :    network_SNR: 12.471732593129763
16:53 ninjax INFO    :    epoch: 126.0
16:53 ninjax INFO    :    gmst: 2.7288901910520846
16:53 ninjax INFO    :    duration: 128.0
16:53 ninjax INFO    : Using GW HeterodynedTransientLikelihoodFD. Initializing likelihood
16:53 ninjax INFO    : Using the injection parameters as reference parameters for the relative binning
16:53 ninjax INFO    : Using the following kwargs for the GW likelihood: {}
16:56 ninjax INFO    : Initialization of HeterodynedTransientLikelihoodFD took 140.94421243667603 seconds = 2.3490702072779337 minutes
16:56 ninjax INFO    : The priors are not modified after their initialization
16:56 ninjax INFO    : Required keys for the likelihood: ['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
16:56 ninjax INFO    : Checking the setup between prior, transforms, and likelihood
16:56 ninjax INFO    : sample: {'M_c': Array([1.89306407, 2.04445296, 2.1483408 ], dtype=float64), 'q': Array([0.46903539, 0.79031722, 0.47068401], dtype=float64), 's1_z': Array([-0.04553117, -0.04969305,  0.03412392], dtype=float64), 's2_z': Array([-0.02195009, -0.00438386,  0.04249662], dtype=float64), 'lambda_1': Array([ 655.95143761, 3176.35238136, 4355.06019319], dtype=float64), 'lambda_2': Array([3529.98340072, 1648.76699873, 3958.5432174 ], dtype=float64), 'cos_iota': Array([-0.13516958, -0.72972308, -0.45541863], dtype=float64), 'd_L': Array([465.04011549, 469.13782154, 326.4629097 ], dtype=float64), 't_c': Array([ 0.02105553,  0.08320503, -0.06705287], dtype=float64), 'phase_c': Array([5.71282253, 2.41608795, 1.54338239], dtype=float64), 'psi': Array([0.89725729, 0.24731997, 2.28414076], dtype=float64), 'ra': Array([6.21243366, 2.92505963, 5.0759283 ], dtype=float64), 'sin_dec': Array([-0.30275201,  0.76147325, -0.05259997], dtype=float64)}
16:56 ninjax INFO    : log_prob: [-37.20861437 -93.09791279 -61.06766072]
16:56 ninjax INFO    : Checking log_prob at injection parameters: {'M_c': 1.4877430268818668, 'q': 0.4444313912883595, 's1_z': -0.015469140945119066, 's2_z': -0.03404770412531269, 'lambda_1': 5.2203813963268075, 'lambda_2': 1454.6557681473626, 'cos_iota': 0.879890626112966, 'd_L': 494.8179751068057, 't_c': 0.04186134661145777, 'phase_c': 1.256864086784757, 'psi': 1.675328086930478, 'ra': 3.6766336974524796, 'sin_dec': 0.18164591217704462, 'eta': 0.21301534516978532, 'iota': Array(0.49516435, dtype=float64, weak_type=True), 'dec': Array(0.18265995, dtype=float64, weak_type=True), 'H1_SNR': 6.771147653579113, 'L1_SNR': 7.889394316988149, 'V1_SNR': 6.888623276028411, 'network_SNR': 12.471732593129763, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
16:56 ninjax INFO    : log_prob at the injection parameters is: 54.15367190763641
16:56 ninjax INFO    : Will plot these keys: ['M_c', 'q', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 't_c', 'phase_c', 'iota', 'psi', 'ra', 'dec']
16:56 ninjax INFO    : Will plot the labels: ['$M_c/M_\\odot$', '$q$', '$\\chi_1$', '$\\chi_2$', '$\\Lambda_1$', '$\\Lambda_2$', '$d_{\\rm{L}}/{\\rm Mpc}$', '$t_c$', '$\\phi_c$', '$\\iota$', '$\\psi$', '$\\alpha$', '$\\delta$']
16:56 ninjax INFO    : Ninjax setup complete.
16:56 ninjax INFO    : Saving output to ./outdir/injection_10/
16:56 ninjax INFO    : Using polynomial learning rate scheduler
16:56 ninjax INFO    : The hyperparameters passed to flowMC and jim are
16:56 ninjax INFO    :    n_loop_training: 100
16:56 ninjax INFO    :    n_loop_production: 10
16:56 ninjax INFO    :    n_local_steps: 100
16:56 ninjax INFO    :    n_global_steps: 1000
16:56 ninjax INFO    :    n_epochs: 10
16:56 ninjax INFO    :    n_chains: 1000
16:56 ninjax INFO    :    learning_rate: <function polynomial_schedule.<locals>.schedule at 0x146f38dcf7f0>
16:56 ninjax INFO    :    max_samples: 50000
16:56 ninjax INFO    :    momentum: 0.9
16:56 ninjax INFO    :    batch_size: 30000
16:56 ninjax INFO    :    use_global: True
16:56 ninjax INFO    :    keep_quantile: 0.0
16:56 ninjax INFO    :    train_thinning: 10
16:56 ninjax INFO    :    output_thinning: 100
16:56 ninjax INFO    :    n_sample_max: 10000
16:56 ninjax INFO    :    num_layers: 10
16:56 ninjax INFO    :    hidden_size: [128, 128]
16:56 ninjax INFO    :    num_bins: 8
16:56 ninjax INFO    :    save_training_chains: False
16:56 ninjax INFO    :    eps_mass_matrix: 1e-05
16:56 ninjax INFO    :    use_scheduler: True
16:56 ninjax INFO    :    use_temperature: False
16:56 ninjax INFO    :    which_temperature_schedule: exponential
16:56 ninjax INFO    :    starting_temperature: 2.0
16:56 ninjax INFO    :    stop_tempering_iteration: 75
16:56 ninjax INFO    :    stopping_criterion_global_acc: 0.1
16:56 ninjax INFO    :    stopping_criterion_loss: -inf
16:56 ninjax INFO    :    nf_model_kwargs: {}
16:56 ninjax INFO    :    local sampler arg not shown (pretty print)
16:56 ninjax INFO    : Fetching the injected values for plotting
Checking the noise that was generated in inject_signal ifo:
[ 4.50972333e-24 -3.44199018e-23  3.17250918e-23  5.57600872e-23
  7.77173957e-23 -4.11089076e-23  3.69022218e-24 -5.82995237e-23
  2.05970896e-23 -1.31443551e-23]
[-5.78772136e-24 -3.22293725e-23  8.73525953e-23 -2.48900089e-23
 -2.64405372e-23 -6.39358764e-23  2.52901358e-23  5.76511993e-23
  8.11069514e-23  1.81841130e-23]
Checking the noise that was generated in inject_signal ifo:
[-5.71111218e-24  5.67002239e-23 -4.93408068e-23  3.28798811e-23
 -5.90566427e-23  1.15163061e-22 -9.49796561e-24  4.62314462e-24
  1.04654672e-22  5.70738982e-23]
[-4.06199217e-23  6.51736514e-23 -5.33708954e-23  6.75978185e-23
 -3.50423884e-23 -3.49929758e-23 -3.13338407e-23  1.11806313e-23
  3.99223425e-23  3.31913338e-23]
Checking the noise that was generated in inject_signal ifo:
[-3.89852031e-23  5.25057283e-23  4.17654550e-24 -2.90535780e-23
  9.07583102e-23 -8.34595984e-23  1.81857585e-23  4.51273900e-23
 -7.78562115e-24 -2.79563016e-23]
[-5.07587659e-23 -3.51098617e-24 -8.09377405e-23  2.40895131e-23
 -6.83440937e-24  5.96387206e-23 -5.77220318e-23 -7.59860913e-23
  2.81438380e-23  2.33048884e-23]
NOTE: we are given a reference waveform!
Initializing heterodyned likelihood..
Comparing against relative binning in bilby
Using 5941 bins for relative binning for epsilon 0.01
Time for binning scheme: 0.10998868942260742 seconds
Using provided reference parameters:
ref_params for relative binning:
{'M_c': 1.4877430268818668, 'q': 0.4444313912883595, 's1_z': -0.015469140945119066, 's2_z': -0.03404770412531269, 'lambda_1': 5.2203813963268075, 'lambda_2': 1454.6557681473626, 'cos_iota': 0.879890626112966, 'd_L': 494.8179751068057, 't_c': 0.04186134661145777, 'phase_c': 1.256864086784757, 'psi': 1.675328086930478, 'ra': 3.6766336974524796, 'sin_dec': 0.18164591217704462, 'eta': 0.21301534516978532, 'iota': Array(0.49516435, dtype=float64, weak_type=True), 'dec': Array(0.18265995, dtype=float64, weak_type=True), 'H1_SNR': 6.771147653579113, 'L1_SNR': 7.889394316988149, 'V1_SNR': 6.888623276028411, 'network_SNR': 12.471732593129763, 'epoch': 126.0, 'gmst': 2.7288901910520846, 'duration': 128.0}
Constructing reference waveforms. . .
Time for reference waveforms: 0.5119459629058838 seconds
Time for h_sky_low and h_sky_center: 5.2715208530426025 seconds
Going to compute the masks . . .
Time taken for f_index_array calculation is 0.6782436370849609
Going to compute coefficients . . .
Time for computing coefficients: 119.61089038848877 seconds
Time for computing coefficients: 6.938762187957764 seconds
Time for computing coefficients: 7.299395799636841 seconds
['M_c', 'eta', 's1_z', 's2_z', 'lambda_1', 'lambda_2', 'd_L', 'phase_c', 'iota', 't_c', 'psi', 'ra', 'dec']
INFO: Using MALA as local sampler
Setting up a single Gaussian distribution
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/100 [00:00<?, ?it/s]Tuning global sampler:   1%|          | 1/100 [02:00<3:19:07, 120.68s/it]Tuning global sampler:   2%|▏         | 2/100 [02:04<1:25:16, 52.21s/it] Tuning global sampler:   3%|▎         | 3/100 [02:09<48:58, 30.29s/it]  Tuning global sampler:   4%|▍         | 4/100 [02:13<31:58, 19.99s/it]Tuning global sampler:   5%|▌         | 5/100 [02:17<22:39, 14.31s/it]Tuning global sampler:   6%|▌         | 6/100 [02:21<17:04, 10.90s/it]Tuning global sampler:   7%|▋         | 7/100 [02:26<13:32,  8.74s/it]Tuning global sampler:   8%|▊         | 8/100 [02:30<11:10,  7.29s/it]Tuning global sampler:   9%|▉         | 9/100 [02:34<09:34,  6.32s/it]Tuning global sampler:  10%|█         | 10/100 [02:39<08:54,  5.94s/it]Tuning global sampler:  11%|█         | 11/100 [02:44<08:07,  5.47s/it]Tuning global sampler:  12%|█▏        | 12/100 [02:48<07:26,  5.07s/it]Tuning global sampler:  13%|█▎        | 13/100 [02:52<06:57,  4.80s/it]Tuning global sampler:  14%|█▍        | 14/100 [02:56<06:36,  4.61s/it]Tuning global sampler:  15%|█▌        | 15/100 [03:00<06:25,  4.54s/it]Tuning global sampler:  16%|█▌        | 16/100 [03:05<06:11,  4.43s/it]Tuning global sampler:  17%|█▋        | 17/100 [03:09<06:01,  4.35s/it]Tuning global sampler:  18%|█▊        | 18/100 [03:13<05:54,  4.32s/it]Tuning global sampler:  19%|█▉        | 19/100 [03:17<05:48,  4.30s/it]Tuning global sampler:  20%|██        | 20/100 [03:22<05:45,  4.32s/it]Tuning global sampler:  21%|██        | 21/100 [03:26<05:39,  4.30s/it]Tuning global sampler:  22%|██▏       | 22/100 [03:30<05:34,  4.28s/it]Tuning global sampler:  23%|██▎       | 23/100 [03:34<05:28,  4.27s/it]Tuning global sampler:  24%|██▍       | 24/100 [03:39<05:24,  4.27s/it]Tuning global sampler:  25%|██▌       | 25/100 [03:43<05:18,  4.25s/it]Tuning global sampler:  26%|██▌       | 26/100 [03:47<05:13,  4.23s/it]Tuning global sampler:  27%|██▋       | 27/100 [03:51<05:09,  4.24s/it]Tuning global sampler:  28%|██▊       | 28/100 [03:55<05:04,  4.23s/it]Tuning global sampler:  29%|██▉       | 29/100 [04:00<05:00,  4.24s/it]Tuning global sampler:  30%|███       | 30/100 [04:04<04:55,  4.23s/it]Tuning global sampler:  31%|███       | 31/100 [04:08<04:52,  4.24s/it]Tuning global sampler:  32%|███▏      | 32/100 [04:12<04:48,  4.25s/it]Tuning global sampler:  33%|███▎      | 33/100 [04:18<05:02,  4.52s/it]Tuning global sampler:  34%|███▍      | 34/100 [04:22<04:52,  4.44s/it]Tuning global sampler:  35%|███▌      | 35/100 [04:27<04:56,  4.56s/it]Tuning global sampler:  36%|███▌      | 36/100 [04:31<04:46,  4.47s/it]Tuning global sampler:  37%|███▋      | 37/100 [04:35<04:37,  4.41s/it]Tuning global sampler:  38%|███▊      | 38/100 [04:40<04:35,  4.44s/it]Tuning global sampler:  39%|███▉      | 39/100 [04:44<04:27,  4.39s/it]Tuning global sampler:  40%|████      | 40/100 [04:48<04:21,  4.35s/it]Tuning global sampler:  41%|████      | 41/100 [04:53<04:15,  4.33s/it]Tuning global sampler:  42%|████▏     | 42/100 [04:57<04:09,  4.31s/it]Tuning global sampler:  43%|████▎     | 43/100 [05:01<04:07,  4.34s/it]Tuning global sampler:  44%|████▍     | 44/100 [05:05<04:01,  4.31s/it]Tuning global sampler:  45%|████▌     | 45/100 [05:11<04:13,  4.61s/it]Tuning global sampler:  46%|████▌     | 46/100 [05:15<03:58,  4.42s/it]Tuning global sampler:  47%|████▋     | 47/100 [05:19<03:48,  4.30s/it]Tuning global sampler:  48%|████▊     | 48/100 [05:23<03:39,  4.22s/it]Tuning global sampler:  49%|████▉     | 49/100 [05:27<03:32,  4.16s/it]Tuning global sampler:  50%|█████     | 50/100 [05:31<03:25,  4.12s/it]Tuning global sampler:  51%|█████     | 51/100 [05:35<03:20,  4.09s/it]Tuning global sampler:  52%|█████▏    | 52/100 [05:39<03:15,  4.07s/it]Tuning global sampler:  53%|█████▎    | 53/100 [05:43<03:10,  4.06s/it]Tuning global sampler:  54%|█████▍    | 54/100 [05:47<03:06,  4.05s/it]Tuning global sampler:  55%|█████▌    | 55/100 [05:51<03:01,  4.03s/it]Tuning global sampler:  56%|█████▌    | 56/100 [05:55<02:56,  4.02s/it]Tuning global sampler:  57%|█████▋    | 57/100 [05:59<02:52,  4.02s/it]Tuning global sampler:  58%|█████▊    | 58/100 [06:03<02:48,  4.02s/it]Tuning global sampler:  59%|█████▉    | 59/100 [06:07<02:45,  4.03s/it]Tuning global sampler:  60%|██████    | 60/100 [06:11<02:41,  4.03s/it]Tuning global sampler:  61%|██████    | 61/100 [06:15<02:37,  4.03s/it]Tuning global sampler:  62%|██████▏   | 62/100 [06:19<02:35,  4.09s/it]Tuning global sampler:  63%|██████▎   | 63/100 [06:23<02:30,  4.07s/it]Tuning global sampler:  64%|██████▍   | 64/100 [06:27<02:26,  4.06s/it]Tuning global sampler:  65%|██████▌   | 65/100 [06:31<02:21,  4.05s/it]Tuning global sampler:  66%|██████▌   | 66/100 [06:35<02:17,  4.03s/it]Tuning global sampler:  67%|██████▋   | 67/100 [06:39<02:12,  4.02s/it]Tuning global sampler:  68%|██████▊   | 68/100 [06:43<02:08,  4.02s/it]Tuning global sampler:  69%|██████▉   | 69/100 [06:47<02:04,  4.02s/it]Tuning global sampler:  70%|███████   | 70/100 [06:52<02:06,  4.21s/it]Tuning global sampler:  71%|███████   | 71/100 [06:56<02:00,  4.15s/it]Tuning global sampler:  72%|███████▏  | 72/100 [07:01<01:58,  4.22s/it]Tuning global sampler:  73%|███████▎  | 73/100 [07:05<01:52,  4.16s/it]Tuning global sampler:  74%|███████▍  | 74/100 [07:09<01:47,  4.12s/it]Tuning global sampler:  75%|███████▌  | 75/100 [07:13<01:42,  4.09s/it]Tuning global sampler:  76%|███████▌  | 76/100 [07:18<01:47,  4.46s/it]Tuning global sampler:  77%|███████▋  | 77/100 [07:22<01:39,  4.32s/it]Tuning global sampler:  78%|███████▊  | 78/100 [07:26<01:33,  4.25s/it]Tuning global sampler:  79%|███████▉  | 79/100 [07:30<01:27,  4.19s/it]Tuning global sampler:  80%|████████  | 80/100 [07:34<01:22,  4.14s/it]Tuning global sampler:  81%|████████  | 81/100 [07:38<01:18,  4.12s/it]Tuning global sampler:  82%|████████▏ | 82/100 [07:42<01:13,  4.10s/it]Tuning global sampler:  83%|████████▎ | 83/100 [07:46<01:09,  4.08s/it]Tuning global sampler:  84%|████████▍ | 84/100 [07:50<01:05,  4.06s/it]Tuning global sampler:  85%|████████▌ | 85/100 [07:54<01:00,  4.06s/it]Tuning global sampler:  86%|████████▌ | 86/100 [07:59<01:01,  4.38s/it]Tuning global sampler:  87%|████████▋ | 87/100 [08:03<00:55,  4.27s/it]Tuning global sampler:  88%|████████▊ | 88/100 [08:07<00:50,  4.19s/it]Tuning global sampler:  89%|████████▉ | 89/100 [08:11<00:45,  4.13s/it]Tuning global sampler:  90%|█████████ | 90/100 [08:15<00:40,  4.10s/it]Tuning global sampler:  91%|█████████ | 91/100 [08:19<00:36,  4.07s/it]Tuning global sampler:  92%|█████████▏| 92/100 [08:26<00:38,  4.80s/it]Tuning global sampler:  93%|█████████▎| 93/100 [08:30<00:31,  4.57s/it]Tuning global sampler:  94%|█████████▍| 94/100 [08:34<00:26,  4.40s/it]Tuning global sampler:  95%|█████████▌| 95/100 [08:38<00:21,  4.29s/it]Tuning global sampler:  96%|█████████▌| 96/100 [08:42<00:16,  4.21s/it]Tuning global sampler:  97%|█████████▋| 97/100 [08:46<00:12,  4.16s/it]Tuning global sampler:  98%|█████████▊| 98/100 [08:50<00:08,  4.13s/it]Tuning global sampler:  99%|█████████▉| 99/100 [08:54<00:04,  4.08s/it]Tuning global sampler: 100%|██████████| 100/100 [08:58<00:00,  4.06s/it]Tuning global sampler: 100%|██████████| 100/100 [08:58<00:00,  5.39s/it]
Compiling MALA body
Starting Production run
Production run:   0%|          | 0/10 [00:00<?, ?it/s]Production run:  10%|█         | 1/10 [00:03<00:29,  3.22s/it]Production run:  20%|██        | 2/10 [00:06<00:25,  3.22s/it]Production run:  30%|███       | 3/10 [00:09<00:22,  3.22s/it]Production run:  40%|████      | 4/10 [00:12<00:19,  3.22s/it]Production run:  50%|█████     | 5/10 [00:16<00:16,  3.22s/it]Production run:  60%|██████    | 6/10 [00:19<00:12,  3.22s/it]Production run:  70%|███████   | 7/10 [00:22<00:09,  3.22s/it]Production run:  80%|████████  | 8/10 [00:25<00:06,  3.22s/it]Production run:  90%|█████████ | 9/10 [00:28<00:03,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]Production run: 100%|██████████| 10/10 [00:32<00:00,  3.22s/it]
17:05 ninjax INFO    : Saving samples to ./outdir/injection_10/results_training.npz
17:05 ninjax INFO    : Saving the NF
17:05 ninjax INFO    : Time taken: 576.591344833374 seconds (9.6098557472229 minutes)
17:05 ninjax INFO    : Creating the final corner plot
17:05 ninjax INFO    : Dumping the final production chains
17:05 ninjax INFO    : Chains shape is: (13, 110000)
17:05 ninjax INFO    : Key: M_c: ESS = 1527, Rhat = 2.244841463486793
17:05 ninjax INFO    : Key: q: ESS = 1318, Rhat = 2.2830958676500246
17:05 ninjax INFO    : Key: s1_z: ESS = 1305, Rhat = 2.3215811118372485
17:05 ninjax INFO    : Key: s2_z: ESS = 1282, Rhat = 2.4168423920004036
17:05 ninjax INFO    : Key: lambda_1: ESS = 1298, Rhat = 2.398725847631293
17:05 ninjax INFO    : Key: lambda_2: ESS = 1306, Rhat = 2.348972963744311
17:05 ninjax INFO    : Key: cos_iota: ESS = 1279, Rhat = 2.434029918010538
17:05 ninjax INFO    : Key: d_L: ESS = 1288, Rhat = 2.412483829586144
17:05 ninjax INFO    : Key: t_c: ESS = 1398, Rhat = 2.2832633231589123
17:05 ninjax INFO    : Key: phase_c: ESS = 1304, Rhat = 2.3637322049520817
17:05 ninjax INFO    : Key: psi: ESS = 1309, Rhat = 2.320057513443574
17:05 ninjax INFO    : Key: ra: ESS = 1377, Rhat = 2.495838612894674
17:05 ninjax INFO    : Key: sin_dec: ESS = 1337, Rhat = 2.4126299042459025
17:05 ninjax INFO    : Key: eta: ESS = 1318, Rhat = 2.2952401765527126
17:05 ninjax INFO    : Key: iota: ESS = 1279, Rhat = 2.434029918010539
17:05 ninjax INFO    : Key: dec: ESS = 1337, Rhat = 2.4119721474950793
17:05 ninjax INFO    : Finished successfully!
Training summary
==========
M_c: 1.416 +/- 0.276
q: 0.549 +/- 0.252
s1_z: -0.000 +/- 0.029
s2_z: -0.000 +/- 0.029
lambda_1: 2523.470 +/- 1407.260
lambda_2: 2515.524 +/- 1426.447
cos_iota: -0.007 +/- 0.186
d_L: 431.664 +/- 57.297
t_c: 0.015 +/- 0.057
phase_c: 3.124 +/- 1.785
psi: 1.596 +/- 0.898
ra: 3.238 +/- 1.642
sin_dec: 0.020 +/- 0.514
Log probability: -16.774 +/- 15.670
Local acceptance: 0.993 +/- 0.086
Global acceptance: 0.013 +/- 0.114
Max loss: 22.772, Min loss: 14.751
Production summary
==========
M_c: 1.482 +/- 0.081
q: 0.566 +/- 0.230
s1_z: 0.000 +/- 0.028
s2_z: 0.000 +/- 0.029
lambda_1: 2533.122 +/- 1398.011
lambda_2: 2498.060 +/- 1405.185
cos_iota: -0.028 +/- 0.188
d_L: 435.014 +/- 54.677
t_c: 0.048 +/- 0.027
phase_c: 3.054 +/- 1.772
psi: 1.673 +/- 0.871
ra: 3.395 +/- 1.109
sin_dec: 0.039 +/- 0.402
Log probability: -1.200 +/- 8.275
Local acceptance: 0.986 +/- 0.117
Global acceptance: 0.001 +/- 0.028
DONE

JOB STATISTICS
==============
Job ID: 10813893
Cluster: snellius
User/Group: twouters2/twouters2
State: RUNNING
Nodes: 1
Cores per node: 16
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 03:25:36 core-walltime
Job Wall-clock time: 00:12:51
Memory Utilized: 0.00 MB (estimated maximum)
Memory Efficiency: 0.00% of 10.00 GB (10.00 GB/node)
WARNING: Efficiency statistics may be misleading for RUNNING jobs.
